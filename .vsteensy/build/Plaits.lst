
.vsteensy/build/Plaits.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00012cf0 l    d  .fini	00000000 .fini
00012cf4 l    d  .ARM.exidx	00000000 .ARM.exidx
00012cfc l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20020640 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
000106d4 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 imxrt_hw.cpp
00000000 l    df *ABS*	00000000 tempmon.c
20025eec l     O .bss	00000004 s_hotTemp
20025ef0 l     O .bss	00000004 s_hot_ROOM
20025ef4 l     O .bss	00000004 s_roomC_hotC
20025ef8 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 usb.c
0001198c l     F .text.itcm	00000070 schedule_transfer
000119fc l     F .text.itcm	00000036 run_callbacks
00011a34 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
00011ad4 l     F .text.itcm	00000614 isr
200261b0 l     O .bss	00000004 endpointN_notify_mask
200261b4 l     O .bss	00000001 sof_usage
200261c0 l     O .bss	00000004 endpoint0_notify_mask
200261c4 l     O .bss	00000001 usb_reboot_timer
200261c8 l     O .bss	00000008 endpoint0_setupdata
200261d0 l     O .bss	00000008 reply_buffer
200261d8 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
200261e1 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 usb_desc.c
60001930 l     O .text.progmem	0000000a qualifier_descriptor
2001fdb0 l     O .data	00000021 seremu_report_desc
2001fdd4 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20020640 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20020644 l       .bss	00000000 object.8610
60001990 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000000f8 l     F .text.itcm	000002b0 _GLOBAL__sub_I_synthPlaits
20200000 l     O .bss.dma	00000514 setup::data
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
0000e5a0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s.cpp
0000e5b8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
0000e5d0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
0000e5e8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s.cpp
0000ebd8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
20200520 l     O .bss.dma	00000200 i2s_tx_buffer
00000000 l    df *ABS*	00000000 input_spdif3.cpp
0000ece0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
0000ecf8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 input_tdm2.cpp
0000ed10 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
0000ed28 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 output_tdm.cpp
0000ed40 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
0000ed58 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
0000ed70 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm2.cpp
0000ed88 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
0000eda0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
0000edb8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_spdif3.cpp
0000edd0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
0000ede8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
0000ee00 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_mqs.cpp
0000ee18 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
0000ee30 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
0000ee48 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
0000ee60 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
0000ee78 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 SD.cpp
0000efe4 l     F .text.itcm	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 Sd2Card.cpp
0000fc6c l     F .text.itcm	00000014 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
20025c00 l     O .bss	00000008 settings
20025c08 l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 synth_plaits.cpp
00000000 l    df *ABS*	00000000 voice.cpp
00000000 l    df *ABS*	00000000 naive_speech_synth.cpp
00000000 l    df *ABS*	00000000 sam_speech_synth.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth_controller.cpp
00002650 l     F .text.itcm	0000004e plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]
00000000 l    df *ABS*	00000000 modal_engine.cpp
00000000 l    df *ABS*	00000000 speech_engine.cpp
00000000 l    df *ABS*	00000000 waveshaping_engine.cpp
00000000 l    df *ABS*	00000000 virtual_analog_engine.cpp
2001f208 l     O .data	00000014 plaits::intervals
00000000 l    df *ABS*	00000000 particle_engine.cpp
00000000 l    df *ABS*	00000000 hi_hat_engine.cpp
00000000 l    df *ABS*	00000000 chord_engine.cpp
2001f270 l     O .data	000000c0 plaits::registrations
2001f344 l     O .data	00000014 plaits::fade_point
2001f358 l     O .data	000000b0 plaits::chords
00000000 l    df *ABS*	00000000 additive_engine.cpp
2001f408 l     O .data	00000020 plaits::organ_harmonics
2001f428 l     O .data	00000060 plaits::integer_harmonics
00000000 l    df *ABS*	00000000 grain_engine.cpp
00000000 l    df *ABS*	00000000 swarm_engine.cpp
00000000 l    df *ABS*	00000000 fm_engine.cpp
2001f4d8 l     O .data	00000010 plaits::fir_coefficient
00000000 l    df *ABS*	00000000 string_engine.cpp
00000000 l    df *ABS*	00000000 snare_drum_engine.cpp
00000000 l    df *ABS*	00000000 bass_drum_engine.cpp
00000000 l    df *ABS*	00000000 noise_engine.cpp
00000000 l    df *ABS*	00000000 wavetable_engine.cpp
00000000 l    df *ABS*	00000000 string_voice.cpp
00000000 l    df *ABS*	00000000 string.cpp
00000000 l    df *ABS*	00000000 resonator.cpp
00000000 l    df *ABS*	00000000 modal_voice.cpp
00000000 l    df *ABS*	00000000 control_sgtl5000.cpp
00000000 l    df *ABS*	00000000 mixer.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0000eeac l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 File.cpp
00000000 l    df *ABS*	00000000 SdVolume.cpp
0000f0e4 l     F .text.itcm	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 NXP_SDHC.cpp
0000f2d0 l     F .text.itcm	00000090 SDHC_CMD_Do(unsigned long)
0000f360 l     F .text.itcm	00000040 SDHC_CMD12_StopTransferWaitForBusy()
20025bec l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 SdFile.cpp
0000f550 l     F .text.itcm	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 .vsteensy/build/lib/Audio//memcpy_audio.o
0000fc88 l       .text.itcm	00000000 .loopLR
0000fccc l       .text.itcm	00000000 .loopL
0000fd0c l       .text.itcm	00000000 .loopR
0000fd48 l       .text.itcm	00000000 .loopQuad
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 usb_seremu.c
00010170 l     F .text.itcm	00000064 rx_queue_transfer
000101d4 l     F .text.itcm	00000058 rx_event
0001043c l     F .text.itcm	0000001c usb_seremu_flush_callback
00010458 l     F .text.itcm	00000128 usb_seremu_write.part.0
20025c09 l     O .bss	00000001 rx_tail
20025c0a l     O .bss	00000001 tx_noautoflush
20025c0b l     O .bss	00000001 tx_head
20025c20 l     O .bss	00000100 rx_transfer
20025d20 l     O .bss	00000010 rx_index
20025d30 l     O .bss	00000009 rx_list
20200720 l     O .bss.dma	00000100 rx_buffer
20200820 l     O .bss.dma	00000300 txbuffer
20025d3a l     O .bss	00000002 tx_available
20025d3c l     O .bss	00000004 rx_available
20025d40 l     O .bss	00000001 rx_head
20025d41 l     O .bss	00000001 transmit_previous_timeout
20025d60 l     O .bss	00000180 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
000107c8 l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
00010ad8 l     F .text.itcm	00000048 sysex_byte
00010b20 l     F .text.itcm	0000006c rx_queue_transfer
00010b8c l     F .text.itcm	00000064 rx_event
20200b20 l     O .bss.dma	00000c00 rx_buffer
20201720 l     O .bss.dma	00000800 txbuffer
20025f08 l     O .bss	00000002 rx_packet_size
20025f0a l     O .bss	00000002 tx_available
20025f20 l     O .bss	00000002 tx_packet_size
20025f34 l     O .bss	00000001 rx_head
20025f35 l     O .bss	00000001 tx_noautoflush
20025f36 l     O .bss	00000001 rx_tail
20025f37 l     O .bss	00000001 transmit_previous_timeout
20025f40 l     O .bss	0000000c rx_count
20025f60 l     O .bss	000000c0 rx_transfer
20026024 l     O .bss	00000004 rx_available
20026028 l     O .bss	0000000c rx_index
20026040 l     O .bss	00000080 tx_transfer
200260c8 l     O .bss	00000001 tx_head
200260d0 l     O .bss	00000007 rx_list
00000000 l    df *ABS*	00000000 IntervalTimer.cpp
000111c0 l     F .text.itcm	00000068 pit_isr()
200260e0 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 yield.cpp
200260f0 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 units.cpp
00000000 l    df *ABS*	00000000 resources.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth_phonemes.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth_words.cpp
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 impure.c
2001fe00 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 random.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00012cd8 l     F .text.itcm	00000008 ___Z14set_audioClockilmb_veneer
00012ce0 l     F .text.itcm	00000008 ___init_veneer
00012ce8 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
60001948 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001950 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001958 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001960 l     F .text.progmem	00000008 __memset_veneer
60001968 l     F .text.progmem	00000008 __main_veneer
60001970 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001978 l     F .text.progmem	00000008 __delay_veneer
60001980 l     F .text.progmem	00000008 __pwm_init_veneer
60001988 l     F .text.progmem	00000008 __set_arm_clock_veneer
20000930 g     O .data	00000204 plaits::lut_fm_frequency_quantizer
2001fb2c g     O .data	00000028 plaits::word_banks_
2002596c g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
0001038c g     F .text.itcm	00000018 usb_seremu_available
00000084  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
00009dc4 g     F .text.itcm	000001d8 plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
000106e0 g     F .text.itcm	00000002 startup_default_late_hook
20026180 g     O .bss	00000004 AudioStream::memory_pool
00011344  w    F .text.itcm	000000f0 yield
2001fb54 g     O .data	00000040 plaits::LPCSpeechSynthWordBank::k0_lut_
200261b8 g     O .bss	00000004 usb_timer1_callback
0000f5bc g     F .text.itcm	0000002a SdFile::addCluster()
6000182c g     O .text.progmem	00000018 usb_string_manufacturer_name_default
0000cd1c g     F .text.itcm	00000378 plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)
20025f1c g     O .bss	00000004 usb_midi_handleProgramChange
20000428 g     O .data	00000404 stmlib::lut_pitch_ratio_low
2001f1cc g     O .data	00000014 vtable for plaits::ModalEngine
000115f0  w    F .text.itcm	00000004 usb_seremu_class::peek()
20026184 g     O .bss	00000001 AudioStream::update_scheduled
2001f5a0 g     O .data	0000000c vtable for AudioOutputI2S
00011640 g     F .text.itcm	00000020 Print::println()
20026188 g     O .bss	00000002 AudioStream::memory_used
20003ff0 g     O .data	00018600 plaits::wav_integrated_waves
0001299c g     F .text.itcm	00000002 __malloc_unlock
200260d8 g     O .bss	00000004 usb_midi_handleAfterTouch
00009d04 g     F .text.itcm	00000088 plaits::StringEngine::Init(stmlib::BufferAllocator*)
0000f8f8 g     F .text.itcm	00000074 Sd2Card::chipSelectHigh()
00007ae0 g     F .text.itcm	00000048 plaits::GrainEngine::Init(stmlib::BufferAllocator*)
600016d4 g     F .text.progmem	00000058 analog_init
0000206c g     F .text.itcm	00000046 plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)
0000eaf8 g     F .text.itcm	000000e0 AudioOutputI2S::begin()
0000f838 g     F .text.itcm	00000018 SdFile::write(unsigned char)
2001fd90 g     O .data	00000004 F_CPU_ACTUAL
00002c34 g     F .text.itcm	00000040 plaits::ModalEngine::Init(stmlib::BufferAllocator*)
2001e838 g     O .data	00000384 plaits::bank_1
20025f30 g     O .bss	00000004 usb_midi_handleSysExComplete
00006a5c g     F .text.itcm	00000164 plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)
00012cfc g       .ARM.exidx	00000000 __exidx_end
2001d0a0 g     O .data	000012c2 plaits::bank_4
200266c0 g     O .bss	00000001 usb_midi_msg_type
0000bb68 g     F .text.itcm	00000002 plaits::NoiseEngine::Reset()
200258f0 g     O .bss	00000004 AudioOutputI2S::block_right_2nd
2001f4b0 g     O .data	00000014 vtable for plaits::SwarmEngine
20026104 g     O .bss	00000001 EventResponder::runningFromYield
00011614 g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
000069cc g     F .text.itcm	00000090 plaits::ChordEngine::Reset()
20003be8 g     O .data	00000202 plaits::lut_ws_bump
00012320 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
000115f4  w    F .text.itcm	00000004 usb_seremu_class::read()
200260f4 g     O .bss	00000004 EventResponder::firstInterrupt
0001225c g     F .text.itcm	00000004 usb_transfer_status
20025890 g     O .bss	00000014 patchCord2
2002594c g     O .bss	00000008 AudioOutputSPDIF3::dma
000105c8 g     F .text.itcm	00000030 usb_seremu_flush_output
00010580 g     F .text.itcm	0000002c usb_seremu_putchar
2001f630 g     O .data	00000280 digital_pin_to_info_PGM
20028280 g     O .bss	00000004 errno
60001778 g     O .text.progmem	0000004c TwoWire::i2c3_hardware
00012cf8 g       .text.itcm	00000000 _etext
0000ef04 g     F .text.itcm	000000d4 _spi_dma_rxISR0()
20020640 g       .bss	00000000 _sbss
0000f648 g     F .text.itcm	000001f0 SdFile::write(void const*, unsigned int)
200259e8 g     O .bss	00000200 SdVolume::cacheBuffer_
0000cce4 g     F .text.itcm	00000030 plaits::StringVoice::Init(stmlib::BufferAllocator*)
20025f24 g     O .bss	00000004 usb_midi_handleVelocityChange
2002065c g     O .bss	0000000c sgtl5000_1
000105c4 g     F .text.itcm	00000004 usb_seremu_write_buffer_free
60001a00 g       *ABS*	00000000 _stextload
00011808 g     F .text.itcm	00000018 AudioStream::receiveReadOnly(unsigned int)
000000f0 g     F .text.itcm	00000006 loop
00009d8c g     F .text.itcm	00000038 plaits::StringEngine::Reset()
00010cc4 g     F .text.itcm	0000009c usb_midi_flush_output
00012114 g     F .text.itcm	00000064 usb_config_rx
0000c310 g     F .text.itcm	00000002 plaits::WavetableEngine::Reset()
0000984c g     F .text.itcm	0000001c plaits::FMEngine::Init(stmlib::BufferAllocator*)
200258a4 g     O .bss	00000014 patchCord3
00011604  w    F .text.itcm	00000008 usb_seremu_class::write(unsigned char const*, unsigned int)
00010df0 g     F .text.itcm	000003d0 usb_midi_read
0000e600  w    F .text.itcm	00000004 AudioControlSGTL5000::disable()
0000f1dc g     F .text.itcm	000000f2 SdVolume::allocContiguous(unsigned long, unsigned long*)
00001804 g     F .text.itcm	000000bc plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)
20025f0c g     O .bss	00000004 usb_midi_handleSystemReset
0000e4b4 g     F .text.itcm	000000e0 TwoWire::endTransmission(unsigned char)
200260f8 g     O .bss	00000004 EventResponder::lastInterrupt
200266c2 g     O .bss	00000002 usb_midi_msg_sysex_len
0000fd78 g     F .text.itcm	00000134 memcpy
2001f5ac g     O .data	0000000c vtable for AudioMixer4
200260c0 g     O .bss	00000004 usb_midi_handleRealTimeSystem
20025bfc g     O .bss	00000004 SdFile::dateTime_
20025ee8 g     O .bss	00000004 systick_millis_count
200259e0 g     O .bss	00000004 SdVolume::cacheMirrorBlock_
0000e478 g     F .text.itcm	0000003c TwoWire::wait_idle()
200261e0 g     O .bss	00000001 usb_configuration
000054dc g     F .text.itcm	00000100 plaits::HiHatEngine::Init(stmlib::BufferAllocator*)
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
000055e0 g     F .text.itcm	0000136e plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000f088 g     F .text.itcm	0000005c SdVolume::cacheRawBlock(unsigned long, unsigned char)
000017d4 g     F .text.itcm	0000002e plaits::SAMSpeechSynth::Init()
20026110 g     O .bss	00000070 AudioStream::memory_pool_available_mask
2001f538 g     O .data	00000014 vtable for plaits::NoiseEngine
6000182c  w    O .text.progmem	00000018 usb_string_manufacturer_name
00007418 g     F .text.itcm	00000002 plaits::AdditiveEngine::Reset()
0001237c g     F .text.itcm	00000010 malloc
600017c4 g     O .text.progmem	0000004c TwoWire::i2c1_hardware
00001dd4 g     F .text.itcm	00000298 plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)
0000e1e4  w    F .text.itcm	0000001e TwoWire::read()
0000ee90  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
2001fc24 g     O .data	00000040 plaits::LPCSpeechSynthWordBank::period_lut_
600015e8 g     F .text.progmem	000000ec usb_init
20026186 g     O .bss	00000002 AudioStream::memory_pool_first_mask
2001f54c g     O .data	00000014 vtable for plaits::WavetableEngine
200206c0 g     O .bss	000051bc synthPlaits
200261ec g     O .bss	00000004 __malloc_top_pad
20026218 g     O .bss	00000004 systick_safe_read
0000e360 g     F .text.itcm	00000118 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
2001f960 g     O .data	00000000 .hidden __dso_handle
00009868 g     F .text.itcm	00000002 plaits::FMEngine::Reset()
0000009c g     F .text.itcm	0000001c makeSomeNoise()
20000000 g       .data	00000000 _sdata
20025f18 g     O .bss	00000004 usb_midi_handleNoteOn
0001160c  w    F .text.itcm	00000006 usb_seremu_class::write(unsigned char)
600018bc g     O .text.progmem	00000073 usb_config_descriptor_480
000129a0 g     F .text.itcm	00000024 _sbrk_r
000106dc g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000270 ResetHandler
0000300c g     F .text.itcm	00000002 plaits::WaveshapingEngine::Reset()
0000fc80 g     F .text.itcm	00000000 memcpy_tointerleaveLR
2001c5f0 g     O .data	000000d2 plaits::LPCSpeechSynthController::phonemes_
00010814 g     F .text.itcm	0000000a digitalWrite
200260fc g     O .bss	00000004 EventResponder::lastYield
00010bf0 g     F .text.itcm	000000d4 usb_midi_configure
200258e8 g     O .bss	00000002 AudioOutputI2S::block_right_offset
200261e8 g     O .bss	00000004 __malloc_max_sbrked_mem
00002cf4 g     F .text.itcm	000002d8 plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
200039e4 g     O .data	00000202 plaits::lut_ws_double_bump
0000f96c g     F .text.itcm	00000130 Sd2Card::chipSelectLow()
2000215c g     O .data	00000202 plaits::lut_ws_linear
2002590c g     O .bss	00000008 AudioInputTDM2::dma
200259e4 g     O .bss	00000004 SdVolume::sdCard_
20025f14 g     O .bss	00000004 usb_midi_handleSysExPartial
20280000 g       .bss.dma	00000000 _heap_end
00012cf4 g       .ARM.exidx	00000000 __exidx_start
0000e594  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200266c4 g     O .bss	00000001 usb_midi_msg_data1
20026100 g     O .bss	00000004 EventResponder::firstYield
0000f5e8 g     F .text.itcm	00000060 SdFile::seekSet(unsigned long)
2001f96c g     O .data	00000004 stmlib::Random::rng_state_
2001f95c g     O .data	00000004 _global_impure_ptr
200258d8 g     O .bss	00000002 AudioOutputI2S::block_left_offset
2001f21c g     O .data	00000014 vtable for plaits::VirtualAnalogEngine
0000fbd4 g     F .text.itcm	00000098 Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
0001232c g     F .text.itcm	00000050 __libc_init_array
0000e1d8  w    F .text.itcm	0000000c TwoWire::available()
000115fc  w    F .text.itcm	00000004 usb_seremu_class::flush()
0000f498 g     F .text.itcm	000000b8 SDHC_CardWriteBlock(void const*, unsigned long)
000073d8 g     F .text.itcm	0000003e plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)
000106e4  w    F .text.itcm	0000008c HardFault_HandlerC
00010770 g     F .text.itcm	00000030 _sbrk
600146fc g       *ABS*	00000000 _sdataload
2002591c g     O .bss	00000008 AudioOutputTDM::dma
2001fd94 g     O .data	00000004 __brkval
6000193c g     F .text.progmem	00000000 _init
2001fbd4 g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k4_lut_
00002c74 g     F .text.itcm	00000078 plaits::SpeechEngine::Init(stmlib::BufferAllocator*)
60001578 g     F .text.progmem	00000070 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
000105ac g     F .text.itcm	00000018 usb_seremu_write
000055dc g     F .text.itcm	00000002 plaits::HiHatEngine::Reset()
60001848 g     O .text.progmem	00000073 usb_config_descriptor_12
2001f560 g     O .data	00000024 vtable for TwoWire
2001fc64 g     O .data	00000008 plaits::LPCSpeechSynthWordBank::k8_lut_
200282c0 g       .bss	00000000 _ebss
0000d094 g     F .text.itcm	00000064 plaits::String::Reset()
200258e4 g     O .bss	00000004 AudioOutputI2S::block_right_1st
20002360 g     O .data	00000280 plaits::lut_lpc_excitation_pulse
200258f4 g     O .bss	00000001 AudioOutputI2S::update_responsibility
0000d170  w    F .text.itcm	000003bc void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)
20201fa0 g       .bss.dma	00000000 _heap_start
00002fcc g     F .text.itcm	00000040 plaits::WaveshapingEngine::Init(stmlib::BufferAllocator*)
2001fbbc g     O .data	00000010 plaits::LPCSpeechSynthWordBank::energy_lut_
2001fbac g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k3_lut_
0000fd3e g     F .text.itcm	00000000 memcpy_tointerleaveQuad
0000741c g     F .text.itcm	00000120 plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)
6000172c g     O .text.progmem	0000004c TwoWire::i2c4_hardware
0000e594  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
00000003 g       *ABS*	00000000 _itcm_block_count
20027000 g     O .bss	00000020 endpoint0_transfer_data
000103a4 g     F .text.itcm	00000030 tx_zero_pad
00010820 g     F .text.itcm	000002b8 pwm_init
600012a4 g     F .text.progmem	0000005c set_audioClock(int, long, unsigned long, bool)
2001fa84 g     O .data	00000066 plaits::SAMSpeechSynth::phonemes_
2001f4fc  w    O .data	00000014 plaits::AnalogSnareDrum::Render(bool, bool, float, float, float, float, float, float*, unsigned int)::kModeFrequencies
600013f8 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
20020688 g     O .bss	00000038 mix1
0000c314 g     F .text.itcm	000009ce plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
2001faec g     O .data	00000040 plaits::SAMSpeechSynth::formant_amplitude_lut
00007b2c g     F .text.itcm	00001634 plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00000000  w      *UND*	00000000 __deregister_frame_info
20027020 g     O .bss	00000020 endpoint0_transfer_ack
00012210 g     F .text.itcm	00000028 usb_transmit
00011670 g     F .text.itcm	00000068 software_isr()
000115d0 g     F .text.itcm	00000020 systick_isr
0000ad8c g     F .text.itcm	00000098 plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)
200258f8 g     O .bss	00000004 AudioOutputI2S::block_left_2nd
000026a0 g     F .text.itcm	00000048 plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)
2002610c g     O .bss	00000004 AudioStream::first_update
2001fda0 g     O .data	00000010 Serial
2001c6c4 g     O .data	000009dc plaits::bank_3
000091c8 g     F .text.itcm	00000002 plaits::SwarmEngine::Reset()
20026106 g     O .bss	00000002 AudioStream::memory_used_max
00000090  w    F .text.itcm	0000000c AudioConnection::~AudioConnection()
2001f584 g     O .data	0000001c vtable for AudioControlSGTL5000
000106dc  w    F .text.itcm	00000002 startup_early_hook
0000e604  w    F .text.itcm	00000004 AudioControlSGTL5000::inputLevel(float)
200258ec g     O .bss	00000004 AudioOutputI2S::block_left_1st
00011600  w    F .text.itcm	00000004 usb_seremu_class::availableForWrite()
0000feac g     F .text.itcm	000002c4 set_arm_clock
000026e8 g     F .text.itcm	0000042c plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)
20025ee0 g     O .bss	00000004 systick_cycle_count
2001fde8 g     O .data	00000016 usb_string_serial_number_default
00012b04 g     F .text.itcm	000001d0 _free_r
20025f04 g     O .bss	00000004 usb_midi_handleStop
200025e0 g     O .data	00001404 plaits::lut_sine
20000024 g     O .data	00000404 stmlib::lut_pitch_ratio_high
20026034 g     O .bss	00000004 usb_midi_handleControlChange
20020638 g     O .data	00000004 __malloc_sbrk_base
200258b8 g     O .bss	00000008 AudioOutputI2SOct::dma
00007b28 g     F .text.itcm	00000002 plaits::GrainEngine::Reset()
000107a0  w    F .text.itcm	00000004 __cxa_pure_virtual
000121e0 g     F .text.itcm	0000002e usb_prepare_transfer
000106c4 g     F .text.itcm	00000018 unused_interrupt_vector
000003a8 g     F .text.itcm	00000048 AudioSynthPlaits::update()
6000145c g     F .text.progmem	0000011c tempmon_init
200261ac g     O .bss	00000004 usb_timer0_callback
00011988  w    F .text.itcm	00000002 serialEvent()
0000e744  w    F .text.itcm	0000005c AudioControlSGTL5000::inputSelect(int)
000129c4 g     F .text.itcm	000000a4 __register_exitproc
00011820 g     F .text.itcm	00000042 AudioStream::receiveWritable(unsigned int)
0001022c g     F .text.itcm	000000b4 usb_seremu_configure
2001fb94 g     O .data	00000008 plaits::LPCSpeechSynthWordBank::k9_lut_
0000d52c  w    F .text.itcm	00000560 void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)
2001f4e8 g     O .data	00000014 vtable for plaits::StringEngine
00000024 g       *ABS*	00000000 _teensy_model_identifier
2002593c g     O .bss	00000008 AudioOutputI2S2::dma
00003884 g     F .text.itcm	00000002 plaits::VirtualAnalogEngine::Reset()
200261f0 g     O .bss	00000028 __malloc_current_mallinfo
20025924 g     O .bss	00000008 AudioInputI2S2::dma
0000e810  w    F .text.itcm	0000002c AudioControlSGTL5000::volume(float)
000102e0 g     F .text.itcm	00000068 usb_seremu_getchar
2001f5c8 g     O .data	00000050 SPIClass::spiclass_lpspi4_hardware
2001f510 g     O .data	00000014 vtable for plaits::SnareDrumEngine
2002618c g     O .bss	0000001c HardwareSerial::s_serials_with_serial_events
00011228 g     F .text.itcm	000000c0 IntervalTimer::beginCycles(void (*)(), unsigned long)
00003010 g     F .text.itcm	000007ec plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00000080 g     F .text.itcm	00000002 OnNoteOn(unsigned char, unsigned char, unsigned char)
00012314 g     F .text.itcm	0000000c __cxa_atexit
00011948 g     F .text.itcm	00000040 AudioStream::update_setup()
20025f28 g     O .bss	00000004 usb_midi_handleNoteOff
200258d0 g     O .bss	00000008 AudioOutputPT8211_2::dma
0000baf4 g     F .text.itcm	00000074 plaits::NoiseEngine::Init(stmlib::BufferAllocator*)
2001fd38 g     O .data	00000050 SPI
00009160 g     F .text.itcm	00000068 plaits::SwarmEngine::Init(stmlib::BufferAllocator*)
00004cb0 g     F .text.itcm	0000082c plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000a06c g     F .text.itcm	00000d20 plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000e994 g     F .text.itcm	00000098 AudioOutputI2S::update()
2001f488 g     O .data	00000014 vtable for plaits::AdditiveEngine
20025ee4 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
2001f988 g     O .data	000000fa plaits::NaiveSpeechSynth::phonemes_
2002595c g     O .bss	00000008 AudioInputI2SHex::dma
0000986c g     F .text.itcm	00000496 plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00010348 g     F .text.itcm	00000044 usb_seremu_peekchar
0000db58 g     F .text.itcm	00000348 plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)
2002022c g     O .data	00000408 __malloc_av_
20000b34 g     O .data	00000810 plaits::lut_fold_2
200258c0 g     O .bss	00000008 AudioInputI2S::dma
00012998 g     F .text.itcm	00000002 __malloc_lock
2001fb9c g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k6_lut_
0000cd14 g     F .text.itcm	00000006 plaits::StringVoice::Reset()
2001e364 g     O .data	000004d1 plaits::bank_0
20026400 g     O .bss	000002c0 _VectorsRam
2001fd9c g     O .data	00000001 yield_active_check_flags
200261bc g     O .bss	00000001 usb_high_speed
0000fcbe g     F .text.itcm	00000000 memcpy_tointerleaveL
2002592c g     O .bss	00000008 AudioInputI2SQuad::dma
000128fc g     F .text.itcm	0000009a memset
2001f8b0  w    O .data	00000024 vtable for usb_seremu_class
0000e7a0 g     F .text.itcm	0000006e AudioControlSGTL5000::volumeInteger(unsigned int)
00011660 g     F .text.itcm	00000010 main
0000f168 g     F .text.itcm	00000074 SdVolume::fatGet(unsigned long, unsigned long*) const
200258dc g     O .bss	00000008 AudioOutputI2S::dma
200261e4 g     O .bss	00000004 __malloc_max_total_mem
00003988 g     F .text.itcm	0000126e plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
20201f20 g     O .bss.dma	00000073 usb_descriptor_buffer
0000daa8 g     F .text.itcm	000000b0 plaits::Resonator::Init(float, int)
00004c8c g     F .text.itcm	00000022 plaits::ParticleEngine::Reset()
2001ebbc g     O .data	00000610 plaits::bank_2
0000e608 g     F .text.itcm	0000005c AudioControlSGTL5000::write(unsigned int, unsigned int)
00012260 g     F .text.itcm	00000058 usb_init_serialnumber
600019fc g       .text.progmem	00000000 __init_array_end
0001238c g     F .text.itcm	00000570 _malloc_r
200261a8 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000ae28 g     F .text.itcm	00000ccc plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
20025efc g     O .bss	00000004 usb_midi_handleSongPosition
20025904 g     O .bss	00000008 AudioInputI2SOct::dma
2001f5b8  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
00011508 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
20025f00 g     O .bss	00000004 usb_midi_handleContinue
200266c5 g     O .bss	00000001 usb_midi_msg_data2
20000018 g     O .data	0000000c vtable for AudioSynthPlaits
0000efd8 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
0000e664 g     F .text.itcm	000000e0 AudioControlSGTL5000::enable()
20001344 g     O .data	00000810 plaits::lut_fold
2001f524 g     O .data	00000014 vtable for plaits::BassDrumEngine
0000ebf0 g     F .text.itcm	000000f0 AudioMixer4::update()
0000ae24 g     F .text.itcm	00000002 plaits::BassDrumEngine::Reset()
00012a68 g     F .text.itcm	0000009c _malloc_trim_r
60001844 g     O .text.progmem	00000004 string0
0000f3a0 g     F .text.itcm	000000f8 SDHC_CardReadBlock(void*, unsigned long)
000106e0  w    F .text.itcm	00000002 startup_late_hook
00001b3c g     F .text.itcm	00000298 plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)
60001810 g     O .text.progmem	00000001 _serialEvent_default
20001f58 g     O .data	00000202 plaits::lut_ws_inverse_tan
200266c6 g     O .bss	00000001 usb_midi_msg_cable
20028000 g     O .bss	00000280 endpoint_queue_head
000091cc g     F .text.itcm	00000680 plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
60001814  w    O .text.progmem	00000018 usb_string_product_name
000105f8 g     F .text.itcm	000000cc delay
2001fc7c g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k2_lut_
200260f2 g     O .bss	00000002 dma_channel_allocated_mask
2000082c g     O .data	00000104 plaits::lut_stiffness
00012cf0 g     F .fini	00000000 _fini
2001fd88 g     O .data	00000004 SdVolume::cacheBlockNumber_
000012c4 g     F .text.itcm	00000080 plaits::NaiveSpeechSynth::Init()
0000e220 g     F .text.itcm	00000030 TwoWire::write(unsigned char)
200258c8 g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.progmem	0000000c BootData
2001fc6c g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k5_lut_
20025964 g     O .bss	00000008 AudioOutputMQS::dma
00006950 g     F .text.itcm	0000007c plaits::ChordEngine::Init(stmlib::BufferAllocator*)
000107a4 g     F .text.itcm	00000024 Panic_Temp_isr
2001f25c g     O .data	00000014 vtable for plaits::HiHatEngine
2002598c g     O .bss	00000054 SD
00011780 g     F .text.itcm	00000054 AudioStream::release(audio_block_struct*)
000115f8  w    F .text.itcm	00000004 usb_seremu_class::available()
00010d60 g     F .text.itcm	00000090 usb_midi_read_message
20020228 g     O .data	00000004 _impure_ptr
20025984 g     O .bss	00000008 AudioOutputSPDIF::dma
2001fcc8 g     O .data	00000070 Wire
00002b14 g     F .text.itcm	00000006 plaits::ModalEngine::Reset()
0000dea0 g     F .text.itcm	0000001c plaits::ModalVoice::Init()
000117d4 g     F .text.itcm	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
000112e8 g     F .text.itcm	0000005c IntervalTimer::end()
200260cc g     O .bss	00000004 usb_midi_handleTuneRequest
2001fbe4 g     O .data	00000040 plaits::LPCSpeechSynthWordBank::k1_lut_
60001990 g       .text.progmem	00000000 __preinit_array_end
20025954 g     O .bss	00000008 AudioInputTDM::dma
20025934 g     O .bss	00000008 AudioOutputTDM2::dma
200266c7 g     O .bss	00000001 usb_midi_msg_channel
0000a068 g     F .text.itcm	00000002 plaits::SnareDrumEngine::Reset()
000116d8 g     F .text.itcm	000000a8 AudioStream::allocate()
000037fc g     F .text.itcm	00000088 plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)
000120e8 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00004bf8 g     F .text.itcm	00000094 plaits::ParticleEngine::Init(stmlib::BufferAllocator*)
0000e204  w    F .text.itcm	00000018 TwoWire::peek()
0000e21c  w    F .text.itcm	00000002 TwoWire::flush()
000000b8 g     F .text.itcm	00000038 setup
2001f8d8 g     O .data	00000084 usb_descriptor_list
0000efe0  w    F .text.itcm	00000002 Print::flush()
20025f2c g     O .bss	00000004 usb_midi_handleStart
00006bc0 g     F .text.itcm	00000818 plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
2002587c g     O .bss	00000014 patchCord1
2001f4c4 g     O .data	00000014 vtable for plaits::FMEngine
0000007c  w    F .text.itcm	00000002 AudioSynthPlaits::~AudioSynthPlaits()
20068000 g       .bss.dma	00000000 _estack
000114d4 g     F .text.itcm	00000034 DMAChannel::release()
00011864 g     F .text.itcm	00000068 AudioConnection::connect()
0000fa9c g     F .text.itcm	00000048 Sd2Card::waitStartBlock()
0000e250 g     F .text.itcm	0000003a TwoWire::write(unsigned char const*, unsigned int)
20020640 g       .data	00000000 _edata
00003888 g     F .text.itcm	00000100 plaits::VirtualAnalogEngine::ComputeDetuning(float) const
20020668 g     O .bss	00000020 i2s1
00001344 g     F .text.itcm	0000048e plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)
20025f38 g     O .bss	00000004 usb_midi_handleClock
000122b8 g     F .text.itcm	0000004e ultoa
2001f618 g     O .data	00000018 vtable for SdFile
20001b54 g     O .data	00000404 plaits::lut_svf_shift
0000e28c g     F .text.itcm	000000d4 TwoWire::begin()
2001fc8c g     O .data	0000003c plaits::wavetable
00011588 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
000003f0 g     F .text.itcm	000002b4 plaits::Voice::Init(stmlib::BufferAllocator*)
20020634 g     O .data	00000004 __malloc_trim_threshold
000118cc g     F .text.itcm	0000007a AudioConnection::disconnect()
0000fb60 g     F .text.itcm	00000074 Sd2Card::writeData(unsigned char, unsigned char const*)
0000debc g     F .text.itcm	00000318 plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)
00002b1c g     F .text.itcm	00000118 plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000c2ec g     F .text.itcm	00000024 plaits::WavetableEngine::Init(stmlib::BufferAllocator*)
00009f9c g     F .text.itcm	000000cc plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)
20003dec g     O .data	00000202 plaits::lut_ws_inverse_sin
200260c4 g     O .bss	00000004 usb_midi_handlePitchChange
20025974 g     O .bss	00000008 AudioOutputI2SHex::dma
2002618a g     O .bss	00000002 AudioStream::cpu_cycles_total
000020b4 g     F .text.itcm	00000024 plaits::LPCSpeechSynthWordBank::Reset()
0000f850 g     F .text.itcm	000000a8 Sd2Card::cardCommand(unsigned char, unsigned long)
00001b00 g     F .text.itcm	0000003c plaits::LPCSpeechSynth::Init()
0000f008 g     F .text.itcm	00000080 SdVolume::cacheFlush()
20025f10 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
60001990 g       .text.progmem	00000000 __init_array_start
2001fd8c g     O .data	00000004 F_BUS_ACTUAL
000018c0 g     F .text.itcm	00000240 plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)
2001f970 g     O .data	00000018 plaits::lookup_table_i16_table
200266c8 g     O .bss	00000122 usb_midi_msg_sysex
0000fae4 g     F .text.itcm	0000007c Sd2Card::SD_readBlock(unsigned long, unsigned char*)
0000007c  w    F .text.itcm	00000002 AudioSynthPlaits::~AudioSynthPlaits()
0000e83c g     F .text.itcm	00000158 AudioOutputI2S::isr()
2001f1f4 g     O .data	00000014 vtable for plaits::WaveshapingEngine
2001f230 g     O .data	00000014 vtable for plaits::ParticleEngine
0000ea2c g     F .text.itcm	000000cc AudioOutputI2S::config_i2s()
2001f49c g     O .data	00000014 vtable for plaits::GrainEngine
00000000 g       .text.itcm	00000000 _stext
00011434 g     F .text.itcm	000000a0 DMAChannel::begin(bool)
2001fd98 g     O .data	00000004 IntervalTimer::nvic_priorites
000020d8 g     F .text.itcm	00000576 plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)
00000084  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
0000bb6c g     F .text.itcm	00000780 plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
60001814 g     O .text.progmem	00000018 usb_string_product_name_default
20025944 g     O .bss	00000008 AudioOutputI2SQuad::dma
0000fcfe g     F .text.itcm	00000000 memcpy_tointerleaveR
60001300 g     F .text.progmem	000000f8 configure_cache
0000d0f8 g     F .text.itcm	00000078 plaits::String::Init(stmlib::BufferAllocator*)
0000da8c g     F .text.itcm	0000001c plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)
2002597c g     O .bss	00000008 AudioOutputSPDIF2::dma
000006a4 g     F .text.itcm	00000c20 plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
2001f964 g     O .data	00000008 myTimer
20025914 g     O .bss	00000008 AudioInputAnalog::dma
20026108 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
2001f330 g     O .data	00000014 vtable for plaits::ChordEngine
60001990 g       .text.progmem	00000000 __preinit_array_start
00012238 g     F .text.itcm	00000024 usb_receive
20000000  w    O .data	0000000c vtable for AudioStream
000103d4 g     F .text.itcm	00000068 tx_queue_transfer
00034d38 g       *ABS*	00000000 _flashimagelen
00012308 g     F .text.itcm	0000000a __aeabi_atexit
20026020 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
0000753c g     F .text.itcm	000005a4 plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
000115cc g     F .text.itcm	00000004 pendablesrvreq_isr
200258fc g     O .bss	00000008 AudioInputSPDIF3::dma
0000e1d4  w    F .text.itcm	00000004 Print::availableForWrite()
00000090  w    F .text.itcm	0000000c AudioConnection::~AudioConnection()
00002cec g     F .text.itcm	00000008 plaits::SpeechEngine::Reset()
00012178 g     F .text.itcm	00000068 usb_config_tx
2001fbcc g     O .data	00000008 plaits::LPCSpeechSynthWordBank::k7_lut_
20025f3c g     O .bss	00000004 usb_midi_handleActiveSensing
20025be8 g     O .bss	00000001 SdVolume::cacheDirty_
2001f1e0 g     O .data	00000014 vtable for plaits::SpeechEngine
2001fde8  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`8M......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	cmp	r2, r3
6000105e:	bcs.n	6000107a <ResetHandler+0x46>
60001060:	mvns	r4, r2
60001062:	mov	r0, r1
60001064:	add	r3, r4
60001066:	bic.w	r3, r3, #3
6000106a:	adds	r3, #4
6000106c:	add	r3, r1
		*dest++ = *src++;
6000106e:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	cmp	r0, r3
		*dest++ = *src++;
60001074:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	cmp	r2, r1
60001080:	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	cmp	r2, r3
60001086:	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	mvns	r4, r2
6000108a:	mov	r0, r1
6000108c:	add	r3, r4
6000108e:	bic.w	r3, r3, #3
60001092:	adds	r3, #4
60001094:	add	r3, r1
		*dest++ = *src++;
60001096:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	cmp	r0, r3
		*dest++ = *src++;
6000109c:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	cmp	r2, r3
600010a8:	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	mvns	r0, r2
600010ac:	mov	r1, r2
		*dest++ = 0;
600010ae:	movs	r4, #0
600010b0:	add	r3, r0
600010b2:	bic.w	r3, r3, #3
600010b6:	adds	r3, #4
600010b8:	add	r3, r2
600010ba:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	cmp	r3, r1
600010c0:	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	mov.w	r1, #15728640	; 0xf00000
600010c8:	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	str	r1, [r2, #0]
600010cc:	add.w	r1, r3, #704	; 0x2c0
600010d0:	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	str.w	r2, [r3, #4]!
600010d6:	cmp	r1, r3
600010d8:	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	movs	r1, #128	; 0x80
600010de:	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	strb.w	r1, [r3], #1
600010e4:	cmp	r3, r2
600010e6:	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	ldr	r3, [r6, #28]
6000111c:	bic.w	r3, r3, #127	; 0x7f
60001120:	orr.w	r3, r3, #64	; 0x40
60001124:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	ldr	r3, [r6, #36]	; 0x24
60001128:	bic.w	r3, r3, #127	; 0x7f
6000112c:	orr.w	r3, r3, #64	; 0x40
60001130:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	bl	60001300 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	orr.w	r3, r3, #1
60001176:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	ldr	r3, [r0, #0]
6000117a:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	bl	600013f8 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	bl	60001988 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	nop
60001198:	nop
6000119a:	nop
6000119c:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r2, [r3, #56]	; 0x38
600011be:	lsls	r2, r2, #31
600011c0:	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	ldr	r2, [r3, #56]	; 0x38
600011ce:	orr.w	r2, r2, #1
600011d2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	ldr	r3, [r2, #8]
600011da:	orr.w	r3, r3, #65537	; 0x10001
600011de:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	bl	60001970 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	cmp	r3, #19
600011e8:	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	bl	600015e8 <usb_init>
	analog_init();
600011ee:	bl	600016d4 <analog_init>
	pwm_init();
600011f2:	bl	60001980 <__pwm_init_veneer>
	tempmon_init();
600011f6:	bl	6000145c <tempmon_init>

	startup_late_hook();
600011fa:	bl	60001958 <__startup_late_hook_veneer>
600011fe:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	cmp.w	r3, #300	; 0x12c
60001204:	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	bl	60001950 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	bl	60001968 <__main_veneer>
6000120e:	b.n	6000120e <ResetHandler+0x1da>
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaabf
60001218:	.word	0x00200007
6000121c:	.word	0x20068000
60001220:	.word	0x00000000
60001224:	.word	0x60001a00
60001228:	.word	0x00012cf8
6000122c:	.word	0x20000000
60001230:	.word	0x600146fc
60001234:	.word	0x20020640
60001238:	.word	0x20020640
6000123c:	.word	0x200282c0
60001240:	.word	0xe000ed88
60001244:	.word	0x200263fc
60001248:	.word	0x000106c5
6000124c:	.word	0xe000e400
60001250:	.word	0xe000e4a0
60001254:	.word	0x400d8000
60001258:	.word	0x400fc000
6000125c:	.word	0xe000ed08
60001260:	.word	0xe000e014
60001264:	.word	0xe000e018
60001268:	.word	0x000115cd
6000126c:	.word	0xe000edfc
60001270:	.word	0x20200000
60001274:	.word	0x000115d1
60001278:	.word	0xe0001000
6000127c:	.word	0xe0001004
60001280:	.word	0x20025ee0
60001284:	.word	0x23c34600
60001288:	.word	0x40084000
6000128c:	.word	0x400d4000
60001290:	.word	0x56c00000
60001294:	.word	0x20025ee8
60001298:	.word	0x20026400
6000129c:	.word	0x2018101b
600012a0:	.word	0x13110d0c

600012a4 <set_audioClock(int, long, unsigned long, bool)>:
#if defined(__IMXRT1052__) || defined(__IMXRT1062__)
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
600012a4:	push	{r4}
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
600012a6:	cbnz	r3, 600012b0 <set_audioClock(int, long, unsigned long, bool)+0xc>
600012a8:	ldr	r3, [pc, #76]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012aa:	ldr	r3, [r3, #112]	; 0x70
600012ac:	lsls	r3, r3, #18
600012ae:	bmi.n	600012f2 <set_audioClock(int, long, unsigned long, bool)+0x4e>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012b0:	and.w	r0, r0, #63	; 0x3f
600012b4:	ldr	r3, [pc, #64]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012b6:	bic.w	r2, r2, #3758096384	; 0xe0000000

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012ba:	bic.w	r1, r1, #3758096384	; 0xe0000000
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012be:	orr.w	r0, r0, #1122304	; 0x112000

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012c2:	mov	r4, r3
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012c4:	str	r0, [r3, #112]	; 0x70

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012c6:	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012ca:	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600012ce:	ldr	r2, [r3, #112]	; 0x70
600012d0:	bic.w	r2, r2, #4096	; 0x1000
600012d4:	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012d6:	ldr	r3, [r4, #112]	; 0x70
600012d8:	ldr	r2, [pc, #28]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012da:	cmp	r3, #0
600012dc:	bge.n	600012d6 <set_audioClock(int, long, unsigned long, bool)+0x32>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600012de:	ldr.w	r1, [r2, #368]	; 0x170
600012e2:	ldr	r3, [pc, #24]	; (600012fc <set_audioClock(int, long, unsigned long, bool)+0x58>)
600012e4:	ands	r3, r1
600012e6:	str.w	r3, [r2, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600012ea:	ldr	r3, [r2, #112]	; 0x70
600012ec:	bic.w	r3, r3, #65536	; 0x10000
600012f0:	str	r3, [r2, #112]	; 0x70
}
600012f2:	ldr.w	r4, [sp], #4
600012f6:	bx	lr
600012f8:	.word	0x400d8000
600012fc:	.word	0xff7f7fff

60001300 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001300:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001302:	ldr	r2, [pc, #160]	; (600013a4 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001304:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001306:	ldr	r3, [pc, #160]	; (600013a8 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001308:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000130c:	ldr	r4, [pc, #156]	; (600013ac <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000130e:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001310:	ldr.w	lr, [pc, #216]	; 600013ec <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001314:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001316:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001318:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000131a:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000131e:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001322:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001324:	ldr.w	lr, [pc, #200]	; 600013f0 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001328:	ldr	r7, [pc, #132]	; (600013b0 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000132a:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000132e:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001330:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001332:	ldr	r6, [pc, #128]	; (600013b4 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001334:	ldr	r7, [pc, #128]	; (600013b8 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001336:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001338:	ldr	r1, [pc, #128]	; (600013bc <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000133a:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000133c:	ldr	r6, [pc, #128]	; (600013c0 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000133e:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001342:	ldr	r7, [pc, #128]	; (600013c4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001344:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001346:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001348:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000134c:	ldr	r6, [pc, #120]	; (600013c8 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000134e:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001350:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001352:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001354:	ldr.w	lr, [pc, #156]	; 600013f4 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001358:	ldr	r6, [pc, #112]	; (600013cc <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000135a:	ldr	r1, [pc, #116]	; (600013d0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000135c:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001360:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001362:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001364:	ldr	r7, [pc, #108]	; (600013d4 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001366:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001368:	ldr	r6, [pc, #108]	; (600013d8 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000136a:	ldr	r1, [pc, #112]	; (600013dc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000136c:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000136e:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001370:	ldr	r7, [pc, #108]	; (600013e0 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001372:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001374:	ldr	r6, [pc, #108]	; (600013e4 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001376:	ldr	r1, [pc, #112]	; (600013e8 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001378:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000137a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000137c:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000137e:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001380:	dsb	sy
	asm("isb");
60001384:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001388:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
6000138c:	dsb	sy
	asm("isb");
60001390:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001394:	ldr.w	r3, [r2, #-136]
60001398:	orr.w	r3, r3, #196608	; 0x30000
6000139c:	str.w	r3, [r2, #-136]
600013a0:	pop	{r4, r5, r6, r7, pc}
600013a2:	nop
600013a4:	.word	0xe000ed9c
600013a8:	.word	0xe000eda0
600013ac:	.word	0xe000ed94
600013b0:	.word	0x00100009
600013b4:	.word	0x00200013
600013b8:	.word	0x07020021
600013bc:	.word	0x200282c0
600013c0:	.word	0x20000014
600013c4:	.word	0x13080025
600013c8:	.word	0x10000009
600013cc:	.word	0x40000017
600013d0:	.word	0x13100033
600013d4:	.word	0x60000018
600013d8:	.word	0x070b002f
600013dc:	.word	0x70000019
600013e0:	.word	0x170b0037
600013e4:	.word	0x7000001a
600013e8:	.word	0x130b002f
600013ec:	.word	0x1000003f
600013f0:	.word	0x03080025
600013f4:	.word	0x20200016

600013f8 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
600013f8:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013fa:	ldr	r2, [pc, #92]	; (60001458 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013fc:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fe:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001402:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001406:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000140a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001412:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001414:	tst.w	r3, #2
60001418:	beq.n	60001428 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000141a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000141c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001420:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001422:	tst.w	r3, #2
60001426:	bne.n	6000141a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001428:	tst.w	r3, #8192	; 0x2000
6000142c:	bne.n	60001432 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142e:	str	r5, [r2, #20]
			continue;
60001430:	b.n	60001412 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001432:	tst.w	r3, #4096	; 0x1000
60001436:	bne.n	6000143c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001438:	str	r6, [r2, #20]
			continue;
6000143a:	b.n	60001412 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000143c:	cmp	r3, #0
6000143e:	bge.n	60001412 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001440:	tst.w	r3, #65536	; 0x10000
60001444:	beq.n	6000144a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001446:	str	r1, [r2, #24]
			continue;
60001448:	b.n	60001412 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000144a:	lsls	r3, r3, #25
6000144c:	bmi.n	60001452 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144e:	str	r7, [r2, #20]
			continue;
60001450:	b.n	60001412 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001452:	pop	{r4, r5, r6, r7}
60001454:	bx	lr
60001456:	nop
60001458:	.word	0x400d8000

6000145c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000145c:	ldr	r2, [pc, #236]	; (6000154c <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145e:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001462:	ldr	r1, [pc, #236]	; (60001550 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001464:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001466:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001468:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000146a:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000146e:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001470:	ldr.w	lr, [pc, #256]	; 60001574 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001474:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001476:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000147a:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000147e:	ldr	r7, [pc, #212]	; (60001554 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001480:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001482:	ubfx	r4, r3, #8, #12
60001486:	ldr	r6, [pc, #208]	; (60001558 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001488:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000148c:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001490:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001494:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001498:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000149c:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014a0:	vmov	s15, r4
600014a4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014a8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014aa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ae:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b2:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014b6:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b8:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014bc:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c0:	ldr	r5, [pc, #152]	; (6000155c <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c2:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c6:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c8:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014cc:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d0:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014d2:	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600014d6:	ldr	r6, [pc, #136]	; (60001560 <tempmon_init+0x104>)
600014d8:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014da:	ldr	r1, [pc, #136]	; (60001564 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014dc:	ldr	r4, [pc, #136]	; (60001568 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014de:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014e2:	vmov	s15, r3
600014e6:	ldr	r3, [pc, #132]	; (6000156c <tempmon_init+0x110>)
600014e8:	str.w	r3, [r6, #320]	; 0x140
600014ec:	vcvt.f32.u32	s15, s15
600014f0:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f4:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014f8:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014fc:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001500:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001504:	vmov	r3, s11
60001508:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000150c:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001510:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001514:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001516:	and.w	r1, r1, r5, lsl #16
6000151a:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000151e:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001522:	orrs	r3, r1
60001524:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001528:	vmov	r3, s15
6000152c:	ldr.w	r1, [r2, #272]	; 0x110
60001530:	ubfx	r3, r3, #0, #12
60001534:	orrs	r3, r1
60001536:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000153a:	ldr	r3, [r2, #0]
6000153c:	orr.w	r3, r3, #2
60001540:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001542:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001544:	ldr	r3, [pc, #40]	; (60001570 <tempmon_init+0x114>)
60001546:	movs	r2, #1
60001548:	str	r2, [r3, #0]
6000154a:	pop	{r4, r5, r6, r7, pc}
6000154c:	.word	0x400d8180
60001550:	.word	0x401f4400
60001554:	.word	0x20025ef4
60001558:	.word	0x20025ef8
6000155c:	.word	0x20025ef0
60001560:	.word	0x20026400
60001564:	.word	0x0fff0000
60001568:	.word	0xe000e440
6000156c:	.word	0x000107a5
60001570:	.word	0xe000e108
60001574:	.word	0x20025eec

60001578 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
FLASHMEM void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
60001578:	cmp.w	r1, #896	; 0x380
6000157c:	push	{r4, r5, r6, r7}
6000157e:	it	cs
60001580:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
60001584:	cpsid	i
	memory_pool = data;
	memory_pool_first_mask = 0;
60001586:	movs	r5, #0
60001588:	ldr	r3, [pc, #76]	; (600015d8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
6000158a:	ldr	r7, [pc, #80]	; (600015dc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)
	memory_pool_first_mask = 0;
6000158c:	ldr	r6, [pc, #80]	; (600015e0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000158e:	mov	r4, r5
60001590:	add.w	r2, r3, #112	; 0x70

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
60001594:	str	r0, [r7, #0]
	memory_pool_first_mask = 0;
60001596:	strh	r5, [r6, #0]
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001598:	str.w	r4, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
6000159c:	cmp	r3, r2
6000159e:	bne.n	60001598 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x20>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600015a0:	cbz	r1, 600015d2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5a>
600015a2:	movs	r3, #0
600015a4:	ldr	r6, [pc, #60]	; (600015e4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600015a6:	movs	r7, #1
600015a8:	lsrs	r5, r3, #5
600015aa:	and.w	r4, r3, #31
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600015ae:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600015b0:	ldr.w	r2, [r6, r5, lsl #2]
600015b4:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600015b8:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600015ba:	orr.w	r2, r2, r4
600015be:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600015c2:	bne.n	600015a8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x30>
600015c4:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
600015c6:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
600015c8:	adds	r3, #1
600015ca:	add.w	r0, r0, #260	; 0x104
600015ce:	cmp	r3, r1
600015d0:	bne.n	600015c6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4e>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
600015d2:	cpsie	i

}
600015d4:	pop	{r4, r5, r6, r7}
600015d6:	bx	lr
600015d8:	.word	0x2002610c
600015dc:	.word	0x20026180
600015e0:	.word	0x20026186
600015e4:	.word	0x20026110

600015e8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600015e8:	ldr	r3, [pc, #192]	; (600016ac <usb_init+0xc4>)
600015ea:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600015ee:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600015f0:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600015f4:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600015f8:	bl	60001948 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600015fc:	ldr	r1, [pc, #176]	; (600016b0 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600015fe:	ldr	r0, [pc, #180]	; (600016b4 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001600:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001604:	ldr	r4, [pc, #176]	; (600016b8 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001606:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000160a:	ldr	r3, [pc, #176]	; (600016bc <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000160c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001610:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001614:	ldr	r2, [r4, #0]
60001616:	ands	r3, r2
60001618:	cbnz	r3, 60001622 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000161a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000161e:	lsls	r2, r3, #30
60001620:	beq.n	60001658 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001622:	ldr	r3, [pc, #144]	; (600016b4 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001624:	mov.w	r1, #2147483648	; 0x80000000
60001628:	ldr	r2, [pc, #140]	; (600016b8 <usb_init+0xd0>)
6000162a:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000162c:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000162e:	ldr.w	r1, [r3, #320]	; 0x140
60001632:	orr.w	r1, r1, #2
60001636:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000163a:	ldr.w	r3, [r2, #320]	; 0x140
6000163e:	lsls	r3, r3, #30
60001640:	bmi.n	6000163a <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001642:	mov.w	r0, #131072	; 0x20000
60001646:	ldr	r1, [pc, #120]	; (600016c0 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001648:	ldr	r3, [pc, #108]	; (600016b8 <usb_init+0xd0>)
6000164a:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000164e:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001650:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001652:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001654:	bl	60001978 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001658:	ldr	r5, [pc, #104]	; (600016c4 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000165a:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000165c:	ldr	r3, [pc, #88]	; (600016b8 <usb_init+0xd0>)
6000165e:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001662:	ldr	r4, [pc, #80]	; (600016b4 <usb_init+0xcc>)
60001664:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001666:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001668:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000166a:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000166c:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000166e:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001672:	mov.w	r2, #640	; 0x280
60001676:	bl	60001960 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000167a:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000167e:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001682:	movw	r3, #323	; 0x143
60001686:	ldr	r2, [pc, #64]	; (600016c8 <usb_init+0xe0>)
60001688:	ldr	r1, [pc, #64]	; (600016cc <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000168a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000168c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000168e:	str.w	r5, [r4, #344]	; 0x158
60001692:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001696:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000169a:	ldr	r2, [pc, #52]	; (600016d0 <usb_init+0xe8>)
6000169c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600016a0:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600016a2:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600016a4:	str.w	r3, [r4, #320]	; 0x140
600016a8:	pop	{r4, r5, r6, pc}
600016aa:	nop
600016ac:	.word	0x400d8000
600016b0:	.word	0x400fc000
600016b4:	.word	0x402e0000
600016b8:	.word	0x400d9000
600016bc:	.word	0x001e1c00
600016c0:	.word	0xe000e28c
600016c4:	.word	0x20028000
600016c8:	.word	0x20026400
600016cc:	.word	0x00011ad5
600016d0:	.word	0xe000e10c

600016d4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016d4:	ldr	r3, [pc, #68]	; (6000171c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016d6:	ldr	r1, [pc, #72]	; (60001720 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016d8:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600016da:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016dc:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600016e0:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016e2:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016e4:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600016e8:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600016ea:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600016ec:	orr.w	r0, r0, #768	; 0x300
600016f0:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016f2:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600016f4:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600016f6:	ldr	r3, [r2, #72]	; 0x48
600016f8:	lsls	r3, r3, #24
600016fa:	bmi.n	600016f6 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016fc:	ldr	r3, [pc, #36]	; (60001724 <analog_init+0x50>)
600016fe:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001702:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001704:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001706:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001708:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000170a:	ldr	r3, [r2, #72]	; 0x48
6000170c:	ands.w	r3, r3, #128	; 0x80
60001710:	bne.n	6000170a <analog_init+0x36>
	calibrating = 0;
60001712:	ldr	r2, [pc, #20]	; (60001728 <analog_init+0x54>)
60001714:	strb	r3, [r2, #0]
}
60001716:	pop	{r4, r5}
60001718:	bx	lr
6000171a:	nop
6000171c:	.word	0x400fc000
60001720:	.word	0x400c4000
60001724:	.word	0x400c8000
60001728:	.word	0x200261e1

6000172c <TwoWire::i2c4_hardware>:
6000172c:	...@............
6000173c:	...@............
	...
60001754:	...........@....
60001764:	................
60001774:	....

60001778 <TwoWire::i2c3_hardware>:
60001778:	p..@............
60001788:	...@....$.......
60001798:	...@............
600017a8:	...@....%.......
600017b8:	...@........

600017c4 <TwoWire::i2c1_hardware>:
600017c4:	p..@............
600017d4:	...@............
	...
600017ec:	...........@....
600017fc:	................
6000180c:	....

60001810 <_serialEvent_default>:
60001810:	....

60001814 <usb_string_product_name_default>:
60001814:	..T.e.e.n.s.y. .
60001824:	M.I.D.I.

6000182c <usb_string_manufacturer_name_default>:
6000182c:	..T.e.e.n.s.y.d.
6000183c:	u.i.n.o.

60001844 <string0>:
60001844:	....

60001848 <usb_config_descriptor_12>:
60001848:	..s.....2.......
60001858:	...$...%..$.....
60001868:	$.....$........$
60001878:	...........@....
60001888:	.%.......@.....%
60001898:	.............!..
600018a8:	.."!.....@......
600018b8:	 ...

600018bc <usb_config_descriptor_480>:
600018bc:	..s.....2.......
600018cc:	...$...%..$.....
600018dc:	$.....$........$
600018ec:	................
600018fc:	.%.............%
6000190c:	.............!..
6000191c:	.."!.....@......
6000192c:	 ...

60001930 <qualifier_descriptor>:
60001930:	.......@....

6000193c <_init>:
6000193c:	push	{r3, r4, r5, r6, r7, lr}
6000193e:	nop
60001940:	pop	{r3, r4, r5, r6, r7}
60001942:	pop	{r3}
60001944:	mov	lr, r3
60001946:	bx	lr

60001948 <__usb_init_serialnumber_veneer>:
60001948:	ldr.w	pc, [pc]	; 6000194c <__usb_init_serialnumber_veneer+0x4>
6000194c:	.word	0x00012261

60001950 <____libc_init_array_veneer>:
60001950:	ldr.w	pc, [pc]	; 60001954 <____libc_init_array_veneer+0x4>
60001954:	.word	0x0001232d

60001958 <__startup_late_hook_veneer>:
60001958:	ldr.w	pc, [pc]	; 6000195c <__startup_late_hook_veneer+0x4>
6000195c:	.word	0x000106e1

60001960 <__memset_veneer>:
60001960:	ldr.w	pc, [pc]	; 60001964 <__memset_veneer+0x4>
60001964:	.word	0x000128fd

60001968 <__main_veneer>:
60001968:	ldr.w	pc, [pc]	; 6000196c <__main_veneer+0x4>
6000196c:	.word	0x00011661

60001970 <__startup_early_hook_veneer>:
60001970:	ldr.w	pc, [pc]	; 60001974 <__startup_early_hook_veneer+0x4>
60001974:	.word	0x000106dd

60001978 <__delay_veneer>:
60001978:	ldr.w	pc, [pc]	; 6000197c <__delay_veneer+0x4>
6000197c:	.word	0x000105f9

60001980 <__pwm_init_veneer>:
60001980:	ldr.w	pc, [pc]	; 60001984 <__pwm_init_veneer+0x4>
60001984:	.word	0x00010821

60001988 <__set_arm_clock_veneer>:
60001988:	ldr.w	pc, [pc]	; 6000198c <__set_arm_clock_veneer+0x4>
6000198c:	.word	0x0000fead

60001990 <__init_array_start>:
60001990:	.word	0x00000045
60001994:	.word	0x000000f9
60001998:	.word	0x0000e5a1
6000199c:	.word	0x0000e5b9
600019a0:	.word	0x0000e5d1
600019a4:	.word	0x0000e5e9
600019a8:	.word	0x0000ebd9
600019ac:	.word	0x0000ece1
600019b0:	.word	0x0000ecf9
600019b4:	.word	0x0000ed11
600019b8:	.word	0x0000ed29
600019bc:	.word	0x0000ed41
600019c0:	.word	0x0000ed59
600019c4:	.word	0x0000ed71
600019c8:	.word	0x0000ed89
600019cc:	.word	0x0000eda1
600019d0:	.word	0x0000edb9
600019d4:	.word	0x0000edd1
600019d8:	.word	0x0000ede9
600019dc:	.word	0x0000ee01
600019e0:	.word	0x0000ee19
600019e4:	.word	0x0000ee31
600019e8:	.word	0x0000ee49
600019ec:	.word	0x0000ee61
600019f0:	.word	0x0000ee79
600019f4:	.word	0x0000efe5
600019f8:	.word	0x0000fc6d

600019fc <__init_array_end>:
600019fc:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	lsls	r0, r0, #25
      3a:	.short	0x2002
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	cmp	r4, #244	; 0xf4
      42:	movs	r1, r0

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	.word	0x4010e8bd
      64:	bx	r3
      66:	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	.word	0x00000000
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsls	r4, r0, #25
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2002
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	cmp	r4, #244	; 0xf4
  ADC2_CFG = mode1;
      72:	movs	r1, r0
  
  if(num >= 4){
      74:	.word	0x20020640
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      78:	movs	r0, r0
	...

0000007c <AudioSynthPlaits::~AudioSynthPlaits()>:
class AudioSynthPlaits: public AudioStream
{
public:
        AudioSynthPlaits(): AudioStream(0, NULL)
        { initPlaits();	}
        ~AudioSynthPlaits() { }
      7c:	.word	0xbf004770

00000080 <OnNoteOn(unsigned char, unsigned char, unsigned char)>:
AudioControlSGTL5000     sgtl5000_1;

IntervalTimer			myTimer;

// Handles note on events
void OnNoteOn(byte channel, byte note, byte velocity){
      80:	bx	lr
      82:	.short	0xbf00

00000084 <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
      84:	push	{r4, lr}
      86:	.short	0x4604
		end();
      88:	bl	112e8 <IntervalTimer::end()>
	}
      8c:	.word	0xbd104620

00000090 <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
      90:	push	{r4, lr}
      92:	.short	0x4604
		disconnect();
      94:	bl	118cc <AudioConnection::disconnect()>
	}
      98:	mov	r0, r4
      9a:	.short	0xbd10

0000009c <makeSomeNoise()>:
    // If the velocity is larger than zero, means that is turning on

}

void makeSomeNoise()
{
      9c:	push	{r3, lr}
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
      9e:	movs	r1, #11
      a0:	.word	0xf0104803
      a4:			; <UNDEFINED> instruction: 0xfa834803
  Serial.println("Still alive");
}
      a8:	ldmia.w	sp!, {r3, lr}
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
      ac:	b.w	11640 <Print::println()>
      b0:	movs	r4, r1
      b2:	movs	r0, #0
      b4:	stc2	0, cr2, [r0, #4]!

000000b8 <setup>:

//************SETUP**************
void setup() {
      b8:	.word	0x2105b510
  // Open serial communications and wait for port to open:
  Serial.begin(19200);

  // Configure the DACs
  AudioMemory(5);
      bc:	ldr	r0, [pc, #24]	; (d8 <setup+0x20>)
      be:	.short	0xf012
      c0:	cdp2	12, 1, cr4, cr3, cr6, {0}
		// type: 0x80  NoteOff
                usb_midi_handleNoteOff = fptr;
        }
        void setHandleNoteOn(void (*fptr)(uint8_t channel, uint8_t note, uint8_t velocity)) {
		// type: 0x90  NoteOn
                usb_midi_handleNoteOn = fptr;
      c4:	.word	0x4a074b06
      c8:	str	r4, [r3, #0]
	bool begin(void (*funct)(), unsigned int microseconds) {
		if (microseconds == 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (24000000 / 1000000) * microseconds - 1;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
      ca:	ldr	r1, [pc, #28]	; (e8 <setup+0x30>)
      cc:	.word	0xe8bd4807

  usbMIDI.setHandleNoteOn(OnNoteOn);
  myTimer.begin(makeSomeNoise, 10000);
}
      d0:	ands	r0, r2
      d2:	b.w	11228 <IntervalTimer::beginCycles(void (*)(), unsigned long)>
      d6:	nop
      d8:	movs	r0, r0
      da:	movs	r0, #32
      dc:	lsls	r1, r0, #2
      de:	movs	r0, r0
      e0:	ldrsh	r0, [r3, r4]
      e2:	movs	r0, #2
      e4:	.word	0x0003a97f
      e8:	lsls	r5, r3, #2
      ea:	movs	r0, r0
      ec:	.word	0x2001f964

000000f0 <loop>:
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
      f0:	movs	r0, #0
      f2:	.short	0xf010
      f4:	bkpt	0x007d

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
      f6:	.short	0xbf00

000000f8 <_GLOBAL__sub_I_synthPlaits>:
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
      f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
      fc:	.word	0x23004f86
     100:	ldr	r5, [pc, #536]	; (31c <_GLOBAL__sub_I_synthPlaits+0x224>)
     102:	.short	0xb084
     104:	ldr.w	r8, [pc, #656]	; 398 <_GLOBAL__sub_I_synthPlaits+0x2a0>
     108:	.word	0x726b683a
     10c:	str.w	r8, [r5]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     110:	.word	0x722b612b
     114:	str	r3, [r5, #12]
     116:	.short	0xb90a
     118:	b.n	30a <_GLOBAL__sub_I_synthPlaits+0x212>
     11a:	.short	0x461a
     11c:	ldr	r3, [r2, #20]
     11e:	.short	0x2b00
     120:	bne.n	11a <_GLOBAL__sub_I_synthPlaits+0x22>
     122:	.short	0x6155
     124:	ldr	r0, [pc, #504]	; (320 <_GLOBAL__sub_I_synthPlaits+0x228>)
     126:	.short	0xf04f
     128:	lsrs	r0, r0, #4

	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
     12a:	.short	0x4c7e
     12c:	mov.w	r3, #16384	; 0x4000
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
     130:	.word	0x46694a7d
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     134:	str	r0, [r5, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
     136:	.short	0x66ac
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     138:	ldr	r0, [pc, #496]	; (32c <_GLOBAL__sub_I_synthPlaits+0x234>)
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     13a:	.short	0x4c7d
     13c:	str.w	r2, [r5, #432]	; 0x1b0
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;
     140:	.word	0xf8c54a7c
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     144:	lsls	r0, r5, #9
     146:	.short	0xf8c5
     148:	bics	r0, r7
     14a:	ldr	r0, [pc, #492]	; (338 <_GLOBAL__sub_I_synthPlaits+0x240>)
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     14c:	.word	0xf8c54c7b
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     150:	movs	r3, #240	; 0xf0
     152:	.short	0x4a7b
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     154:	str.w	r0, [r5, #1140]	; 0x474
     158:	str.w	r4, [r5, #1468]	; 0x5bc
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     15c:	.word	0x4c7a4879
	port->PINCFG = 0;
     160:	str.w	r2, [r5, #1792]	; 0x700
     164:	.word	0xf8c54a79

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
     168:	lsls	r0, r0, #30
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     16a:	str.w	r4, [r5, #2144]	; 0x860
     16e:	ldr	r0, [pc, #480]	; (350 <_GLOBAL__sub_I_synthPlaits+0x258>)
     170:	ldr	r4, [pc, #480]	; (354 <_GLOBAL__sub_I_synthPlaits+0x25c>)
	NVIC_ENABLE_IRQ(hardware->irq);
     172:	.short	0xf8c5
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     174:	cmp	r1, #132	; 0x84
	NVIC_ENABLE_IRQ(hardware->irq);
     176:	.short	0x4a78
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
     178:	str.w	r0, [r5, #2964]	; 0xb94
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
     17c:	str.w	r4, [r5, #3296]	; 0xce0
     180:	.word	0x4c774876
     184:	str.w	r2, [r5, #3824]	; 0xef0
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
     188:	.word	0xf8c54a76
     18c:	lsrs	r4, r2, #30
     18e:	.short	0xf8c5
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
     190:	ldr	r7, [pc, #928]	; (534 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x144>)
     192:	.short	0x4875
     194:	ldr	r4, [pc, #468]	; (36c <_GLOBAL__sub_I_synthPlaits+0x274>)
     196:	.short	0xf8c5
     198:	str	r0, [sp, #80]	; 0x50
     19a:	.short	0xf8a5
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
     19c:	str	r0, [sp, #16]
     19e:	.short	0x4626
     1a0:	strh.w	r9, [r5, #6]
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
     1a4:	.word	0x900af885
     1a8:	str	r3, [sp, #12]
     1aa:	.short	0x9302
     1ac:	str	r2, [sp, #4]
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     1ae:	.short	0x9200
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1b0:	bl	3f0 <plaits::Voice::Init(stmlib::BufferAllocator*)>
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     1b4:	.word	0x496f4a6e
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     1b8:	ldr	r0, [pc, #352]	; (31c <_GLOBAL__sub_I_synthPlaits+0x224>)
     1ba:	.short	0xf012
     1bc:	strh.w	pc, [r5, #260]	; 0x104
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1c0:	.word	0xf04f0028
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1c4:	lsrs	r4, r0, #24
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1c6:	mov	r3, r9
     1c8:	mov	r1, r9
     1ca:	.short	0xf8c4
     1cc:	strh	r0, [r0, #0]
     1ce:	.short	0x4602
     1d0:	strb.w	r9, [r4, #8]

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1d4:	.word	0x900cf8c4
     1d8:	strb.w	lr, [r4, #9]

	// write out computed CTRL
	port->CTRL = ctrl;
     1dc:	.word	0xe0006120

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1e0:	ldr	r2, [r6, #16]
     1e2:	.short	0xf842
     1e4:	asrs	r3, r4, #32
     1e6:	.short	0x3301

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1e8:	ldrb	r2, [r4, #9]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1ea:	.short	0x4860
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1ec:	cmp	r2, r3
     1ee:	.short	0xdcf7
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1f0:	ldr	r2, [r7, #0]
     1f2:	ldr	r3, [pc, #292]	; (318 <_GLOBAL__sub_I_synthPlaits+0x220>)
     1f4:	.word	0xe08ab90a
	port->STAT = c;

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1f8:	mov	r2, r3
     1fa:	ldr	r3, [r2, #20]
     1fc:	cmp	r3, #0
     1fe:	.short	0xd1fb
     200:	str	r4, [r2, #20]
     202:	.short	0x2000

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     204:	ldr	r6, [pc, #368]	; (378 <_GLOBAL__sub_I_synthPlaits+0x280>)
     206:	.short	0xf04f
     208:	lsrs	r2, r0, #8
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     20a:	.short	0xf8df
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     20c:	str	r1, [sp, #576]	; 0x240
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     20e:	.short	0xf106
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     210:	lsrs	r0, r3, #16
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     212:	mov	r3, r0
     214:	.word	0x46016160
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     218:	strh	r0, [r4, #4]
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     21a:	.short	0x4662
     21c:	strh	r0, [r4, #6]
     21e:	.short	0x46b6
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     220:	strb	r0, [r4, #10]
     222:	.short	0x7230
     224:	str	r0, [r6, #12]
     226:	.short	0xf44f
     228:	adds	r0, #128	; 0x80
     22a:	str.w	r8, [r6]
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     22e:	strb.w	sl, [r6, #9]
     232:	.short	0xf8c6
     234:	stmia	r0!, {r4}
     236:	str.w	r9, [r4]
     23a:	str	r0, [r4, #24]
     23c:	.word	0x622061e0
     240:	str	r0, [r4, #36]	; 0x24
     242:	.short	0xe001
     244:	ldr.w	r2, [lr, #16]
     248:	.word	0x1023f842
     24c:	adds	r3, #1
     24e:	.short	0x7a72
     250:	ldr	r0, [pc, #292]	; (378 <_GLOBAL__sub_I_synthPlaits+0x280>)
     252:	.short	0x429a
     254:	bgt.n	244 <_GLOBAL__sub_I_synthPlaits+0x14c>
     256:	.short	0x683a
     258:	ldr	r3, [pc, #188]	; (318 <_GLOBAL__sub_I_synthPlaits+0x220>)
     25a:	.short	0xb90a
     25c:	b.n	312 <_GLOBAL__sub_I_synthPlaits+0x21a>
     25e:	.short	0x461a
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     260:	ldr	r3, [r2, #20]
     262:	.short	0x2b00
     264:	bne.n	25e <_GLOBAL__sub_I_synthPlaits+0x166>
				p->next_update = this;
     266:	.short	0x6156
			}
			next_update = NULL;
     268:	movs	r7, #0
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     26a:	.short	0xf8df
     26c:	str	r1, [sp, #208]	; 0xd0
#include "DMAChannel.h"

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
     26e:	.short	0x4b43
     270:	ldr	r0, [pc, #260]	; (378 <_GLOBAL__sub_I_synthPlaits+0x280>)
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     272:	.short	0x6177
			cpu_cycles = 0;
     274:	strh	r7, [r6, #4]
			cpu_cycles_max = 0;
     276:	.short	0x80f7
			numConnections = 0;
     278:	strb	r7, [r6, #10]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     27a:	.short	0xf8df
     27c:	strh	r0, [r5, #8]
     27e:	.short	0x6033
     280:	bl	eaf8 <AudioOutputI2S::begin()>
		{ isConnected = false;
		  connect(); }
     284:	.word	0xf8c94648
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     288:	str	r0, [r0, r0]
     28a:	.short	0xf8c9
     28c:	ands	r4, r0
     28e:	strb.w	r7, [r9, #8]
     292:	.short	0xf889
     294:	strb	r1, [r1, #0]
     296:	.short	0xf8c9
     298:	strb	r4, [r1, #0]
		{ isConnected = false;
     29a:	.short	0xf889
     29c:	strb	r0, [r2, #0]
		  connect(); }
     29e:	.short	0xf011
     2a0:			; <UNDEFINED> instruction: 0xfae14a33
#include "Audio.h"

AudioSynthPlaits         synthPlaits;
AudioMixer4              mix1;
AudioOutputI2S           i2s1;
AudioConnection          patchCord1(synthPlaits, 0, mix1, 0);
     2a4:	.word	0x49364648
     2a8:	bl	12308 <__aeabi_atexit>
     2ac:	.word	0x4d354640
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     2b0:	strb.w	r7, [r8, #8]
     2b4:	strb.w	r7, [r8, #9]
     2b8:	str.w	r7, [r8, #12]
		{ isConnected = false;
     2bc:	.word	0x7010f888
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     2c0:	stmia.w	r8, {r4, r6}
		{ isConnected = false;
		  connect(); }
     2c4:	.word	0xfacef011
AudioConnection          patchCord2(mix1, 0, i2s1, 0);
     2c8:	ldr	r2, [pc, #164]	; (370 <_GLOBAL__sub_I_synthPlaits+0x278>)
     2ca:	ldr	r1, [pc, #180]	; (380 <_GLOBAL__sub_I_synthPlaits+0x288>)
     2cc:	mov	r0, r8
     2ce:	.short	0xf012
     2d0:	ldrb.w	r2, [fp, <undefined>]
     2d4:	.word	0x722f4628
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     2d8:	strb	r3, [r5, #9]
     2da:	.short	0x60ef
		{ isConnected = false;
     2dc:	strb	r7, [r5, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     2de:	.short	0xe885
     2e0:	lsls	r0, r2, #1
		{ isConnected = false;
		  connect(); }
     2e2:	bl	11864 <AudioConnection::connect()>
AudioConnection          patchCord3(mix1, 0, i2s1, 1);
     2e6:	.short	0x4628
     2e8:	ldr	r2, [pc, #132]	; (370 <_GLOBAL__sub_I_synthPlaits+0x278>)
#include "AudioControl.h"

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
     2ea:	.short	0x240a
     2ec:	ldr	r1, [pc, #144]	; (380 <_GLOBAL__sub_I_synthPlaits+0x288>)
     2ee:	.short	0xf012
     2f0:	strb.w	r4, [fp, #-37]!
     2f4:	.word	0x4a1e4b25

AudioControlSGTL5000     sgtl5000_1;

IntervalTimer			myTimer;
     2f8:	ldr	r1, [pc, #148]	; (390 <_GLOBAL__sub_I_synthPlaits+0x298>)
     2fa:	ldr	r0, [pc, #152]	; (394 <_GLOBAL__sub_I_synthPlaits+0x29c>)
     2fc:	str	r5, [r3, #0]
     2fe:	strb	r4, [r3, #8]
     300:	bl	12308 <__aeabi_atexit>
}

//************LOOP**************
void loop() {
    usbMIDI.read();
}
     304:	add	sp, #16
     306:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     30a:	str	r5, [r7, #0]
     30c:	.word	0x6018e70a
     310:	b.n	202 <_GLOBAL__sub_I_synthPlaits+0x10a>
     312:	.short	0x6018
     314:	b.n	268 <_GLOBAL__sub_I_synthPlaits+0x170>
     316:	.short	0xbf00
     318:	str	r4, [r1, #16]
     31a:	movs	r0, #2
     31c:	lsls	r0, r0, #27
     31e:	.short	0x2002
     320:	movs	r0, r4
     322:	.short	0x2000
     324:	eors.w	r0, r0, #528384	; 0x81000
     328:	.word	0x2001f52c
     32c:			; <UNDEFINED> instruction: 0xf3382001
     330:	.word	0x2001f4cc
     334:			; <UNDEFINED> instruction: 0xf4a42001
     338:	.word	0x2001f264
     33c:	rsbs	r0, r4, #16777472	; 0x1000100
     340:	.word	0x2001f540
     344:			; <UNDEFINED> instruction: 0xf2382001
     348:	adds.w	r0, r8, #528384	; 0x81000
     34c:	.word	0x2001f1e8
     350:			; <UNDEFINED> instruction: 0xf4f02001
     354:			; <UNDEFINED> instruction: 0xf4b82001
     358:	.word	0x2001f224
     35c:			; <UNDEFINED> instruction: 0xf1fc2001
     360:	.word	0x2001f554
     364:	adds	r4, r7, r1
     366:	movs	r0, #2
     368:	.word	0x20020728
     36c:	lsls	r0, r1, #26
     36e:	.short	0x2002
     370:	vld4.8	{d18-d21}, [r0], r1
     374:	.word	0x0000007d
     378:	lsls	r0, r5, #25
     37a:	movs	r0, #2
     37c:	.word	0x2001f5a8
     380:	lsls	r1, r2, #2
     382:	.short	0x0000
     384:	ldr	r4, [r4, r2]
     386:	.short	0x2002
     388:			; <UNDEFINED> instruction: 0xf58c2001
     38c:	.word	0x2002065c
     390:	lsls	r5, r0, #2
     392:	movs	r0, r0
     394:	.word	0x2001f964
     398:	movs	r0, r1
     39a:	movs	r0, #0
     39c:	.word	0x2001f5b4
     3a0:	ldr	r4, [r7, r1]
     3a2:	.short	0x2002
     3a4:	ldr	r0, [r2, r2]
     3a6:	.short	0x2002

000003a8 <AudioSynthPlaits::update()>:

using namespace plaits;
using namespace stmlib;

void AudioSynthPlaits::update(void)
{
     3a8:	push	{r4, r5, r6, lr}
	audio_block_t *block;
	uint8_t sync_buffer[AUDIO_BLOCK_SAMPLES]; 

	memset(sync_buffer, 0, sizeof(sync_buffer));
     3aa:	movs	r6, #128	; 0x80

using namespace plaits;
using namespace stmlib;

void AudioSynthPlaits::update(void)
{
     3ac:	.word	0x4605b0a2
	audio_block_t *block;
	uint8_t sync_buffer[AUDIO_BLOCK_SAMPLES]; 

	memset(sync_buffer, 0, sizeof(sync_buffer));
     3b0:	movs	r1, #0
     3b2:	.short	0x4632
     3b4:	add	r0, sp, #8
     3b6:	bl	128fc <memset>
	block = allocate();
     3ba:	.short	0xf011
     3bc:	vst2.8	{d11[5],d12[5]}, [sp], r8
	if (block == NULL) return;
     3c0:	mov	r4, r0

	voice.Render(patch, modulations, (Voice::Frame*)(block->data), AUDIO_BLOCK_SAMPLES);
     3c2:	.short	0x1d03
     3c4:	add.w	r2, r5, #24
     3c8:	add.w	r1, r5, #64	; 0x40
     3cc:	.word	0x0068f105
     3d0:	str	r6, [sp, #0]
     3d2:	.short	0xf000
     3d4:	vld1.8	{d20-d22}, [r7 :128], r8
	transmit(block, 0);
     3d8:	.word	0x46212200
     3dc:	bl	117d4 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(block);
     3e0:	mov	r0, r4
	return;
}
     3e2:	.short	0xb022
     3e4:	ldmia.w	sp!, {r4, r5, r6, lr}
	block = allocate();
	if (block == NULL) return;

	voice.Render(patch, modulations, (Voice::Frame*)(block->data), AUDIO_BLOCK_SAMPLES);
	transmit(block, 0);
	release(block);
     3e8:	.word	0xb9caf011
	return;
}
     3ec:	add	sp, #136	; 0x88
     3ee:	.short	0xbd70

000003f0 <plaits::Voice::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void Voice::Init(BufferAllocator* allocator) {
     3f0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3f4:	.word	0xf2414605
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     3f8:	lsls	r0, r2, #29
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     3fa:	.short	0x2000
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     3fc:	movw	r2, #4176	; 0x1050
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     400:	.word	0x668cf605
     404:	mov	r4, r1
  engines_.Init();
  engines_.RegisterInstance(&virtual_analog_engine_, false, 0.8f, 0.8f);
     406:	addw	r3, r5, #3720	; 0xe88
     40a:	.short	0x499e
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     40c:	add	r2, r5
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     40e:	.short	0xf505
     410:	ldr	r3, [r6, #20]
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     412:	.short	0x51eb
  engines_.RegisterInstance(&waveshaping_engine_, false, 0.7f, 0.6f);
     414:	addw	sl, r5, #3884	; 0xf2c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     418:	.word	0x0e94f885
    s->out_gain = out_gain;
     41c:	vmov.f32	s15, #136	; 0xc0400000 -3.0
    s->aux_gain = aux_gain;
     420:	str	r1, [r6, #4]
     422:	mov.w	ip, #1065353216	; 0x3f800000
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     426:	.short	0x6031
     428:	mov.w	fp, #3221225472	; 0xc0000000
    s->aux_gain = aux_gain;
     42c:	.word	0xf2414e96
     430:	lsrs	r0, r2, #2
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     432:	.short	0xf8df
     434:	b.n	8f0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x24c>
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     436:	.short	0xf8c2
     438:	add	r0, pc, #16	; (adr r0, 44c <plaits::Voice::Init(stmlib::BufferAllocator*)+0x5c>)
  engines_.RegisterInstance(&fm_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&grain_engine_, false, 0.7f, 0.6f);
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
     43a:	.short	0xf505
     43c:	ldr	r0, [r7, #36]	; 0x24
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     43e:	strb.w	r0, [r5, #3896]	; 0xf38
     442:	.short	0x44a8
    s->out_gain = out_gain;
     444:	str.w	lr, [r9]
    s->aux_gain = aux_gain;
     448:	.word	0x6004f8c9

void Voice::Init(BufferAllocator* allocator) {
  engines_.Init();
  engines_.RegisterInstance(&virtual_analog_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&waveshaping_engine_, false, 0.7f, 0.6f);
  engines_.RegisterInstance(&fm_engine_, false, 0.6f, 0.6f);
     44c:	add.w	r9, r5, #848	; 0x350
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     450:	.word	0xf8c24f8e
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     454:	str	r0, [sp, #32]
  engines_.RegisterInstance(&grain_engine_, false, 0.7f, 0.6f);
     456:	.short	0xf505
     458:	ldrb	r2, [r4, #5]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     45a:	strb.w	r0, [r5, #860]	; 0x35c
    s->out_gain = out_gain;
     45e:	.short	0xf8c5
     460:	str	r4, [r2, #52]	; 0x34
    s->aux_gain = aux_gain;
     462:	.short	0xf8c5
     464:	str	r0, [r3, #52]	; 0x34
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     466:	.short	0xf8c2
     468:	str	r0, [sp, #48]	; 0x30
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&chord_engine_, false, 0.8f, 0.8f);
     46a:	add.w	r9, r5, #512	; 0x200
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     46e:	.short	0xf8c5
     470:	b.n	b8c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4e8>
     472:	addw	lr, r5, #3972	; 0xf84
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     476:	.short	0xf885
     478:	lsls	r4, r2, #14
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
     47a:	.short	0xf8c5
     47c:	str	r0, [r2, #56]	; 0x38
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     47e:	.short	0x6115
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     480:	strb	r0, [r5, #12]
    s->out_gain = out_gain;
     482:	.short	0x6069
    s->aux_gain = aux_gain;
     484:	str	r1, [r5, #8]
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     486:	str.w	sl, [r2, #20]
  engines_.RegisterInstance(&speech_engine_, false, -0.7f, 0.8f);

  engines_.RegisterInstance(&swarm_engine_, false, -3.0f, 1.0f);
  engines_.RegisterInstance(&noise_engine_, false, -1.0f, -1.0f);
     48a:	.short	0xf505
     48c:	ldr	r3, [r2, #44]	; 0x2c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     48e:	.short	0xf885
     490:	lsrs	r4, r1, #30
    s->out_gain = out_gain;
     492:	.short	0xf8ce
     494:	str	r0, [r0, #0]
    s->aux_gain = aux_gain;
     496:	str.w	r6, [lr, #4]
  engines_.RegisterInstance(&fm_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&grain_engine_, false, 0.7f, 0.6f);
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&chord_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&speech_engine_, false, -0.7f, 0.8f);
     49a:	.short	0xf605
     49c:	subs	r4, r3, #0
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     49e:	.short	0xf8c2
     4a0:	str	r0, [sp, #96]	; 0x60
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     4a2:	add.w	r6, r5, #2336	; 0x920
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     4a6:	.short	0xf885
     4a8:	lsls	r4, r1, #8

  engines_.RegisterInstance(&swarm_engine_, false, -3.0f, 1.0f);
  engines_.RegisterInstance(&noise_engine_, false, -1.0f, -1.0f);
  engines_.RegisterInstance(&particle_engine_, false, -2.0f, 1.0f);
     4aa:	.short	0xf505
     4ac:	ldr	r3, [r4, #28]
    s->out_gain = out_gain;
     4ae:	.short	0xf8c5
     4b0:	asrs	r4, r0, #8
    s->aux_gain = aux_gain;
     4b2:	str.w	r1, [r5, #520]	; 0x208
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     4b6:	.short	0xf8c2
     4b8:	b.n	4f4 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x104>
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     4ba:	.short	0xf8df
     4bc:	b.n	870 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x1cc>
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     4be:	strb.w	r0, [r5, #2344]	; 0x928
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
     4c2:	str	r1, [r6, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     4c4:	str.w	lr, [r6]
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&chord_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&speech_engine_, false, -0.7f, 0.8f);

  engines_.RegisterInstance(&swarm_engine_, false, -3.0f, 1.0f);
     4c8:	.word	0x4e78f605
     4cc:	addw	r6, r5, #3196	; 0xc7c
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     4d0:	.word	0xe020f8c2
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     4d4:	addw	lr, r5, #1692	; 0x69c
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     4d8:	strb.w	r0, [r5, #3204]	; 0xc84
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
     4dc:	str.w	ip, [r6, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     4e0:	.word	0x7a00edc6
    s->aux_gain = aux_gain;
    ++num_engines_;
     4e4:	mov	r6, r0
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     4e6:	.short	0xf8c2
     4e8:	add	r0, pc, #144	; (adr r0, 57c <plaits::Voice::Init(stmlib::BufferAllocator*)+0x18c>)
  engines_.RegisterInstance(&noise_engine_, false, -1.0f, -1.0f);
  engines_.RegisterInstance(&particle_engine_, false, -2.0f, 1.0f);
  engines_.RegisterInstance(&string_engine_, true, -1.0f, 0.8f);
     4ea:	.short	0xf605
     4ec:	subs	r2, #44	; 0x2c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     4ee:	.short	0xf885
     4f0:	lsls	r4, r4, #26
    s->out_gain = out_gain;
     4f2:	.short	0xf8ce
     4f4:	strb	r0, [r0, #0]
    s->aux_gain = aux_gain;
     4f6:	str.w	r7, [lr, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     4fa:	addw	lr, r5, #1820	; 0x71c
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     4fe:	.short	0xf8c2
     500:	str	r0, [sp, #160]	; 0xa0
  engines_.RegisterInstance(&modal_engine_, true, -1.0f, 0.8f);
     502:	.short	0xf205
     504:	ldr	r4, [r2, r5]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     506:	.short	0xf885
     508:	lsls	r4, r4, #28
     50a:	.short	0x2001
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
     50c:	str.w	ip, [lr, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     510:	.word	0x6c33f505
     514:	str.w	fp, [lr]
     518:	.word	0x6eabf505
  engines_.RegisterInstance(&bass_drum_engine_, true, 0.8f, 0.8f);
     51c:	add.w	fp, r5, #328	; 0x148
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     520:	.word	0xa02cf8c2
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     524:	strb.w	r0, [r5, #2872]	; 0xb38
  engines_.RegisterInstance(&snare_drum_engine_, true, 0.8f, 0.8f);
     528:	add.w	sl, r5, #2040	; 0x7f8
    s->out_gain = out_gain;
     52c:	str.w	r7, [ip]
    s->aux_gain = aux_gain;
     530:	str.w	r1, [ip, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     534:	addw	ip, r5, #2044	; 0x7fc
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     538:	str.w	r9, [r2, #48]	; 0x30
  engines_.RegisterInstance(&hi_hat_engine_, true, 0.8f, 0.8f);
     53c:	addw	r9, r5, #1036	; 0x40c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     540:	strb.w	r0, [r5, #1376]	; 0x560
    s->out_gain = out_gain;
     544:	str.w	r7, [lr]
     548:	mov	r7, r2
    s->aux_gain = aux_gain;
     54a:	str.w	r1, [lr, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
     54e:	add.w	lr, r5, #1040	; 0x410
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     552:	str.w	fp, [r2, #52]	; 0x34
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    ++num_engines_;
     556:	mov.w	fp, #16
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     55a:	strb.w	r0, [r5, #340]	; 0x154
    s->out_gain = out_gain;
     55e:	str.w	r1, [r5, #332]	; 0x14c
    s->aux_gain = aux_gain;
     562:	str.w	r1, [r5, #336]	; 0x150
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     566:	str.w	sl, [r2, #56]	; 0x38
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     56a:	strb.w	r0, [r5, #2052]	; 0x804
    s->out_gain = out_gain;
     56e:	str.w	r1, [ip]
    s->aux_gain = aux_gain;
     572:	str.w	r1, [ip, #4]
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
     576:	str.w	r9, [r2, #60]	; 0x3c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
     57a:	strb.w	r0, [r5, #1048]	; 0x418
    s->out_gain = out_gain;
     57e:	str.w	r1, [lr]
    s->aux_gain = aux_gain;
     582:	str.w	r1, [lr, #4]
    ++num_engines_;
     586:	str.w	fp, [r2, #64]	; 0x40
     58a:	b.n	590 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x1a0>
     58c:	ldr.w	r3, [r7, #4]!
      return NULL;
    }
  }
  
  inline void Free() {
    next_ = buffer_;
     590:	ldr	r2, [r4, #4]
  for (int i = 0; i < engines_.size(); ++i) {
    // All engines will share the same RAM space.
    allocator->Free();
    engines_.get(i)->Init(allocator);
     592:	mov	r0, r3
     594:	ldr	r3, [r3, #0]
     596:	mov	r1, r4
     598:	str	r2, [r4, #0]
  engines_.RegisterInstance(&string_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&modal_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&bass_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&snare_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&hi_hat_engine_, true, 0.8f, 0.8f);
  for (int i = 0; i < engines_.size(); ++i) {
     59a:	adds	r6, #1
    free_ = size_;
     59c:	ldr	r2, [r4, #12]
    // All engines will share the same RAM space.
    allocator->Free();
    engines_.get(i)->Init(allocator);
     59e:	ldr	r3, [r3, #0]
     5a0:	str	r2, [r4, #8]
     5a2:	blx	r3
  engines_.RegisterInstance(&string_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&modal_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&bass_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&snare_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&hi_hat_engine_, true, 0.8f, 0.8f);
  for (int i = 0; i < engines_.size(); ++i) {
     5a4:	ldr.w	r3, [r8]
     5a8:	cmp	r6, r3
     5aa:	blt.n	58c <plaits::Voice::Init(stmlib::BufferAllocator*)+0x19c>
    allocator->Free();
    engines_.get(i)->Init(allocator);
  }
  
  engine_quantizer_.Init();
  previous_engine_index_ = -1;
     5ac:	mov.w	r9, #4294967295
 public:
  LowPassGate() { }
  ~LowPassGate() { }
  
  void Init() {
    previous_gain_ = 0.0f;
     5b0:	movw	r4, #4124	; 0x101c
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
     5b4:	movw	ip, #4144	; 0x1030
     5b8:	movw	r6, #4140	; 0x102c
     5bc:	str.w	r9, [r5, #4040]	; 0xfc8
  engine_cv_ = 0.0f;
     5c0:	movs	r2, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
     5c2:	add.w	r1, r5, #4128	; 0x1020
 public:
  HysteresisQuantizer() { }
  ~HysteresisQuantizer() { }

  void Init() {
    quantized_value_ = 0;
     5c6:	mov.w	lr, #0
     5ca:	add	r4, r5
     5cc:	addw	r0, r5, #4044	; 0xfcc
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
     5d0:	add	ip, r5
     5d2:	add	r6, r5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
     5d4:	ldr.w	fp, [pc, #192]	; 698 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2a8>
 public:
  Limiter() { }
  ~Limiter() { }

  void Init() {
    peak_ = 0.5f;
     5d8:	movw	r8, #4120	; 0x1018
    r_ = 1.0f / resonance;
     5dc:	ldr.w	sl, [pc, #188]	; 69c <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2ac>
     5e0:	movw	r7, #4152	; 0x1038
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
     5e4:	ldr.w	r9, [pc, #184]	; 6a0 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2b0>

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
     5e8:	movw	r3, #4156	; 0x103c
     5ec:	str.w	lr, [r5, #4036]	; 0xfc4
     5f0:	add	r8, r5
     5f2:	str	r2, [r0, #0]
     5f4:	add	r3, r5
     5f6:	str	r2, [r4, #0]
     5f8:	add	r7, r5
    r_ = 1.0f / resonance;
     5fa:	str.w	sl, [r1, #4]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
     5fe:	movw	r0, #4172	; 0x104c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
     602:	str.w	fp, [r1]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
     606:	movw	r4, #4168	; 0x1048
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
     60a:	str.w	r9, [r1, #8]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
     60e:	movw	r1, #4112	; 0x1010
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
     612:	str.w	r2, [ip]
     616:	add	r0, r5
     618:	str	r2, [r6, #0]
     61a:	mov.w	r6, #1056964608	; 0x3f000000
     61e:	add	r4, r5
     620:	add	r1, r5
     622:	str.w	r6, [r8]
     626:	movw	ip, #4148	; 0x1034
     62a:	str	r2, [r7, #0]
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    gain_ = 1.0f;
     62c:	mov.w	r8, #1065353216	; 0x3f800000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
     630:	str.w	fp, [r3]
     634:	add	ip, r5
    r_ = 1.0f / resonance;
     636:	str.w	sl, [r3, #4]
 public:
  DecayEnvelope() { }
  ~DecayEnvelope() { }
  
  inline void Init() {
    value_ = 0.0f;
     63a:	addw	r7, r5, #4056	; 0xfd8
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
     63e:	str.w	r9, [r3, #8]
  lpg_envelope_.Init();
  
  trigger_state_ = false;
  previous_note_ = 0.0f;
  
  trigger_delay_.Init(trigger_delay_line_);
     642:	add.w	r3, r5, #4080	; 0xff0
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
     646:	str	r2, [r0, #0]
 public:
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
     648:	addw	r0, r5, #4060	; 0xfdc
     64c:	str	r2, [r4, #0]
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
     64e:	cmp	r1, r3

  decay_envelope_.Init();
  lpg_envelope_.Init();
  
  trigger_state_ = false;
  previous_note_ = 0.0f;
     650:	add.w	r4, r5, #4048	; 0xfd0
     654:	str.w	r6, [ip]
 public:
  DecayEnvelope() { }
  ~DecayEnvelope() { }
  
  inline void Init() {
    value_ = 0.0f;
     658:	str	r2, [r7, #0]
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    gain_ = 1.0f;
    frequency_ = 0.5f;
     65a:	str	r6, [r0, #8]
 public:
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
     65c:	str	r2, [r0, #0]
    gain_ = 1.0f;
    frequency_ = 0.5f;
    hf_bleed_ = 0.0f;
     65e:	str	r2, [r0, #12]
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    gain_ = 1.0f;
     660:	str.w	r8, [r0, #4]
  aux_post_processor_.Init();

  decay_envelope_.Init();
  lpg_envelope_.Init();
  
  trigger_state_ = false;
     664:	strb.w	lr, [r5, #4052]	; 0xfd4
  previous_note_ = 0.0f;
     668:	str	r2, [r4, #0]
     66a:	str	r3, [r1, #4]
     66c:	beq.n	676 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x286>
	*__first = __tmp;
     66e:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
     672:	cmp	r1, r3
     674:	bne.n	66e <plaits::Voice::Init(stmlib::BufferAllocator*)+0x27e>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
     676:	movw	r3, #4112	; 0x1010
     67a:	movs	r2, #0
     67c:	str	r2, [r5, r3]
  
  trigger_delay_.Init(trigger_delay_line_);
}
     67e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     682:	nop
     684:	.word	0x3f4ccccd
     688:	.word	0x3f19999a
     68c:	.word	0xbf800000
     690:	.word	0x3f333333
     694:	.word	0xbf333333
     698:	.word	0x3d00ba22
     69c:	.word	0x3c23d70a
     6a0:	.word	0x3f7faaca

000006a4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)>:
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
     6a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6a8:	movw	r5, #4112	; 0x1010

void Voice::Render(
    const Patch& patch,
    const Modulations& modulations,
    Frame* frames,
    size_t size) {
     6ac:	mov	r7, r0
     6ae:	mov	r9, r1
  // Trigger, LPG, internal envelope.
      
  // Delay trigger by 1ms to deal with sequencers or MIDI interfaces whose
  // CV out lags behind the GATE out.
  trigger_delay_.Write(modulations.trigger);
     6b0:	ldr.w	lr, [r2, #24]
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
     6b4:	ldr	r0, [r0, r5]
     6b6:	mov	r4, r5

void Voice::Render(
    const Patch& patch,
    const Modulations& modulations,
    Frame* frames,
    size_t size) {
     6b8:	mov	r8, r2
  // Delay trigger by 1ms to deal with sequencers or MIDI interfaces whose
  // CV out lags behind the GATE out.
  trigger_delay_.Write(modulations.trigger);
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
     6ba:	ldrb.w	fp, [r7, #4052]	; 0xfd4
     6be:	add	r4, r7
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
     6c0:	adds	r1, r0, #7
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
     6c2:	vldr	s13, [pc, #304]	; 7f4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x150>
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
     6c6:	ldr	r2, [r4, #4]
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
     6c8:	and.w	r1, r1, #7

void Voice::Render(
    const Patch& patch,
    const Modulations& modulations,
    Frame* frames,
    size_t size) {
     6cc:	mov	r4, r3
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
     6ce:	add.w	r0, r2, r0, lsl #2
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
     6d2:	adds	r3, r1, #5
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
     6d4:	adds	r6, r1, #6
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
     6d6:	and.w	r3, r3, #7
     6da:	vpush	{d8-d9}
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
     6de:	str.w	lr, [r0]
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
     6e2:	and.w	r0, r6, #7
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
     6e6:	add.w	r3, r2, r3, lsl #2
     6ea:	sub	sp, #52	; 0x34
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
     6ec:	add.w	r2, r2, r0, lsl #2
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
     6f0:	str	r1, [r7, r5]
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
     6f2:	vldr	s15, [r3]
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
     6f6:	vldr	s14, [r2]
     6fa:	vsub.f32	s14, s14, s15
     6fe:	vfma.f32	s15, s14, s13
  // CV out lags behind the GATE out.
  trigger_delay_.Write(modulations.trigger);
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
  if (!previous_trigger_state) {
     702:	cmp.w	fp, #0
     706:	bne.w	ca2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x5fe>
    if (trigger_value > 0.3f) {
     70a:	vldr	s14, [pc, #248]	; 804 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x160>
     70e:	vcmpe.f32	s15, s14
     712:	vmrs	APSR_nzcv, fpscr
     716:	bgt.w	cc8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x624>
     71a:	addw	r6, r7, #4056	; 0xfd8
     71e:	addw	r3, r7, #4044	; 0xfcc
  } else {
    if (trigger_value < 0.1f) {
      trigger_state_ = false;
    }
  }
  if (!modulations.trigger_patched) {
     722:	ldrb.w	r1, [r8, #35]	; 0x23
     726:	cmp	r1, #0
     728:	beq.w	c98 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x5f4>
     72c:	vldr	s12, [r3]
     730:	movw	r3, #4240	; 0x1090
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
     734:	vldr	s15, [r9, #28]
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
     738:	vmov.f32	s14, #208	; 0xbe800000 -0.250
     73c:	ldr	r2, [r7, r3]
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
     73e:	vcvt.f32.s32	s15, s15
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
     742:	ldr.w	r3, [r7, #4036]	; 0xfc4
     746:	vmov.f32	s10, #80	; 0x3e800000  0.250
  inline int Process(float value, int num_steps, float hysteresis) {
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
     74a:	subs	r5, r2, #1
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
     74c:	vmov.f32	s11, #96	; 0x3f000000  0.5
  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
     750:	vmov	s13, r3
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
     754:	vmov	s9, r5
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
     758:	vcvt.f32.s32	s13, s13
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
     75c:	vcvt.f32.s32	s9, s9
     760:	vfma.f32	s15, s9, s12
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
     764:	vcmpe.f32	s15, s13
     768:	vmrs	APSR_nzcv, fpscr
     76c:	it	le
     76e:	vmovle.f32	s14, s10
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
     772:	vadd.f32	s15, s15, s14
     776:	vadd.f32	s15, s15, s11
     77a:	vcvt.s32.f32	s15, s15
     77e:	vmov	r3, s15
    CONSTRAIN(q, 0, num_steps - 1);
     782:	cmp	r3, #0
     784:	blt.w	d38 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x694>
     788:	cmp	r2, r3
     78a:	it	gt
     78c:	movgt	r5, r3
  void Init() {
    num_engines_ = 0;
  }

  inline Engine* get(int index) {
    return engine_[index];
     78e:	movw	r2, #4176	; 0x1050
      engines_.size(),
      0.25f);
  
  Engine* e = engines_.get(engine_index);
  
  if (engine_index != previous_engine_index_) {
     792:	ldr.w	r3, [r7, #4040]	; 0xfc8
    quantized_value_ = q;
     796:	str.w	r5, [r7, #4036]	; 0xfc4
     79a:	add	r2, r7
     79c:	cmp	r3, r5
     79e:	ldr.w	sl, [r2, r5, lsl #2]
     7a2:	beq.n	7c2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x11e>
    e->Reset();
     7a4:	ldr.w	r3, [sl]
     7a8:	mov	r0, sl
     7aa:	ldr	r3, [r3, #4]
     7ac:	blx	r3
     7ae:	movw	r3, #4120	; 0x1018
     7b2:	mov.w	r2, #1056964608	; 0x3f000000
     7b6:	ldrb.w	r1, [r8, #35]	; 0x23
     7ba:	add	r3, r7
     7bc:	str	r2, [r3, #0]
    out_post_processor_.Reset();
    previous_engine_index_ = engine_index;
     7be:	str.w	r5, [r7, #4040]	; 0xfc8
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
     7c2:	ldrb.w	r3, [r7, #4052]	; 0xfd4
     7c6:	cmp	r3, fp
     7c8:	bls.n	808 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x164>
  float note = (modulations.note + previous_note_) * 0.5f;
     7ca:	add.w	r3, r7, #4048	; 0xfd0
     7ce:	vldr	s13, [r8, #4]
     7d2:	vmov.f32	s15, #96	; 0x3f000000  0.5
     7d6:	vldr	s9, [r3]
  previous_note_ = modulations.note;
     7da:	vstr	s13, [r3]
    previous_engine_index_ = engine_index;
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
  float note = (modulations.note + previous_note_) * 0.5f;
     7de:	vadd.f32	s13, s13, s9
     7e2:	vmul.f32	s9, s13, s15
  previous_note_ = modulations.note;
  const PostProcessingSettings& pp_s = e->post_processing_settings;

  if (modulations.trigger_patched) {
     7e6:	cbz	r1, 82a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x186>
    p.trigger = rising_edge ? TRIGGER_RISING_EDGE : TRIGGER_LOW;
     7e8:	movs	r3, #1
     7ea:	strb.w	r3, [sp, #24]
     7ee:	movs	r2, #1
     7f0:	b.n	832 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x18e>
     7f2:	nop
     7f4:	.word	0x00000000
     7f8:	.word	0xc2c00000
     7fc:	.word	0x43000000
     800:	.word	0x3fa66666
     804:	.word	0x3e99999a
    previous_engine_index_ = engine_index;
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
  float note = (modulations.note + previous_note_) * 0.5f;
     808:	add.w	r3, r7, #4048	; 0xfd0
     80c:	vldr	s14, [r8, #4]
     810:	vmov.f32	s15, #96	; 0x3f000000  0.5
     814:	vldr	s9, [r3]
  previous_note_ = modulations.note;
     818:	vstr	s14, [r3]
    previous_engine_index_ = engine_index;
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
  float note = (modulations.note + previous_note_) * 0.5f;
     81c:	vadd.f32	s14, s14, s9
     820:	vmul.f32	s9, s14, s15
  previous_note_ = modulations.note;
  const PostProcessingSettings& pp_s = e->post_processing_settings;

  if (modulations.trigger_patched) {
     824:	cmp	r1, #0
     826:	bne.w	1008 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x964>
    p.trigger = rising_edge ? TRIGGER_RISING_EDGE : TRIGGER_LOW;
  } else {
    p.trigger = TRIGGER_UNPATCHED;
     82a:	movs	r3, #2
     82c:	movs	r2, #0
     82e:	strb.w	r3, [sp, #24]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
     832:	vldr	s10, [r9, #32]
  inline void Trigger() {
    value_ = 1.0f;
  }
  
  inline void Process(float decay) {
    value_ *= (1.0f - decay);
     836:	vmov.f32	s11, #112	; 0x3f800000  1.0
      SemitonesToRatio(-96.0f * patch.decay);

  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
     83a:	vldr	s14, [r8, #28]
     83e:	vmov.f32	s13, #0	; 0x40000000  2.0
     842:	vldr	s12, [pc, #-76]	; 7f8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x154>
     846:	vldr	s15, [pc, #-76]	; 7fc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x158>
     84a:	vldr	s8, [pc, #-76]	; 800 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x15c>
     84e:	vfma.f32	s15, s10, s12
     852:	vldr	s10, [pc, #-80]	; 804 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x160>
     856:	vabs.f32	s12, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
     85a:	ldr	r3, [pc, #816]	; (b8c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4e8>)
     85c:	vmul.f32	s14, s14, s8
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
     860:	ldr.w	fp, [pc, #844]	; bb0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x50c>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
     864:	vldr	s8, [pc, #808]	; b90 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4ec>
     868:	vadd.f32	s10, s12, s10
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
     86c:	vldr	s6, [pc, #804]	; b94 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f0>

  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
     870:	vldr	s5, [r8, #12]
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
     874:	vcvt.s32.f32	s12, s15
     878:	vldr	s7, [r6]
      SemitonesToRatio(-96.0f * patch.decay);

  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
     87c:	vdiv.f32	s17, s14, s10
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
     880:	vldr	s10, [pc, #788]	; b98 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f4>

  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
     884:	vldr	s14, [r9, #4]

  return lut_pitch_ratio_high[pitch_integral] * \
     888:	vmov	r1, s12
     88c:	add.w	r3, r3, r1, lsl #2
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
     890:	ldrb.w	r1, [r8, #36]	; 0x24
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
     894:	vcvt.f32.s32	s12, s12
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
     898:	vldr	s16, [r3]

  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
     89c:	vadd.f32	s14, s14, s5
     8a0:	vsub.f32	s15, s15, s12
     8a4:	vstr	s14, [sp, #40]	; 0x28
     8a8:	vcvt.s32.f32	s15, s15, #8
     8ac:	vmov	r3, s15
     8b0:	add.w	r3, fp, r3, lsl #2
     8b4:	vcmp.f32	s17, s8
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
     8b8:	vldr	s12, [r3]
     8bc:	vmrs	APSR_nzcv, fpscr
     8c0:	vmul.f32	s12, s12, s16
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
     8c4:	vcmpe.f32	s14, s8
     8c8:	it	mi
     8ca:	vmovmi.f32	s17, s8
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
     8ce:	cmp	r1, #0
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
     8d0:	vmul.f32	s16, s12, s6
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
     8d4:	ite	eq
     8d6:	vmoveq.f32	s12, s10
     8da:	vmovne.f32	s12, s17
     8de:	vneg.f32	s18, s16
     8e2:	vmov.f32	s10, s11
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
     8e6:	vmrs	APSR_nzcv, fpscr
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
     8ea:	vstr	s12, [sp, #44]	; 0x2c
     8ee:	vfma.f32	s10, s18, s13
     8f2:	vmul.f32	s10, s10, s7
     8f6:	vstr	s10, [r6]
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
     8fa:	bmi.w	cfa <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x656>
     8fe:	vcmpe.f32	s14, s11
     902:	vmrs	APSR_nzcv, fpscr
     906:	ble.w	1226 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb82>

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
     90a:	cmp	r5, #7
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
     90c:	vstr	s11, [sp, #40]	; 0x28

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
     910:	beq.w	120a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb66>
  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
     914:	vmov.f32	s13, s11
     918:	ldrb.w	r3, [r8, #32]
     91c:	ldrb.w	r1, [r8, #34]	; 0x22
            0.0f : patch.morph_modulation_amount);
  }

  p.note = ApplyModulations(
      patch.note + note,
      patch.frequency_modulation_amount,
     920:	vldr	s14, [r9, #16]
      modulations.frequency_patched,
      modulations.frequency,
      use_internal_envelope,
      internal_envelope_amplitude * \
     924:	vmul.f32	s13, s13, s10
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
     928:	vldr	s12, [pc, #616]	; b94 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f0>
     92c:	vabs.f32	s11, s14
    modulation_amount *= 1.05f;
     930:	vldr	s7, [pc, #616]	; b9c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f8>
    speech_engine_.set_speed( 
        !modulations.trigger_patched || modulations.morph_patched ?
            0.0f : patch.morph_modulation_amount);
  }

  p.note = ApplyModulations(
     934:	vldr	s15, [r9]
      patch.note + note,
      patch.frequency_modulation_amount,
      modulations.frequency_patched,
      modulations.frequency,
     938:	vldr	s8, [r8, #8]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
     93c:	vsub.f32	s11, s11, s12
    speech_engine_.set_speed( 
        !modulations.trigger_patched || modulations.morph_patched ?
            0.0f : patch.morph_modulation_amount);
  }

  p.note = ApplyModulations(
     940:	vadd.f32	s15, s9, s15
      return __a;
     944:	vcmpe.f32	s11, s12
     948:	vmrs	APSR_nzcv, fpscr
     94c:	it	pl
     94e:	vmovpl.f32	s12, s11
     952:	vmul.f32	s14, s14, s12
    modulation_amount *= 1.05f;
     956:	vmul.f32	s14, s14, s7
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
     95a:	cbnz	r3, 96e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x2ca>
     95c:	cmp	r2, #0
     95e:	beq.w	cc2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x61e>
     962:	vmul.f32	s12, s13, s10
     966:	vldr	s8, [pc, #568]	; ba0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4fc>
     96a:	vmul.f32	s8, s12, s8
    value += modulation_amount * modulation;
     96e:	vfma.f32	s15, s14, s8
    CONSTRAIN(value, minimum_value, maximum_value);
     972:	vldr	s14, [pc, #560]	; ba4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x500>
     976:	vcmpe.f32	s15, s14
     97a:	vmrs	APSR_nzcv, fpscr
     97e:	bmi.w	c92 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x5ee>
     982:	vldr	s14, [pc, #548]	; ba8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x504>
     986:	vcmp.f32	s15, s14
     98a:	vmrs	APSR_nzcv, fpscr
     98e:	it	gt
     990:	vmovgt.f32	s15, s14
      -119.0f,
      120.0f);

  p.timbre = ApplyModulations(
      patch.timbre,
      patch.timbre_modulation_amount,
     994:	vldr	s14, [r9, #20]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
     998:	vldr	s12, [pc, #504]	; b94 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f0>
     99c:	vabs.f32	s11, s14
    modulation_amount *= 1.05f;
     9a0:	vldr	s8, [pc, #504]	; b9c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f8>
      modulations.timbre_patched,
     9a4:	ldrb.w	r3, [r8, #33]	; 0x21
      use_internal_envelope,
      internal_envelope_amplitude * \
          decay_envelope_.value() * decay_envelope_.value() * 48.0f,
      1.0f,
      -119.0f,
      120.0f);
     9a8:	vstr	s15, [sp, #28]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
     9ac:	vsub.f32	s11, s11, s12

  p.timbre = ApplyModulations(
      patch.timbre,
     9b0:	vldr	s15, [r9, #8]
      patch.timbre_modulation_amount,
      modulations.timbre_patched,
      modulations.timbre,
     9b4:	vldr	s9, [r8, #16]
     9b8:	vcmpe.f32	s11, s12
     9bc:	vmrs	APSR_nzcv, fpscr
     9c0:	it	pl
     9c2:	vmovpl.f32	s12, s11
     9c6:	vmul.f32	s14, s14, s12
    modulation_amount *= 1.05f;
     9ca:	vmul.f32	s14, s14, s8
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
     9ce:	cbnz	r3, 9dc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x338>
     9d0:	cmp	r2, #0
     9d2:	vldr	s9, [pc, #444]	; b90 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4ec>
     9d6:	it	ne
     9d8:	vmovne.f32	s9, s10
    value += modulation_amount * modulation;
     9dc:	vfma.f32	s15, s14, s9
    CONSTRAIN(value, minimum_value, maximum_value);
     9e0:	vcmpe.f32	s15, #0.0
     9e4:	vmrs	APSR_nzcv, fpscr
     9e8:	bmi.w	cf4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x650>
     9ec:	vmov.f32	s14, #112	; 0x3f800000  1.0
     9f0:	vcmp.f32	s15, s14
     9f4:	vmrs	APSR_nzcv, fpscr
     9f8:	it	gt
     9fa:	vmovgt.f32	s15, s14
      0.0f,
      1.0f);

  p.morph = ApplyModulations(
      patch.morph,
      patch.morph_modulation_amount,
     9fe:	vldr	s14, [r9, #24]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
     a02:	vldr	s12, [pc, #400]	; b94 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f0>
     a06:	vabs.f32	s11, s14
    modulation_amount *= 1.05f;
     a0a:	vldr	s9, [pc, #400]	; b9c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f8>
      modulations.timbre,
      use_internal_envelope,
      decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);
     a0e:	vstr	s15, [sp, #32]

  p.morph = ApplyModulations(
      patch.morph,
      patch.morph_modulation_amount,
      modulations.morph_patched,
      modulations.morph,
     a12:	vldr	s10, [r8, #20]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
     a16:	vsub.f32	s11, s11, s12
      0.0f,
      0.0f,
      1.0f);

  p.morph = ApplyModulations(
      patch.morph,
     a1a:	vldr	s15, [r9, #12]
     a1e:	vcmpe.f32	s11, s12
     a22:	vmrs	APSR_nzcv, fpscr
     a26:	it	pl
     a28:	vmovpl.f32	s12, s11
     a2c:	vmul.f32	s14, s14, s12
    modulation_amount *= 1.05f;
     a30:	vmul.f32	s14, s14, s9
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
     a34:	cbnz	r1, a42 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x39e>
     a36:	cmp	r2, #0
     a38:	vldr	s10, [pc, #340]	; b90 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4ec>
     a3c:	it	ne
     a3e:	vmovne.f32	s10, s13
    value += modulation_amount * modulation;
     a42:	vfma.f32	s15, s14, s10
    CONSTRAIN(value, minimum_value, maximum_value);
     a46:	vcmpe.f32	s15, #0.0
     a4a:	vmrs	APSR_nzcv, fpscr
     a4e:	bmi.w	cee <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x64a>
     a52:	vmov.f32	s14, #112	; 0x3f800000  1.0
     a56:	vcmp.f32	s15, s14
     a5a:	vmrs	APSR_nzcv, fpscr
     a5e:	it	gt
     a60:	vmovgt.f32	s15, s14
      internal_envelope_amplitude * decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);

  bool already_enveloped = pp_s.already_enveloped;
     a64:	ldrb.w	r0, [sl, #12]
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
     a68:	movw	r3, #4244	; 0x1094
     a6c:	movw	r5, #4340	; 0x10f4
     a70:	ldr.w	lr, [sl]
     a74:	add	r3, r7
     a76:	add.w	ip, sp, #23
      internal_envelope_amplitude * decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);

  bool already_enveloped = pp_s.already_enveloped;
     a7a:	strb.w	r0, [sp, #23]
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
     a7e:	add	r5, r7
     a80:	ldr	r0, [sp, #104]	; 0x68
     a82:	mov	r2, r3
     a84:	str	r3, [sp, #12]
     a86:	add	r1, sp, #24
     a88:	str	r0, [sp, #0]
     a8a:	mov	r3, r5
     a8c:	str.w	ip, [sp, #4]
     a90:	mov	r0, sl
      modulations.morph,
      use_internal_envelope,
      internal_envelope_amplitude * decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);
     a92:	vstr	s15, [sp, #36]	; 0x24

  bool already_enveloped = pp_s.already_enveloped;
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
     a96:	ldr.w	r6, [lr, #8]
     a9a:	blx	r6
  
  bool lpg_bypass = already_enveloped || \
     a9c:	ldrb.w	r3, [sp, #23]
     aa0:	cbnz	r3, ab6 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x412>
      (!modulations.level_patched && !modulations.trigger_patched);
     aa2:	ldrb.w	r2, [r8, #36]	; 0x24
      1.0f);

  bool already_enveloped = pp_s.already_enveloped;
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
  
  bool lpg_bypass = already_enveloped || \
     aa6:	cmp	r2, #0
     aa8:	bne.w	bc0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x51c>
      (!modulations.level_patched && !modulations.trigger_patched);
     aac:	ldrb.w	r3, [r8, #35]	; 0x23
     ab0:	cmp	r3, #0
     ab2:	bne.w	bc0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x51c>
     ab6:	add.w	r1, r7, #4064	; 0xfe0
     aba:	addw	r2, r7, #4068	; 0xfe4
     abe:	addw	r3, r7, #4072	; 0xfe8
     ac2:	vldr	s4, [r1]
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
     ac6:	movs	r1, #1
     ac8:	vldr	s7, [r2]
     acc:	vldr	s5, [r3]
      lpg_envelope_.ProcessPing(attack, short_decay, decay_tail, hf);
    }
  }
  
  out_post_processor_.Process(
      pp_s.out_gain,
     ad0:	vldr	s12, [sl, #4]
      float low_pass_gate_hf_bleed,
      float* in,
      short* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
     ad4:	vcmpe.f32	s12, #0.0
     ad8:	vmrs	APSR_nzcv, fpscr
     adc:	bmi.w	d74 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6d0>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
     ae0:	bmi.w	1288 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe4>
     ae4:	vldr	s14, [pc, #196]	; bac <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x508>
     ae8:	vmov.f32	s11, s5
     aec:	ldr	r3, [sp, #104]	; 0x68
     aee:	vmov.f32	s9, s7
     af2:	vmul.f32	s14, s12, s14
     af6:	vmov.f32	s8, s4
     afa:	subs	r2, r3, #1
    if (!bypass_lpg) {
     afc:	cmp	r1, #0
     afe:	beq.w	e16 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x772>
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
     b02:	ldr	r3, [sp, #104]	; 0x68
     b04:	cmp	r3, #0
     b06:	beq.w	124c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xba8>
     b0a:	add.w	lr, r4, #4
     b0e:	mov	r0, r2
     b10:	ldr	r6, [sp, #12]
    }
  }
#else
  inline int32_t Clip16(int32_t x) {
    int32_t result;
    __asm ("ssat %0, %1, %2" : "=r" (result) :  "I" (16), "r" (x) );
     b12:	vldmia	r6!, {s15}
     b16:	subs	r0, #1
     b18:	add.w	lr, lr, #4
     b1c:	vmul.f32	s15, s14, s15
     b20:	vcvt.s32.f32	s15, s15
     b24:	vmov	r3, s15
     b28:	adds	r3, #1
     b2a:	ssat	r3, #16, r3
        *out = stmlib::Clip16(1 + static_cast<int32_t>(*in++ * post_gain));
     b2e:	strh.w	r3, [lr, #-8]
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
     b32:	adds	r3, r0, #1
     b34:	bne.n	b12 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x46e>
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
      pp_s.aux_gain,
     b36:	vldr	s15, [sl, #8]
      out_buffer_,
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
     b3a:	adds	r4, #2
      float low_pass_gate_hf_bleed,
      float* in,
      short* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
     b3c:	vcmpe.f32	s15, #0.0
     b40:	vmrs	APSR_nzcv, fpscr
     b44:	bmi.w	1014 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x970>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
     b48:	bmi.w	1282 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbde>
     b4c:	vldr	s14, [pc, #92]	; bac <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x508>
     b50:	vmul.f32	s14, s15, s14
    if (!bypass_lpg) {
     b54:	cmp	r1, #0
     b56:	beq.w	f20 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x87c>
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
     b5a:	ldr	r3, [sp, #104]	; 0x68
     b5c:	cbz	r3, b82 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4de>
     b5e:	adds	r4, #4
     b60:	vldmia	r5!, {s15}
     b64:	subs	r2, #1
     b66:	adds	r4, #4
     b68:	vmul.f32	s15, s14, s15
     b6c:	vcvt.s32.f32	s15, s15
     b70:	vmov	r3, s15
     b74:	adds	r3, #1
     b76:	ssat	r3, #16, r3
        *out = stmlib::Clip16(1 + static_cast<int32_t>(*in++ * post_gain));
     b7a:	strh.w	r3, [r4, #-8]
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
     b7e:	adds	r3, r2, #1
     b80:	bne.n	b60 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4bc>
      lpg_envelope_.hf_bleed(),
      aux_buffer_,
      &frames->aux,
      size,
      2);
}
     b82:	add	sp, #52	; 0x34
     b84:	vpop	{d8-d9}
     b88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b8c:	.word	0x20000024
     b90:	.word	0x00000000
     b94:	.word	0x3d4ccccd
     b98:	.word	0x3f4ccccd
     b9c:	.word	0x3f866666
     ba0:	.word	0x42400000
     ba4:	.word	0xc2ee0000
     ba8:	.word	0x42f00000
     bac:	.word	0xc6fffe00
     bb0:	.word	0x20000428
     bb4:	.word	0xc2900000
     bb8:	.word	0x43000000
     bbc:	.word	0x43800000

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
     bc0:	vmov.f32	s15, #40	; 0x41400000  12.0
  bool lpg_bypass = already_enveloped || \
      (!modulations.level_patched && !modulations.trigger_patched);
  
  // Compute LPG parameters.
  if (!lpg_bypass) {
    const float hf = patch.lpg_colour;
     bc4:	vldr	s12, [r9, #36]	; 0x24
     bc8:	vldr	s9, [r9, #32]
     bcc:	vldr	s14, [pc, #-28]	; bb4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
     bd0:	vmul.f32	s15, s12, s15
     bd4:	vldr	s11, [pc, #-32]	; bb8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x514>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
     bd8:	vldr	s13, [pc, #-32]	; bbc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x518>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
     bdc:	ldr	r3, [pc, #348]	; (d3c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x698>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
     bde:	vfma.f32	s15, s9, s14
    const float decay_tail = (20.0f * kBlockSize) / kSampleRate *
        SemitonesToRatio(-72.0f * patch.decay + 12.0f * hf) - short_decay;
     be2:	vldr	s10, [pc, #348]	; d40 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x69c>
     be6:	vadd.f32	s15, s15, s11
  MAKE_INTEGRAL_FRACTIONAL(pitch)
     bea:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
     bee:	vcvt.f32.s32	s8, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
     bf2:	vmov	r1, s14
     bf6:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
     bfa:	vsub.f32	s15, s15, s8
     bfe:	vldr	s9, [r3]
     c02:	vmul.f32	s15, s15, s13
     c06:	vcvt.s32.f32	s15, s15
     c0a:	vmov	r3, s15
     c0e:	add.w	r3, fp, r3, lsl #2
     c12:	vldr	s14, [r3]
     c16:	vmul.f32	s14, s14, s9
     c1a:	vfma.f32	s18, s14, s10
    
    if (modulations.level_patched) {
     c1e:	cmp	r2, #0
     c20:	bne.w	1172 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xace>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
     c24:	vmov.f32	s10, #34	; 0x41100000  9.0
     c28:	vldr	s15, [sp, #28]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
     c2c:	vldr	s14, [pc, #276]	; d44 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6a0>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
     c30:	vsub.f32	s15, s15, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
     c34:	vcmpe.f32	s15, s14
     c38:	vmrs	APSR_nzcv, fpscr
     c3c:	bmi.w	108c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x9e8>
     c40:	vldr	s14, [pc, #260]	; d48 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6a4>
     c44:	vcmpe.f32	s15, s14
     c48:	vmrs	APSR_nzcv, fpscr
     c4c:	ble.w	11e8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb44>
  inline void ProcessPing(
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
     c50:	ldrb.w	r1, [r7, #4076]	; 0xfec
     c54:	movs	r3, #255	; 0xff
     c56:	cmp	r1, #0
     c58:	bne.w	1098 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x9f4>
     c5c:	addw	r3, r7, #4060	; 0xfdc
     c60:	vmov.f32	s10, #112	; 0x3f800000  1.0
     c64:	vldr	s8, [pc, #228]	; d4c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6a8>
     c68:	vldr	s14, [r3]
     c6c:	vldr	s13, [pc, #224]	; d50 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6ac>
     c70:	vsub.f32	s15, s10, s14
     c74:	vldr	s9, [pc, #220]	; d54 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6b0>
     c78:	vmul.f32	s11, s14, s14
     c7c:	vsub.f32	s9, s9, s14
     c80:	vmul.f32	s15, s15, s15
     c84:	vmul.f32	s11, s11, s11
     c88:	vsub.f32	s10, s10, s15
     c8c:	vfma.f32	s13, s11, s8
     c90:	b.n	112c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa88>
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    value += modulation_amount * modulation;
    CONSTRAIN(value, minimum_value, maximum_value);
     c92:	vmov.f32	s15, s14
     c96:	b.n	994 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x2f0>
    if (trigger_value < 0.1f) {
      trigger_state_ = false;
    }
  }
  if (!modulations.trigger_patched) {
    engine_cv_ = modulations.engine;
     c98:	vldr	s12, [r8]
     c9c:	vstr	s12, [r3]
     ca0:	b.n	730 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x8c>
      }
      decay_envelope_.Trigger();
      engine_cv_ = modulations.engine;
    }
  } else {
    if (trigger_value < 0.1f) {
     ca2:	vldr	s14, [pc, #180]	; d58 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6b4>
     ca6:	vcmpe.f32	s15, s14
     caa:	vmrs	APSR_nzcv, fpscr
     cae:	bpl.w	71a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x76>
      trigger_state_ = false;
     cb2:	movs	r2, #0
     cb4:	addw	r6, r7, #4056	; 0xfd8
     cb8:	addw	r3, r7, #4044	; 0xfcc
     cbc:	strb.w	r2, [r7, #4052]	; 0xfd4
     cc0:	b.n	722 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x7e>
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    modulation_amount *= 1.05f;
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
     cc2:	vmov.f32	s8, #112	; 0x3f800000  1.0
     cc6:	b.n	96e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x2ca>
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
  if (!previous_trigger_state) {
    if (trigger_value > 0.3f) {
      trigger_state_ = true;
     cc8:	movs	r3, #1
      if (!modulations.level_patched) {
     cca:	ldrb.w	r2, [r8, #36]	; 0x24
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
  if (!previous_trigger_state) {
    if (trigger_value > 0.3f) {
      trigger_state_ = true;
     cce:	strb.w	r3, [r7, #4052]	; 0xfd4
      if (!modulations.level_patched) {
     cd2:	cbnz	r2, cd8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x634>
    frequency_ = 0.5f;
    hf_bleed_ = 0.0f;
  }
  
  inline void Trigger() {
    ramp_up_ = true;
     cd4:	strb.w	r3, [r7, #4076]	; 0xfec
        lpg_envelope_.Trigger();
      }
      decay_envelope_.Trigger();
      engine_cv_ = modulations.engine;
     cd8:	ldr.w	r2, [r8]
  inline void Init() {
    value_ = 0.0f;
  }
  
  inline void Trigger() {
    value_ = 1.0f;
     cdc:	mov.w	r1, #1065353216	; 0x3f800000
     ce0:	addw	r6, r7, #4056	; 0xfd8
     ce4:	addw	r3, r7, #4044	; 0xfcc
     ce8:	str	r1, [r6, #0]
     cea:	str	r2, [r3, #0]
     cec:	b.n	722 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x7e>
    value += modulation_amount * modulation;
    CONSTRAIN(value, minimum_value, maximum_value);
     cee:	vldr	s15, [pc, #100]	; d54 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6b0>
     cf2:	b.n	a64 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x3c0>
     cf4:	vldr	s15, [pc, #92]	; d54 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6b0>
     cf8:	b.n	9fe <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x35a>
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
     cfa:	cmp	r5, #7
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
     cfc:	vstr	s8, [sp, #40]	; 0x28

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
     d00:	bne.w	914 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x270>
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
     d04:	vmov.f32	s13, #112	; 0x3f800000  1.0
    speech_engine_.set_prosody_amount(
     d08:	cmp	r2, #0
     d0a:	beq.w	1214 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb70>
        !modulations.trigger_patched || modulations.frequency_patched ?
     d0e:	ldrb.w	r3, [r8, #32]
     d12:	cmp	r3, #0
     d14:	bne.w	1260 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbbc>

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    speech_engine_.set_prosody_amount(
     d18:	ldr.w	r5, [r9, #16]
      float* aux,
      size_t size,
      bool* already_enveloped);
  
  inline void set_prosody_amount(float prosody_amount) {
    prosody_amount_ = prosody_amount;
     d1c:	addw	r0, r7, #2852	; 0xb24
        !modulations.trigger_patched || modulations.frequency_patched ?
            0.0f : patch.frequency_modulation_amount);
    speech_engine_.set_speed( 
        !modulations.trigger_patched || modulations.morph_patched ?
     d20:	ldrb.w	r1, [r8, #34]	; 0x22
     d24:	str	r5, [r0, #0]
     d26:	cmp	r1, #0
     d28:	bne.w	1264 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbc0>
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    speech_engine_.set_prosody_amount(
        !modulations.trigger_patched || modulations.frequency_patched ?
            0.0f : patch.frequency_modulation_amount);
    speech_engine_.set_speed( 
     d2c:	ldr.w	r0, [r9, #24]
  }
  
  inline void set_speed(float speed) {
    speed_ = speed;
     d30:	addw	r5, r7, #2856	; 0xb28
     d34:	str	r0, [r5, #0]
     d36:	b.n	920 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x27c>
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    CONSTRAIN(q, 0, num_steps - 1);
     d38:	movs	r5, #0
     d3a:	b.n	78e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xea>
     d3c:	.word	0x20000024
     d40:	.word	0x3ba3d70a
     d44:	.word	0xc3000000
     d48:	.word	0x42fe0000
     d4c:	.word	0x3e99999a
     d50:	.word	0x3b449ba6
     d54:	.word	0x00000000
     d58:	.word	0x3dcccccd
     d5c:	.word	0x413957d7
     d60:	.word	0x40490fdb
     d64:	.word	0x3d4ccccd
     d68:	.word	0x37a7c5ac
     d6c:	.word	0x3f4ccccd
     d70:	.word	0xc6fffe00
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
     d74:	ldr	r3, [sp, #104]	; 0x68
      float* in,
      short* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
      limiter_.Process(-gain, in, size);
     d76:	vneg.f32	s12, s12
     d7a:	subs	r2, r3, #1
     d7c:	cmp	r3, #0
     d7e:	beq.w	1274 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd0>
     d82:	movw	r3, #4120	; 0x1018
     d86:	ldr	r6, [sp, #12]
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
     d88:	vmov.f32	s9, #112	; 0x3f800000  1.0
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
     d8c:	mov	r0, r2
     d8e:	mov	lr, r6
     d90:	add	r3, r7
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
     d92:	vldr	s6, [pc, #-48]	; d64 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6c0>
     d96:	vldr	s8, [pc, #-48]	; d68 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6c4>
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
     d9a:	vldr	s10, [pc, #-48]	; d6c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6c8>
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
     d9e:	vldr	s15, [lr]
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
     da2:	subs	r0, #1
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
     da4:	vldr	s13, [r3]
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
     da8:	vmul.f32	s15, s12, s15
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
     dac:	vabs.f32	s14, s15
     db0:	vsub.f32	s14, s14, s13
     db4:	vcmpe.f32	s14, #0.0
     db8:	vmrs	APSR_nzcv, fpscr
     dbc:	ite	le
     dbe:	vmovle.f32	s11, s8
     dc2:	vmovgt.f32	s11, s6
     dc6:	vfma.f32	s13, s14, s11
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
     dca:	vcmpe.f32	s13, s9
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
     dce:	vstr	s13, [r3]
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
     dd2:	vmrs	APSR_nzcv, fpscr
     dd6:	ite	hi
     dd8:	vdivhi.f32	s14, s9, s13
     ddc:	vmovls.f32	s14, #112	; 0x3f800000  1.0
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
     de0:	cmp.w	r0, #4294967295
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
     de4:	vmul.f32	s15, s15, s14
     de8:	vmul.f32	s15, s15, s10
     dec:	vstmia	lr!, {s15}
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
     df0:	bne.n	d9e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6fa>
     df2:	add.w	lr, r7, #4064	; 0xfe0
     df6:	addw	r0, r7, #4068	; 0xfe4
     dfa:	addw	r3, r7, #4072	; 0xfe8
     dfe:	str	r6, [sp, #12]
     e00:	vldr	s8, [lr]
     e04:	vldr	s9, [r0]
     e08:	vldr	s11, [r3]
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
     e0c:	vldr	s14, [pc, #-160]	; d70 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6cc>
    if (!bypass_lpg) {
     e10:	cmp	r1, #0
     e12:	bne.w	b02 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x45e>
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
     e16:	movw	r8, #4124	; 0x101c
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
     e1a:	vldr	s15, [pc, #-192]	; d5c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6b8>
    increment_ = (new_value - *state) / static_cast<float>(size);
     e1e:	vldr	s12, [sp, #104]	; 0x68
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
     e22:	vmov.f32	s13, #112	; 0x3f800000  1.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
     e26:	add	r8, r7
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
     e28:	vmul.f32	s15, s7, s15
    increment_ = (new_value - *state) / static_cast<float>(size);
     e2c:	vcvt.f32.u32	s6, s12
     e30:	vldr	s10, [pc, #-212]	; d60 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6bc>
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
     e34:	vldr	s12, [r8]
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
     e38:	vmov.f32	s3, #4	; 0x40200000  2.5
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
     e3c:	vfma.f32	s10, s15, s7

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
     e40:	add.w	ip, r7, #4128	; 0x1020
    increment_ = (new_value - *state) / static_cast<float>(size);
     e44:	vmov.f32	s15, s12
      short* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
     e48:	ldr	r3, [sp, #104]	; 0x68
    r_ = 1.0f / resonance;
     e4a:	vstr	s3, [ip, #4]
     e4e:	vfnms.f32	s15, s14, s4
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
     e52:	vmul.f32	s10, s10, s7

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
     e56:	vstr	s10, [ip]
     e5a:	vmov.f32	s14, s15
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
     e5e:	vmov.f32	s15, s13
     e62:	vdiv.f32	s1, s14, s6
     e66:	vfma.f32	s15, s10, s3
     e6a:	vfma.f32	s15, s10, s10
     e6e:	vdiv.f32	s2, s13, s15
     e72:	vstr	s2, [ip, #8]
     e76:	cbz	r3, ef4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x850>
     e78:	vneg.f32	s0, s10
     e7c:	vldr	s13, [ip, #12]
     e80:	add.w	lr, r4, #4
     e84:	vldr	s7, [ip, #16]
     e88:	mov	r0, r2
     e8a:	ldr	r6, [sp, #12]
  }

  inline float Next() {
    value_ += increment_;
     e8c:	vadd.f32	s12, s12, s1
      const float s = *in++ * gain_modulation.Next();
     e90:	vldmia	r6!, {s4}
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
     e94:	vnmul.f32	s14, s3, s13
      short* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
     e98:	subs	r0, #1
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
     e9a:	vmov.f32	s15, s7
     e9e:	add.w	lr, lr, #4
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
     ea2:	vfma.f32	s14, s4, s12
     ea6:	vfma.f32	s14, s0, s13
     eaa:	vsub.f32	s14, s14, s7
     eae:	vmul.f32	s14, s14, s2
    bp = g_ * hp + state_1_;
     eb2:	vfma.f32	s13, s10, s14
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
     eb6:	vfma.f32	s15, s10, s13
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
     eba:	vmov.f32	s6, s13
    state_1_ = g_ * hp + bp;
     ebe:	vfma.f32	s13, s10, s14
     ec2:	vmov.f32	s14, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
     ec6:	vmov.f32	s7, s15
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
     eca:	vstr	s13, [ip, #12]
     ece:	vfnms.f32	s14, s4, s12
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
     ed2:	vfma.f32	s7, s10, s6
     ed6:	vfma.f32	s15, s14, s5
     eda:	vstr	s7, [ip, #16]
     ede:	vcvt.s32.f32	s15, s15
     ee2:	vmov	r3, s15
     ee6:	adds	r3, #1
     ee8:	ssat	r3, #16, r3
      const float s = *in++ * gain_modulation.Next();
      const float lp = filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(s);
      *out = stmlib::Clip16(1 + static_cast<int32_t>(lp + (s - lp) * hf_bleed));
     eec:	strh.w	r3, [lr, #-8]
      short* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
     ef0:	adds	r3, r0, #1
     ef2:	bne.n	e8c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x7e8>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
     ef4:	vstr	s12, [r8]
      out_buffer_,
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
     ef8:	adds	r4, #2
      pp_s.aux_gain,
     efa:	vldr	s15, [sl, #8]
      float low_pass_gate_hf_bleed,
      float* in,
      short* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
     efe:	vcmpe.f32	s15, #0.0
     f02:	vmrs	APSR_nzcv, fpscr
     f06:	bmi.w	100e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x96a>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
     f0a:	vcmpe.f32	s15, #0.0
     f0e:	vmrs	APSR_nzcv, fpscr
     f12:	bpl.w	b4c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4a8>
     f16:	vldr	s14, [pc, #-424]	; d70 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6cc>
    if (!bypass_lpg) {
     f1a:	cmp	r1, #0
     f1c:	bne.w	b5a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4b6>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
     f20:	movw	r0, #4152	; 0x1038
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
     f24:	vldr	s15, [pc, #-460]	; d5c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6b8>
    increment_ = (new_value - *state) / static_cast<float>(size);
     f28:	vldr	s10, [sp, #104]	; 0x68
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
     f2c:	vmov.f32	s13, #112	; 0x3f800000  1.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
     f30:	add	r0, r7
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
     f32:	vmul.f32	s15, s9, s15
    increment_ = (new_value - *state) / static_cast<float>(size);
     f36:	vcvt.f32.u32	s7, s10
     f3a:	vldr	s12, [pc, #-476]	; d60 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6bc>
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
     f3e:	vldr	s10, [r0]
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
     f42:	vmov.f32	s6, #4	; 0x40200000  2.5
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
     f46:	vfma.f32	s12, s15, s9

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
     f4a:	movw	r1, #4156	; 0x103c
    increment_ = (new_value - *state) / static_cast<float>(size);
     f4e:	vmov.f32	s15, s10
     f52:	ldr	r3, [sp, #104]	; 0x68
     f54:	add	r1, r7
     f56:	vfnms.f32	s15, s14, s8
    r_ = 1.0f / resonance;
     f5a:	vstr	s6, [r1, #4]
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
     f5e:	vmul.f32	s12, s12, s9

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
     f62:	vstr	s12, [r1]
     f66:	vmov.f32	s14, s15
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
     f6a:	vmov.f32	s15, s13
     f6e:	vdiv.f32	s4, s14, s7
     f72:	vfma.f32	s15, s12, s6
     f76:	vfma.f32	s15, s12, s12
     f7a:	vdiv.f32	s5, s13, s15
     f7e:	vstr	s5, [r1, #8]
     f82:	cbz	r3, ffa <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x956>
     f84:	vneg.f32	s3, s12
     f88:	adds	r4, #4
     f8a:	vldr	s13, [r1, #12]
     f8e:	vldr	s9, [r1, #16]
  }

  inline float Next() {
    value_ += increment_;
     f92:	vadd.f32	s10, s10, s4
      const float s = *in++ * gain_modulation.Next();
     f96:	vldmia	r5!, {s7}
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
     f9a:	vnmul.f32	s14, s6, s13
      short* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
     f9e:	subs	r2, #1
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
     fa0:	vmov.f32	s15, s9
     fa4:	adds	r4, #4
     fa6:	adds	r6, r2, #1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
     fa8:	vfma.f32	s14, s7, s10
     fac:	vfma.f32	s14, s3, s13
     fb0:	vsub.f32	s14, s14, s9
     fb4:	vmul.f32	s14, s14, s5
    bp = g_ * hp + state_1_;
     fb8:	vfma.f32	s13, s12, s14
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
     fbc:	vfma.f32	s15, s12, s13
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
     fc0:	vmov.f32	s8, s13
    state_1_ = g_ * hp + bp;
     fc4:	vfma.f32	s13, s12, s14
     fc8:	vmov.f32	s14, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
     fcc:	vmov.f32	s9, s15
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
     fd0:	vstr	s13, [r1, #12]
     fd4:	vfnms.f32	s14, s7, s10
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
     fd8:	vfma.f32	s9, s12, s8
     fdc:	vfma.f32	s15, s14, s11
     fe0:	vstr	s9, [r1, #16]
     fe4:	vcvt.s32.f32	s15, s15
     fe8:	vmov	r3, s15
     fec:	add.w	r3, r3, #1
     ff0:	ssat	r3, #16, r3
      const float s = *in++ * gain_modulation.Next();
      const float lp = filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(s);
      *out = stmlib::Clip16(1 + static_cast<int32_t>(lp + (s - lp) * hf_bleed));
     ff4:	strh.w	r3, [r4, #-8]
      short* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
     ff8:	bne.n	f92 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x8ee>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
     ffa:	vstr	s10, [r0]
      lpg_envelope_.hf_bleed(),
      aux_buffer_,
      &frames->aux,
      size,
      2);
}
     ffe:	add	sp, #52	; 0x34
    1000:	vpop	{d8-d9}
    1004:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  float note = (modulations.note + previous_note_) * 0.5f;
  previous_note_ = modulations.note;
  const PostProcessingSettings& pp_s = e->post_processing_settings;

  if (modulations.trigger_patched) {
    p.trigger = rising_edge ? TRIGGER_RISING_EDGE : TRIGGER_LOW;
    1008:	movs	r3, #0
    100a:	b.w	7ea <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x146>
    100e:	ldr	r3, [sp, #104]	; 0x68
    1010:	cmp	r3, #0
    1012:	beq.n	f16 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x872>
    1014:	movw	r6, #4148	; 0x1034
      float* in,
      short* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
      limiter_.Process(-gain, in, size);
    1018:	vneg.f32	s12, s15
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    101c:	vmov.f32	s7, #112	; 0x3f800000  1.0
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1020:	mov	r0, r5
    1022:	mov	r3, r2
    1024:	add	r6, r7
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1026:	vldr	s4, [pc, #-708]	; d64 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6c0>
    102a:	vldr	s5, [pc, #-708]	; d68 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6c4>
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    102e:	vldr	s6, [pc, #-708]	; d6c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6c8>
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    1032:	vldr	s15, [r0]
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1036:	subs	r3, #1
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1038:	vldr	s13, [r6]
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    103c:	vmul.f32	s15, s12, s15
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1040:	vabs.f32	s14, s15
    1044:	vsub.f32	s14, s14, s13
    1048:	vcmpe.f32	s14, #0.0
    104c:	vmrs	APSR_nzcv, fpscr
    1050:	ite	le
    1052:	vmovle.f32	s10, s5
    1056:	vmovgt.f32	s10, s4
    105a:	vfma.f32	s13, s14, s10
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    105e:	vcmpe.f32	s13, s7
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1062:	vstr	s13, [r6]
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    1066:	vmrs	APSR_nzcv, fpscr
    106a:	ite	hi
    106c:	vdivhi.f32	s14, s7, s13
    1070:	vmovls.f32	s14, #112	; 0x3f800000  1.0
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1074:	cmp.w	r3, #4294967295
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    1078:	vmul.f32	s15, s15, s14
    107c:	vmul.f32	s15, s15, s6
    1080:	vstmia	r0!, {s15}
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1084:	bne.n	1032 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x98e>
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
    1086:	vldr	s14, [pc, #-792]	; d70 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6cc>
    108a:	b.n	f1a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x876>
    108c:	mov	r3, r2
  inline void ProcessPing(
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
    108e:	ldrb.w	r1, [r7, #4076]	; 0xfec
    1092:	cmp	r1, #0
    1094:	beq.w	c5c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x5b8>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    1098:	ldr	r1, [pc, #516]	; (12a0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbfc>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    109a:	add.w	r2, fp, r2, lsl #2
      vactrol_state_ += attack;
    109e:	vldr	s15, [pc, #516]	; 12a4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc00>
    10a2:	vmov.f32	s9, #40	; 0x41400000  12.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    10a6:	add.w	r3, r1, r3, lsl #2
    10aa:	vldr	s8, [r2]
    10ae:	vmov.f32	s11, #0	; 0x40000000  2.0
    10b2:	vldr	s13, [r3]
    10b6:	addw	r3, r7, #4060	; 0xfdc
      if (vactrol_state_ >= 1.0f) {
    10ba:	vmov.f32	s10, #112	; 0x3f800000  1.0
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
      vactrol_state_ += attack;
    10be:	vmul.f32	s13, s13, s8
    10c2:	vldr	s14, [r3]
    10c6:	vmul.f32	s15, s13, s15
    10ca:	vmul.f32	s15, s15, s9
    10ce:	vfma.f32	s14, s15, s11
      if (vactrol_state_ >= 1.0f) {
    10d2:	vcmpe.f32	s14, s10
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
      vactrol_state_ += attack;
    10d6:	vstr	s14, [r3]
      if (vactrol_state_ >= 1.0f) {
    10da:	vmrs	APSR_nzcv, fpscr
    10de:	blt.n	1108 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa64>
        vactrol_state_ = 1.0f;
        ramp_up_ = false;
    10e0:	vmov.f32	s9, #240	; 0xbf800000 -1.0
    10e4:	movs	r2, #0
    10e6:	vmov.f32	s11, s10
    10ea:	vldr	s13, [pc, #444]	; 12a8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc04>
    10ee:	vmov.f32	s14, s10
    10f2:	vldr	s15, [pc, #440]	; 12ac <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc08>
    10f6:	strb.w	r2, [r7, #4076]	; 0xfec
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    10fa:	vmov.f32	s8, #112	; 0x3f800000  1.0
    10fe:	vsub.f32	s11, s8, s11
    1102:	vfma.f32	s16, s18, s11
    1106:	b.n	113a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa96>
    1108:	vmul.f32	s11, s14, s14
    110c:	vldr	s8, [pc, #416]	; 12b0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc0c>
    1110:	vsub.f32	s15, s10, s14
    1114:	vldr	s13, [pc, #412]	; 12b4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc10>
    1118:	vsub.f32	s9, s14, s14
    111c:	vmul.f32	s11, s11, s11
    1120:	vmul.f32	s15, s15, s15
    1124:	vfma.f32	s13, s11, s8
    1128:	vsub.f32	s10, s10, s15
    112c:	vcmpe.f32	s9, #0.0
    1130:	vmrs	APSR_nzcv, fpscr
    1134:	ble.n	10fa <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa56>
    1136:	vldr	s16, [pc, #384]	; 12b8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc14>
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    113a:	vfma.f32	s15, s12, s10
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    113e:	vldr	s11, [pc, #380]	; 12bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc18>
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    1142:	vfma.f32	s14, s16, s9
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    1146:	movs	r1, #0
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    1148:	vfma.f32	s13, s12, s11
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    114c:	vmul.f32	s15, s15, s12
    1150:	vmov.f32	s4, s14
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    1154:	vstr	s14, [r3]
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    1158:	vmov.f32	s7, s13
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    115c:	vstr	s14, [r3, #4]
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    1160:	vmul.f32	s15, s15, s12
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    1164:	vstr	s13, [r3, #8]
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    1168:	vmov.f32	s5, s15
    116c:	vstr	s15, [r3, #12]
    1170:	b.n	ad0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x42c>
      float level,
      float short_decay,
      float decay_tail,
      float hf) {
    float vactrol_input = level;
    float vactrol_error = (vactrol_input - vactrol_state_);
    1172:	addw	r3, r7, #4060	; 0xfdc
    float vactrol_state_2 = vactrol_state_ * vactrol_state_;
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    1176:	vmov.f32	s11, #112	; 0x3f800000  1.0
      float level,
      float short_decay,
      float decay_tail,
      float hf) {
    float vactrol_input = level;
    float vactrol_error = (vactrol_input - vactrol_state_);
    117a:	vldr	s14, [r3]
    117e:	vsub.f32	s17, s17, s14
    float vactrol_state_2 = vactrol_state_ * vactrol_state_;
    1182:	vmul.f32	s13, s14, s14
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    1186:	vsub.f32	s15, s11, s14
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    118a:	vcmpe.f32	s17, #0.0
      float decay_tail,
      float hf) {
    float vactrol_input = level;
    float vactrol_error = (vactrol_input - vactrol_state_);
    float vactrol_state_2 = vactrol_state_ * vactrol_state_;
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    118e:	vmul.f32	s13, s13, s13
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    1192:	vmul.f32	s15, s15, s15
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    1196:	vmrs	APSR_nzcv, fpscr
    119a:	ble.n	126a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbc6>
    119c:	vldr	s16, [pc, #280]	; 12b8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc14>
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    11a0:	vmov.f32	s11, #112	; 0x3f800000  1.0
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    11a4:	vldr	s8, [pc, #264]	; 12b0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc0c>
    11a8:	vldr	s10, [pc, #264]	; 12b4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc10>
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    11ac:	vfma.f32	s14, s17, s16
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    11b0:	vldr	s9, [pc, #264]	; 12bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc18>
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    11b4:	movs	r1, #0
    11b6:	vsub.f32	s11, s11, s15
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    11ba:	vfma.f32	s10, s13, s8
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    11be:	vfma.f32	s15, s12, s11
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    11c2:	vstr	s14, [r3]
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    11c6:	vmov.f32	s4, s14
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    11ca:	vstr	s14, [r3, #4]
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    11ce:	vfma.f32	s10, s12, s9
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    11d2:	vmul.f32	s5, s15, s12
    11d6:	vmul.f32	s5, s5, s12
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    11da:	vstr	s10, [r3, #8]
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    11de:	vmov.f32	s7, s10
    11e2:	vstr	s5, [r3, #12]
    11e6:	b.n	ad0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x42c>
    11e8:	vadd.f32	s15, s15, s11
    11ec:	vcvt.s32.f32	s14, s15
    11f0:	vmov	r3, s14
    11f4:	vcvt.f32.s32	s14, s14
    11f8:	vsub.f32	s15, s15, s14
    11fc:	vmul.f32	s15, s15, s13
    1200:	vcvt.s32.f32	s15, s15
    1204:	vmov	r2, s15
    1208:	b.n	108e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x9ea>
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    120a:	vldr	s13, [pc, #160]	; 12ac <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc08>
    speech_engine_.set_prosody_amount(
    120e:	cmp	r2, #0
    1210:	bne.w	d0e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x66a>
      float* aux,
      size_t size,
      bool* already_enveloped);
  
  inline void set_prosody_amount(float prosody_amount) {
    prosody_amount_ = prosody_amount;
    1214:	addw	r1, r7, #2852	; 0xb24
    1218:	movs	r0, #0
    121a:	ldrb.w	r3, [r8, #32]
    121e:	str	r0, [r1, #0]
    1220:	ldrb.w	r1, [r8, #34]	; 0x22
    1224:	b.n	d30 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x68c>
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    1226:	cmp	r5, #7
    1228:	bne.w	914 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x270>
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    122c:	vmov.f32	s15, #24	; 0x40c00000  6.0
    1230:	vfms.f32	s13, s14, s15
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    1234:	vcmpe.f32	s13, #0.0
    1238:	vmrs	APSR_nzcv, fpscr
    123c:	bmi.n	120a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb66>
    123e:	vcmpe.f32	s13, s11
    1242:	vmrs	APSR_nzcv, fpscr
    1246:	bgt.w	d04 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x660>
    124a:	b.n	d08 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x664>
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
      pp_s.aux_gain,
    124c:	vldr	s15, [sl, #8]
      out_buffer_,
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
    1250:	adds	r4, #2
      float low_pass_gate_hf_bleed,
      float* in,
      short* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
    1252:	vcmpe.f32	s15, #0.0
    1256:	vmrs	APSR_nzcv, fpscr
    125a:	bpl.w	f0a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x866>
    125e:	b.n	f16 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x872>

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    speech_engine_.set_prosody_amount(
    1260:	movs	r5, #0
    1262:	b.n	d1c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x678>
    1264:	movs	r1, #1
        !modulations.trigger_patched || modulations.frequency_patched ?
            0.0f : patch.frequency_modulation_amount);
    speech_engine_.set_speed( 
    1266:	movs	r0, #0
    1268:	b.n	d30 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x68c>
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    126a:	vsub.f32	s11, s11, s13
    126e:	vfma.f32	s16, s18, s11
    1272:	b.n	11a0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xafc>
    1274:	vmov.f32	s11, s5
    1278:	vmov.f32	s9, s7
    127c:	vmov.f32	s8, s4
    1280:	b.n	e0c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x768>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -32767.0f;
    1282:	vldr	s14, [pc, #60]	; 12c0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc1c>
    1286:	b.n	b5e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4ba>
    1288:	ldr	r3, [sp, #104]	; 0x68
    128a:	vmov.f32	s11, s5
    128e:	vmov.f32	s9, s7
    1292:	vldr	s14, [pc, #44]	; 12c0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xc1c>
    1296:	subs	r2, r3, #1
    1298:	vmov.f32	s8, s4
    129c:	b.n	afc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x458>
    129e:	nop
    12a0:	.word	0x20000024
    12a4:	.word	0x39969651
    12a8:	.word	0x3e9b22d1
    12ac:	.word	0x00000000
    12b0:	.word	0x3e99999a
    12b4:	.word	0x3b449ba6
    12b8:	.word	0x3f19999a
    12bc:	.word	0x3d23d70a
    12c0:	.word	0xc6fffe00

000012c4 <plaits::NaiveSpeechSynth::Init()>:
    { { { 63, 255 }, { 77, 64 }, { 99, 8 }, { 104, 2 }, { 110, 0 } } },
    { { { 63, 255 }, { 77, 40 }, { 100, 4 }, { 106, 2 }, { 110, 0 } } }
  },
};

void NaiveSpeechSynth::Init() {
    12c4:	push	{r4, r5, r6, r7, lr}
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    12c6:	movs	r1, #0
    lp_state_ = 1.0f;
    12c8:	mov.w	r6, #1065353216	; 0x3f800000
    hp_state_ = 0.0f;
    high_ = true;
    12cc:	movs	r2, #1

    frequency_ = 0.001f;
    12ce:	ldr	r5, [pc, #92]	; (132c <plaits::NaiveSpeechSynth::Init()+0x68>)
  pulse_.Init();
  frequency_ = 0.0f;
  click_duration_ = 0;
    12d0:	movs	r4, #0
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    12d2:	mov.w	lr, #1056964608	; 0x3f000000
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    12d6:	str	r6, [r0, #8]
    12d8:	mov	r3, r0
    hp_state_ = 0.0f;
    high_ = true;
    12da:	strb	r2, [r0, #16]
    12dc:	add.w	r7, r0, #100	; 0x64

    frequency_ = 0.001f;
    12e0:	str	r5, [r0, #20]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    12e2:	mov	r2, r1
    12e4:	str	r4, [r0, #32]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    12e6:	ldr	r6, [pc, #72]	; (1330 <plaits::NaiveSpeechSynth::Init()+0x6c>)
    r_ = 1.0f / resonance;
    12e8:	ldr	r5, [pc, #72]	; (1334 <plaits::NaiveSpeechSynth::Init()+0x70>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    12ea:	ldr	r4, [pc, #76]	; (1338 <plaits::NaiveSpeechSynth::Init()+0x74>)
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    12ec:	str.w	lr, [r0]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    pw_ = 0.5f;
    12f0:	str.w	lr, [r0, #24]
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    12f4:	str	r1, [r0, #4]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    12f6:	str	r1, [r0, #12]
  },
};

void NaiveSpeechSynth::Init() {
  pulse_.Init();
  frequency_ = 0.0f;
    12f8:	str	r1, [r0, #28]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    12fa:	str	r6, [r3, #36]	; 0x24
    12fc:	adds	r3, #20
    r_ = 1.0f / resonance;
    12fe:	str	r5, [r3, #20]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    1300:	movs	r1, #0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1302:	str	r4, [r3, #24]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    1304:	str	r2, [r3, #32]
    1306:	str	r2, [r3, #28]
  click_duration_ = 0;
  
  for (int i = 0; i < kNaiveSpeechNumFormants; ++i) {
    1308:	cmp	r3, r7
    130a:	bne.n	12fa <plaits::NaiveSpeechSynth::Init()+0x36>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    130c:	mov.w	r4, #1073741824	; 0x40000000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    1310:	ldr	r2, [pc, #40]	; (133c <plaits::NaiveSpeechSynth::Init()+0x78>)
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1312:	ldr	r3, [pc, #44]	; (1340 <plaits::NaiveSpeechSynth::Init()+0x7c>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    1314:	str.w	r1, [r0, #152]	; 0x98
    1318:	str.w	r1, [r0, #148]	; 0x94
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    131c:	str.w	r4, [r0, #140]	; 0x8c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    1320:	str.w	r2, [r0, #136]	; 0x88
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1324:	str.w	r3, [r0, #144]	; 0x90
    1328:	pop	{r4, r5, r6, r7, pc}
    132a:	nop
    132c:	.word	0x3a83126f
    1330:	.word	0x3d00ba22
    1334:	.word	0x3c23d70a
    1338:	.word	0x3f7faaca
    133c:	.word	0x3d56af8c
    1340:	.word	0x3f6722c1

00001344 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)>:
    float phoneme,
    float vocal_register,
    float* temp,
    float* excitation,
    float* output,
    size_t size) {
    1344:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1348:	vpush	{d8-d9}
    134c:	sub	sp, #12
    134e:	mov	r8, r3
    1350:	ldr.w	r9, [sp, #64]	; 0x40
    1354:	ldr	r3, [sp, #68]	; 0x44
  if (click) {
    1356:	cmp	r1, #0
    1358:	bne.w	176c <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x428>
    135c:	ldr	r4, [r0, #32]
    click_duration_ = kSampleRate * 0.05f;
  }
  click_duration_ -= min(click_duration_, size);
    135e:	cmp	r3, r4
    1360:	ite	ls
    1362:	subls	r4, r4, r3
    1364:	subhi	r4, r4, r4
    1366:	str	r4, [r0, #32]
  
  if (click_duration_) {
    1368:	cbz	r4, 1372 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x2e>
    frequency *= 0.5f;
    136a:	vmov.f32	s15, #96	; 0x3f000000  0.5
    136e:	vmul.f32	s0, s0, s15
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    1372:	vldr	s15, [pc, #828]	; 16b0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x36c>
    1376:	vcmpe.f32	s0, s15
    137a:	vmrs	APSR_nzcv, fpscr
    137e:	bmi.n	1390 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x4c>
    1380:	vmov.f32	s15, #80	; 0x3e800000  0.250
    1384:	vcmpe.f32	s0, s15
    1388:	vmrs	APSR_nzcv, fpscr
    138c:	ble.w	1772 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x42e>
    1390:	vmov.f32	s0, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    1394:	vmov.f32	s15, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    1398:	vldr	s12, [r0, #20]
    increment_ = (new_value - *state) / static_cast<float>(size);
    139c:	vmov	s14, r3
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    13a0:	vldr	s6, [r0, #24]
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    13a4:	add.w	sl, r3, #4294967295
    increment_ = (new_value - *state) / static_cast<float>(size);
    13a8:	vcvt.f32.u32	s14, s14
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    13ac:	vldr	s13, [r0, #4]
    13b0:	vsub.f32	s0, s0, s12
    13b4:	vsub.f32	s15, s15, s6
    13b8:	vdiv.f32	s7, s0, s14
    13bc:	vdiv.f32	s4, s15, s14
  
    while (size--) {
    13c0:	cmp	r3, #0
    13c2:	beq.w	17a2 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x45e>
    13c6:	vldr	s5, [r0, #12]
    13ca:	mov	r1, r8
    13cc:	mov	r2, sl
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    13ce:	vldr	s18, [pc, #740]	; 16b4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x370>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    13d2:	vmov.f32	s9, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    13d6:	vmov.f32	s17, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    13da:	vmov.f32	s16, #224	; 0xbf000000 -0.5
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    13de:	vmov.f32	s0, #80	; 0x3e800000  0.250
          *out++ = 4.0f * lp_state_;
    13e2:	vmov.f32	s3, #16	; 0x40800000  4.0
    13e6:	b.n	1442 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0xfe>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    13e8:	vsub.f32	s15, s15, s9
          float t = phase_ / frequency;
    13ec:	vdiv.f32	s14, s15, s12
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    13f0:	vstr	s15, [r0]
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    13f4:	vmul.f32	s10, s14, s17
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    13f8:	vsub.f32	s11, s9, s14
    13fc:	vfms.f32	s13, s14, s10
          next_sample -= stmlib::NextBlepSample(t);
    1400:	vmul.f32	s8, s11, s16
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    1404:	vmov.f32	s10, s13
          next_sample -= stmlib::NextBlepSample(t);
    1408:	vmov.f32	s13, s18
    140c:	vfms.f32	s13, s11, s8
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    1410:	vsub.f32	s11, s5, s10
    1414:	vldr	s14, [r0, #8]
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    1418:	vadd.f32	s13, s13, s15
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    141c:	subs	r2, #1
    141e:	vmov.f32	s5, s10
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    1422:	vsub.f32	s15, s11, s14
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    1426:	adds	r6, r2, #1
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    1428:	vfma.f32	s14, s15, s0
    142c:	vmov.f32	s15, s14
          *out++ = 4.0f * lp_state_;
    1430:	vmul.f32	s14, s14, s3
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    1434:	vstr	s15, [r0, #8]
          *out++ = 4.0f * lp_state_;
    1438:	vstmia	r1!, {s14}
          hp_state_ = this_sample;
    143c:	vstr	s10, [r0, #12]
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    1440:	beq.n	146a <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x126>
  }

  inline float Next() {
    value_ += increment_;
    1442:	vadd.f32	s12, s12, s7
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    1446:	vldr	s15, [r0]
    144a:	vadd.f32	s6, s6, s4
    144e:	vadd.f32	s15, s12, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    1452:	vcmpe.f32	s15, s9
    1456:	vmrs	APSR_nzcv, fpscr
    145a:	bge.n	13e8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0xa4>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    145c:	vmov.f32	s10, s13
    1460:	vstr	s15, [r0]
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    1464:	vldr	s13, [pc, #588]	; 16b4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x370>
    1468:	b.n	1410 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0xcc>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    146a:	vstr	s12, [r0, #20]
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    146e:	mov	r1, r8
    1470:	mov	r2, sl
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    1472:	vldr	s11, [r0, #148]	; 0x94
    float state_2 = state_2_;
    1476:	vldr	s12, [r0, #152]	; 0x98
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    147a:	vstr	s13, [r0, #4]
    147e:	vstr	s6, [r0, #24]
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    1482:	vldr	s14, [r0, #140]	; 0x8c
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    1486:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    1488:	vldr	s15, [r1]
    148c:	vldr	s13, [r0, #136]	; 0x88
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    1490:	adds	r5, r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    1492:	vfms.f32	s15, s14, s11
    1496:	vldr	s14, [r0, #144]	; 0x90
    149a:	vfms.f32	s15, s13, s11
    149e:	vsub.f32	s15, s15, s12
    14a2:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    14a6:	vmov.f32	s14, s11
    14aa:	vfma.f32	s14, s13, s15
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    14ae:	vfma.f32	s12, s13, s14
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    14b2:	vstmia	r1!, {s14}
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    14b6:	vmov.f32	s11, s14
    14ba:	vfma.f32	s11, s13, s15
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    14be:	vfma.f32	s12, s13, s14
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    14c2:	bne.n	1482 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x13e>
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    excitation[i] *= 4.0f;
    14c4:	vmov.f32	s14, #16	; 0x40800000  4.0
    14c8:	mov	r1, r8
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    state_2_ = state_2;
    14ca:	movs	r2, #0
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    14cc:	vstr	s11, [r0, #148]	; 0x94
    state_2_ = state_2;
    14d0:	vstr	s12, [r0, #152]	; 0x98
    14d4:	vldr	s15, [r1]
  // Generate excitation signal (glottal pulse).
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    14d8:	adds	r2, #1
    excitation[i] *= 4.0f;
    14da:	vmul.f32	s15, s15, s14
  // Generate excitation signal (glottal pulse).
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    14de:	cmp	r2, r3
    excitation[i] *= 4.0f;
    14e0:	vstmia	r1!, {s15}
  // Generate excitation signal (glottal pulse).
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    14e4:	bcc.n	14d4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x190>
    excitation[i] *= 4.0f;
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
    14e6:	vldr	s8, [pc, #512]	; 16e8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a4>
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
  MAKE_INTEGRAL_FRACTIONAL(r);
  
  fill(&output[0], &output[size], 0.0f);
    14ea:	add.w	r1, r9, r3, lsl #2
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    excitation[i] *= 4.0f;
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
    14ee:	vmul.f32	s1, s1, s8
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    14f2:	cmp	r9, r1
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
    14f4:	vmul.f32	s2, s2, s8
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    14f8:	vcvt.s32.f32	s14, s1
  MAKE_INTEGRAL_FRACTIONAL(r);
    14fc:	vcvt.s32.f32	s15, s2
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    1500:	vcvt.f32.s32	s7, s14
  MAKE_INTEGRAL_FRACTIONAL(r);
    1504:	vcvt.f32.s32	s8, s15
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    1508:	vsub.f32	s7, s1, s7
  MAKE_INTEGRAL_FRACTIONAL(r);
    150c:	vsub.f32	s8, s2, s8
    1510:	beq.n	151e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1da>
    1512:	mov	r2, r9
	*__first = __tmp;
    1514:	movs	r5, #0
    1516:	str.w	r5, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    151a:	cmp	r1, r2
    151c:	bne.n	1516 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1d2>
    151e:	vmov	r2, s15
    1522:	adds	r4, #0
    1524:	mov.w	r5, #50	; 0x32
    1528:	ldr	r1, [pc, #396]	; (16b8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x374>)
    152a:	add.w	r2, r2, #1
    152e:	it	ne
    1530:	movne	r4, #1
    1532:	mov.w	ip, #0
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    1536:	str	r3, [sp, #68]	; 0x44
    1538:	add.w	r2, r2, r2, lsl #2
    153c:	str	r4, [sp, #4]
    153e:	vmov	r4, s14
    1542:	mov	r3, ip
    1544:	lsls	r2, r2, #1

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    1546:	vldr	s1, [pc, #372]	; 16bc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x378>
    154a:	mul.w	r4, r5, r4
    
    if (f >= 160.0f) {
    154e:	vldr	s2, [pc, #368]	; 16c0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x37c>
    1552:	sub.w	r7, r2, #10
    1556:	vldr	s17, [pc, #364]	; 16c4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x380>
    155a:	adds	r5, r4, r5
    155c:	add.w	lr, r4, r2
    1560:	adds	r6, r7, r4
    1562:	vldr	s16, [pc, #356]	; 16c8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x384>
    1566:	add	r7, r5
    1568:	add	r5, r2
    156a:	adds	r6, #1
    156c:	add	lr, r1
    156e:	add	r7, r1
    1570:	add	r5, r1
    1572:	add	r6, r1
    1574:	vldr	s0, [pc, #340]	; 16cc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x388>
      f = 160.0f;
    }
    f = a0 * stmlib::SemitonesToRatio(f - 33.0f);
    1578:	vldr	s3, [pc, #340]	; 16d0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x38c>
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    157c:	vldr	s4, [pc, #340]	; 16d4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x390>
    1580:	vldr	s5, [pc, #340]	; 16d8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x394>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    1584:	vldr	s6, [pc, #340]	; 16dc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x398>
    1588:	ldr.w	ip, [sp, #68]	; 0x44
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
    158c:	ldrb	r2, [r6, #0]
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    158e:	ldrb.w	r1, [lr, #1]
    float p1r_a = p1r0.amplitude + \
    1592:	ldrb	r4, [r7, #1]
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    1594:	vmov	s15, r2
    1598:	subs	r1, r1, r2
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    159a:	ldrb	r2, [r5, #1]
    const Formant& p0r0 = phonemes_[p_integral][r_integral].formant[i];
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
    159c:	ldrb.w	fp, [r6, #-1]
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    15a0:	vcvt.f32.s32	s9, s15
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    15a4:	subs	r2, r2, r4
    15a6:	vmov	s15, r4
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
    15aa:	ldrb	r4, [r7, #0]

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    15ac:	vmov	s13, r2
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    15b0:	ldrb.w	r2, [lr]

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    15b4:	vcvt.f32.s32	s11, s15
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    15b8:	vmov	s15, r1
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    15bc:	rsb	r2, fp, r2

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    15c0:	vcvt.f32.s32	s13, s13
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    15c4:	vcvt.f32.s32	s12, s15
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    15c8:	vmov	s15, fp
    15cc:	vmov	s18, r2
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    15d0:	ldrb	r2, [r5, #0]
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    15d2:	vcvt.f32.s32	s15, s15
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    15d6:	subs	r2, r2, r4
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    15d8:	vcvt.f32.s32	s18, s18
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    15dc:	vfma.f32	s9, s12, s8

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    15e0:	vmov	s14, r2

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    15e4:	vfma.f32	s11, s13, s8
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    15e8:	vfma.f32	s15, s18, s8
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    15ec:	vcvt.f32.s32	s10, s14
    15f0:	vmov	s14, r4
    15f4:	vcvt.f32.s32	s14, s14

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    15f8:	vsub.f32	s13, s11, s9

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    15fc:	vfma.f32	s14, s10, s8

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    1600:	vfma.f32	s9, s13, s7

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    1604:	vsub.f32	s14, s14, s15

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    1608:	vmul.f32	s9, s9, s1

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    160c:	vfma.f32	s15, s14, s7
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    
    if (f >= 160.0f) {
    1610:	vcmpe.f32	s15, s2
    1614:	vmrs	APSR_nzcv, fpscr
    1618:	bge.w	1766 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x422>
    161c:	vsub.f32	s15, s15, s17
    1620:	vadd.f32	s15, s15, s16
    1624:	vcvt.s32.f32	s14, s15
    1628:	vmov	r1, s14
    162c:	vcvt.f32.s32	s14, s14
    1630:	vsub.f32	s15, s15, s14
    1634:	vmul.f32	s15, s15, s0
    1638:	vcvt.s32.f32	s15, s15
    163c:	vmov	r2, s15
    1640:	ldr	r4, [pc, #156]	; (16e0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x39c>)
    1642:	add.w	r1, r4, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    1646:	ldr	r4, [pc, #156]	; (16e4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a0>)
    1648:	add.w	r2, r4, r2, lsl #2
      f = 160.0f;
    }
    f = a0 * stmlib::SemitonesToRatio(f - 33.0f);
    164c:	vldr	s14, [r1]
    1650:	vldr	s15, [r2]
    1654:	vmul.f32	s15, s14, s15
    1658:	vmul.f32	s15, s15, s3
    if (click_duration_ && i == 0) {
    165c:	cbnz	r3, 1666 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x322>
    165e:	ldr	r2, [sp, #4]
    1660:	cmp	r2, #0
    1662:	bne.w	17c8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x484>
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1666:	vmul.f32	s14, s15, s4
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    166a:	vstr	s6, [r0, #40]	; 0x28
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    166e:	vmov.f32	s10, s5
  }
  
  template<FilterMode mode>
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    1672:	vldr	s11, [r0, #48]	; 0x30
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1676:	vmov.f32	s13, #112	; 0x3f800000  1.0
  
  template<FilterMode mode>
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    167a:	vldr	s12, [r0, #52]	; 0x34
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    167e:	vfma.f32	s10, s15, s14
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1682:	vmov.f32	s14, s13
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1686:	vmul.f32	s15, s10, s15
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    168a:	vfma.f32	s14, s15, s6

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    168e:	vstr	s15, [r0, #36]	; 0x24
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1692:	vfma.f32	s14, s15, s15
    1696:	vmov.f32	s15, s14
    169a:	vdiv.f32	s14, s13, s15
    169e:	vstr	s14, [r0, #44]	; 0x2c
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    16a2:	cmp.w	ip, #0
    16a6:	beq.n	1738 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3f4>
    16a8:	mov	r4, r8
    16aa:	mov	r1, r9
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    16ac:	mov	r2, sl
    16ae:	b.n	16f0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3ac>
    16b0:	.word	0x358637bd
    16b4:	.word	0x00000000
    16b8:	.word	0x2001f988
    16bc:	.word	0x3b800000
    16c0:	.word	0x43200000
    16c4:	.word	0x42040000
    16c8:	.word	0x43000000
    16cc:	.word	0x43800000
    16d0:	.word	0x3a969651
    16d4:	.word	0x413957d7
    16d8:	.word	0x40490fdb
    16dc:	.word	0x3d4ccccd
    16e0:	.word	0x20000024
    16e4:	.word	0x20000428
    16e8:	.word	0x407fef9e
    16ec:	vldr	s14, [r0, #44]	; 0x2c
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    16f0:	vldr	s10, [r0, #40]	; 0x28
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    16f4:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    16f6:	vldmia	r4!, {s15}
    16fa:	vldr	s13, [r0, #36]	; 0x24
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    16fe:	cmp.w	r2, #4294967295
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    1702:	vfms.f32	s15, s10, s11
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out += gain * value;
    1706:	vldr	s10, [r1]
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    170a:	vfms.f32	s15, s13, s11
    170e:	vsub.f32	s15, s15, s12
    1712:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    1716:	vmov.f32	s14, s11
    171a:	vfma.f32	s14, s13, s15
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    171e:	vfma.f32	s12, s13, s14
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out += gain * value;
    1722:	vfma.f32	s10, s9, s14
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    1726:	vmov.f32	s11, s14
    172a:	vfma.f32	s11, s13, s15
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    172e:	vfma.f32	s12, s13, s14
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out += gain * value;
    1732:	vstmia	r1!, {s10}
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    1736:	bne.n	16ec <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a8>
  
  MAKE_INTEGRAL_FRACTIONAL(p);
  MAKE_INTEGRAL_FRACTIONAL(r);
  
  fill(&output[0], &output[size], 0.0f);
  for (int i = 0; i < kNaiveSpeechNumFormants; ++i) {
    1738:	adds	r3, #1
      
      *out += gain * value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    173a:	vstr	s11, [r0, #48]	; 0x30
    state_2_ = state_2;
    173e:	vstr	s12, [r0, #52]	; 0x34
    1742:	add.w	lr, lr, #2
    1746:	cmp	r3, #5
    1748:	add.w	r7, r7, #2
    174c:	add.w	r5, r5, #2
    1750:	add.w	r6, r6, #2
    1754:	add.w	r0, r0, #20
    1758:	bne.w	158c <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x248>
      f *= 0.5f;
    }
    filter_[i].set_f_q<FREQUENCY_DIRTY>(f, 20.0f);
    filter_[i].ProcessAdd<FILTER_MODE_BAND_PASS>(excitation, output, size, a);
  }
}
    175c:	add	sp, #12
    175e:	vpop	{d8-d9}
    1762:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1766:	movs	r2, #0
    1768:	movs	r1, #255	; 0xff
    176a:	b.n	1640 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x2fc>
    176c:	mov.w	r4, #2400	; 0x960
    1770:	b.n	135e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1a>
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    1772:	vabs.f32	s15, s0
    1776:	vmov.f32	s14, #96	; 0x3f000000  0.5
    177a:	vadd.f32	s15, s15, s15
    177e:	vcmpe.f32	s15, s14
    1782:	vmrs	APSR_nzcv, fpscr
    1786:	bgt.w	1398 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x54>
    178a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    178e:	vsub.f32	s15, s13, s15
    1792:	vcmpe.f32	s15, s14
    1796:	vmrs	APSR_nzcv, fpscr
    179a:	it	pl
    179c:	vmovpl.f32	s15, s14
    17a0:	b.n	1398 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x54>
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    excitation[i] *= 4.0f;
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
    17a2:	vldr	s8, [pc, #-188]	; 16e8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a4>
    17a6:	vmul.f32	s1, s1, s8
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
    17aa:	vmul.f32	s2, s2, s8
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    17ae:	vcvt.s32.f32	s14, s1
  MAKE_INTEGRAL_FRACTIONAL(r);
    17b2:	vcvt.s32.f32	s15, s2
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    17b6:	vcvt.f32.s32	s7, s14
  MAKE_INTEGRAL_FRACTIONAL(r);
    17ba:	vcvt.f32.s32	s8, s15
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    17be:	vsub.f32	s7, s1, s7
  MAKE_INTEGRAL_FRACTIONAL(r);
    17c2:	vsub.f32	s8, s2, s8
    17c6:	b.n	151e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1da>
    if (f >= 160.0f) {
      f = 160.0f;
    }
    f = a0 * stmlib::SemitonesToRatio(f - 33.0f);
    if (click_duration_ && i == 0) {
      f *= 0.5f;
    17c8:	vmov.f32	s14, #96	; 0x3f000000  0.5
    17cc:	vmul.f32	s15, s15, s14
    17d0:	b.n	1666 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x322>
    17d2:	nop

000017d4 <plaits::SAMSpeechSynth::Init()>:

using namespace std;
using namespace stmlib;

void SAMSpeechSynth::Init() {
  phase_ = 0.0f;
    17d4:	movs	r2, #0
  frequency_ = 0.0f;
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
    17d6:	add.w	r3, r0, #16
    17da:	add.w	r1, r0, #28

using namespace std;
using namespace stmlib;

void SAMSpeechSynth::Init() {
  phase_ = 0.0f;
    17de:	str	r2, [r0, #0]
  frequency_ = 0.0f;
    17e0:	str	r2, [r0, #4]
  pulse_next_sample_ = 0.0f;
    17e2:	str	r2, [r0, #8]
  pulse_lp_ = 0.0f;
    17e4:	str	r2, [r0, #12]
namespace plaits {

using namespace std;
using namespace stmlib;

void SAMSpeechSynth::Init() {
    17e6:	push	{r4}
	*__first = __tmp;
    17e8:	movs	r4, #0
    17ea:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    17ee:	cmp	r1, r3
	*__first = __tmp;
    17f0:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    17f4:	bne.n	17ea <plaits::SAMSpeechSynth::Init()+0x16>
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
  consonant_samples_ = 0;
  consonant_index_ = 0.0f;
    17f6:	movs	r3, #0
  frequency_ = 0.0f;
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
  consonant_samples_ = 0;
    17f8:	str	r2, [r0, #28]
  consonant_index_ = 0.0f;
}
    17fa:	ldr.w	r4, [sp], #4
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
  consonant_samples_ = 0;
  consonant_index_ = 0.0f;
    17fe:	str	r3, [r0, #32]
}
    1800:	bx	lr
    1802:	nop

00001804 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)>:

void SAMSpeechSynth::InterpolatePhonemeData(
  float phoneme,
  float formant_shift,
  uint32_t* formant_frequency,
  float* formant_amplitude) {
    1804:	vmov.f32	s14, #4	; 0x40200000  2.5
    1808:	vldr	s13, [pc, #164]	; 18b0 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xac>
    180c:	vmov.f32	s15, #112	; 0x3f800000  1.0
    1810:	vldr	s12, [pc, #160]	; 18b4 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xb0>
    1814:	vmov.f32	s11, #32	; 0x41000000  8.0
    1818:	subs	r1, #4
    181a:	vfma.f32	s15, s1, s14
  MAKE_INTEGRAL_FRACTIONAL(phoneme);
    181e:	vcvt.s32.f32	s14, s0

void SAMSpeechSynth::InterpolatePhonemeData(
  float phoneme,
  float formant_shift,
  uint32_t* formant_frequency,
  float* formant_amplitude) {
    1822:	push	{r4, r5, r6, r7}
  MAKE_INTEGRAL_FRACTIONAL(phoneme);
    1824:	vmov	r4, s14
    1828:	vcvt.f32.s32	s14, s14
    182c:	vmul.f32	s15, s15, s11
    1830:	ldr	r5, [pc, #132]	; (18b8 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xb4>)
    1832:	add.w	r3, r4, r4, lsl #1
    1836:	add.w	r7, r2, #12
    183a:	vsub.f32	s0, s0, s14
    183e:	ldr	r6, [pc, #124]	; (18bc <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xb8>)
    1840:	vmul.f32	s15, s15, s13
    1844:	lsls	r3, r3, #1
    1846:	adds	r0, r3, #6
    1848:	add	r3, r5
    184a:	vdiv.f32	s13, s15, s12
    184e:	add	r0, r5
  const Phoneme& p_1 = phonemes_[phoneme_integral];
  const Phoneme& p_2 = phonemes_[phoneme_integral + 1];

  formant_shift = 1.0f + formant_shift * 2.5f;
  for (int i = 0; i < kSAMNumFormants; ++i) {
    float f_1 = p_1.formant[i].frequency;
    1850:	ldrb	r4, [r3, #0]
    1852:	adds	r0, #2
    1854:	adds	r3, #2
    1856:	vmov	s15, r4
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    185a:	ldrb.w	r4, [r0, #-2]
    185e:	vmov	s14, r4
  const Phoneme& p_1 = phonemes_[phoneme_integral];
  const Phoneme& p_2 = phonemes_[phoneme_integral + 1];

  formant_shift = 1.0f + formant_shift * 2.5f;
  for (int i = 0; i < kSAMNumFormants; ++i) {
    float f_1 = p_1.formant[i].frequency;
    1862:	vcvt.f32.u32	s15, s15
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    1866:	vcvt.f32.u32	s14, s14
    186a:	vsub.f32	s14, s14, s15
    186e:	vfma.f32	s15, s0, s14
    f *= 8.0f * formant_shift * 4294967296.0f / kSampleRate;
    formant_frequency[i] = static_cast<uint32_t>(f);
    1872:	vmul.f32	s15, s15, s13
    1876:	vcvt.u32.f32	s15, s15
    187a:	vmov	r4, s15
    187e:	str.w	r4, [r1, #4]!
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    1882:	ldrb.w	r5, [r3, #-1]
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    1886:	ldrb.w	r4, [r0, #-1]
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    f *= 8.0f * formant_shift * 4294967296.0f / kSampleRate;
    formant_frequency[i] = static_cast<uint32_t>(f);
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    188a:	add.w	r5, r6, r5, lsl #2
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    188e:	add.w	r4, r6, r4, lsl #2
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    f *= 8.0f * formant_shift * 4294967296.0f / kSampleRate;
    formant_frequency[i] = static_cast<uint32_t>(f);
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    1892:	vldr	s15, [r5]
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    formant_amplitude[i] = a_1 + (a_2 - a_1) * phoneme_fractional;
    1896:	vldr	s14, [r4]
    189a:	vsub.f32	s14, s14, s15
    189e:	vfma.f32	s15, s0, s14
    18a2:	vstmia	r2!, {s15}

  const Phoneme& p_1 = phonemes_[phoneme_integral];
  const Phoneme& p_2 = phonemes_[phoneme_integral + 1];

  formant_shift = 1.0f + formant_shift * 2.5f;
  for (int i = 0; i < kSAMNumFormants; ++i) {
    18a6:	cmp	r2, r7
    18a8:	bne.n	1850 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0x4c>
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    formant_amplitude[i] = a_1 + (a_2 - a_1) * phoneme_fractional;
  }
}
    18aa:	pop	{r4, r5, r6, r7}
    18ac:	bx	lr
    18ae:	nop
    18b0:	.word	0x4f800000
    18b4:	.word	0x473b8000
    18b8:	.word	0x2001fa84
    18bc:	.word	0x2001faec

000018c0 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)>:
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
  if (frequency >= 0.0625f) {
    18c0:	vldr	s14, [pc, #552]	; 1aec <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x22c>
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    18c4:	vmov.f32	s9, s0
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
    18c8:	vcmp.f32	s0, s14
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    18cc:	push	{r4, r5, r6, r7, lr}
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
    18ce:	vmrs	APSR_nzcv, fpscr
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    18d2:	mov	r4, r0
    18d4:	mov	r5, r2
    18d6:	mov	r6, r3
    18d8:	vpush	{d8-d10}
    18dc:	sub	sp, #28
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
    18de:	it	ge
    18e0:	vmovge.f32	s9, s14
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    18e4:	ldr	r7, [sp, #72]	; 0x48
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
  }
  
  if (consonant) {
    18e6:	cmp	r1, #0
    18e8:	bne.w	1a96 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1d6>
    18ec:	ldr	r3, [r0, #28]
    consonant_samples_ = kSampleRate * 0.05f;
    int r = (vowel + 3.0f * frequency + 7.0f * formant_shift) * 8.0f;
    consonant_index_ = (r % kSAMNumConsonants);
  }
  consonant_samples_ -= min(consonant_samples_, size);
    18ee:	cmp	r3, r7
    18f0:	ite	ls
    18f2:	subls	r3, r3, r3
    18f4:	subhi	r3, r3, r7
    18f6:	str	r3, [r4, #28]
  
  float phoneme = consonant_samples_
      ? (consonant_index_ + kSAMNumVowels)
      : vowel * (kSAMNumVowels - 1.0001f);
    18f8:	cmp	r3, #0
    18fa:	beq.w	1a8c <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1cc>
    18fe:	vmov.f32	s0, #34	; 0x41100000  9.0
    1902:	vldr	s15, [r4, #32]
    1906:	vadd.f32	s0, s15, s0
  
  InterpolatePhonemeData(
      phoneme,
      formant_shift,
      formant_frequency,
      formant_amplitude);
    190a:	mov	r0, r4
    190c:	vmov.f32	s1, s2
    1910:	add	r2, sp, #12
    1912:	mov	r1, sp
    1914:	bl	1804 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    1918:	vldr	s10, [r4, #4]
    increment_ = (new_value - *state) / static_cast<float>(size);
    191c:	vmov	s15, r7

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
    1920:	vldr	s18, [r4, #8]
    1924:	vsub.f32	s9, s9, s10
  
  while (size--) {
    1928:	subs	r0, r7, #1
    192a:	vcvt.f32.u32	s15, s15
    192e:	vdiv.f32	s7, s9, s15
    1932:	cmp	r7, #0
    1934:	beq.w	1a7c <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1bc>
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    1938:	vldr	s0, [sp]
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    193c:	vldr	s1, [sp, #4]
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    1940:	vldr	s2, [sp, #8]
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    1944:	vldr	s3, [sp, #12]
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
    1948:	vmov.f32	s11, #112	; 0x3f800000  1.0
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    194c:	vldr	s4, [sp, #16]
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
    1950:	vmov.f32	s8, #96	; 0x3f000000  0.5
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    1954:	vldr	s5, [sp, #20]
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    1958:	vmov.f32	s16, #224	; 0xbf000000 -0.5
    195c:	ldr	r7, [pc, #400]	; (1af0 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x230>)
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    195e:	vmov.f32	s6, #48	; 0x41800000  16.0
  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    1962:	vldr	s9, [pc, #400]	; 1af4 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x234>
    1966:	b.n	1a3a <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x17a>
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    1968:	vsub.f32	s12, s12, s11
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    196c:	vcvt.f32.u32	s14, s1
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    1970:	vcvt.f32.u32	s15, s2
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
    1974:	vdiv.f32	s17, s12, s10
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    1978:	vstr	s12, [r4]
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    197c:	vcvt.f32.u32	s13, s0
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    1980:	vmul.f32	s14, s14, s17
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    1984:	vmul.f32	s15, s15, s17
    1988:	vsub.f32	s19, s11, s17
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    198c:	vcvt.u32.f32	s14, s14
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    1990:	vcvt.u32.f32	s15, s15
      pulse_this_sample -= ThisBlepSample(t);
    1994:	vmul.f32	s20, s17, s8
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    1998:	vmov	r1, s14
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    199c:	vmul.f32	s14, s19, s16
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    19a0:	vmov	r2, s15
      pulse_this_sample -= ThisBlepSample(t);
    19a4:	vmov.f32	s15, s18
      pulse_next_sample -= NextBlepSample(t);
    19a8:	vmov.f32	s18, s9
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    19ac:	str	r1, [r4, #20]
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    19ae:	vmul.f32	s13, s13, s17
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    19b2:	str	r2, [r4, #24]
      pulse_this_sample -= ThisBlepSample(t);
    19b4:	vfms.f32	s15, s17, s20
      pulse_next_sample -= NextBlepSample(t);
    19b8:	vfms.f32	s18, s19, s14
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    19bc:	vcvt.u32.f32	s13, s13
    19c0:	vmov	r3, s13
    19c4:	vstr	s13, [r4, #16]
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    19c8:	vmul.f32	s13, s10, s6
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    19cc:	vldr	s14, [r4, #12]
    19d0:	vsub.f32	s15, s15, s8
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    19d4:	lsrs	r3, r3, #22
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    19d6:	lsrs	r1, r1, #22
    } else {
      formant_phase_[0] += formant_frequency[0];
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    19d8:	vadd.f32	s18, s18, s12
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    19dc:	vcmpe.f32	s13, s11
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    19e0:	add.w	r3, r7, r3, lsl #2
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    19e4:	vsub.f32	s15, s15, s14
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    19e8:	add.w	r1, r7, r1, lsl #2
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    19ec:	lsrs	r2, r2, #22
      formant_amplitude);

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    19ee:	subs	r0, #1
    19f0:	vmrs	APSR_nzcv, fpscr
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    19f4:	add.w	r2, r7, r2, lsl #2
    19f8:	it	gt
    19fa:	vmovgt.f32	s13, s11
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    19fe:	vfma.f32	s14, s15, s13
    1a02:	vstr	s14, [r4, #12]
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    1a06:	vmov.f32	s14, s9
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
    1a0a:	vstmia	r5!, {s15}
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    1a0e:	vldr	s15, [r3]
      formant_amplitude);

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    1a12:	adds	r3, r0, #1
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    1a14:	vldr	s12, [r1]
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    1a18:	vfma.f32	s14, s15, s3
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    1a1c:	vldr	s15, [r2]
    s *= (1.0f - phase_);
    *output++ = s;
    1a20:	vldr	s13, [r4]
    1a24:	vsub.f32	s13, s11, s13
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    1a28:	vfma.f32	s14, s12, s4
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    1a2c:	vfma.f32	s14, s15, s5
    s *= (1.0f - phase_);
    *output++ = s;
    1a30:	vmul.f32	s14, s13, s14
    1a34:	vstmia	r6!, {s14}
      formant_amplitude);

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    1a38:	beq.n	1a7c <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1bc>
  }

  inline float Next() {
    value_ += increment_;
    1a3a:	vadd.f32	s10, s10, s7
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
    1a3e:	vldr	s12, [r4]
    1a42:	vadd.f32	s12, s10, s12
  
    if (phase_ >= 1.0f) {
    1a46:	vcmpe.f32	s12, s11
  
  while (size--) {
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
    1a4a:	vstr	s12, [r4]
  
    if (phase_ >= 1.0f) {
    1a4e:	vmrs	APSR_nzcv, fpscr
    1a52:	bge.n	1968 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0xa8>
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
    1a54:	ldr	r3, [r4, #16]
    1a56:	vmov	lr, s0
      formant_phase_[1] += formant_frequency[1];
    1a5a:	ldr	r1, [r4, #20]
      formant_phase_[2] += formant_frequency[2];
    1a5c:	vmov.f32	s15, s18
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
    1a60:	add	r3, lr
      formant_phase_[1] += formant_frequency[1];
    1a62:	vmov	lr, s1
      formant_phase_[2] += formant_frequency[2];
    1a66:	ldr	r2, [r4, #24]
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
      formant_phase_[1] += formant_frequency[1];
    1a68:	add	r1, lr
      formant_phase_[2] += formant_frequency[2];
    1a6a:	vmov	lr, s2
  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    1a6e:	vldr	s18, [pc, #132]	; 1af4 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x234>
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    1a72:	add	r2, lr
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
    1a74:	str	r3, [r4, #16]
      formant_phase_[1] += formant_frequency[1];
    1a76:	str	r1, [r4, #20]
      formant_phase_[2] += formant_frequency[2];
    1a78:	str	r2, [r4, #24]
    1a7a:	b.n	19c8 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x108>
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    s *= (1.0f - phase_);
    *output++ = s;
  }
  pulse_next_sample_ = pulse_next_sample;
    1a7c:	vstr	s18, [r4, #8]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    1a80:	vstr	s10, [r4, #4]
}
    1a84:	add	sp, #28
    1a86:	vpop	{d8-d10}
    1a8a:	pop	{r4, r5, r6, r7, pc}
  }
  consonant_samples_ -= min(consonant_samples_, size);
  
  float phoneme = consonant_samples_
      ? (consonant_index_ + kSAMNumVowels)
      : vowel * (kSAMNumVowels - 1.0001f);
    1a8c:	vldr	s0, [pc, #104]	; 1af8 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x238>
    1a90:	vmul.f32	s0, s1, s0
    1a94:	b.n	190a <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x4a>
  }
  
  if (consonant) {
    consonant_samples_ = kSampleRate * 0.05f;
    int r = (vowel + 3.0f * frequency + 7.0f * formant_shift) * 8.0f;
    consonant_index_ = (r % kSAMNumConsonants);
    1a96:	vmov.f32	s14, #8	; 0x40400000  3.0
    1a9a:	ldr	r3, [pc, #96]	; (1afc <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x23c>)
    1a9c:	vmov.f32	s15, s1
    1aa0:	vmov.f32	s13, #28	; 0x40e00000  7.0
    1aa4:	vfma.f32	s15, s9, s14
    1aa8:	vmov.f32	s14, s15
    1aac:	vfma.f32	s14, s2, s13
    1ab0:	vcvt.s32.f32	s14, s14, #3
    1ab4:	vmov	r2, s14
    1ab8:	ands	r2, r3
    1aba:	cmp	r2, #0
    1abc:	mov	r3, r2
    1abe:	blt.n	1ad2 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x212>
    1ac0:	vmov	s15, r3
    1ac4:	mov.w	r3, #2400	; 0x960
    1ac8:	vcvt.f32.s32	s14, s15
    1acc:	vstr	s14, [r4, #32]
    1ad0:	b.n	18ee <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x2e>
    1ad2:	subs	r3, r2, #1
    1ad4:	orn	r3, r3, #7
    1ad8:	adds	r3, #1
    1ada:	vmov	s15, r3
    1ade:	mov.w	r3, #2400	; 0x960
    1ae2:	vcvt.f32.s32	s14, s15
    1ae6:	vstr	s14, [r4, #32]
    1aea:	b.n	18ee <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x2e>
    1aec:	.word	0x3d800000
    1af0:	.word	0x200025e0
    1af4:	.word	0x00000000
    1af8:	.word	0x40ffff2e
    1afc:	.word	0x80000007

00001b00 <plaits::LPCSpeechSynth::Init()>:
namespace plaits {

using namespace std;
using namespace stmlib;

void LPCSpeechSynth::Init() {
    1b00:	push	{r4, r5, r6}
  phase_ = 0.0f;
    1b02:	movs	r4, #0
  frequency_ = 0.0125f;
    1b04:	ldr	r6, [pc, #48]	; (1b38 <plaits::LPCSpeechSynth::Init()+0x38>)
  noise_energy_ = 0.0f;
  pulse_energy_ = 0.0f;

  next_sample_ = 0.0f;
  excitation_pulse_sample_index_ = 0;
    1b06:	movs	r5, #0

  fill(&k_[0], &k_[kLPCOrder], 0);
    1b08:	add.w	r2, r0, #24
    1b0c:	add.w	r3, r0, #64	; 0x40
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    1b10:	mov	r1, r4
using namespace std;
using namespace stmlib;

void LPCSpeechSynth::Init() {
  phase_ = 0.0f;
  frequency_ = 0.0125f;
    1b12:	str	r6, [r0, #4]
  noise_energy_ = 0.0f;
  pulse_energy_ = 0.0f;

  next_sample_ = 0.0f;
  excitation_pulse_sample_index_ = 0;
    1b14:	str	r5, [r0, #20]

using namespace std;
using namespace stmlib;

void LPCSpeechSynth::Init() {
  phase_ = 0.0f;
    1b16:	str	r4, [r0, #0]
  frequency_ = 0.0125f;
  noise_energy_ = 0.0f;
    1b18:	str	r4, [r0, #8]
  pulse_energy_ = 0.0f;
    1b1a:	str	r4, [r0, #12]

  next_sample_ = 0.0f;
    1b1c:	str	r4, [r0, #16]
    1b1e:	str.w	r1, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    1b22:	cmp	r3, r2
    1b24:	bne.n	1b1e <plaits::LPCSpeechSynth::Init()+0x1e>
  excitation_pulse_sample_index_ = 0;

  fill(&k_[0], &k_[kLPCOrder], 0);
  fill(&s_[0], &s_[kLPCOrder + 1], 0);
    1b26:	adds	r0, #108	; 0x6c
	*__first = __tmp;
    1b28:	movs	r2, #0
    1b2a:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    1b2e:	cmp	r0, r3
    1b30:	bne.n	1b2a <plaits::LPCSpeechSynth::Init()+0x2a>
}
    1b32:	pop	{r4, r5, r6}
    1b34:	bx	lr
    1b36:	nop
    1b38:	.word	0x3c4ccccd

00001b3c <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)>:
    float* excitation,
    float* output,
    size_t size) {
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
    1b3c:	vldr	s15, [pc, #624]	; 1db0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x274>
    1b40:	vldr	s14, [r0, #4]
    1b44:	vsub.f32	s14, s14, s15
void LPCSpeechSynth::Render(
    float prosody_amount,
    float pitch_shift,
    float* excitation,
    float* output,
    size_t size) {
    1b48:	push	{r4, r5, r6, r7, lr}
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
    1b4a:	vfma.f32	s15, s14, s0
void LPCSpeechSynth::Render(
    float prosody_amount,
    float pitch_shift,
    float* excitation,
    float* output,
    size_t size) {
    1b4e:	vpush	{d8-d15}
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
    1b52:	vmul.f32	s1, s15, s1
  CONSTRAIN(f, 0.0f, 0.5f);
    1b56:	vcmpe.f32	s1, #0.0
    1b5a:	vmrs	APSR_nzcv, fpscr
    1b5e:	bmi.w	1daa <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x26e>
    1b62:	vmov.f32	s15, #96	; 0x3f000000  0.5
    1b66:	vcmp.f32	s1, s15
    1b6a:	vmrs	APSR_nzcv, fpscr
    1b6e:	it	gt
    1b70:	vmovgt.f32	s1, s15
  
  float next_sample = next_sample_;
    1b74:	vldr	s3, [r0, #16]
  while (size--) {
    1b78:	subs	r6, r3, #1
    1b7a:	cmp	r3, #0
    1b7c:	beq.w	1da0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x264>
    1b80:	ldr.w	ip, [pc, #584]	; 1dcc <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x290>
    phase_ += f;
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    1b84:	vmov.f32	s30, #112	; 0x3f800000  1.0
      int reset_sample = static_cast<int>(32.0f * reset_time);
      
      float discontinuity = 0.0f;
      if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
    1b88:	ldr.w	lr, [pc, #580]	; 1dd0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x294>
    1b8c:	ldr.w	r3, [ip]
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    1b90:	ldr	r7, [pc, #544]	; (1db4 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x278>)
    1b92:	b.n	1c02 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0xc6>
    e[3] = e[4] - k_[3] * s_[3];
    e[2] = e[3] - k_[2] * s_[2];
    e[1] = e[2] - k_[1] * s_[1];
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);
    1b94:	vmov.f32	s31, #0	; 0x40000000  2.0
    1b98:	vcmp.f32	s15, s31
    1b9c:	vmrs	APSR_nzcv, fpscr
    1ba0:	it	gt
    1ba2:	vmovgt.f32	s15, s31

    s_[9] = s_[8] + k_[8] * e[8];
    1ba6:	vfma.f32	s5, s29, s4
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    1baa:	subs	r6, #1
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    1bac:	vfma.f32	s6, s28, s27
    s_[5] = s_[4] + k_[4] * e[4];
    s_[4] = s_[3] + k_[3] * e[3];
    s_[3] = s_[2] + k_[2] * e[2];
    s_[2] = s_[1] + k_[1] * e[1];
    s_[1] = s_[0] + k_[0] * e[0];
    s_[0] = e[0];
    1bb0:	vstr	s15, [r0, #64]	; 0x40
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    s_[7] = s_[6] + k_[6] * e[6];
    1bb4:	vfma.f32	s7, s26, s25
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    1bb8:	adds	r4, r6, #1
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    s_[7] = s_[6] + k_[6] * e[6];
    s_[6] = s_[5] + k_[5] * e[5];
    1bba:	vfma.f32	s8, s24, s23
    s_[5] = s_[4] + k_[4] * e[4];
    1bbe:	vfma.f32	s9, s22, s21
    s_[4] = s_[3] + k_[3] * e[3];
    1bc2:	vfma.f32	s10, s20, s19
    s_[3] = s_[2] + k_[2] * e[2];
    1bc6:	vfma.f32	s11, s18, s17
    e[1] = e[2] - k_[1] * s_[1];
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    1bca:	vstr	s5, [r0, #100]	; 0x64
    s_[7] = s_[6] + k_[6] * e[6];
    s_[6] = s_[5] + k_[5] * e[5];
    s_[5] = s_[4] + k_[4] * e[4];
    s_[4] = s_[3] + k_[3] * e[3];
    s_[3] = s_[2] + k_[2] * e[2];
    s_[2] = s_[1] + k_[1] * e[1];
    1bce:	vfma.f32	s12, s16, s0
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    1bd2:	vstr	s6, [r0, #96]	; 0x60
    s_[6] = s_[5] + k_[5] * e[5];
    s_[5] = s_[4] + k_[4] * e[4];
    s_[4] = s_[3] + k_[3] * e[3];
    s_[3] = s_[2] + k_[2] * e[2];
    s_[2] = s_[1] + k_[1] * e[1];
    s_[1] = s_[0] + k_[0] * e[0];
    1bd6:	vfma.f32	s13, s2, s15
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    s_[7] = s_[6] + k_[6] * e[6];
    1bda:	vstr	s7, [r0, #92]	; 0x5c
    s_[6] = s_[5] + k_[5] * e[5];
    1bde:	vstr	s8, [r0, #88]	; 0x58
    s_[5] = s_[4] + k_[4] * e[4];
    1be2:	vstr	s9, [r0, #84]	; 0x54
    s_[4] = s_[3] + k_[3] * e[3];
    1be6:	vstr	s10, [r0, #80]	; 0x50
    s_[3] = s_[2] + k_[2] * e[2];
    1bea:	vstr	s11, [r0, #76]	; 0x4c
    s_[2] = s_[1] + k_[1] * e[1];
    1bee:	vstr	s12, [r0, #72]	; 0x48
    s_[1] = s_[0] + k_[0] * e[0];
    1bf2:	vstr	s13, [r0, #68]	; 0x44
    s_[0] = e[0];
    
    *excitation++ = e[10];
    1bf6:	vstmia	r1!, {s14}
    *output++ = e[0];
    1bfa:	vstmia	r2!, {s15}
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    1bfe:	beq.w	1d9c <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x260>
    phase_ += f;
    1c02:	vldr	s15, [r0]
    1c06:	vadd.f32	s15, s1, s15
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    1c0a:	vcmpe.f32	s15, s30
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    phase_ += f;
    1c0e:	vstr	s15, [r0]
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    1c12:	vmrs	APSR_nzcv, fpscr
    1c16:	blt.w	1d90 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x254>
      phase_ -= 1.0f;
    1c1a:	vsub.f32	s15, s15, s30
      float reset_time = phase_ / f;
      int reset_sample = static_cast<int>(32.0f * reset_time);
      
      float discontinuity = 0.0f;
      if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
    1c1e:	ldr	r5, [r0, #20]
    1c20:	cmp.w	r5, #640	; 0x280
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float reset_time = phase_ / f;
    1c24:	vdiv.f32	s14, s15, s1
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    1c28:	vstr	s15, [r0]
      float reset_time = phase_ / f;
      int reset_sample = static_cast<int>(32.0f * reset_time);
    1c2c:	vldr	s15, [pc, #392]	; 1db8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x27c>
    1c30:	vmul.f32	s15, s14, s15
    1c34:	vcvt.s32.f32	s15, s15
    1c38:	vmov	r4, s15
      
      float discontinuity = 0.0f;
      if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
    1c3c:	bge.w	1d8a <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x24e>
        excitation_pulse_sample_index_ -= reset_sample;
    1c40:	subs	r5, r5, r4
    1c42:	vldr	s12, [pc, #376]	; 1dbc <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x280>
    1c46:	vldr	s15, [r0, #12]
    1c4a:	str	r5, [r0, #20]
    1c4c:	ldrsb.w	r5, [lr, r5]
    1c50:	vmov	s13, r5
    1c54:	vcvt.f32.s32	s13, s13
    1c58:	vmul.f32	s13, s13, s12
    1c5c:	vnmul.f32	s13, s15, s13
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    1c60:	vmov.f32	s15, #96	; 0x3f000000  0.5
    1c64:	mov	r5, r4
    1c66:	vsub.f32	s11, s30, s14
      next_sample += -discontinuity * NextBlepSample(reset_time);
      
      excitation_pulse_sample_index_ = reset_sample;
    1c6a:	str	r4, [r0, #20]
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    1c6c:	vmul.f32	s12, s14, s15
      next_sample += -discontinuity * NextBlepSample(reset_time);
    1c70:	vmov.f32	s15, #224	; 0xbf000000 -0.5
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    1c74:	vmul.f32	s14, s12, s14
      next_sample += -discontinuity * NextBlepSample(reset_time);
    1c78:	vmul.f32	s15, s11, s15
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    1c7c:	vmov.f32	s12, s3
      next_sample += -discontinuity * NextBlepSample(reset_time);
    1c80:	vldr	s3, [pc, #316]	; 1dc0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x284>
    1c84:	vmul.f32	s15, s15, s11
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    1c88:	vfma.f32	s12, s14, s13
      next_sample += -discontinuity * NextBlepSample(reset_time);
    1c8c:	vfma.f32	s3, s15, s13
    1c90:	mul.w	r4, r7, r3
    1c94:	ldr	r3, [pc, #300]	; (1dc4 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x288>)
      
      excitation_pulse_sample_index_ = reset_sample;
    }
    
    float e[11];
    e[10] = Random::GetSample() > 0 ? noise_energy_ : -noise_energy_;
    1c96:	vldr	s14, [r0, #8]
    1c9a:	add	r3, r4
    1c9c:	cmp.w	r3, #65536	; 0x10000
    1ca0:	it	lt
    1ca2:	vneglt.f32	s14, s14
    if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
    1ca6:	cmp.w	r5, #640	; 0x280
    1caa:	bge.n	1ccc <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x190>
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
    1cac:	ldrsb.w	r4, [lr, r5]
      excitation_pulse_sample_index_ += 32;
    1cb0:	adds	r5, #32
    
    float e[11];
    e[10] = Random::GetSample() > 0 ? noise_energy_ : -noise_energy_;
    if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
    1cb2:	vldr	s11, [pc, #264]	; 1dbc <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x280>
    1cb6:	vmov	s13, r4
    1cba:	vldr	s15, [r0, #12]
      excitation_pulse_sample_index_ += 32;
    1cbe:	str	r5, [r0, #20]
    
    float e[11];
    e[10] = Random::GetSample() > 0 ? noise_energy_ : -noise_energy_;
    if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
    1cc0:	vcvt.f32.s32	s13, s13
    1cc4:	vmul.f32	s13, s13, s11
    1cc8:	vfma.f32	s3, s13, s15
      excitation_pulse_sample_index_ += 32;
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
    1ccc:	vadd.f32	s15, s12, s14
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    1cd0:	vldr	s13, [r0, #100]	; 0x64
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
      excitation_pulse_sample_index_ += 32;
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
    1cd4:	vmov.f32	s14, #120	; 0x3fc00000  1.5
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    1cd8:	vldr	s12, [r0, #60]	; 0x3c
    1cdc:	vldr	s29, [r0, #56]	; 0x38
    e[3] = e[4] - k_[3] * s_[3];
    e[2] = e[3] - k_[2] * s_[2];
    e[1] = e[2] - k_[1] * s_[1];
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);
    1ce0:	vmov.f32	s31, #128	; 0xc0000000 -2.0
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    1ce4:	vldr	s5, [r0, #96]	; 0x60
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
      excitation_pulse_sample_index_ += 32;
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
    1ce8:	vmul.f32	s14, s15, s14
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    e[7] = e[8] - k_[7] * s_[7];
    1cec:	vldr	s28, [r0, #52]	; 0x34
    1cf0:	vldr	s6, [r0, #92]	; 0x5c
    e[6] = e[7] - k_[6] * s_[6];
    1cf4:	vldr	s26, [r0, #48]	; 0x30
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    1cf8:	vmov.f32	s4, s14
    e[7] = e[8] - k_[7] * s_[7];
    e[6] = e[7] - k_[6] * s_[6];
    1cfc:	vldr	s7, [r0, #88]	; 0x58
    e[5] = e[6] - k_[5] * s_[5];
    1d00:	vldr	s24, [r0, #44]	; 0x2c
    1d04:	vldr	s8, [r0, #84]	; 0x54
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    1d08:	vfms.f32	s4, s12, s13
    e[7] = e[8] - k_[7] * s_[7];
    e[6] = e[7] - k_[6] * s_[6];
    e[5] = e[6] - k_[5] * s_[5];
    e[4] = e[5] - k_[4] * s_[4];
    1d0c:	vldr	s22, [r0, #40]	; 0x28
    1d10:	vldr	s9, [r0, #80]	; 0x50
    e[3] = e[4] - k_[3] * s_[3];
    1d14:	vldr	s20, [r0, #36]	; 0x24
    1d18:	vldr	s10, [r0, #76]	; 0x4c
    e[2] = e[3] - k_[2] * s_[2];
    1d1c:	vldr	s18, [r0, #32]
    1d20:	vldr	s11, [r0, #72]	; 0x48
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    1d24:	vfms.f32	s4, s29, s5
    e[6] = e[7] - k_[6] * s_[6];
    e[5] = e[6] - k_[5] * s_[5];
    e[4] = e[5] - k_[4] * s_[4];
    e[3] = e[4] - k_[3] * s_[3];
    e[2] = e[3] - k_[2] * s_[2];
    e[1] = e[2] - k_[1] * s_[1];
    1d28:	vldr	s16, [r0, #28]
    1d2c:	vldr	s12, [r0, #68]	; 0x44
    e[0] = e[1] - k_[0] * s_[0];
    1d30:	vldr	s2, [r0, #24]
    1d34:	vldr	s13, [r0, #64]	; 0x40
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    e[7] = e[8] - k_[7] * s_[7];
    1d38:	vmov.f32	s27, s4
    1d3c:	vfms.f32	s27, s28, s6
    e[6] = e[7] - k_[6] * s_[6];
    1d40:	vmov.f32	s25, s27
    1d44:	vfms.f32	s25, s26, s7
    e[5] = e[6] - k_[5] * s_[5];
    1d48:	vmov.f32	s23, s25
    1d4c:	vfms.f32	s23, s24, s8
    e[4] = e[5] - k_[4] * s_[4];
    1d50:	vmov.f32	s21, s23
    1d54:	vfms.f32	s21, s22, s9
    e[3] = e[4] - k_[3] * s_[3];
    1d58:	vmov.f32	s19, s21
    1d5c:	vfms.f32	s19, s20, s10
    e[2] = e[3] - k_[2] * s_[2];
    1d60:	vmov.f32	s17, s19
    1d64:	vfms.f32	s17, s18, s11
    e[1] = e[2] - k_[1] * s_[1];
    1d68:	vmov.f32	s0, s17
    1d6c:	vfms.f32	s0, s16, s12
    e[0] = e[1] - k_[0] * s_[0];
    1d70:	vmov.f32	s15, s0
    1d74:	vfms.f32	s15, s2, s13
  
    CONSTRAIN(e[0], -2.0f, 2.0f);
    1d78:	vcmpe.f32	s15, s31
    1d7c:	vmrs	APSR_nzcv, fpscr
    1d80:	bpl.w	1b94 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x58>
    1d84:	vmov.f32	s15, s31
    1d88:	b.n	1ba6 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x6a>
    1d8a:	vldr	s13, [pc, #60]	; 1dc8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x28c>
    1d8e:	b.n	1c60 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x124>
    phase_ += f;
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    1d90:	vmov.f32	s12, s3
    1d94:	ldr	r5, [r0, #20]
  float next_sample = next_sample_;
  while (size--) {
    phase_ += f;
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    1d96:	vldr	s3, [pc, #40]	; 1dc0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x284>
    1d9a:	b.n	1c90 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x154>
    1d9c:	str.w	r3, [ip]
    s_[0] = e[0];
    
    *excitation++ = e[10];
    *output++ = e[0];
  }
  next_sample_ = next_sample;
    1da0:	vstr	s3, [r0, #16]
}
    1da4:	vpop	{d8-d15}
    1da8:	pop	{r4, r5, r6, r7, pc}
    float* output,
    size_t size) {
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
    1daa:	vldr	s1, [pc, #20]	; 1dc0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x284>
    1dae:	b.n	1b74 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x38>
    1db0:	.word	0x3c4ccccd
    1db4:	.word	0x0019660d
    1db8:	.word	0x42000000
    1dbc:	.word	0x3c000000
    1dc0:	.word	0x00000000
    1dc4:	.word	0x3c6ef35f
    1dc8:	.word	0x80000000
    1dcc:	.word	0x2001f96c
    1dd0:	.word	0x20002360

00001dd4 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)>:
  }
  next_sample_ = next_sample;
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
    1dd4:	ldrb	r3, [r1, #1]
    *output++ = e[0];
  }
  next_sample_ = next_sample;
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
    1dd6:	push	{r4}
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    1dd8:	cmp	r3, #0
    1dda:	bne.w	2030 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x25c>
  float frequency_2 = f2.period == 0
    1dde:	ldrb	r3, [r2, #1]
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    1de0:	vldr	s15, [r0, #4]
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
    1de4:	cmp	r3, #0
    1de6:	bne.w	2048 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x274>
    1dea:	vldr	s14, [r0, #4]
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    1dee:	vsub.f32	s14, s14, s15

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    1df2:	ldrsh.w	r3, [r2, #2]
    1df6:	vldr	s10, [pc, #612]	; 205c <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x288>
    1dfa:	vmov	s12, r3
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    1dfe:	ldrsh.w	r3, [r2, #4]
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    1e02:	vfma.f32	s15, s14, s0
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    1e06:	vldr	s8, [pc, #600]	; 2060 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x28c>
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    1e0a:	vmov	s13, r3
 private:
  void PlayFrame(const Frame& f1, const Frame& f2, float blend);
  
  template <int scale, typename X>
  float BlendCoefficient(X a, X b, float blend) {
    float a_f = static_cast<float>(a) / float(scale);
    1e0e:	ldrsh.w	r3, [r1, #2]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    1e12:	vcvt.f32.s32	s12, s12
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    1e16:	vldr	s9, [pc, #588]	; 2064 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x290>
    1e1a:	vmov	s6, r3
    1e1e:	ldrsh.w	r3, [r1, #4]
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    1e22:	vcvt.f32.s32	s13, s13
    1e26:	vcvt.f32.s32	s6, s6
    1e2a:	vmov	s7, r3
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    1e2e:	vmov.f32	s14, s15
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
  k_[2] = BlendCoefficient<128>(f1.k2, f2.k2, blend);
    1e32:	vldr	s15, [pc, #564]	; 2068 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x294>

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    1e36:	vmul.f32	s12, s12, s10
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    1e3a:	vmul.f32	s13, s13, s10
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    1e3e:	vstr	s14, [r0, #4]
    1e42:	vcvt.f32.s32	s7, s7
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    1e46:	ldrb	r3, [r1, #0]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    1e48:	vfms.f32	s12, s6, s10
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    1e4c:	ldrb	r4, [r1, #1]
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    1e4e:	vmov	s14, r3
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    1e52:	ldrb	r3, [r2, #0]
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    1e54:	vfms.f32	s13, s7, s10
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    1e58:	cmp	r4, #0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    1e5a:	vmov	s11, r3
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    1e5e:	vcvt.f32.u32	s14, s14
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
    1e62:	ldrb	r3, [r2, #1]
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    1e64:	vcvt.f32.u32	s11, s11
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    1e68:	vmul.f32	s14, s14, s8

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    1e6c:	vmul.f32	s12, s12, s0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    1e70:	vmul.f32	s11, s11, s8
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    1e74:	ite	ne
    1e76:	vmovne.f32	s8, s9
    1e7a:	vmoveq.f32	s8, s14
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
    1e7e:	cmp	r3, #0

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    1e80:	vfma.f32	s12, s6, s10
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    1e84:	vmul.f32	s13, s13, s0
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
    1e88:	ite	ne
    1e8a:	vmovne.f32	s6, s9
    1e8e:	vmoveq.f32	s6, s11
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    1e92:	vfma.f32	s13, s7, s10
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
  noise_energy_ = noise_energy_1 + (noise_energy_2 - noise_energy_1) * blend;
    1e96:	vsub.f32	s10, s6, s8
    1e9a:	vfma.f32	s8, s0, s10
    1e9e:	vstr	s8, [r0, #8]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
    1ea2:	ldrb	r4, [r1, #1]
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
    1ea4:	ldrb	r3, [r2, #1]
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
  noise_energy_ = noise_energy_1 + (noise_energy_2 - noise_energy_1) * blend;

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
    1ea6:	cmp	r4, #0
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    1ea8:	vstr	s13, [r0, #28]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    1eac:	vstr	s12, [r0, #24]
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
  noise_energy_ = noise_energy_1 + (noise_energy_2 - noise_energy_1) * blend;

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
    1eb0:	it	eq
    1eb2:	vmoveq.f32	s14, s9
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
    1eb6:	cmp	r3, #0
    1eb8:	it	eq
    1eba:	vmoveq.f32	s11, s9
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
    1ebe:	vsub.f32	s11, s11, s14
    1ec2:	vfma.f32	s14, s0, s11
    1ec6:	vstr	s14, [r0, #12]
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
  k_[2] = BlendCoefficient<128>(f1.k2, f2.k2, blend);
    1eca:	ldrsb.w	r3, [r2, #6]
    1ece:	vmov	s14, r3
    1ed2:	ldrsb.w	r3, [r1, #6]
    1ed6:	vcvt.f32.s32	s14, s14
    1eda:	vmov	s13, r3
    1ede:	vcvt.f32.s32	s13, s13
    1ee2:	vmul.f32	s14, s14, s15
    1ee6:	vfms.f32	s14, s13, s15
    1eea:	vmul.f32	s14, s14, s0
    1eee:	vfma.f32	s14, s13, s15
    1ef2:	vstr	s14, [r0, #32]
  k_[3] = BlendCoefficient<128>(f1.k3, f2.k3, blend);
    1ef6:	ldrsb.w	r3, [r2, #7]
    1efa:	vmov	s14, r3
    1efe:	ldrsb.w	r3, [r1, #7]
    1f02:	vcvt.f32.s32	s14, s14
    1f06:	vmov	s13, r3
    1f0a:	vcvt.f32.s32	s13, s13
    1f0e:	vmul.f32	s14, s14, s15
    1f12:	vfms.f32	s14, s13, s15
    1f16:	vmul.f32	s14, s14, s0
    1f1a:	vfma.f32	s14, s13, s15
    1f1e:	vstr	s14, [r0, #36]	; 0x24
  k_[4] = BlendCoefficient<128>(f1.k4, f2.k4, blend);
    1f22:	ldrsb.w	r3, [r2, #8]
    1f26:	vmov	s14, r3
    1f2a:	ldrsb.w	r3, [r1, #8]
    1f2e:	vcvt.f32.s32	s14, s14
    1f32:	vmov	s13, r3
    1f36:	vcvt.f32.s32	s13, s13
    1f3a:	vmul.f32	s14, s14, s15
    1f3e:	vfms.f32	s14, s13, s15
    1f42:	vmul.f32	s14, s14, s0
    1f46:	vfma.f32	s14, s13, s15
    1f4a:	vstr	s14, [r0, #40]	; 0x28
  k_[5] = BlendCoefficient<128>(f1.k5, f2.k5, blend);
    1f4e:	ldrsb.w	r3, [r2, #9]
    1f52:	vmov	s14, r3
    1f56:	ldrsb.w	r3, [r1, #9]
    1f5a:	vcvt.f32.s32	s14, s14
    1f5e:	vmov	s13, r3
    1f62:	vcvt.f32.s32	s13, s13
    1f66:	vmul.f32	s14, s14, s15
    1f6a:	vfms.f32	s14, s13, s15
    1f6e:	vmul.f32	s14, s14, s0
    1f72:	vfma.f32	s14, s13, s15
    1f76:	vstr	s14, [r0, #44]	; 0x2c
  k_[6] = BlendCoefficient<128>(f1.k6, f2.k6, blend);
    1f7a:	ldrsb.w	r3, [r2, #10]
    1f7e:	vmov	s14, r3
    1f82:	ldrsb.w	r3, [r1, #10]
    1f86:	vcvt.f32.s32	s14, s14
    1f8a:	vmov	s13, r3
    1f8e:	vcvt.f32.s32	s13, s13
    1f92:	vmul.f32	s14, s14, s15
    1f96:	vfms.f32	s14, s13, s15
    1f9a:	vmul.f32	s14, s14, s0
    1f9e:	vfma.f32	s14, s13, s15
    1fa2:	vstr	s14, [r0, #48]	; 0x30
  k_[7] = BlendCoefficient<128>(f1.k7, f2.k7, blend);
    1fa6:	ldrsb.w	r3, [r2, #11]
    1faa:	vmov	s14, r3
    1fae:	ldrsb.w	r3, [r1, #11]
    1fb2:	vcvt.f32.s32	s14, s14
    1fb6:	vmov	s13, r3
    1fba:	vcvt.f32.s32	s13, s13
    1fbe:	vmul.f32	s14, s14, s15
    1fc2:	vfms.f32	s14, s13, s15
    1fc6:	vmul.f32	s14, s14, s0
    1fca:	vfma.f32	s14, s13, s15
    1fce:	vstr	s14, [r0, #52]	; 0x34
  k_[8] = BlendCoefficient<128>(f1.k8, f2.k8, blend);
    1fd2:	ldrsb.w	r3, [r2, #12]
  k_[9] = BlendCoefficient<128>(f1.k9, f2.k9, blend);
}
    1fd6:	ldr.w	r4, [sp], #4
  k_[3] = BlendCoefficient<128>(f1.k3, f2.k3, blend);
  k_[4] = BlendCoefficient<128>(f1.k4, f2.k4, blend);
  k_[5] = BlendCoefficient<128>(f1.k5, f2.k5, blend);
  k_[6] = BlendCoefficient<128>(f1.k6, f2.k6, blend);
  k_[7] = BlendCoefficient<128>(f1.k7, f2.k7, blend);
  k_[8] = BlendCoefficient<128>(f1.k8, f2.k8, blend);
    1fda:	vmov	s14, r3
    1fde:	ldrsb.w	r3, [r1, #12]
    1fe2:	vcvt.f32.s32	s14, s14
    1fe6:	vmov	s13, r3
    1fea:	vcvt.f32.s32	s13, s13
    1fee:	vmul.f32	s14, s14, s15
    1ff2:	vfms.f32	s14, s13, s15
    1ff6:	vmul.f32	s14, s14, s0
    1ffa:	vfma.f32	s14, s13, s15
    1ffe:	vstr	s14, [r0, #56]	; 0x38
  k_[9] = BlendCoefficient<128>(f1.k9, f2.k9, blend);
    2002:	ldrsb.w	r3, [r2, #13]
    2006:	vmov	s14, r3
    200a:	ldrsb.w	r3, [r1, #13]
    200e:	vcvt.f32.s32	s14, s14
    2012:	vmov	s13, r3
    2016:	vcvt.f32.s32	s13, s13
    201a:	vmul.f32	s14, s14, s15
    201e:	vfms.f32	s14, s13, s15
    2022:	vmul.f32	s0, s14, s0
    2026:	vfma.f32	s0, s13, s15
    202a:	vstr	s0, [r0, #60]	; 0x3c
}
    202e:	bx	lr
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    2030:	vmov	s15, r3
    2034:	vmov.f32	s13, #112	; 0x3f800000  1.0
  float frequency_2 = f2.period == 0
    2038:	ldrb	r3, [r2, #1]
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    203a:	vcvt.f32.u32	s14, s15
    203e:	vdiv.f32	s15, s13, s14
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
    2042:	cmp	r3, #0
    2044:	beq.w	1dea <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x16>
    2048:	vmov	s14, r3
    204c:	vmov.f32	s12, #112	; 0x3f800000  1.0
    2050:	vcvt.f32.u32	s13, s14
    2054:	vdiv.f32	s14, s12, s13
    2058:	b.n	1dee <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x1a>
    205a:	nop
    205c:	.word	0x38000000
    2060:	.word	0x3b800000
    2064:	.word	0x00000000
    2068:	.word	0x3c000000

0000206c <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)>:
void LPCSpeechSynthWordBank::Init(
    const LPCSpeechSynthWordBankData* word_banks,
    int num_banks,
    BufferAllocator* allocator) {
  word_banks_ = word_banks;
  num_banks_ = num_banks;
    206c:	str	r2, [r0, #4]
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    206e:	ldr	r2, [r3, #8]

void LPCSpeechSynthWordBank::Init(
    const LPCSpeechSynthWordBankData* word_banks,
    int num_banks,
    BufferAllocator* allocator) {
  word_banks_ = word_banks;
    2070:	str	r1, [r0, #0]
    2072:	cmp.w	r2, #14336	; 0x3800
};

void LPCSpeechSynthWordBank::Init(
    const LPCSpeechSynthWordBankData* word_banks,
    int num_banks,
    BufferAllocator* allocator) {
    2076:	push	{r4, r5, r6}
    2078:	bcc.n	20ae <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)+0x42>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    207a:	ldr	r5, [r3, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    207c:	sub.w	r2, r2, #14336	; 0x3800
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2080:	add.w	r1, r5, #14336	; 0x3800
      free_ -= size_bytes;
    2084:	str	r2, [r3, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2086:	str	r1, [r3, #0]
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
  num_frames_ = 0;
    2088:	movs	r4, #0
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    208a:	mov.w	r6, #4294967295
  num_frames_ = 0;
  num_words_ = 0;
  fill(
    208e:	add.w	r3, r0, #20
    2092:	add.w	r1, r0, #148	; 0x94
	*__first = __tmp;
    2096:	mov	r2, r4
    int num_banks,
    BufferAllocator* allocator) {
  word_banks_ = word_banks;
  num_banks_ = num_banks;
  frames_ = allocator->Allocate<LPCSpeechSynth::Frame>(
      kLPCSpeechSynthMaxFrames);
    2098:	str.w	r5, [r0, #148]	; 0x94
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
  num_frames_ = 0;
    209c:	str	r4, [r0, #12]
  num_words_ = 0;
    209e:	str	r4, [r0, #16]
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    20a0:	str	r6, [r0, #8]
    20a2:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    20a6:	cmp	r1, r3
    20a8:	bne.n	20a2 <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)+0x36>
  word_banks_ = word_banks;
  num_banks_ = num_banks;
  frames_ = allocator->Allocate<LPCSpeechSynth::Frame>(
      kLPCSpeechSynthMaxFrames);
  Reset();
}
    20aa:	pop	{r4, r5, r6}
    20ac:	bx	lr
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    20ae:	movs	r5, #0
    20b0:	b.n	2088 <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)+0x1c>
    20b2:	nop

000020b4 <plaits::LPCSpeechSynthWordBank::Reset()>:

void LPCSpeechSynthWordBank::Reset() {
    20b4:	push	{r4, r5}
  loaded_bank_ = -1;
  num_frames_ = 0;
    20b6:	movs	r4, #0
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    20b8:	mov.w	r5, #4294967295
  num_frames_ = 0;
  num_words_ = 0;
  fill(
    20bc:	add.w	r3, r0, #20
    20c0:	add.w	r1, r0, #148	; 0x94
	*__first = __tmp;
    20c4:	mov	r2, r4
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    20c6:	str	r5, [r0, #8]
  num_frames_ = 0;
    20c8:	str	r4, [r0, #12]
  num_words_ = 0;
    20ca:	str	r4, [r0, #16]
    20cc:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    20d0:	cmp	r1, r3
    20d2:	bne.n	20cc <plaits::LPCSpeechSynthWordBank::Reset()+0x18>
  fill(
      &word_boundaries_[0],
      &word_boundaries_[kLPCSpeechSynthMaxWords], 0);
}
    20d4:	pop	{r4, r5}
    20d6:	bx	lr

000020d8 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)>:

size_t LPCSpeechSynthWordBank::LoadNextWord(const uint8_t* data) {
    20d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ~BitStream() { }

  inline void Init(const uint8_t* p) {
    p_ = p;
    available_ = 0;
    bits_ = 0;
    20dc:	movs	r3, #0
    20de:	sub	sp, #36	; 0x24
 public:
  BitStream() { }
  ~BitStream() { }

  inline void Init(const uint8_t* p) {
    p_ = p;
    20e0:	mov	r6, r1
    20e2:	str	r1, [sp, #28]
    available_ = 0;
    20e4:	mov	r5, r3
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
  frame.k7 = 0;
  frame.k8 = 0;
  frame.k9 = 0;
    20e6:	mov	sl, r3
  frame.k3 = 0;
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
  frame.k7 = 0;
  frame.k8 = 0;
    20e8:	mov	r9, r3
  frame.k2 = 0;
  frame.k3 = 0;
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
  frame.k7 = 0;
    20ea:	str	r3, [sp, #8]
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
  frame.k1 = 0;
  frame.k2 = 0;
  frame.k3 = 0;
    20ec:	mov	r8, r3
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
    20ee:	str	r3, [sp, #12]
  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
  frame.k1 = 0;
  frame.k2 = 0;
    20f0:	mov	ip, r3
  frame.k3 = 0;
  frame.k4 = 0;
  frame.k5 = 0;
    20f2:	str	r3, [sp, #16]
  BitStream bitstream;
  bitstream.Init(data);

  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
    20f4:	mov	r1, r3
  frame.k0 = 0;
  frame.k1 = 0;
  frame.k2 = 0;
  frame.k3 = 0;
  frame.k4 = 0;
    20f6:	str	r3, [sp, #20]

  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
  frame.k1 = 0;
    20f8:	str	r3, [sp, #0]
  bitstream.Init(data);

  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
    20fa:	str	r3, [sp, #4]
    20fc:	b.n	2242 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x16a>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    20fe:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2102:	lsls	r3, r5
      shift -= available_;
    2104:	rsb	r7, r5, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    2108:	add.w	r4, r5, #8
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    210c:	mov.w	r2, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2110:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2112:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2114:	orr.w	r2, r2, fp, lsl #4
    2118:	uxtb	r2, r2
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    211a:	asrs	r5, r2, #2
    211c:	lsls	r2, r2, #2
    211e:	and.w	r5, r5, #51	; 0x33
    2122:	and.w	r2, r2, #204	; 0xcc
    2126:	orrs	r2, r5
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2128:	asrs	r5, r2, #1
    212a:	lsls	r2, r2, #1
    212c:	and.w	r5, r5, #85	; 0x55
    2130:	and.w	r2, r2, #170	; 0xaa
    2134:	orrs	r2, r5
    2136:	orrs	r3, r2
      available_ += 8;
    }
    bits_ <<= shift;
    2138:	lsls	r3, r7
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    213a:	subs	r5, r4, #4
    213c:	ubfx	r2, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    2140:	uxtb	r3, r3
  frame.k8 = 0;
  frame.k9 = 0;

  while (true) {
    int energy = bitstream.GetBits(4);
    if (energy == 0) {
    2142:	cmp	r2, #0
    2144:	beq.n	21f6 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x11e>
      frame.energy = 0;
    } else if (energy == 0xf) {
    2146:	cmp	r2, #15
    2148:	beq.w	25f2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x51a>
      bitstream.Flush();
      break;
    } else {
      frame.energy = energy_lut_[energy];
    214c:	ldr	r1, [pc, #264]	; (2258 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x180>)
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    214e:	cmp	r5, #0
    2150:	ldrb	r2, [r1, r2]
    2152:	bgt.n	2254 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x17c>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2154:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2158:	lsls	r3, r5
      shift -= available_;
    215a:	rsb	r1, r5, #1
      bits_ |= Reverse(*p_++);
      available_ += 8;
    215e:	adds	r5, r4, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2160:	mov.w	r7, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2164:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2166:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2168:	orr.w	r7, r7, fp, lsl #4
    216c:	uxtb	r7, r7
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    216e:	mov.w	lr, r7, asr #2
    2172:	lsls	r7, r7, #2
    2174:	and.w	lr, lr, #51	; 0x33
    2178:	and.w	r7, r7, #204	; 0xcc
    217c:	orr.w	r4, r7, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2180:	asrs	r7, r4, #1
    2182:	lsls	r4, r4, #1
    2184:	and.w	r7, r7, #85	; 0x55
    2188:	and.w	r4, r4, #170	; 0xaa
    218c:	orrs	r4, r7
    218e:	orrs	r3, r4
      available_ += 8;
    }
    bits_ <<= shift;
    2190:	lsls	r3, r1
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    2192:	subs	r4, r5, #1
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    2194:	ubfx	r1, r3, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    2198:	cmp	r4, #5
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    219a:	uxtb	r3, r3
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    219c:	str	r1, [sp, #24]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    219e:	bgt.n	224e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x176>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    21a0:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    21a4:	lsls	r3, r4
      shift -= available_;
    21a6:	rsb	lr, r4, #6
      bits_ |= Reverse(*p_++);
      available_ += 8;
    21aa:	adds	r4, r5, #7
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    21ac:	mov.w	r1, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    21b0:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    21b2:	uxth	r5, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    21b4:	orr.w	r1, r1, fp, lsl #4
    21b8:	uxtb	r1, r1
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    21ba:	mov.w	fp, r1, asr #2
    21be:	lsls	r1, r1, #2
    21c0:	and.w	fp, fp, #51	; 0x33
    21c4:	and.w	r1, r1, #204	; 0xcc
    21c8:	orr.w	fp, r1, fp
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    21cc:	mov.w	r1, fp, asr #1
    21d0:	mov.w	fp, fp, lsl #1
    21d4:	and.w	r1, r1, #85	; 0x55
    21d8:	and.w	fp, fp, #170	; 0xaa
    21dc:	orr.w	r3, fp, r1
    21e0:	orrs	r3, r5
      available_ += 8;
    }
    bits_ <<= shift;
    21e2:	lsl.w	r3, r3, lr
      bool repeat = bitstream.GetBits(1);
      frame.period = period_lut_[bitstream.GetBits(6)];
    21e6:	ldr	r7, [pc, #116]	; (225c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x184>)
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    21e8:	subs	r5, r4, #6
    21ea:	ubfx	r1, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    21ee:	uxtb	r3, r3
    21f0:	ldrb	r1, [r7, r1]
      if (!repeat) {
    21f2:	ldr	r7, [sp, #24]
    21f4:	cbz	r7, 2260 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x188>
          frame.k8 = k8_lut_[bitstream.GetBits(3)];
          frame.k9 = k9_lut_[bitstream.GetBits(3)];
        }
      }
    }
    frames_[num_frames_++] = frame;
    21f6:	ldr	r4, [r0, #12]
    21f8:	ldr.w	r7, [r0, #148]	; 0x94
    21fc:	rsb	lr, r4, r4, lsl #3
    2200:	adds	r4, #1
    2202:	str	r4, [r0, #12]
    2204:	add.w	r4, r7, lr, lsl #1
    2208:	strb.w	r2, [r7, lr, lsl #1]
    220c:	ldrh.w	r2, [sp, #4]
    2210:	strb	r1, [r4, #1]
    2212:	strh	r2, [r4, #2]
    2214:	ldrh.w	r2, [sp]
    2218:	strb.w	ip, [r4, #6]
    221c:	strh	r2, [r4, #4]
    221e:	ldrb.w	r2, [sp, #20]
    2222:	strb.w	r8, [r4, #7]
    2226:	strb	r2, [r4, #8]
    2228:	ldrb.w	r2, [sp, #16]
    222c:	strb.w	r9, [r4, #12]
    2230:	strb	r2, [r4, #9]
    2232:	ldrb.w	r2, [sp, #12]
    2236:	strb.w	sl, [r4, #13]
    223a:	strb	r2, [r4, #10]
    223c:	ldrb.w	r2, [sp, #8]
    2240:	strb	r2, [r4, #11]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    2242:	cmp	r5, #3
    2244:	ble.w	20fe <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x26>
    2248:	mov	r4, r5
      GetBits(1);
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    224a:	movs	r7, #4
    224c:	b.n	2138 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x60>
    224e:	mov.w	lr, #6
    2252:	b.n	21e2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x10a>
    2254:	movs	r1, #1
    2256:	b.n	2190 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0xb8>
    2258:	.word	0x2001fbbc
    225c:	.word	0x2001fc24
    if (num_bits > available_) {
    2260:	cmp	r5, #4
    2262:	bgt.w	25ec <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x514>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2266:	ldrb.w	ip, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    226a:	lsls	r3, r5
      shift -= available_;
    226c:	rsb	r8, r5, #5
      bits_ |= Reverse(*p_++);
      available_ += 8;
    2270:	adds	r5, r4, #2
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2272:	mov.w	r7, ip, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2276:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2278:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    227a:	orr.w	r4, r7, ip, lsl #4
    227e:	uxtb	r4, r4
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    2280:	mov.w	lr, r4, asr #2
    2284:	lsls	r4, r4, #2
    2286:	and.w	lr, lr, #51	; 0x33
    228a:	and.w	r4, r4, #204	; 0xcc
    228e:	orr.w	r4, r4, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2292:	asrs	r7, r4, #1
    2294:	lsls	r4, r4, #1
    2296:	and.w	r7, r7, #85	; 0x55
    229a:	and.w	r4, r4, #170	; 0xaa
    229e:	orrs	r4, r7
    22a0:	orrs	r3, r4
      available_ += 8;
    }
    bits_ <<= shift;
    22a2:	lsl.w	r4, r3, r8
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    22a6:	subs	r7, r5, #5
    } else {
      frame.energy = energy_lut_[energy];
      bool repeat = bitstream.GetBits(1);
      frame.period = period_lut_[bitstream.GetBits(6)];
      if (!repeat) {
        frame.k0 = k0_lut_[bitstream.GetBits(5)];
    22a8:	ldr	r3, [pc, #884]	; (2620 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x548>)
    22aa:	ubfx	ip, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    22ae:	cmp	r7, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    22b0:	uxtb	r4, r4
    22b2:	ldrsh.w	r3, [r3, ip, lsl #1]
    22b6:	str	r3, [sp, #4]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    22b8:	bgt.w	25e6 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x50e>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    22bc:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    22c0:	lsls	r4, r7
      shift -= available_;
    22c2:	rsb	r8, r7, #5
      bits_ |= Reverse(*p_++);
      available_ += 8;
    22c6:	adds	r7, r5, #3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    22c8:	mov.w	ip, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    22cc:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    22ce:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    22d0:	orr.w	r3, ip, fp, lsl #4
    22d4:	uxtb	r3, r3
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    22d6:	asrs	r5, r3, #2
    22d8:	lsls	r3, r3, #2
    22da:	and.w	r5, r5, #51	; 0x33
    22de:	and.w	r3, r3, #204	; 0xcc
    22e2:	orrs	r5, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    22e4:	asrs	r3, r5, #1
    22e6:	lsls	r5, r5, #1
    22e8:	and.w	r3, r3, #85	; 0x55
    22ec:	and.w	r5, r5, #170	; 0xaa
    22f0:	orrs	r5, r3
    22f2:	orrs	r4, r5
      available_ += 8;
    }
    bits_ <<= shift;
    22f4:	lsl.w	r3, r4, r8
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    22f8:	sub.w	r8, r7, #5
        frame.k1 = k1_lut_[bitstream.GetBits(5)];
    22fc:	ldr	r4, [pc, #804]	; (2624 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x54c>)
    22fe:	ubfx	r5, r3, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    2302:	cmp.w	r8, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    2306:	uxtb	r3, r3
    2308:	ldrsh.w	r4, [r4, r5, lsl #1]
    230c:	str	r4, [sp, #0]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    230e:	bgt.w	25e0 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x508>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2312:	ldrb.w	ip, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2316:	lsl.w	r3, r3, r8
      shift -= available_;
    231a:	rsb	lr, r8, #4
      bits_ |= Reverse(*p_++);
    231e:	adds	r6, #1
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2320:	mov.w	r5, ip, lsr #4
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    2324:	add.w	r8, r7, #3
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2328:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    232a:	orr.w	r4, r5, ip, lsl #4
    232e:	uxtb	r4, r4
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    2330:	asrs	r5, r4, #2
    2332:	lsls	r4, r4, #2
    2334:	and.w	r5, r5, #51	; 0x33
    2338:	and.w	r4, r4, #204	; 0xcc
    233c:	orrs	r5, r4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    233e:	asrs	r4, r5, #1
    2340:	lsls	r5, r5, #1
    2342:	and.w	r4, r4, #85	; 0x55
    2346:	and.w	r5, r5, #170	; 0xaa
    234a:	orrs	r5, r4
    234c:	orrs	r3, r5
      available_ += 8;
    }
    bits_ <<= shift;
    234e:	lsl.w	r4, r3, lr
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    2352:	sub.w	r7, r8, #4
        frame.k2 = k2_lut_[bitstream.GetBits(4)];
    2356:	ldr	r3, [pc, #720]	; (2628 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x550>)
    2358:	ubfx	r5, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    235c:	cmp	r7, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    235e:	uxtb	r4, r4
    2360:	ldrsb.w	ip, [r3, r5]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    2364:	bgt.w	25da <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x502>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2368:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    236c:	lsls	r4, r7
      shift -= available_;
    236e:	rsb	lr, r7, #4
      bits_ |= Reverse(*p_++);
    2372:	adds	r6, #1
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2374:	mov.w	r5, fp, lsr #4
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    2378:	add.w	r7, r8, #4
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    237c:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    237e:	orr.w	r3, r5, fp, lsl #4
    2382:	uxtb	r3, r3
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    2384:	asrs	r5, r3, #2
    2386:	lsls	r3, r3, #2
    2388:	and.w	r5, r5, #51	; 0x33
    238c:	and.w	r3, r3, #204	; 0xcc
    2390:	orrs	r5, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2392:	asrs	r3, r5, #1
    2394:	lsls	r5, r5, #1
    2396:	and.w	r3, r3, #85	; 0x55
    239a:	and.w	r5, r5, #170	; 0xaa
    239e:	orrs	r5, r3
    23a0:	orrs	r4, r5
      available_ += 8;
    }
    bits_ <<= shift;
    23a2:	lsl.w	r4, r4, lr
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    23a6:	subs	r5, r7, #4
        frame.k3 = k3_lut_[bitstream.GetBits(4)];
    23a8:	ubfx	r8, r4, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    23ac:	uxtb	r3, r4
    23ae:	ldr	r4, [pc, #636]	; (262c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x554>)
    23b0:	ldrsb.w	r8, [r4, r8]
        if (frame.period) {
    23b4:	cmp	r1, #0
    23b6:	beq.w	21f6 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x11e>
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    23ba:	cmp	r5, #3
    23bc:	bgt.w	260a <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x532>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    23c0:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    23c4:	lsls	r3, r5
      shift -= available_;
    23c6:	rsb	r4, r5, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    23ca:	adds	r5, r7, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    23cc:	mov.w	sl, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    23d0:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    23d2:	uxth.w	lr, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    23d6:	orr.w	r7, sl, r9, lsl #4
    23da:	uxtb	r7, r7
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    23dc:	asrs	r3, r7, #2
    23de:	lsls	r7, r7, #2
    23e0:	and.w	r3, r3, #51	; 0x33
    23e4:	and.w	r7, r7, #204	; 0xcc
    23e8:	orrs	r7, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    23ea:	asrs	r3, r7, #1
    23ec:	lsls	r7, r7, #1
    23ee:	and.w	r3, r3, #85	; 0x55
    23f2:	and.w	r7, r7, #170	; 0xaa
    23f6:	orrs	r3, r7
    23f8:	orr.w	r3, lr, r3
      available_ += 8;
    }
    bits_ <<= shift;
    23fc:	lsl.w	r4, r3, r4
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    2400:	subs	r7, r5, #4
          frame.k4 = k4_lut_[bitstream.GetBits(4)];
    2402:	ubfx	r3, r4, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    2406:	uxtb.w	lr, r4
    240a:	ldr	r4, [pc, #548]	; (2630 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x558>)
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    240c:	cmp	r7, #3
    240e:	ldrsb	r3, [r4, r3]
    2410:	str	r3, [sp, #20]
    2412:	bgt.w	2648 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x570>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2416:	ldrb.w	sl, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    241a:	lsl.w	r4, lr, r7
      shift -= available_;
    241e:	rsb	r9, r7, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    2422:	adds	r7, r5, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2424:	mov.w	lr, sl, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2428:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    242a:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    242c:	orr.w	lr, lr, sl, lsl #4
    2430:	uxtb.w	lr, lr
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    2434:	mov.w	r3, lr, asr #2
    2438:	mov.w	lr, lr, lsl #2
    243c:	and.w	r3, r3, #51	; 0x33
    2440:	and.w	lr, lr, #204	; 0xcc
    2444:	orr.w	r3, lr, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2448:	asrs	r5, r3, #1
    244a:	lsls	r3, r3, #1
    244c:	and.w	r5, r5, #85	; 0x55
    2450:	and.w	r3, r3, #170	; 0xaa
    2454:	orrs	r3, r5
    2456:	orr.w	lr, r4, r3
      available_ += 8;
    }
    bits_ <<= shift;
    245a:	lsl.w	r3, lr, r9
          frame.k5 = k5_lut_[bitstream.GetBits(4)];
    245e:	ldr	r5, [pc, #468]	; (2634 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x55c>)
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    2460:	sub.w	lr, r7, #4
    2464:	ubfx	r4, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    2468:	uxtb	r3, r3
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    246a:	cmp.w	lr, #3
    246e:	ldrsb	r4, [r5, r4]
    2470:	str	r4, [sp, #16]
    2472:	bgt.w	261a <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x542>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2476:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    247a:	lsl.w	r3, r3, lr
      shift -= available_;
    247e:	rsb	r4, lr, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    2482:	add.w	lr, r7, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2486:	mov.w	r5, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    248a:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    248c:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    248e:	orr.w	r5, r5, r9, lsl #4
    2492:	uxtb	r5, r5
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    2494:	asrs	r7, r5, #2
    2496:	lsls	r5, r5, #2
    2498:	and.w	r7, r7, #51	; 0x33
    249c:	and.w	r5, r5, #204	; 0xcc
    24a0:	orrs	r7, r5
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    24a2:	asrs	r5, r7, #1
    24a4:	lsls	r7, r7, #1
    24a6:	and.w	r5, r5, #85	; 0x55
    24aa:	and.w	r7, r7, #170	; 0xaa
    24ae:	orrs	r7, r5
    24b0:	orrs	r3, r7
      available_ += 8;
    }
    bits_ <<= shift;
    24b2:	lsl.w	r4, r3, r4
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    24b6:	sub.w	r7, lr, #4
          frame.k6 = k6_lut_[bitstream.GetBits(4)];
    24ba:	ldr	r3, [pc, #380]	; (2638 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x560>)
    24bc:	ubfx	r5, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    24c0:	cmp	r7, #2
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    24c2:	uxtb	r4, r4
    24c4:	ldrsb	r3, [r3, r5]
    24c6:	str	r3, [sp, #12]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    24c8:	bgt.w	2616 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x53e>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    24cc:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    24d0:	lsls	r4, r7
      shift -= available_;
    24d2:	rsb	r3, r7, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    24d6:	add.w	r7, lr, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    24da:	mov.w	r5, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    24de:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    24e0:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    24e2:	orr.w	r5, r5, r9, lsl #4
    24e6:	uxtb	r5, r5
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    24e8:	mov.w	lr, r5, asr #2
    24ec:	lsls	r5, r5, #2
    24ee:	and.w	lr, lr, #51	; 0x33
    24f2:	and.w	r5, r5, #204	; 0xcc
    24f6:	orr.w	lr, r5, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    24fa:	mov.w	r5, lr, asr #1
    24fe:	mov.w	lr, lr, lsl #1
    2502:	and.w	r5, r5, #85	; 0x55
    2506:	and.w	lr, lr, #170	; 0xaa
    250a:	orr.w	lr, lr, r5
    250e:	orr.w	r4, r4, lr
      available_ += 8;
    }
    bits_ <<= shift;
    2512:	lsl.w	r3, r4, r3
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    2516:	sub.w	lr, r7, #3
          frame.k7 = k7_lut_[bitstream.GetBits(3)];
    251a:	ldr	r4, [pc, #288]	; (263c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x564>)
    251c:	ubfx	r5, r3, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    2520:	cmp.w	lr, #2
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    2524:	uxtb	r3, r3
    2526:	ldrsb	r4, [r4, r5]
    2528:	str	r4, [sp, #8]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    252a:	bgt.n	2612 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x53a>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    252c:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2530:	lsl.w	r3, r3, lr
      shift -= available_;
    2534:	rsb	r4, lr, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    2538:	add.w	lr, r7, #5
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    253c:	mov.w	r5, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2540:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2542:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2544:	orr.w	r5, r5, r9, lsl #4
    2548:	uxtb	r5, r5
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    254a:	asrs	r7, r5, #2
    254c:	lsls	r5, r5, #2
    254e:	and.w	r7, r7, #51	; 0x33
    2552:	and.w	r5, r5, #204	; 0xcc
    2556:	orrs	r7, r5
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2558:	asrs	r5, r7, #1
    255a:	lsls	r7, r7, #1
    255c:	and.w	r5, r5, #85	; 0x55
    2560:	and.w	r7, r7, #170	; 0xaa
    2564:	orrs	r7, r5
    2566:	orrs	r3, r7
      available_ += 8;
    }
    bits_ <<= shift;
    2568:	lsl.w	r4, r3, r4
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    256c:	sub.w	r5, lr, #3
          frame.k8 = k8_lut_[bitstream.GetBits(3)];
    2570:	ldr	r3, [pc, #204]	; (2640 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x568>)
    2572:	ubfx	r7, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    2576:	cmp	r5, #2
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    2578:	uxtb	r4, r4
    257a:	ldrsb.w	r9, [r3, r7]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    257e:	bgt.n	260e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x536>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2580:	ldrb.w	sl, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2584:	lsls	r4, r5
      shift -= available_;
    2586:	rsb	r3, r5, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    258a:	add.w	r5, lr, #5
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    258e:	mov.w	r7, sl, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    2592:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    2594:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    2596:	orr.w	r7, r7, sl, lsl #4
    259a:	uxtb	r7, r7
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    259c:	mov.w	lr, r7, asr #2
    25a0:	lsls	r7, r7, #2
    25a2:	and.w	lr, lr, #51	; 0x33
    25a6:	and.w	r7, r7, #204	; 0xcc
    25aa:	orr.w	lr, r7, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    25ae:	mov.w	r7, lr, asr #1
    25b2:	mov.w	lr, lr, lsl #1
    25b6:	and.w	r7, r7, #85	; 0x55
    25ba:	and.w	lr, lr, #170	; 0xaa
    25be:	orr.w	lr, lr, r7
    25c2:	orr.w	r4, r4, lr
      available_ += 8;
    }
    bits_ <<= shift;
    25c6:	lsl.w	r3, r4, r3
          frame.k9 = k9_lut_[bitstream.GetBits(3)];
    25ca:	ldr	r4, [pc, #120]	; (2644 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x56c>)
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    25cc:	subs	r5, #3
    25ce:	ubfx	r7, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    25d2:	uxtb	r3, r3
    25d4:	ldrsb.w	sl, [r4, r7]
    25d8:	b.n	21f6 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x11e>
      GetBits(1);
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    25da:	mov.w	lr, #4
    25de:	b.n	23a2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x2ca>
    25e0:	mov.w	lr, #4
    25e4:	b.n	234e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x276>
    25e6:	mov.w	r8, #5
    25ea:	b.n	22f4 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x21c>
    25ec:	mov.w	r8, #5
    25f0:	b.n	22a2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x1ca>
    available_ = 0;
    bits_ = 0;
  }

  inline void Flush() {
    while (available_) {
    25f2:	cbz	r5, 2600 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x528>
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    25f4:	cmp	r5, #0
    25f6:	bgt.n	25fc <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x524>
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    25f8:	adds	r6, #1
      available_ += 8;
    25fa:	adds	r5, #8
    available_ = 0;
    bits_ = 0;
  }

  inline void Flush() {
    while (available_) {
    25fc:	subs	r5, #1
    25fe:	bne.n	25f4 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x51c>
        }
      }
    }
    frames_[num_frames_++] = frame;
  }
  return bitstream.ptr() - data;
    2600:	ldr	r3, [sp, #28]
    2602:	subs	r0, r6, r3
}
    2604:	add	sp, #36	; 0x24
    2606:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetBits(1);
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    260a:	movs	r4, #4
    260c:	b.n	23fc <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x324>
    260e:	movs	r3, #3
    2610:	b.n	25c6 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x4ee>
    2612:	movs	r4, #3
    2614:	b.n	2568 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x490>
    2616:	movs	r3, #3
    2618:	b.n	2512 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x43a>
    261a:	movs	r4, #4
    261c:	b.n	24b2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x3da>
    261e:	nop
    2620:	.word	0x2001fb54
    2624:	.word	0x2001fbe4
    2628:	.word	0x2001fc7c
    262c:	.word	0x2001fbac
    2630:	.word	0x2001fbd4
    2634:	.word	0x2001fc6c
    2638:	.word	0x2001fb9c
    263c:	.word	0x2001fbcc
    2640:	.word	0x2001fc64
    2644:	.word	0x2001fb94
    2648:	mov.w	r9, #4
    264c:	b.n	245a <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x382>
    264e:	nop

00002650 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]>:

bool LPCSpeechSynthWordBank::Load(int bank) {
    2650:	push	{r3, r4, r5, r6, r7, lr}
  }

  num_frames_ = 0;
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
    2652:	ldr	r3, [r0, #0]
    frames_[num_frames_++] = frame;
  }
  return bitstream.ptr() - data;
}

bool LPCSpeechSynthWordBank::Load(int bank) {
    2654:	mov	r6, r1
  if (bank == loaded_bank_ || bank >= num_banks_) {
    return false;
  }

  num_frames_ = 0;
    2656:	movs	r2, #0
    frames_[num_frames_++] = frame;
  }
  return bitstream.ptr() - data;
}

bool LPCSpeechSynthWordBank::Load(int bank) {
    2658:	mov	r4, r0
  }

  num_frames_ = 0;
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
    265a:	add.w	r1, r3, r1, lsl #3
    265e:	ldr.w	r7, [r3, r6, lsl #3]
bool LPCSpeechSynthWordBank::Load(int bank) {
  if (bank == loaded_bank_ || bank >= num_banks_) {
    return false;
  }

  num_frames_ = 0;
    2662:	str	r2, [r0, #12]
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
    2664:	ldr	r5, [r1, #4]
  if (bank == loaded_bank_ || bank >= num_banks_) {
    return false;
  }

  num_frames_ = 0;
  num_words_ = 0;
    2666:	str	r2, [r0, #16]
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    2668:	cbz	r5, 269a <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x4a>
    266a:	mov	r3, r2
    266c:	b.n	2670 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x20>
    266e:	ldr	r2, [r4, #12]
    word_boundaries_[num_words_] = num_frames_;
    2670:	add.w	r3, r4, r3, lsl #2
    size_t consumed = LoadNextWord(data);
    2674:	mov	r1, r7
    2676:	mov	r0, r4
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    word_boundaries_[num_words_] = num_frames_;
    2678:	str	r2, [r3, #20]
    size_t consumed = LoadNextWord(data);
    267a:	bl	20d8 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)>

    data += consumed;
    size -= consumed;
    ++num_words_;
    267e:	ldr	r3, [r4, #16]
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    2680:	subs	r5, r5, r0
    word_boundaries_[num_words_] = num_frames_;
    size_t consumed = LoadNextWord(data);

    data += consumed;
    2682:	add	r7, r0
    size -= consumed;
    ++num_words_;
    2684:	add.w	r3, r3, #1
    2688:	str	r3, [r4, #16]
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    268a:	bne.n	266e <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x1e>
    268c:	ldr	r5, [r4, #12]

    data += consumed;
    size -= consumed;
    ++num_words_;
  }
  word_boundaries_[num_words_] = num_frames_;
    268e:	add.w	r3, r4, r3, lsl #2
  loaded_bank_ = bank;
  return true;
}
    2692:	movs	r0, #1

    data += consumed;
    size -= consumed;
    ++num_words_;
  }
  word_boundaries_[num_words_] = num_frames_;
    2694:	str	r5, [r3, #20]
  loaded_bank_ = bank;
    2696:	str	r6, [r4, #8]
  return true;
}
    2698:	pop	{r3, r4, r5, r6, r7, pc}
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    269a:	mov	r3, r5
    269c:	b.n	268e <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x3e>
    269e:	nop

000026a0 <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)>:
  word_boundaries_[num_words_] = num_frames_;
  loaded_bank_ = bank;
  return true;
}

void LPCSpeechSynthController::Init(LPCSpeechSynthWordBank* word_bank) {
    26a0:	push	{r4, r5, r6, r7}
  word_bank_ = word_bank;
  
  clock_phase_ = 0.0f;
    26a2:	movs	r6, #0
  playback_frame_ = -1;
    26a4:	mov.w	r5, #4294967295
  last_playback_frame_ = -1;
  remaining_frame_samples_ = 0;
    26a8:	movs	r7, #0

  fill(&sample_[0], &sample_[2], 0.0f);
    26aa:	adds	r2, r0, #4
    26ac:	add.w	r3, r0, #12
	*__first = __tmp;
    26b0:	mov	r4, r6
  loaded_bank_ = bank;
  return true;
}

void LPCSpeechSynthController::Init(LPCSpeechSynthWordBank* word_bank) {
  word_bank_ = word_bank;
    26b2:	str.w	r1, [r0, #144]	; 0x90
  
  clock_phase_ = 0.0f;
  playback_frame_ = -1;
  last_playback_frame_ = -1;
  remaining_frame_samples_ = 0;
    26b6:	str.w	r7, [r0, #140]	; 0x8c
}

void LPCSpeechSynthController::Init(LPCSpeechSynthWordBank* word_bank) {
  word_bank_ = word_bank;
  
  clock_phase_ = 0.0f;
    26ba:	str	r6, [r0, #0]
  playback_frame_ = -1;
    26bc:	str.w	r5, [r0, #132]	; 0x84
  last_playback_frame_ = -1;
    26c0:	str.w	r5, [r0, #136]	; 0x88
    26c4:	str.w	r4, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    26c8:	cmp	r3, r2
    26ca:	bne.n	26c4 <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)+0x24>
  remaining_frame_samples_ = 0;

  fill(&sample_[0], &sample_[2], 0.0f);
  fill(&next_sample_[0], &next_sample_[2], 0.0f);
    26cc:	add.w	r4, r0, #20
	*__first = __tmp;
    26d0:	movs	r1, #0
    26d2:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    26d6:	cmp	r4, r3
	*__first = __tmp;
    26d8:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    26dc:	bne.n	26d2 <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)+0x32>

  gain_ = 0.0f;
    26de:	str	r2, [r0, #20]
  
  synth_.Init();
    26e0:	adds	r0, #24
}
    26e2:	pop	{r4, r5, r6, r7}
  fill(&sample_[0], &sample_[2], 0.0f);
  fill(&next_sample_[0], &next_sample_[2], 0.0f);

  gain_ = 0.0f;
  
  synth_.Init();
    26e4:	b.w	1b00 <plaits::LPCSpeechSynth::Init()>

000026e8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)>:

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    26e8:	vmov.f32	s15, #96	; 0x3f000000  0.5
    26ec:	vldr	s11, [pc, #876]	; 2a5c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x374>
    26f0:	vldr	s14, [pc, #876]	; 2a60 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x378>
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    26f4:	vmov.f32	s13, #56	; 0x41c00000  24.0
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    26f8:	ldr.w	ip, [pc, #904]	; 2a84 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x39c>
    float gain,
    float* excitation,
    float* output,
    size_t size) {
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
    26fc:	vmov.f32	s10, #24	; 0x40c00000  6.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    2700:	vsub.f32	s15, s4, s15
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    2704:	vldr	s12, [pc, #860]	; 2a64 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x37c>
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    2708:	vnmul.f32	s2, s2, s13
    270c:	vfma.f32	s14, s15, s11
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    2710:	vldr	s11, [pc, #852]	; 2a68 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x380>
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    2714:	vldr	s15, [pc, #852]	; 2a6c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x384>
    float address,
    float formant_shift,
    float gain,
    float* excitation,
    float* output,
    size_t size) {
    2718:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    271c:	mov	r5, r3
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    271e:	ldr.w	lr, [pc, #872]	; 2a88 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3a0>
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    2722:	vcvt.s32.f32	s13, s14
    2726:	mov	r9, r1
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    2728:	vcmpe.f32	s4, s15
    float address,
    float formant_shift,
    float gain,
    float* excitation,
    float* output,
    size_t size) {
    272c:	mov	r4, r0

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    272e:	vcvt.f32.s32	s9, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    2732:	vmov	r3, s13
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    2736:	vmrs	APSR_nzcv, fpscr
    273a:	add.w	r3, ip, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    273e:	vsub.f32	s14, s14, s9
    2742:	vldr	s13, [r3]
    2746:	vcvt.s32.f32	s14, s14, #8
    float address,
    float formant_shift,
    float gain,
    float* excitation,
    float* output,
    size_t size) {
    274a:	vpush	{d8-d11}
    274e:	vmov	r3, s14
    2752:	sub	sp, #28
    2754:	vmov.f32	s21, s1
    2758:	add.w	r1, lr, r3, lsl #2
    275c:	vmov.f32	s16, s5
    2760:	ldr	r7, [sp, #96]	; 0x60
    2762:	vldr	s14, [r1]
    2766:	ldr.w	r8, [sp, #100]	; 0x64
    276a:	vmul.f32	s14, s14, s13
    276e:	ldr	r6, [sp, #104]	; 0x68
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    2770:	vmul.f32	s12, s14, s12
    float gain,
    float* excitation,
    float* output,
    size_t size) {
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
    2774:	vdiv.f32	s18, s14, s10
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    2778:	vdiv.f32	s14, s12, s11
    277c:	vdiv.f32	s20, s0, s14
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    2780:	bpl.w	2902 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x21a>
    2784:	vsub.f32	s14, s4, s15
    2788:	vldr	s15, [pc, #740]	; 2a70 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x388>
    278c:	vmul.f32	s15, s14, s15

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    2790:	vadd.f32	s15, s15, s2
    2794:	vldr	s14, [pc, #712]	; 2a60 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x378>
        (formant_shift < 0.4f ? (formant_shift - 0.4f) * -45.0f
            : (formant_shift > 0.6f ? (formant_shift - 0.6f) * -45.0f : 0.0f)));
  
  if (bank != -1) {
    2798:	adds	r1, r5, #1
    279a:	vadd.f32	s15, s15, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    279e:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    27a2:	vcvt.f32.s32	s13, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    27a6:	vmov	r3, s14
    27aa:	add.w	ip, ip, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    27ae:	vsub.f32	s15, s15, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    27b2:	vldr	s17, [ip]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    27b6:	vcvt.s32.f32	s15, s15, #8
    27ba:	vmov	r3, s15
    27be:	add.w	lr, lr, r3, lsl #2
    27c2:	vldr	s19, [lr]
    27c6:	beq.n	2836 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x14e>
    bool reset_everything = word_bank_->Load(bank);
    27c8:	ldr.w	r0, [r4, #144]	; 0x90
  }
  return bitstream.ptr() - data;
}

bool LPCSpeechSynthWordBank::Load(int bank) {
  if (bank == loaded_bank_ || bank >= num_banks_) {
    27cc:	ldr	r3, [r0, #8]
    27ce:	cmp	r5, r3
    27d0:	beq.n	27da <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xf2>
    27d2:	ldr	r3, [r0, #4]
    27d4:	cmp	r5, r3
    27d6:	blt.w	2a90 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3a8>
    27da:	ldr	r1, [r0, #12]
    27dc:	ldr.w	lr, [r0, #148]	; 0x94

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
  
  if (trigger) {
    27e0:	cbz	r2, 2842 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x15a>
  
  inline int num_frames() const { return num_frames_; }
  inline const LPCSpeechSynth::Frame* frames() const { return frames_; }
  
  inline void GetWordBoundaries(float address, int* start, int* end) {
    if (num_words_ == 0) {
    27e2:	ldr	r3, [r0, #16]
    27e4:	cmp	r3, #0
    27e6:	bne.w	29bc <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x2d4>
      *start = *end = -1;
    27ea:	mov.w	r2, #4294967295
      word_bank_->GetWordBoundaries(
          address,
          &playback_frame_,
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
    27ee:	str.w	r3, [r4, #140]	; 0x8c
    27f2:	str.w	r2, [r4, #136]	; 0x88
    27f6:	str.w	r2, [r4, #132]	; 0x84
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    synth_.PlayFrame(
    27fa:	vmov	s15, r1
    27fe:	vldr	s14, [pc, #628]	; 2a74 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x38c>
      frame_fractional = 0.0f;
    }
    PlayFrame(
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    2802:	add.w	r0, r4, #24
    2806:	vcvt.f32.s32	s15, s15
    280a:	vsub.f32	s15, s15, s14
    280e:	vmul.f32	s3, s15, s3
      float* excitation,
      float* output,
      size_t size);
  
  void PlayFrame(const Frame* frames, float frame, bool interpolate) {
    MAKE_INTEGRAL_FRACTIONAL(frame);
    2812:	vcvt.s32.f32	s0, s3
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    2816:	vmov	r3, s0
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    281a:	vcvt.f32.s32	s0, s0
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    281e:	rsb	r1, r3, r3, lsl #3
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    2822:	vsub.f32	s0, s3, s0
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    2826:	lsls	r1, r1, #1
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    2828:	add.w	r2, r1, #14
    282c:	add	r1, lr
    282e:	add	r2, lr
    2830:	bl	1dd4 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)>
    2834:	b.n	2860 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x178>

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
  
  if (trigger) {
    2836:	cmp	r2, #0
    2838:	bne.w	2aba <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3d2>
    283c:	movs	r1, #5
      ? kLPCSpeechSynthNumVowels
      : word_bank_->num_frames();

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
    283e:	ldr.w	lr, [pc, #588]	; 2a8c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3a4>
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    2842:	ldr.w	r2, [r4, #132]	; 0x84
    2846:	ldr.w	r3, [r4, #140]	; 0x8c
    284a:	adds	r0, r2, #1
    284c:	beq.n	2930 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x248>
    synth_.PlayFrame(
        frames,
        address * (static_cast<float>(num_frames) - 1.0001f),
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
    284e:	cmp	r3, #0
    2850:	beq.w	29f6 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x30e>
      if (playback_frame_ >= last_playback_frame_) {
        bool back_to_scan_mode = bank == -1 || free_running;
        playback_frame_ = back_to_scan_mode ? -1 : last_playback_frame_;
      }
    }
    remaining_frame_samples_ -= min(size, remaining_frame_samples_);
    2854:	cmp	r6, r3
    2856:	ite	ls
    2858:	subls	r3, r3, r6
    285a:	subhi	r3, r3, r3
    285c:	str.w	r3, [r4, #140]	; 0x8c
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    2860:	vldr	s23, [r4, #20]
    increment_ = (new_value - *state) / static_cast<float>(size);
    2864:	vmov	s15, r6
  }
  
  ParameterInterpolator gain_modulation(&gain_, gain, size);
    2868:	add.w	r5, r4, #20
    286c:	vcvt.f32.u32	s15, s15
    2870:	vsub.f32	s16, s16, s23
    2874:	vdiv.f32	s19, s16, s15
  
  while (size--) {
    2878:	cbz	r6, 28f4 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x20c>
    287a:	add.w	r9, r4, #12
	*__first = __tmp;
    287e:	vldr	s16, [pc, #504]	; 2a78 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x390>
    2882:	rsb	fp, r9, r5
    2886:	mov.w	sl, fp, asr #2
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    288a:	cmp.w	sl, #0
    288e:	bne.n	291e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x236>
    2890:	mov	r3, r9
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    2892:	vstmia	r3!, {s16}
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2896:	cmp	r5, r3
    2898:	bne.n	2892 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1aa>
    float this_sample[2];
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    289a:	vldr	s15, [r4]
    if (clock_phase_ >= 1.0f) {
    289e:	vmov.f32	s17, #112	; 0x3f800000  1.0
  while (size--) {
    float this_sample[2];
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    28a2:	vadd.f32	s15, s18, s15
    if (clock_phase_ >= 1.0f) {
    28a6:	vcmpe.f32	s15, s17
  while (size--) {
    float this_sample[2];
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    28aa:	vstr	s15, [r4]
    if (clock_phase_ >= 1.0f) {
    28ae:	vmrs	APSR_nzcv, fpscr
    28b2:	bge.n	2936 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x24e>
    28b4:	vldr	s13, [r4, #12]
    28b8:	vldr	s15, [r4, #16]
    28bc:	vldr	s10, [sp, #8]
    28c0:	vldr	s11, [sp, #12]
  }

  inline float Next() {
    value_ += increment_;
    28c4:	vadd.f32	s23, s23, s19
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    28c8:	vldr	s12, [r4, #4]
    next_sample_[1] += sample_[1];
    28cc:	vldr	s14, [r4, #8]
    remaining_frame_samples_ -= min(size, remaining_frame_samples_);
  }
  
  ParameterInterpolator gain_modulation(&gain_, gain, size);
  
  while (size--) {
    28d0:	subs	r6, #1
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    28d2:	vadd.f32	s13, s12, s13
    next_sample_[1] += sample_[1];
    const float gain = gain_modulation.Next();
    *excitation++ = this_sample[0] * gain;
    28d6:	vmul.f32	s10, s23, s10
    *output++ = this_sample[1] * gain;
    28da:	vmul.f32	s12, s23, s11
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    next_sample_[1] += sample_[1];
    28de:	vadd.f32	s15, s14, s15
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    28e2:	vstr	s13, [r4, #12]
    next_sample_[1] += sample_[1];
    28e6:	vstr	s15, [r4, #16]
    const float gain = gain_modulation.Next();
    *excitation++ = this_sample[0] * gain;
    28ea:	vstmia	r7!, {s10}
    *output++ = this_sample[1] * gain;
    28ee:	vstmia	r8!, {s12}
    remaining_frame_samples_ -= min(size, remaining_frame_samples_);
  }
  
  ParameterInterpolator gain_modulation(&gain_, gain, size);
  
  while (size--) {
    28f2:	bne.n	288a <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1a2>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    28f4:	vstr	s23, [r4, #20]
    next_sample_[1] += sample_[1];
    const float gain = gain_modulation.Next();
    *excitation++ = this_sample[0] * gain;
    *output++ = this_sample[1] * gain;
  }
}
    28f8:	add	sp, #28
    28fa:	vpop	{d8-d11}
    28fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    2902:	vldr	s14, [pc, #376]	; 2a7c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x394>
    2906:	vcmpe.f32	s4, s14
    290a:	vmrs	APSR_nzcv, fpscr
    290e:	ble.n	292a <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x242>
    2910:	vsub.f32	s14, s4, s14
    2914:	vldr	s15, [pc, #344]	; 2a70 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x388>
    2918:	vmul.f32	s15, s14, s15
    291c:	b.n	2790 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xa8>
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    291e:	mov	r2, fp
    2920:	mov	r1, r9
    2922:	add	r0, sp, #8
    2924:	bl	fd78 <memcpy>
    2928:	b.n	2890 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1a8>
    292a:	vldr	s15, [pc, #332]	; 2a78 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x390>
    292e:	b.n	2790 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xa8>
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    2930:	cmp	r3, #0
    2932:	bne.n	2854 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x16c>
    2934:	b.n	27fa <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x112>
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    if (clock_phase_ >= 1.0f) {
      clock_phase_ -= 1.0f;
    2936:	vsub.f32	s15, s15, s17
    293a:	mov	r0, r4
      
      synth_.Render(
          prosody_amount,
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
    293c:	movs	r3, #1
    293e:	add	r2, sp, #20
    2940:	vmov.f32	s1, s20
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    if (clock_phase_ >= 1.0f) {
      clock_phase_ -= 1.0f;
      float reset_time = clock_phase_ / rate;
    2944:	vdiv.f32	s22, s15, s18
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    if (clock_phase_ >= 1.0f) {
      clock_phase_ -= 1.0f;
    2948:	vmov	r1, s15
    294c:	str.w	r1, [r0], #24
      
      synth_.Render(
          prosody_amount,
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
    2950:	add	r1, sp, #16
    2952:	vmov.f32	s0, s21
    2956:	bl	1b3c <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)>
  return -0.5f * t * t;
    295a:	vmov.f32	s15, #224	; 0xbf000000 -0.5
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    295e:	vmov.f32	s12, #96	; 0x3f000000  0.5
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
        new_sample[1] - sample_[1]
    2962:	vldr	s14, [r4, #8]
    2966:	vldr	s9, [sp, #20]
    296a:	add	r3, sp, #16
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
    296c:	vldr	s13, [r4, #4]
        new_sample[1] - sample_[1]
    2970:	vsub.f32	s9, s9, s14
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
    2974:	vldr	s8, [sp, #16]
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
    2978:	vldr	s14, [r4, #16]
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
    297c:	vsub.f32	s8, s8, s13
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
    2980:	vldr	s10, [sp, #8]
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
    2984:	vldr	s13, [r4, #12]
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
    2988:	vldr	s11, [sp, #12]
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    298c:	vsub.f32	s17, s17, s22
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    2990:	vmul.f32	s12, s22, s12
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
  return -0.5f * t * t;
    2994:	vmul.f32	s15, s17, s15
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    2998:	vmul.f32	s22, s12, s22
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
  return -0.5f * t * t;
    299c:	vmul.f32	s17, s15, s17
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
    29a0:	vmov.f32	s15, s14
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
    29a4:	vfma.f32	s10, s8, s22
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
    29a8:	vfma.f32	s11, s9, s22
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
    29ac:	vfma.f32	s13, s8, s17
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
    29b0:	vfma.f32	s15, s9, s17
    29b4:	ldmia	r3!, {r0, r1}
    29b6:	str	r0, [r4, #4]
    29b8:	str	r1, [r4, #8]
    29ba:	b.n	28c4 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1dc>
    } else {
      int word = static_cast<int>(address * static_cast<float>(num_words_));
    29bc:	vmov	s15, r3
    29c0:	vcvt.f32.s32	s15, s15
    29c4:	vmul.f32	s15, s15, s3
    29c8:	vcvt.s32.f32	s15, s15
    29cc:	vmov	r2, s15
      if (word >= num_words_) {
    29d0:	cmp	r3, r2
        word = num_words_ - 1;
    29d2:	it	le
    29d4:	addle.w	r2, r3, #4294967295
    29d8:	add.w	r0, r0, r2, lsl #2
      }
      *start = word_boundaries_[word];
    29dc:	ldr	r2, [r0, #20]
    29de:	str.w	r2, [r4, #132]	; 0x84
      *end = word_boundaries_[word + 1] - 1;
    29e2:	ldr	r3, [r0, #24]
    29e4:	subs	r3, #1
    29e6:	str.w	r3, [r4, #136]	; 0x88
      word_bank_->GetWordBoundaries(
          address,
          &playback_frame_,
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
    29ea:	movs	r3, #0
    29ec:	str.w	r3, [r4, #140]	; 0x8c
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    29f0:	adds	r3, r2, #1
    29f2:	beq.w	27fa <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x112>
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    29f6:	vmov	s15, r2
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    29fa:	vldr	s0, [pc, #124]	; 2a78 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x390>
    29fe:	add.w	r0, r4, #24
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    2a02:	vcvt.f32.s32	s15, s15
    2a06:	vcvt.s32.f32	s15, s15
    2a0a:	vmov	r1, s15
    2a0e:	rsb	r1, r1, r1, lsl #3
    2a12:	lsls	r1, r1, #1
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    2a14:	add.w	r2, r1, #14
    2a18:	add	r1, lr
    2a1a:	add	r2, lr
    2a1c:	bl	1dd4 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)>
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    2a20:	vmul.f32	s17, s17, s19
    2a24:	vldr	s15, [pc, #88]	; 2a80 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x398>
      ++playback_frame_;
    2a28:	ldr.w	r2, [r4, #132]	; 0x84
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    2a2c:	vmul.f32	s15, s17, s15
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
    2a30:	ldr.w	r1, [r4, #136]	; 0x88
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
      ++playback_frame_;
    2a34:	adds	r2, #1
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    2a36:	vcvt.u32.f32	s15, s15
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
    2a3a:	cmp	r2, r1
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
      ++playback_frame_;
    2a3c:	str.w	r2, [r4, #132]	; 0x84
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    2a40:	vmov	r3, s15
    2a44:	vstr	s15, [r4, #140]	; 0x8c
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
    2a48:	blt.w	2854 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x16c>
        bool back_to_scan_mode = bank == -1 || free_running;
        playback_frame_ = back_to_scan_mode ? -1 : last_playback_frame_;
    2a4c:	adds	r5, #1
    2a4e:	beq.n	2b06 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x41e>
    2a50:	cmp.w	r9, #0
    2a54:	bne.n	2b06 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x41e>
    2a56:	str.w	r1, [r4, #132]	; 0x84
    2a5a:	b.n	2854 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x16c>
    2a5c:	.word	0x42100000
    2a60:	.word	0x43000000
    2a64:	.word	0x42c80000
    2a68:	.word	0x473b0057
    2a6c:	.word	0x3ecccccd
    2a70:	.word	0xc2340000
    2a74:	.word	0x3f800347
    2a78:	.word	0x00000000
    2a7c:	.word	0x3f19999a
    2a80:	.word	0x44960000
    2a84:	.word	0x20000024
    2a88:	.word	0x20000428
    2a8c:	.word	0x2001c5f0
    2a90:	mov	r1, r5
    2a92:	str	r2, [sp, #4]
    2a94:	bl	2650 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]>
        (formant_shift < 0.4f ? (formant_shift - 0.4f) * -45.0f
            : (formant_shift > 0.6f ? (formant_shift - 0.6f) * -45.0f : 0.0f)));
  
  if (bank != -1) {
    bool reset_everything = word_bank_->Load(bank);
    if (reset_everything) {
    2a98:	ldr	r2, [sp, #4]
    2a9a:	cbz	r0, 2aa8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3c0>
      playback_frame_ = -1;
    2a9c:	mov.w	r3, #4294967295
    2aa0:	str.w	r3, [r4, #132]	; 0x84
      last_playback_frame_ = -1;
    2aa4:	str.w	r3, [r4, #136]	; 0x88
    2aa8:	ldr.w	r0, [r4, #144]	; 0x90
    2aac:	ldr	r1, [r0, #12]
    2aae:	ldr.w	lr, [r0, #148]	; 0x94

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
  
  if (trigger) {
    2ab2:	cmp	r2, #0
    2ab4:	bne.w	27e2 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xfa>
    2ab8:	b.n	2842 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x15a>
    if (bank == -1) {
      // Pick a pseudo-random consonant, and play it for the duration of a
      // frame.
      int r = (address + 3.0f * formant_shift + 7.0f * frequency) * 8.0f;
      playback_frame_ = (r % kLPCSpeechSynthNumConsonants);
    2aba:	vmov.f32	s15, #8	; 0x40400000  3.0
    2abe:	ldr	r3, [pc, #76]	; (2b0c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x424>)
    2ac0:	vmov.f32	s13, s3
    2ac4:	movs	r1, #5
    2ac6:	vmov.f32	s14, #28	; 0x40e00000  7.0
      ? kLPCSpeechSynthNumVowels
      : word_bank_->num_frames();

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
    2aca:	ldr.w	lr, [pc, #68]	; 2b10 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x428>
  if (trigger) {
    if (bank == -1) {
      // Pick a pseudo-random consonant, and play it for the duration of a
      // frame.
      int r = (address + 3.0f * formant_shift + 7.0f * frequency) * 8.0f;
      playback_frame_ = (r % kLPCSpeechSynthNumConsonants);
    2ace:	vfma.f32	s13, s4, s15
    2ad2:	vmov.f32	s15, s13
    2ad6:	vfma.f32	s15, s0, s14
    2ada:	vmov.f32	s14, s15
    2ade:	vcvt.s32.f32	s14, s14, #3
    2ae2:	vmov	r2, s14
    2ae6:	smull	r3, r0, r3, r2
    2aea:	asrs	r3, r2, #31
    2aec:	rsb	r3, r3, r0, asr #2
    2af0:	add.w	r3, r3, r3, lsl #2
    2af4:	sub.w	r3, r2, r3, lsl #1
      playback_frame_ += kLPCSpeechSynthNumVowels;
    2af8:	adds	r2, r3, r1
      last_playback_frame_ = playback_frame_ + 1;
    2afa:	adds	r3, #6
    if (bank == -1) {
      // Pick a pseudo-random consonant, and play it for the duration of a
      // frame.
      int r = (address + 3.0f * formant_shift + 7.0f * frequency) * 8.0f;
      playback_frame_ = (r % kLPCSpeechSynthNumConsonants);
      playback_frame_ += kLPCSpeechSynthNumVowels;
    2afc:	str.w	r2, [r4, #132]	; 0x84
      last_playback_frame_ = playback_frame_ + 1;
    2b00:	str.w	r3, [r4, #136]	; 0x88
    2b04:	b.n	29ea <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x302>
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
        bool back_to_scan_mode = bank == -1 || free_running;
        playback_frame_ = back_to_scan_mode ? -1 : last_playback_frame_;
    2b06:	mov.w	r1, #4294967295
    2b0a:	b.n	2a56 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x36e>
    2b0c:	.word	0x66666667
    2b10:	.word	0x2001c5f0

00002b14 <plaits::ModalEngine::Reset()>:
  harmonics_lp_ = 0.0f;
  Reset();
}

void ModalEngine::Reset() {
  voice_.Init();
    2b14:	adds	r0, #16
    2b16:	b.w	dea0 <plaits::ModalVoice::Init()>
    2b1a:	nop

00002b1c <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
void ModalEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    2b1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b20:	sub	sp, #20
    2b22:	mov	r5, r2
    2b24:	mov	lr, r1
    2b26:	mov	r6, r3
    2b28:	ldr	r7, [sp, #48]	; 0x30
  fill(&out[0], &out[size], 0.0f);
    2b2a:	lsls	r2, r7, #2
    2b2c:	adds	r1, r5, r2
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2b2e:	cmp	r5, r1
    2b30:	beq.n	2b3e <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22>
    2b32:	mov	r3, r5
	*__first = __tmp;
    2b34:	movs	r4, #0
    2b36:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2b3a:	cmp	r1, r3
    2b3c:	bne.n	2b36 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1a>
  fill(&aux[0], &aux[size], 0.0f);
    2b3e:	add	r2, r6
    2b40:	cmp	r6, r2
    2b42:	beq.n	2b50 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x34>
    2b44:	mov	r3, r6
	*__first = __tmp;
    2b46:	movs	r1, #0
    2b48:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2b4c:	cmp	r2, r3
    2b4e:	bne.n	2b48 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    2b50:	vmov.f32	s13, #34	; 0x41100000  9.0
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    2b54:	vldr	s2, [r0, #320]	; 0x140
    2b58:	vldr	s14, [lr, #16]
  
  voice_.Render(
    2b5c:	add.w	r9, r0, #16
    2b60:	vldr	s15, [lr, #4]
    size_t size,
    bool* already_enveloped) {
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    2b64:	vsub.f32	s14, s14, s2
    2b68:	vldr	s12, [pc, #172]	; 2c18 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfc>
    2b6c:	vsub.f32	s15, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    2b70:	vldr	s13, [pc, #168]	; 2c1c <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x100>
  
  voice_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
    2b74:	ldrb.w	r2, [lr]
    size_t size,
    bool* already_enveloped) {
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    2b78:	vfma.f32	s2, s14, s12
  
  voice_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    2b7c:	vldr	s0, [lr, #20]
    2b80:	vcmpe.f32	s15, s13
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
  
  voice_.Render(
    2b84:	ubfx	r1, r2, #1, #1
    2b88:	and.w	r2, r2, #1
    2b8c:	vmrs	APSR_nzcv, fpscr
    size_t size,
    bool* already_enveloped) {
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    2b90:	vstr	s2, [r0, #320]	; 0x140
    2b94:	bmi.n	2c10 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf4>
    2b96:	vldr	s14, [pc, #136]	; 2c20 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x104>
    2b9a:	vcmpe.f32	s15, s14
    2b9e:	vmrs	APSR_nzcv, fpscr
    2ba2:	ble.n	2bea <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xce>
    2ba4:	movs	r4, #0
    2ba6:	mov.w	r8, #255	; 0xff
    2baa:	ldr.w	ip, [pc, #132]	; 2c30 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x114>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    2bae:	ldr	r3, [pc, #116]	; (2c24 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x108>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    2bb0:	add.w	r4, ip, r4, lsl #2
      parameters.timbre,
      parameters.morph,
      temp_buffer_,
      out,
      aux,
      size);
    2bb4:	vldr	s1, [pc, #112]	; 2c28 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10c>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    2bb8:	add.w	r8, r3, r8, lsl #2
    2bbc:	vldr	s4, [lr, #12]
    2bc0:	vldr	s14, [r4]
    2bc4:	vldr	s15, [r8]
    2bc8:	ldr.w	r3, [r0, #316]	; 0x13c
    2bcc:	mov	r0, r9
    2bce:	vmul.f32	s15, s15, s14
    2bd2:	vldr	s3, [lr, #8]
    2bd6:	str	r7, [sp, #8]
    2bd8:	vmul.f32	s1, s15, s1
    2bdc:	stmia.w	sp, {r5, r6}
    2be0:	bl	debc <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>
}
    2be4:	add	sp, #20
    2be6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2bea:	vldr	s14, [pc, #64]	; 2c2c <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x110>
    2bee:	vadd.f32	s15, s15, s14
    2bf2:	vcvt.s32.f32	s14, s15
    2bf6:	vmov	r8, s14
    2bfa:	vcvt.f32.s32	s14, s14
    2bfe:	vsub.f32	s15, s15, s14
    2c02:	vmov.f32	s14, s15
    2c06:	vcvt.s32.f32	s14, s14, #8
    2c0a:	vmov	r4, s14
    2c0e:	b.n	2baa <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e>
    2c10:	movs	r4, #0
    2c12:	mov	r8, r4
    2c14:	b.n	2baa <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e>
    2c16:	nop
    2c18:	.word	0x3c23d70a
    2c1c:	.word	0xc3000000
    2c20:	.word	0x42fe0000
    2c24:	.word	0x20000024
    2c28:	.word	0x39969651
    2c2c:	.word	0x43000000
    2c30:	.word	0x20000428

00002c34 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)>:
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    2c34:	ldr	r2, [r1, #8]
    2c36:	cmp	r2, #95	; 0x5f
namespace plaits {

using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
    2c38:	push	{r4}
    2c3a:	bls.n	2c66 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x32>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    2c3c:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    2c3e:	subs	r2, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2c40:	add.w	r4, r3, #96	; 0x60
      free_ -= size_bytes;
    2c44:	str	r2, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2c46:	str	r4, [r1, #0]
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
    2c48:	ldr	r2, [r0, #0]
using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
    2c4a:	movs	r1, #0

using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    2c4c:	str.w	r3, [r0, #316]	; 0x13c
  harmonics_lp_ = 0.0f;
  Reset();
    2c50:	ldr	r3, [r2, #4]
    2c52:	ldr	r2, [pc, #28]	; (2c70 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x3c>)
using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
    2c54:	str.w	r1, [r0, #320]	; 0x140
    2c58:	cmp	r3, r2
    2c5a:	bne.n	2c6a <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x36>
  Reset();
}

void ModalEngine::Reset() {
  voice_.Init();
    2c5c:	adds	r0, #16

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
}
    2c5e:	ldr.w	r4, [sp], #4

void ModalEngine::Reset() {
  voice_.Init();
    2c62:	b.w	dea0 <plaits::ModalVoice::Init()>
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    2c66:	movs	r3, #0
    2c68:	b.n	2c48 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x14>

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
}
    2c6a:	ldr.w	r4, [sp], #4
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
    2c6e:	bx	r3
    2c70:	.word	0x00002b15

00002c74 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void SpeechEngine::Init(BufferAllocator* allocator) {
    2c74:	push	{r4, r5, r6, lr}
    2c76:	mov	r4, r0
    2c78:	mov	r5, r1
  sam_speech_synth_.Init();
    2c7a:	adds	r0, #176	; 0xb0
  naive_speech_synth_.Init();
  lpc_speech_synth_word_bank_.Init(
    2c7c:	add.w	r6, r4, #360	; 0x168

using namespace std;
using namespace stmlib;

void SpeechEngine::Init(BufferAllocator* allocator) {
  sam_speech_synth_.Init();
    2c80:	bl	17d4 <plaits::SAMSpeechSynth::Init()>
  naive_speech_synth_.Init();
    2c84:	add.w	r0, r4, #20
    2c88:	bl	12c4 <plaits::NaiveSpeechSynth::Init()>
  lpc_speech_synth_word_bank_.Init(
      word_banks_,
      LPC_SPEECH_SYNTH_NUM_WORD_BANKS,
      allocator);
    2c8c:	mov	r3, r5
    2c8e:	movs	r2, #5
    2c90:	mov	r0, r6
    2c92:	ldr	r1, [pc, #84]	; (2ce8 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x74>)
    2c94:	bl	206c <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)>
  lpc_speech_synth_controller_.Init(&lpc_speech_synth_word_bank_);
    2c98:	mov	r1, r6
    2c9a:	add.w	r0, r4, #212	; 0xd4
    2c9e:	bl	26a0 <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)>
 public:
  HysteresisQuantizer() { }
  ~HysteresisQuantizer() { }

  void Init() {
    quantized_value_ = 0;
    2ca2:	movs	r3, #0
    2ca4:	str	r3, [r4, #16]
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    2ca6:	ldr	r2, [r5, #8]
    2ca8:	cmp	r2, #95	; 0x5f
    2caa:	bls.n	2ce2 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x6e>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    2cac:	ldr	r0, [r5, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    2cae:	sub.w	r1, r2, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2cb2:	add.w	r6, r0, #96	; 0x60
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    2cb6:	cmp	r1, #95	; 0x5f
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
      free_ -= size_bytes;
    2cb8:	str	r1, [r5, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2cba:	str	r6, [r5, #0]
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    2cbc:	str.w	r0, [r4, #512]	; 0x200
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    2cc0:	bls.n	2cce <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x5a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    2cc2:	ldr	r3, [r5, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    2cc4:	subs	r2, #192	; 0xc0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2cc6:	add.w	r1, r3, #96	; 0x60
      free_ -= size_bytes;
    2cca:	str	r2, [r5, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2ccc:	str	r1, [r5, #0]
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
  
  prosody_amount_ = 0.0f;
  speed_ = 1.0f;
    2cce:	mov.w	r2, #1065353216	; 0x3f800000
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
  
  prosody_amount_ = 0.0f;
    2cd2:	movs	r1, #0
      allocator);
  lpc_speech_synth_controller_.Init(&lpc_speech_synth_word_bank_);
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
    2cd4:	str.w	r3, [r4, #516]	; 0x204
  
  prosody_amount_ = 0.0f;
    2cd8:	str.w	r1, [r4, #520]	; 0x208
  speed_ = 1.0f;
    2cdc:	str.w	r2, [r4, #524]	; 0x20c
}
    2ce0:	pop	{r4, r5, r6, pc}
      LPC_SPEECH_SYNTH_NUM_WORD_BANKS,
      allocator);
  lpc_speech_synth_controller_.Init(&lpc_speech_synth_word_bank_);
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    2ce2:	str.w	r3, [r4, #512]	; 0x200
    2ce6:	b.n	2cce <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x5a>
    2ce8:	.word	0x2001fb2c

00002cec <plaits::SpeechEngine::Reset()>:
  prosody_amount_ = 0.0f;
  speed_ = 1.0f;
}

void SpeechEngine::Reset() {
  lpc_speech_synth_word_bank_.Reset();
    2cec:	add.w	r0, r0, #360	; 0x168
    2cf0:	b.w	20b4 <plaits::LPCSpeechSynthWordBank::Reset()>

00002cf4 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    2cf4:	vmov.f32	s13, #34	; 0x41100000  9.0
    2cf8:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    2cfc:	vldr	s14, [pc, #684]	; 2fac <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    2d00:	vsub.f32	s15, s15, s13
void SpeechEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    2d04:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    2d08:	vcmpe.f32	s15, s14
    2d0c:	mov	r8, r1
    2d0e:	mov	r7, r0
    2d10:	mov	r4, r2
    2d12:	mov	r5, r3
    2d14:	vmrs	APSR_nzcv, fpscr
    2d18:	vpush	{d8-d9}
    2d1c:	sub	sp, #16
    2d1e:	ldr	r6, [sp, #56]	; 0x38
    2d20:	bmi.n	2d38 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    2d22:	vldr	s14, [pc, #652]	; 2fb0 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
    2d26:	vcmpe.f32	s15, s14
    2d2a:	vmrs	APSR_nzcv, fpscr
    2d2e:	ble.w	2f04 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x210>
    2d32:	movs	r3, #0
    2d34:	movs	r0, #255	; 0xff
    2d36:	b.n	2d3c <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    2d38:	movs	r3, #0
    2d3a:	mov	r0, r3
  const float f0 = NoteToFrequency(parameters.note);
  
  const float group = parameters.harmonics * 6.0f;
    2d3c:	vmov.f32	s16, #24	; 0x40c00000  6.0
    2d40:	vldr	s15, [r8, #16]
    2d44:	ldr	r1, [pc, #620]	; (2fb4 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>)
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    2d46:	vmov.f32	s18, #0	; 0x40000000  2.0
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    2d4a:	ldr	r2, [pc, #620]	; (2fb8 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>)
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  const float group = parameters.harmonics * 6.0f;
    2d4c:	vmul.f32	s16, s15, s16

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    2d50:	add.w	r1, r1, r0, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    2d54:	add.w	r3, r2, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    2d58:	vldr	s12, [pc, #608]	; 2fbc <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c8>
    2d5c:	vldr	s13, [r1]
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    2d60:	vcmpe.f32	s16, s18
    2d64:	vldr	s17, [r3]
    2d68:	vmul.f32	s15, s13, s17
    2d6c:	vmrs	APSR_nzcv, fpscr
    2d70:	vmul.f32	s17, s15, s12
    2d74:	bhi.n	2e5a <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x166>
    *already_enveloped = false;
    
    float blend = group;
    if (group <= 1.0f) {
    2d76:	vmov.f32	s5, #112	; 0x3f800000  1.0
  
  const float group = parameters.harmonics * 6.0f;
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    *already_enveloped = false;
    2d7a:	movs	r3, #0
    2d7c:	ldr	r2, [sp, #60]	; 0x3c
    
    float blend = group;
    if (group <= 1.0f) {
    2d7e:	vcmpe.f32	s16, s5
  
  const float group = parameters.harmonics * 6.0f;
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    *already_enveloped = false;
    2d82:	strb	r3, [r2, #0]
    
    float blend = group;
    if (group <= 1.0f) {
    2d84:	vmrs	APSR_nzcv, fpscr
    2d88:	bls.w	2f32 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x23e>
          aux,
          out,
          size);
    } else {
      lpc_speech_synth_controller_.Render(
          parameters.trigger & TRIGGER_UNPATCHED,
    2d8c:	ldrb.w	r1, [r8]
          parameters.morph,
          parameters.timbre,
          1.0f,
          aux,
          out,
          size);
    2d90:	vmov.f32	s0, s17
    2d94:	vldr	s2, [pc, #552]	; 2fc0 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    2d98:	mov.w	r3, #4294967295
    2d9c:	vldr	s4, [r8, #8]
    2da0:	and.w	r2, r1, #1
    2da4:	vldr	s3, [r8, #12]
    2da8:	ubfx	r1, r1, #1, #1
    2dac:	str	r6, [sp, #8]
    2dae:	vmov.f32	s1, s2
    2db2:	str	r4, [sp, #4]
    2db4:	add.w	r0, r7, #212	; 0xd4
    2db8:	str	r5, [sp, #0]
    2dba:	bl	26e8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)>
      blend = 2.0f - blend;
    2dbe:	vsub.f32	s16, s18, s16
        f0,
        parameters.morph,
        parameters.timbre,
        temp_buffer_[0],
        temp_buffer_[1],
        size);
    2dc2:	ldrb.w	r1, [r8]
    2dc6:	vmov.f32	s0, s17
    2dca:	ldr.w	r3, [r7, #516]	; 0x204
    2dce:	add.w	r0, r7, #176	; 0xb0
    2dd2:	sub.w	r1, r1, #1
    2dd6:	ldr.w	r2, [r7, #512]	; 0x200
    2dda:	vldr	s2, [r8, #8]
    2dde:	clz	r1, r1
    2de2:	vldr	s1, [r8, #12]
    2de6:	str	r6, [sp, #0]
    2de8:	lsrs	r1, r1, #5
    2dea:	bl	18c0 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)>
    
    blend *= blend * (3.0f - 2.0f * blend);
    2dee:	vmov.f32	s15, #8	; 0x40400000  3.0
    2df2:	vmov.f32	s13, #0	; 0x40000000  2.0
    2df6:	vmov.f32	s14, s15
    2dfa:	vfms.f32	s14, s16, s13
    2dfe:	vmul.f32	s14, s14, s16
    2e02:	vmul.f32	s16, s16, s14
    blend *= blend * (3.0f - 2.0f * blend);
    2e06:	vfms.f32	s15, s16, s13
    2e0a:	vmul.f32	s14, s15, s16
    2e0e:	vmul.f32	s14, s16, s14
    for (size_t i = 0; i < size; ++i) {
    2e12:	cbz	r6, 2e50 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15c>
    2e14:	ldr.w	r1, [r7, #512]	; 0x200
    2e18:	mov	r3, r5
    2e1a:	mov	r2, r4
    2e1c:	ldr.w	r0, [r7, #516]	; 0x204
    2e20:	add.w	r6, r1, r6, lsl #2
      aux[i] += (temp_buffer_[0][i] - aux[i]) * blend;
    2e24:	vldmia	r1!, {s13}
    2e28:	vldr	s15, [r3]
        temp_buffer_[1],
        size);
    
    blend *= blend * (3.0f - 2.0f * blend);
    blend *= blend * (3.0f - 2.0f * blend);
    for (size_t i = 0; i < size; ++i) {
    2e2c:	cmp	r6, r1
      aux[i] += (temp_buffer_[0][i] - aux[i]) * blend;
    2e2e:	vsub.f32	s13, s13, s15
    2e32:	vfma.f32	s15, s14, s13
    2e36:	vstmia	r3!, {s15}
      out[i] += (temp_buffer_[1][i] - out[i]) * blend;
    2e3a:	vldr	s15, [r2]
    2e3e:	vldmia	r0!, {s13}
    2e42:	vsub.f32	s13, s13, s15
    2e46:	vfma.f32	s15, s14, s13
    2e4a:	vstmia	r2!, {s15}
        temp_buffer_[1],
        size);
    
    blend *= blend * (3.0f - 2.0f * blend);
    blend *= blend * (3.0f - 2.0f * blend);
    for (size_t i = 0; i < size; ++i) {
    2e4e:	bne.n	2e24 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x130>
        replay_prosody ? parameters.accent : 1.0f,
        aux,
        out,
        size);
  }
}
    2e50:	add	sp, #16
    2e52:	vpop	{d8-d9}
    2e56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    2e5a:	vsub.f32	s16, s16, s18
    2e5e:	vldr	s13, [pc, #356]	; 2fc4 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d0>
    2e62:	vmov.f32	s12, #20	; 0x40a00000  5.0
    2e66:	vldr	s15, [pc, #344]	; 2fc0 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    2e6a:	vmov.f32	s14, #208	; 0xbe800000 -0.250
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    2e6e:	vmul.f32	s16, s16, s13
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    2e72:	vldr	s13, [r7, #16]
    2e76:	vmov.f32	s11, #80	; 0x3e800000  0.250
    2e7a:	vcvt.f32.s32	s13, s13
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    2e7e:	vfma.f32	s15, s16, s12
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    2e82:	vmov.f32	s12, #96	; 0x3f000000  0.5
  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    2e86:	vcmpe.f32	s15, s13
    2e8a:	vmrs	APSR_nzcv, fpscr
    2e8e:	it	le
    2e90:	vmovle.f32	s14, s11
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    2e94:	vadd.f32	s15, s15, s14
    2e98:	vadd.f32	s15, s15, s12
    2e9c:	vcvt.s32.f32	s15, s15
    2ea0:	vmov	r2, s15
    CONSTRAIN(q, 0, num_steps - 1);
    2ea4:	cmp	r2, #0
    2ea6:	blt.n	2f60 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26c>
    2ea8:	cmp	r2, #5
    2eaa:	bgt.n	2f2a <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x236>
    quantized_value_ = q;
    2eac:	vstr	s15, [r7, #16]
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
    2eb0:	subs	r3, r2, #1
    2eb2:	cmp	r2, #0
    2eb4:	beq.n	2fa0 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
        !(parameters.trigger & TRIGGER_UNPATCHED);
    2eb6:	ldrb.w	r2, [r8]
    2eba:	and.w	r0, r2, #2
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
    2ebe:	and.w	r1, r0, #255	; 0xff
    2ec2:	cmp	r0, #0
    2ec4:	bne.n	2f72 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27e>
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    2ec6:	mov.w	lr, #1
    2eca:	ldr	r0, [sp, #60]	; 0x3c
    
    lpc_speech_synth_controller_.Render(
    2ecc:	vldr	s1, [r7, #520]	; 0x208
    2ed0:	and.w	r2, r2, lr
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    2ed4:	strb.w	lr, [r0]
    
    lpc_speech_synth_controller_.Render(
    2ed8:	vldr	s2, [r7, #524]	; 0x20c
    2edc:	add.w	r0, r7, #212	; 0xd4
        parameters.trigger & TRIGGER_RISING_EDGE,
        word_bank,
        f0,
        prosody_amount_,
        speed_,
        parameters.morph,
    2ee0:	vldr	s3, [r8, #12]
        parameters.timbre,
    2ee4:	vldr	s4, [r8, #8]
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    
    lpc_speech_synth_controller_.Render(
    2ee8:	vldr	s5, [r8, #20]
        parameters.morph,
        parameters.timbre,
        replay_prosody ? parameters.accent : 1.0f,
        aux,
        out,
        size);
    2eec:	vmov.f32	s0, s17
    2ef0:	str	r6, [sp, #8]
    2ef2:	str	r4, [sp, #4]
    2ef4:	str	r5, [sp, #0]
    2ef6:	bl	26e8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)>
  }
}
    2efa:	add	sp, #16
    2efc:	vpop	{d8-d9}
    2f00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f04:	vldr	s14, [pc, #192]	; 2fc8 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d4>
    2f08:	vadd.f32	s15, s15, s14
    2f0c:	vcvt.s32.f32	s14, s15
    2f10:	vmov	r0, s14
    2f14:	vcvt.f32.s32	s14, s14
    2f18:	vsub.f32	s15, s15, s14
    2f1c:	vmov.f32	s14, s15
    2f20:	vcvt.s32.f32	s14, s14, #8
    2f24:	vmov	r3, s14
    2f28:	b.n	2d3c <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    2f2a:	movs	r2, #5
    }
  } else {
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    2f2c:	movs	r3, #4
    2f2e:	str	r2, [r7, #16]
    2f30:	b.n	2eb6 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c2>
          parameters.morph,
          parameters.timbre,
          temp_buffer_[0],
          aux,
          out,
          size);
    2f32:	ldrb.w	r1, [r8]
    2f36:	mov	r3, r5
    2f38:	ldr.w	r2, [r7, #512]	; 0x200
    2f3c:	vmov.f32	s0, s17
    2f40:	sub.w	r1, r1, #1
    2f44:	vldr	s2, [r8, #8]
    2f48:	vldr	s1, [r8, #12]
    2f4c:	add.w	r0, r7, #20
    2f50:	clz	r1, r1
    2f54:	stmia.w	sp, {r4, r6}
    2f58:	lsrs	r1, r1, #5
    2f5a:	bl	1344 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)>
    2f5e:	b.n	2dc2 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xce>
    2f60:	ldrb.w	r2, [r8]
    2f64:	movs	r0, #0
    }
  } else {
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    2f66:	mov.w	r3, #4294967295
    2f6a:	and.w	r1, r2, #2
    2f6e:	str	r0, [r7, #16]
    2f70:	uxtb	r1, r1
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    
    lpc_speech_synth_controller_.Render(
    2f72:	adds	r1, #0
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    2f74:	mov.w	lr, #0
    
    lpc_speech_synth_controller_.Render(
    2f78:	vldr	s1, [r7, #520]	; 0x208
    2f7c:	add.w	r0, r7, #212	; 0xd4
    2f80:	vldr	s2, [r7, #524]	; 0x20c
    2f84:	vmov.f32	s5, #112	; 0x3f800000  1.0
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    2f88:	ldr	r7, [sp, #60]	; 0x3c
    
    lpc_speech_synth_controller_.Render(
    2f8a:	it	ne
    2f8c:	movne	r1, #1
        parameters.trigger & TRIGGER_RISING_EDGE,
        word_bank,
        f0,
        prosody_amount_,
        speed_,
        parameters.morph,
    2f8e:	vldr	s3, [r8, #12]
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    
    lpc_speech_synth_controller_.Render(
    2f92:	and.w	r2, r2, #1
        word_bank,
        f0,
        prosody_amount_,
        speed_,
        parameters.morph,
        parameters.timbre,
    2f96:	vldr	s4, [r8, #8]
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    2f9a:	strb.w	lr, [r7]
    2f9e:	b.n	2eec <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f8>
    2fa0:	ldrb.w	r2, [r8]
    2fa4:	and.w	r1, r2, #2
    2fa8:	uxtb	r1, r1
    2faa:	b.n	2f72 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27e>
    2fac:	.word	0xc3000000
    2fb0:	.word	0x42fe0000
    2fb4:	.word	0x20000024
    2fb8:	.word	0x20000428
    2fbc:	.word	0x39969651
    2fc0:	.word	0x00000000
    2fc4:	.word	0x3e8ccccd
    2fc8:	.word	0x43000000

00002fcc <plaits::WaveshapingEngine::Init(stmlib::BufferAllocator*)>:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    2fcc:	movs	r3, #0
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    2fce:	mov.w	r2, #1056964608	; 0x3f000000
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    2fd2:	ldr	r1, [pc, #52]	; (3008 <plaits::WaveshapingEngine::Init(stmlib::BufferAllocator*)+0x3c>)
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    2fd4:	str	r2, [r0, #16]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    pw_ = 0.5f;
    2fd6:	str	r2, [r0, #40]	; 0x28
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    2fd8:	str	r2, [r0, #44]	; 0x2c
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    pw_ = 0.5f;
    2fda:	str	r2, [r0, #68]	; 0x44
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    2fdc:	str	r3, [r0, #20]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    2fde:	str	r3, [r0, #28]
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    2fe0:	str	r3, [r0, #48]	; 0x30
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    2fe2:	str	r3, [r0, #56]	; 0x38
using namespace stmlib;

void WaveshapingEngine::Init(BufferAllocator* allocator) {
  slope_.Init();
  triangle_.Init();
  previous_shape_ = 0.0f;
    2fe4:	str	r3, [r0, #72]	; 0x48
  previous_wavefolder_gain_ = 0.0f;
    2fe6:	str	r3, [r0, #76]	; 0x4c
  previous_overtone_gain_ = 0.0f;
    2fe8:	str	r3, [r0, #80]	; 0x50
    high_ = true;

    frequency_ = 0.001f;
    2fea:	str	r1, [r0, #36]	; 0x24
    2fec:	str	r1, [r0, #64]	; 0x40
namespace plaits {

using namespace std;
using namespace stmlib;

void WaveshapingEngine::Init(BufferAllocator* allocator) {
    2fee:	push	{r4, r5}
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    2ff0:	mov.w	r5, #1065353216	; 0x3f800000
    hp_state_ = 0.0f;
    high_ = true;
    2ff4:	movs	r4, #1
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    2ff6:	str	r5, [r0, #24]
    2ff8:	str	r5, [r0, #52]	; 0x34
    hp_state_ = 0.0f;
    high_ = true;
    2ffa:	strb.w	r4, [r0, #32]
    2ffe:	strb.w	r4, [r0, #60]	; 0x3c
  slope_.Init();
  triangle_.Init();
  previous_shape_ = 0.0f;
  previous_wavefolder_gain_ = 0.0f;
  previous_overtone_gain_ = 0.0f;
}
    3002:	pop	{r4, r5}
    3004:	bx	lr
    3006:	nop
    3008:	.word	0x3a83126f

0000300c <plaits::WaveshapingEngine::Reset()>:

void WaveshapingEngine::Reset() {
    300c:	bx	lr
    300e:	nop

00003010 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3010:	vmov.f32	s13, #34	; 0x41100000  9.0
    3014:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3018:	vldr	s14, [pc, #660]	; 32b0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a0>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    301c:	vsub.f32	s15, s15, s13
void WaveshapingEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    3020:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3024:	vcmpe.f32	s15, s14
    3028:	mov	r8, r1
    302a:	vpush	{d8-d12}
    302e:	vmrs	APSR_nzcv, fpscr
    3032:	sub	sp, #12
    3034:	ldr	r1, [sp, #88]	; 0x58
    3036:	bmi.n	304e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    3038:	vldr	s14, [pc, #632]	; 32b4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a4>
    303c:	vcmpe.f32	s15, s14
    3040:	vmrs	APSR_nzcv, fpscr
    3044:	ble.w	3766 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x756>
    3048:	movs	r4, #0
    304a:	movs	r7, #255	; 0xff
    304c:	b.n	3052 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    304e:	movs	r4, #0
    3050:	mov	r7, r4

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3052:	ldr	r6, [pc, #612]	; (32b8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>)
  const float root = parameters.note;
  
  const float f0 = NoteToFrequency(root);
  const float pw = parameters.morph * 0.45f + 0.5f;
    3054:	vmov.f32	s15, #96	; 0x3f000000  0.5
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3058:	ldr	r5, [pc, #608]	; (32bc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    305a:	add.w	r6, r6, r7, lsl #2
    305e:	vldr	s12, [pc, #608]	; 32c0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3062:	add.w	r4, r5, r4, lsl #2
    3066:	vldr	s9, [r8, #12]
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    306a:	vldr	s14, [r6]
    306e:	vldr	s11, [r4]
    3072:	vldr	s10, [pc, #592]	; 32c4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    3076:	vmul.f32	s13, s14, s11
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    307a:	vldr	s14, [pc, #588]	; 32c8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
    307e:	vmov.f32	s11, s15
    3082:	vfma.f32	s11, s9, s12
    3086:	vmov.f32	s12, s11
    308a:	vmul.f32	s11, s13, s10
    308e:	vcmpe.f32	s11, s14
    3092:	vmrs	APSR_nzcv, fpscr
    3096:	bmi.w	3736 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x726>
    309a:	vmov.f32	s14, #80	; 0x3e800000  0.250
    309e:	vcmpe.f32	s11, s14
    30a2:	vmrs	APSR_nzcv, fpscr
    30a6:	ble.w	3758 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x748>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    30aa:	vcmpe.f32	s12, s15
    30ae:	vmrs	APSR_nzcv, fpscr
    30b2:	bmi.n	30ca <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xba>
    30b4:	vmov.f32	s13, #112	; 0x3f800000  1.0
    30b8:	vsub.f32	s15, s13, s15
    30bc:	vcmpe.f32	s12, s15
    30c0:	vmrs	APSR_nzcv, fpscr
    30c4:	it	le
    30c6:	vmovle.f32	s15, s12
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    30ca:	vmov	s13, r1
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    30ce:	vldr	s6, [r0, #36]	; 0x24
    30d2:	vldr	s7, [r0, #40]	; 0x28
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    30d6:	subs	r4, r1, #1
    increment_ = (new_value - *state) / static_cast<float>(size);
    30d8:	vcvt.f32.u32	s10, s13
    30dc:	vsub.f32	s15, s15, s7
    30e0:	vsub.f32	s13, s14, s6
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    30e4:	vldr	s14, [r0, #20]
    30e8:	vdiv.f32	s1, s15, s10
    30ec:	vdiv.f32	s2, s13, s10
  
    while (size--) {
    30f0:	cmp	r1, #0
    30f2:	beq.w	323c <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
    30f6:	mov	r7, r2
    30f8:	mov	r5, r4
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    30fa:	vldr	s17, [pc, #464]	; 32cc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    30fe:	mov.w	lr, #1
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    3102:	vmov.f32	s8, #112	; 0x3f800000  1.0
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    3106:	vmov.f32	s3, #96	; 0x3f000000  0.5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    310a:	vmov.f32	s4, #72	; 0x3e400000  0.1875000
    310e:	vmov.f32	s5, #120	; 0x3fc00000  1.5
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    3112:	vmov.f32	s16, #0	; 0x40000000  2.0
    3116:	vmov.f32	s0, #240	; 0xbf800000 -1.0
    311a:	b.n	31de <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1ce>
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    311c:	vsub.f32	s9, s15, s7
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
    3120:	strb.w	r6, [r0, #32]
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    3124:	vadd.f32	s20, s13, s18
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    3128:	vcmpe.f32	s15, s8
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    312c:	vdiv.f32	s12, s9, s6
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3130:	vnmul.f32	s20, s6, s20
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    3134:	vmrs	APSR_nzcv, fpscr
    3138:	vsub.f32	s9, s8, s12
    313c:	vmul.f32	s12, s12, s3
    3140:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    3144:	vmul.f32	s21, s12, s12
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    3148:	vsub.f32	s12, s4, s12
    314c:	vmul.f32	s19, s9, s9
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3150:	vsub.f32	s9, s4, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    3154:	vfma.f32	s12, s21, s5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3158:	vfma.f32	s9, s19, s5
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    315c:	vfms.f32	s12, s21, s21
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3160:	vfms.f32	s9, s19, s19
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    3164:	vmov.f32	s19, s17
    3168:	vfma.f32	s19, s20, s12
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    316c:	vfma.f32	s14, s20, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    3170:	blt.n	3222 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x212>
          phase_ -= 1.0f;
    3172:	vsub.f32	s15, s15, s8
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    3176:	strb.w	lr, [r0, #32]
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    317a:	vadd.f32	s18, s13, s18
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    317e:	vdiv.f32	s12, s15, s6
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    3182:	vstr	s15, [r0, #16]
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    3186:	vmul.f32	s18, s18, s6
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    318a:	vsub.f32	s9, s8, s12
    318e:	vmul.f32	s12, s12, s3
    3192:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    3196:	vmul.f32	s21, s12, s12
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    319a:	vsub.f32	s12, s4, s12
    319e:	vmul.f32	s20, s9, s9
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    31a2:	vsub.f32	s9, s4, s9
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    31a6:	vfma.f32	s12, s21, s5
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    31aa:	vfma.f32	s9, s20, s5
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    31ae:	vfms.f32	s12, s21, s21
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    31b2:	vfms.f32	s9, s20, s20
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    31b6:	vfma.f32	s19, s18, s12
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    31ba:	vfma.f32	s14, s18, s9
    31be:	vmov.f32	s12, s14
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    31c2:	vmul.f32	s14, s13, s15
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    31c6:	vmov.f32	s15, s0
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    31ca:	subs	r5, #1
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    31cc:	vadd.f32	s14, s14, s19
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    31d0:	cmp.w	r5, #4294967295
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    31d4:	vfma.f32	s15, s12, s16
    31d8:	vstmia	r7!, {s15}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    31dc:	beq.n	323c <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
  }

  inline float Next() {
    value_ += increment_;
    31de:	vadd.f32	s6, s6, s2
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    31e2:	vldr	s15, [r0, #16]
    31e6:	vadd.f32	s7, s7, s1
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    31ea:	ldrb.w	ip, [r0, #32]
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    31ee:	vadd.f32	s15, s6, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    31f2:	vsub.f32	s12, s8, s7
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    31f6:	vdiv.f32	s13, s8, s7
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    31fa:	vstr	s15, [r0, #16]
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    31fe:	vcmpe.f32	s7, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    3202:	vdiv.f32	s18, s8, s12
        }
        if (high_ ^ (phase_ < pw)) {
    3206:	vmrs	APSR_nzcv, fpscr
    320a:	ite	gt
    320c:	movgt	r6, #1
    320e:	movle	r6, #0
    3210:	cmp	ip, r6
    3212:	bne.n	311c <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10c>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    3214:	vcmpe.f32	s15, s8
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    3218:	vldr	s19, [pc, #176]	; 32cc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    321c:	vmrs	APSR_nzcv, fpscr
    3220:	bge.n	3172 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x162>
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    3222:	ldrb.w	r6, [r0, #32]
    3226:	vmov.f32	s12, s14
    322a:	cmp	r6, #0
    322c:	bne.n	31c2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b2>
    322e:	vsub.f32	s15, s15, s7
    3232:	vmov.f32	s14, s8
    3236:	vfms.f32	s14, s18, s15
    323a:	b.n	31c6 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b6>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    323c:	vldr	s15, [pc, #136]	; 32c8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    3240:	vstr	s14, [r0, #20]
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    3244:	vcmpe.f32	s11, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    3248:	vstr	s7, [r0, #40]	; 0x28
    324c:	vstr	s6, [r0, #36]	; 0x24
    3250:	vmrs	APSR_nzcv, fpscr
    3254:	bmi.n	3266 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x256>
    3256:	vmov.f32	s15, #80	; 0x3e800000  0.250
    325a:	vcmpe.f32	s11, s15
    325e:	vmrs	APSR_nzcv, fpscr
    3262:	ble.w	373c <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x72c>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    3266:	vmov.f32	s13, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    326a:	vldr	s6, [r0, #64]	; 0x40
    326e:	vldr	s7, [r0, #68]	; 0x44
    increment_ = (new_value - *state) / static_cast<float>(size);
    3272:	vsub.f32	s15, s15, s6
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    3276:	vldr	s14, [r0, #48]	; 0x30
    327a:	vsub.f32	s13, s13, s7
    327e:	vdiv.f32	s2, s15, s10
    3282:	vdiv.f32	s1, s13, s10
  
    while (size--) {
    3286:	cmp	r1, #0
    3288:	beq.w	3406 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f6>
    328c:	mov	r6, r3
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    328e:	vldr	s17, [pc, #60]	; 32cc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    3292:	mov.w	lr, #1
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    3296:	vmov.f32	s8, #112	; 0x3f800000  1.0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    329a:	vmov.f32	s3, #96	; 0x3f000000  0.5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    329e:	vmov.f32	s4, #72	; 0x3e400000  0.1875000
    32a2:	vmov.f32	s5, #120	; 0x3fc00000  1.5
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    32a6:	vmov.f32	s16, #0	; 0x40000000  2.0
    32aa:	vmov.f32	s0, #240	; 0xbf800000 -1.0
    32ae:	b.n	33a4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x394>
    32b0:	.word	0xc3000000
    32b4:	.word	0x42fe0000
    32b8:	.word	0x20000024
    32bc:	.word	0x20000428
    32c0:	.word	0x3ee66666
    32c4:	.word	0x39969651
    32c8:	.word	0x358637bd
    32cc:	.word	0x00000000
    32d0:	.word	0xbd000000
    32d4:	.word	0xbd2aaaab
    32d8:	.word	0x3eeaaaab
    32dc:	.word	0x3eeb851f
    32e0:	.word	0x3cf5c28f
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    32e4:	vsub.f32	s9, s15, s7
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
    32e8:	strb.w	r5, [r0, #60]	; 0x3c
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    32ec:	vadd.f32	s20, s13, s18
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    32f0:	vcmpe.f32	s15, s8
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    32f4:	vdiv.f32	s12, s9, s6
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    32f8:	vnmul.f32	s20, s6, s20
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    32fc:	vmrs	APSR_nzcv, fpscr
    3300:	vsub.f32	s9, s8, s12
    3304:	vmul.f32	s12, s12, s3
    3308:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    330c:	vmul.f32	s21, s12, s12
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    3310:	vsub.f32	s12, s4, s12
    3314:	vmul.f32	s19, s9, s9
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3318:	vsub.f32	s9, s4, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    331c:	vfma.f32	s12, s21, s5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3320:	vfma.f32	s9, s19, s5
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    3324:	vfms.f32	s12, s21, s21
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3328:	vfms.f32	s9, s19, s19
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    332c:	vmov.f32	s19, s17
    3330:	vfma.f32	s19, s20, s12
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3334:	vfma.f32	s14, s20, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    3338:	blt.n	33e8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>
          phase_ -= 1.0f;
    333a:	vsub.f32	s15, s15, s8
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    333e:	strb.w	lr, [r0, #60]	; 0x3c
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    3342:	vadd.f32	s18, s13, s18
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    3346:	vdiv.f32	s12, s15, s6
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    334a:	vstr	s15, [r0, #44]	; 0x2c
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    334e:	vmul.f32	s18, s18, s6
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    3352:	vsub.f32	s9, s8, s12
    3356:	vmul.f32	s12, s12, s3
    335a:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    335e:	vmul.f32	s21, s12, s12
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    3362:	vsub.f32	s12, s4, s12
    3366:	vmul.f32	s20, s9, s9
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    336a:	vsub.f32	s9, s4, s9
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    336e:	vfma.f32	s12, s21, s5
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3372:	vfma.f32	s9, s20, s5
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    3376:	vfms.f32	s12, s21, s21
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    337a:	vfms.f32	s9, s20, s20
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    337e:	vfma.f32	s19, s18, s12
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    3382:	vfma.f32	s14, s18, s9
    3386:	vmov.f32	s12, s14
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    338a:	vmul.f32	s15, s13, s15
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    338e:	vmov.f32	s13, s0
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    3392:	subs	r4, #1
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    3394:	vadd.f32	s14, s15, s19
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    3398:	adds	r7, r4, #1
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    339a:	vfma.f32	s13, s12, s16
    339e:	vstmia	r6!, {s13}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    33a2:	beq.n	3406 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f6>
  }

  inline float Next() {
    value_ += increment_;
    33a4:	vadd.f32	s6, s6, s2
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    33a8:	vldr	s15, [r0, #44]	; 0x2c
    33ac:	vadd.f32	s7, s7, s1
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    33b0:	ldrb.w	r7, [r0, #60]	; 0x3c
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    33b4:	vadd.f32	s15, s6, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    33b8:	vsub.f32	s12, s8, s7
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    33bc:	vdiv.f32	s13, s8, s7
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    33c0:	vstr	s15, [r0, #44]	; 0x2c
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    33c4:	vcmpe.f32	s7, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    33c8:	vdiv.f32	s18, s8, s12
        }
        if (high_ ^ (phase_ < pw)) {
    33cc:	vmrs	APSR_nzcv, fpscr
    33d0:	ite	gt
    33d2:	movgt	r5, #1
    33d4:	movle	r5, #0
    33d6:	cmp	r7, r5
    33d8:	bne.n	32e4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d4>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    33da:	vcmpe.f32	s15, s8
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    33de:	vldr	s19, [pc, #-276]	; 32cc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    33e2:	vmrs	APSR_nzcv, fpscr
    33e6:	bge.n	333a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x32a>
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    33e8:	ldrb.w	r5, [r0, #60]	; 0x3c
    33ec:	vmov.f32	s12, s14
    33f0:	cmp	r5, #0
    33f2:	bne.n	338a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37a>
    33f4:	vsub.f32	s15, s15, s7
    33f8:	vmov.f32	s14, s8
    33fc:	vfms.f32	s14, s18, s15
    3400:	vmov.f32	s15, s14
    3404:	b.n	338e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37e>
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    3406:	vmov.f32	s15, #96	; 0x3f000000  0.5
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    340a:	vstr	s7, [r0, #68]	; 0x44
    340e:	vstr	s6, [r0, #64]	; 0x40
    3412:	vmov.f32	s5, #20	; 0x40a00000  5.0
    3416:	vldr	s12, [r8, #12]
    341a:	vmov.f32	s8, #8	; 0x40400000  3.0
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    341e:	vldr	s9, [r8, #16]
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    3422:	vmov.f32	s6, #94	; 0x3ef00000  0.4687500
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    3426:	vsub.f32	s12, s12, s15
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    342a:	vstr	s14, [r0, #48]	; 0x30
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    342e:	vldr	s7, [pc, #-352]	; 32d0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    3432:	vmov.f32	s13, #112	; 0x3f800000  1.0
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    3436:	vsub.f32	s9, s9, s15
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    343a:	vabs.f32	s14, s12
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    343e:	vabs.f32	s15, s9
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    3442:	vfma.f32	s8, s14, s5
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    3446:	vmov.f32	s14, s7
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    344a:	vadd.f32	s15, s15, s15
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    344e:	vfma.f32	s14, s8, s11
    3452:	vdiv.f32	s12, s14, s6
    3456:	vsub.f32	s12, s13, s12
  CONSTRAIN(max_amount, 0.0f, 1.0f);
    345a:	vcmpe.f32	s12, #0.0
    345e:	vmrs	APSR_nzcv, fpscr
    3462:	bmi.w	3792 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x782>
    3466:	vcmpe.f32	s12, s13
    346a:	vmrs	APSR_nzcv, fpscr
    346e:	ble.w	37b4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a4>
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    3472:	vmul.f32	s15, s15, s13
    3476:	vldr	s7, [pc, #-420]	; 32d4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>
    347a:	vmov.f32	s5, #20	; 0x40a00000  5.0
    347e:	vldr	s6, [pc, #-424]	; 32d8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c8>
    3482:	vmov.f32	s14, #8	; 0x40400000  3.0
  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
  const float shape_amount_attenuation = Tame(f0, slope, 16.0f);
  const float wavefolder_gain = parameters.timbre;
    3486:	vldr	s4, [r8, #8]
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    348a:	vmov.f32	s12, #112	; 0x3f800000  1.0
    348e:	vfma.f32	s14, s15, s5
    3492:	vmul.f32	s15, s14, s8
    3496:	vfma.f32	s7, s15, s11
    349a:	vdiv.f32	s14, s7, s6
    349e:	vsub.f32	s14, s12, s14
  CONSTRAIN(max_amount, 0.0f, 1.0f);
    34a2:	vcmpe.f32	s14, #0.0
    34a6:	vmrs	APSR_nzcv, fpscr
    34aa:	bmi.w	378c <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
    34ae:	vcmpe.f32	s14, s12
    34b2:	vmrs	APSR_nzcv, fpscr
    34b6:	ble.w	37be <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ae>
      size);
  ParameterInterpolator wf_gain_modulation(
      &previous_wavefolder_gain_,
      0.03f + 0.46f * wavefolder_gain * wavefolder_gain_attenuation,
      size);
  const float overtone_gain = parameters.timbre * (2.0f - parameters.timbre);
    34ba:	vmov.f32	s14, #0	; 0x40000000  2.0
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    34be:	vldr	s3, [pc, #-484]	; 32dc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    34c2:	vmov.f32	s11, #96	; 0x3f000000  0.5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    34c6:	vldr	s7, [r0, #80]	; 0x50
    increment_ = (new_value - *state) / static_cast<float>(size);
    34ca:	vmul.f32	s3, s4, s3
    34ce:	vldr	s15, [pc, #-496]	; 32e0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d0>
    34d2:	vsub.f32	s6, s14, s4
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    34d6:	vldr	s8, [r0, #76]	; 0x4c
    increment_ = (new_value - *state) / static_cast<float>(size);
    34da:	vmov.f32	s5, s11
    34de:	vfma.f32	s15, s3, s12
    34e2:	vfma.f32	s5, s9, s13
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    34e6:	vldr	s9, [r0, #72]	; 0x48
    34ea:	vmul.f32	s13, s6, s4
    increment_ = (new_value - *state) / static_cast<float>(size);
    34ee:	vmov.f32	s6, s7
    34f2:	vsub.f32	s14, s14, s13
    34f6:	vsub.f32	s15, s15, s8
    34fa:	vsub.f32	s12, s5, s9
    34fe:	vfnms.f32	s6, s13, s14
    3502:	vdiv.f32	s5, s15, s10
    3506:	vmov.f32	s14, s6
    350a:	vdiv.f32	s4, s12, s10
    350e:	vdiv.f32	s6, s14, s10
  ParameterInterpolator overtone_gain_modulation(
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    3512:	cmp	r1, #0
    3514:	beq.w	3720 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x710>
    3518:	mov	lr, r3
    351a:	add.w	r3, r2, r1, lsl #2
    351e:	ldr.w	fp, [pc, #724]	; 37f4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e4>
    3522:	mov	r1, r3
    3524:	ldr.w	ip, [pc, #720]	; 37f8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e8>
    3528:	ldr	r3, [pc, #668]	; (37c8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b8>)
    float fold = InterpolateHermite(
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    352a:	vmov.f32	s17, #80	; 0x3e800000  0.250
    352e:	ldr	r7, [pc, #668]	; (37cc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>)
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    3530:	vldr	s16, [pc, #668]	; 37d0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    3534:	mov	sl, r1
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    3536:	vldr	s0, [pc, #668]	; 37d4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    353a:	vldr	s1, [pc, #668]	; 37d8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c8>
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    353e:	vldr	s10, [pc, #668]	; 37dc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7cc>
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    3542:	vldr	s2, [pc, #668]	; 37e0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d0>
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    3546:	vldr	s3, [pc, #668]	; 37e4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d4>
    354a:	str	r0, [sp, #4]
  }

  inline float Next() {
    value_ += increment_;
    354c:	vadd.f32	s9, s9, s4
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    3550:	vldr	s15, [r2]
    3554:	vmov.f32	s12, s1


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
    3558:	mvn.w	r1, #3221225472	; 0xc0000000
    float fold = InterpolateHermite(
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    355c:	vmov.f32	s13, s11
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    3560:	vmul.f32	s18, s9, s16
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    3564:	vfma.f32	s12, s15, s0
    float fold = InterpolateHermite(
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    3568:	vldr	s15, [lr]
    356c:	vadd.f32	s8, s8, s5
    3570:	vfma.f32	s13, s15, s17
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    3574:	vcvt.s32.f32	s15, s18
    3578:	vadd.f32	s7, s7, s6
    357c:	vmov	r0, s15
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    3580:	vcvt.s32.f32	s15, s12
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    3584:	ldr.w	r4, [ip, r0, lsl #2]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    3588:	vcvt.s32.f32	s14, s13
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    358c:	vstr	s15, [sp]
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    3590:	vmov	s15, r0
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    3594:	ldrb.w	r5, [sp]
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    3598:	adds	r0, #1
    359a:	vcvt.f32.s32	s19, s15
    359e:	ldr.w	r6, [ip, r0, lsl #2]
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    35a2:	lsls	r0, r5, #1
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    35a4:	vcvt.s32.f32	s15, s12
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    35a8:	ldrsh.w	r8, [r4, r5, lsl #1]
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    35ac:	adds	r0, #2
    35ae:	vsub.f32	s18, s18, s19
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    35b2:	vcvt.f32.s32	s14, s14
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    35b6:	vmov	s21, r8
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    35ba:	ldrsh	r4, [r4, r0]
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    35bc:	vcvt.f32.s32	s15, s15
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    35c0:	ldrsh	r0, [r6, r0]
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    35c2:	vcvt.f32.s32	s21, s21
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    35c6:	vmov	s19, r4

    float y0 = static_cast<float>(shape_2[ws_index_integral]) / 32768.0f;
    35ca:	ldrsh.w	r5, [r6, r5, lsl #1]
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    35ce:	vsub.f32	s15, s12, s15
    35d2:	vmov	s12, r0
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    35d6:	vcvt.f32.s32	s19, s19

    float y0 = static_cast<float>(shape_2[ws_index_integral]) / 32768.0f;
    35da:	vmov	s20, r5
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    35de:	vsub.f32	s14, s13, s14
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
    35e2:	ldr	r5, [pc, #516]	; (37e8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d8>)
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    35e4:	vcvt.f32.s32	s12, s12
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    35e8:	vmul.f32	s19, s19, s10

    float y0 = static_cast<float>(shape_2[ws_index_integral]) / 32768.0f;
    35ec:	vcvt.f32.s32	s20, s20
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    35f0:	vmul.f32	s14, s14, s3
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    35f4:	vfms.f32	s19, s21, s10
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    35f8:	vmul.f32	s12, s12, s10
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    35fc:	vcvt.s32.f32	s13, s14
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    3600:	vfms.f32	s12, s20, s10

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    3604:	vmov	r0, s13
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    3608:	vcvt.f32.s32	s13, s13
    360c:	vmul.f32	s19, s19, s15

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    3610:	lsls	r0, r0, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    3612:	vsub.f32	s14, s14, s13
    3616:	vmov.f32	s13, s19

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    361a:	add.w	r4, fp, r0
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    361e:	vmul.f32	s15, s12, s15
inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
    3622:	add	r0, r5

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    3624:	vldr	s19, [r4]
    3628:	vfma.f32	s13, s21, s10
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    362c:	vldr	s12, [r0]
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    3630:	vfma.f32	s15, s20, s10
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    3634:	vsub.f32	s12, s12, s19
    3638:	vfma.f32	s19, s14, s12
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    363c:	vsub.f32	s15, s15, s13
    3640:	vfma.f32	s13, s18, s15
    3644:	vmov.f32	s15, s11
    3648:	vfma.f32	s15, s13, s8
    364c:	vmul.f32	s15, s15, s2
  MAKE_INTEGRAL_FRACTIONAL(index)
    3650:	vcvt.s32.f32	s14, s15
  const float xm1 = table[index_integral - 1];
    3654:	vmov	r0, s14
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    3658:	vcvt.f32.s32	s14, s14
  const float xm1 = table[index_integral - 1];
    365c:	add	r1, r0
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    365e:	vsub.f32	s15, s15, s14
  const float xm1 = table[index_integral - 1];
    3662:	lsls	r1, r1, #2
  const float x0 = table[index_integral + 0];
    3664:	adds	r5, r1, #4
  const float x1 = table[index_integral + 1];
    3666:	add.w	r4, r1, #8


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
    366a:	add.w	r9, r7, r1
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
    366e:	add.w	r0, r1, #12

inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
    3672:	add.w	r8, r7, r5
  const float x1 = table[index_integral + 1];
    3676:	adds	r6, r7, r4
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    3678:	vldr	s20, [r9]

inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
    367c:	add	r5, r3
    367e:	vldr	s12, [r8]
  const float x1 = table[index_integral + 1];
    3682:	add	r4, r3
    3684:	vldr	s14, [r6]
  const float x2 = table[index_integral + 2];
    3688:	add.w	r8, r7, r0

inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
    368c:	vldr	s22, [r5]


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
    3690:	add	r1, r3
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    3692:	vsub.f32	s23, s12, s14
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    3696:	vldr	s25, [r8]
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    369a:	vsub.f32	s20, s14, s20
inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
    369e:	vldr	s14, [r4]
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    36a2:	vldr	s18, [r1]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    36a6:	vsub.f32	s25, s25, s12
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    36aa:	vmov.f32	s13, s23
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
    36ae:	add	r0, r3
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    36b0:	vsub.f32	s21, s22, s14
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    36b4:	vsub.f32	s18, s14, s18
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    36b8:	vldr	s24, [r0]
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    36bc:	vfma.f32	s13, s20, s11
    36c0:	vmov.f32	s14, s21
  const float a = w + v + (x2 - x0) * 0.5f;
    36c4:	vsub.f32	s24, s24, s22
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    36c8:	vfma.f32	s14, s18, s11
  const float a = w + v + (x2 - x0) * 0.5f;
    36cc:	vadd.f32	s23, s23, s13
    36d0:	vfma.f32	s23, s25, s11
    36d4:	vadd.f32	s21, s21, s14
    36d8:	vfma.f32	s21, s24, s11
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    36dc:	vadd.f32	s13, s13, s23
    36e0:	vfnms.f32	s13, s23, s15
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    36e4:	vadd.f32	s14, s14, s21
    36e8:	vfnms.f32	s14, s15, s21
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    36ec:	vmul.f32	s13, s13, s15
    36f0:	vfma.f32	s13, s20, s11
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    36f4:	vmul.f32	s14, s14, s15
    36f8:	vfma.f32	s14, s18, s11
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    36fc:	vfma.f32	s12, s13, s15
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    3700:	vfma.f32	s22, s15, s14
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    3704:	vneg.f32	s12, s12
    3708:	vsub.f32	s12, s12, s19
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    370c:	vstmia	r2!, {s22}
  ParameterInterpolator overtone_gain_modulation(
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    3710:	cmp	sl, r2
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    3712:	vfma.f32	s19, s12, s7
    3716:	vstmia	lr!, {s19}
  ParameterInterpolator overtone_gain_modulation(
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    371a:	bne.w	354c <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x53c>
    371e:	ldr	r0, [sp, #4]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    3720:	vstr	s7, [r0, #80]	; 0x50
    3724:	vstr	s8, [r0, #76]	; 0x4c
    3728:	vstr	s9, [r0, #72]	; 0x48
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
  }
}
    372c:	add	sp, #12
    372e:	vpop	{d8-d12}
    3732:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    3736:	vldr	s15, [pc, #180]	; 37ec <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7dc>
    373a:	b.n	30aa <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    373c:	vabs.f32	s13, s11
    3740:	vmov.f32	s15, #96	; 0x3f000000  0.5
    3744:	vadd.f32	s13, s13, s13
    3748:	vcmpe.f32	s13, s15
    374c:	vmrs	APSR_nzcv, fpscr
    3750:	ble.n	3798 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    3752:	vmov.f32	s15, s11
    3756:	b.n	326a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x25a>
    3758:	vabs.f32	s15, s11
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    375c:	vmov.f32	s14, s11
    3760:	vadd.f32	s15, s15, s15
    3764:	b.n	30aa <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a>
    3766:	vldr	s14, [pc, #112]	; 37d8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c8>
    376a:	vadd.f32	s15, s15, s14
    376e:	vcvt.s32.f32	s14, s15
    3772:	vmov	r7, s14
    3776:	vcvt.f32.s32	s14, s14
    377a:	vsub.f32	s15, s15, s14
    377e:	vmov.f32	s14, s15
    3782:	vcvt.s32.f32	s14, s14, #8
    3786:	vmov	r4, s14
    378a:	b.n	3052 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
  CONSTRAIN(max_amount, 0.0f, 1.0f);
    378c:	vldr	s12, [pc, #96]	; 37f0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e0>
    3790:	b.n	34ba <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4aa>
    3792:	vldr	s13, [pc, #92]	; 37f0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e0>
    3796:	b.n	3472 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x462>
    3798:	vmov.f32	s14, #112	; 0x3f800000  1.0
    379c:	vsub.f32	s13, s14, s13
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    37a0:	vcmpe.f32	s13, s15
    37a4:	vmrs	APSR_nzcv, fpscr
    37a8:	bmi.n	3752 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x742>
    37aa:	vmov.f32	s13, s15
    37ae:	vmov.f32	s15, s11
    37b2:	b.n	326a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x25a>
    37b4:	vmul.f32	s14, s12, s12
    37b8:	vmul.f32	s13, s14, s12
    37bc:	b.n	3472 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x462>
    37be:	vmul.f32	s15, s14, s14
    37c2:	vmul.f32	s12, s15, s14
    37c6:	b.n	34ba <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4aa>
    37c8:	.word	0x20001348
    37cc:	.word	0x20000b38
    37d0:	.word	0x407ffe5d
    37d4:	.word	0x42fe0000
    37d8:	.word	0x43000000
    37dc:	.word	0x38000000
    37e0:	.word	0x44000000
    37e4:	.word	0x44800000
    37e8:	.word	0x200025e4
    37ec:	.word	0x360637bd
    37f0:	.word	0x00000000
    37f4:	.word	0x200025e0
    37f8:	.word	0x2001f970

000037fc <plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)>:
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    37fc:	movs	r3, #0
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    high_ = false;
    37fe:	movs	r2, #0
namespace plaits {

using namespace std;
using namespace stmlib;

void VirtualAnalogEngine::Init(BufferAllocator* allocator) {
    3800:	push	{r4, r5}

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    3802:	mov.w	r4, #1056964608	; 0x3f000000
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    3806:	ldr	r5, [pc, #120]	; (3880 <plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)+0x84>)
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    3808:	str	r3, [r0, #16]
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    380a:	str	r4, [r0, #28]
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    380c:	str	r4, [r0, #44]	; 0x2c

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    380e:	str	r4, [r0, #64]	; 0x40
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    3810:	str	r4, [r0, #80]	; 0x50

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    3812:	str	r4, [r0, #100]	; 0x64
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    3814:	str	r4, [r0, #116]	; 0x74
  ~VariableSawOscillator() { }

  void Init() {
    phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    3816:	str.w	r4, [r0, #132]	; 0x84
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    381a:	str	r3, [r0, #20]
    next_sample_ = 0.0f;
    381c:	str	r3, [r0, #24]
    previous_pw_ = 0.5f;
    high_ = false;
  
    master_frequency_ = 0.0f;
    381e:	str	r3, [r0, #36]	; 0x24
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    waveshape_ = 0.0f;
    3820:	str	r3, [r0, #48]	; 0x30
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    3822:	str	r3, [r0, #52]	; 0x34
    slave_phase_ = 0.0f;
    3824:	str	r3, [r0, #56]	; 0x38
    next_sample_ = 0.0f;
    3826:	str	r3, [r0, #60]	; 0x3c
    previous_pw_ = 0.5f;
    high_ = false;
  
    master_frequency_ = 0.0f;
    3828:	str	r3, [r0, #72]	; 0x48
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    waveshape_ = 0.0f;
    382a:	str	r3, [r0, #84]	; 0x54
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    382c:	str	r3, [r0, #88]	; 0x58
    slave_phase_ = 0.0f;
    382e:	str	r3, [r0, #92]	; 0x5c
    next_sample_ = 0.0f;
    3830:	str	r3, [r0, #96]	; 0x60
    previous_pw_ = 0.5f;
    high_ = false;
  
    master_frequency_ = 0.0f;
    3832:	str	r3, [r0, #108]	; 0x6c
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    waveshape_ = 0.0f;
    3834:	str	r3, [r0, #120]	; 0x78
 public:
  VariableSawOscillator() { }
  ~VariableSawOscillator() { }

  void Init() {
    phase_ = 0.0f;
    3836:	str	r3, [r0, #124]	; 0x7c
    next_sample_ = 0.0f;
    3838:	str.w	r3, [r0, #128]	; 0x80
  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    high_ = false;
    383c:	strb.w	r2, [r0, #32]
    3840:	strb.w	r2, [r0, #68]	; 0x44
    3844:	strb.w	r2, [r0, #104]	; 0x68
    previous_pw_ = 0.5f;
    high_ = false;
    3848:	strb.w	r2, [r0, #136]	; 0x88
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    384c:	str	r5, [r0, #40]	; 0x28
    384e:	str	r5, [r0, #76]	; 0x4c
    3850:	str	r5, [r0, #112]	; 0x70
  
    frequency_ = 0.01f;
    3852:	str.w	r5, [r0, #140]	; 0x8c
    pw_ = 0.5f;
    3856:	str.w	r4, [r0, #144]	; 0x90
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    385a:	ldr	r4, [r1, #8]
    waveshape_ = 0.0f;
    385c:	str.w	r3, [r0, #148]	; 0x94
    3860:	cmp	r4, #95	; 0x5f
  primary_.Init();
  auxiliary_.Init();
  sync_.Init();
  variable_saw_.Init();
  
  auxiliary_amount_ = 0.0f;
    3862:	str.w	r3, [r0, #152]	; 0x98
  xmod_amount_ = 0.0f;
    3866:	str.w	r3, [r0, #156]	; 0x9c
    386a:	bls.n	3878 <plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)+0x7c>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    386c:	ldr	r2, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    386e:	subs	r4, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3870:	add.w	r3, r2, #96	; 0x60
      free_ -= size_bytes;
    3874:	str	r4, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3876:	str	r3, [r1, #0]
  
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    3878:	str.w	r2, [r0, #160]	; 0xa0
}
    387c:	pop	{r4, r5}
    387e:	bx	lr
    3880:	.word	0x3c23d70a

00003884 <plaits::VirtualAnalogEngine::Reset()>:

void VirtualAnalogEngine::Reset() {
    3884:	bx	lr
    3886:	nop

00003888 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const>:
inline float Squash(float x) {
  return x * x * (3.0f - 2.0f * x);
}

float VirtualAnalogEngine::ComputeDetuning(float detune) const {
  detune = 2.05f * detune - 1.025f;
    3888:	vldr	s13, [pc, #228]	; 3970 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xe8>
  CONSTRAIN(detune, -1.0f, 1.0f);
    388c:	vmov.f32	s14, #240	; 0xbf800000 -1.0
inline float Squash(float x) {
  return x * x * (3.0f - 2.0f * x);
}

float VirtualAnalogEngine::ComputeDetuning(float detune) const {
  detune = 2.05f * detune - 1.025f;
    3890:	vldr	s15, [pc, #224]	; 3974 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xec>
    3894:	vfma.f32	s15, s0, s13
  CONSTRAIN(detune, -1.0f, 1.0f);
    3898:	vcmpe.f32	s15, s14
    389c:	vmrs	APSR_nzcv, fpscr
    38a0:	bmi.n	38b6 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0x2e>
    38a2:	vmov.f32	s14, #112	; 0x3f800000  1.0
    38a6:	vcmpe.f32	s15, s14
    38aa:	vmrs	APSR_nzcv, fpscr
    38ae:	ble.n	38bc <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0x34>
    38b0:	vldr	s0, [pc, #196]	; 3978 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xf0>
  MAKE_INTEGRAL_FRACTIONAL(detune);
  
  float a = intervals[detune_integral];
  float b = intervals[detune_integral + 1];
  return (a + (b - a) * Squash(Squash(detune_fractional))) * sign;
}
    38b4:	bx	lr
    38b6:	vldr	s0, [pc, #196]	; 397c <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xf4>
    38ba:	bx	lr

float VirtualAnalogEngine::ComputeDetuning(float detune) const {
  detune = 2.05f * detune - 1.025f;
  CONSTRAIN(detune, -1.0f, 1.0f);
  
  float sign = detune < 0.0f ? -1.0f : 1.0f;
    38bc:	vcmpe.f32	s15, #0.0
    38c0:	vldr	s14, [pc, #188]	; 3980 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xf8>
    38c4:	vmrs	APSR_nzcv, fpscr
    38c8:	bmi.n	391a <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0x92>
    38ca:	vmul.f32	s15, s15, s14
    38ce:	ldr	r3, [pc, #180]	; (3984 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xfc>)
    38d0:	vmov.f32	s13, #8	; 0x40400000  3.0
    38d4:	vmov.f32	s11, #0	; 0x40000000  2.0
    38d8:	vcvt.s32.f32	s14, s15
    38dc:	vmov	r2, s14
    38e0:	vcvt.f32.s32	s14, s14
    38e4:	add.w	r1, r3, r2, lsl #2
    38e8:	vsub.f32	s15, s15, s14
    38ec:	vmov.f32	s14, s13
    38f0:	vldr	s0, [r1]
    38f4:	vldr	s12, [r1, #4]
    38f8:	vfms.f32	s14, s15, s11
    38fc:	vmul.f32	s15, s15, s15
    3900:	vsub.f32	s12, s12, s0
    3904:	vmul.f32	s15, s14, s15
    3908:	vfms.f32	s13, s15, s11
    390c:	vmul.f32	s15, s15, s15
    3910:	vmul.f32	s15, s13, s15
    3914:	vfma.f32	s0, s12, s15
    3918:	bx	lr
    391a:	vnmul.f32	s15, s15, s14
    391e:	ldr	r3, [pc, #100]	; (3984 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xfc>)
    3920:	vmov.f32	s12, #8	; 0x40400000  3.0
    3924:	vmov.f32	s10, #0	; 0x40000000  2.0
    3928:	vcvt.s32.f32	s14, s15
    392c:	vcvt.f32.s32	s13, s14
    3930:	vmov	r2, s14
    3934:	add.w	r1, r3, r2, lsl #2
    3938:	vsub.f32	s15, s15, s13
    393c:	vmov.f32	s13, s12
    3940:	vldr	s14, [r1]
    3944:	vldr	s11, [r1, #4]
    3948:	vfms.f32	s13, s15, s10
    394c:	vmul.f32	s15, s15, s15
    3950:	vsub.f32	s11, s11, s14
    3954:	vmul.f32	s15, s13, s15
    3958:	vfms.f32	s12, s15, s10
    395c:	vmul.f32	s15, s15, s15
    3960:	vmul.f32	s15, s12, s15
    3964:	vfma.f32	s14, s11, s15
    3968:	vneg.f32	s0, s14
    396c:	bx	lr
    396e:	nop
    3970:	.word	0x40033333
    3974:	.word	0xbf833333
    3978:	.word	0x41c0147b
    397c:	.word	0xc1c0147b
    3980:	.word	0x407ffe5d
    3984:	.word	0x2001f208

00003988 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    3988:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // 1 = variable square controlled by TIMBRE.
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
    398c:	vldr	s15, [r1, #8]
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    3990:	mov	r7, r1
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
  const float auxiliary_detune = ComputeDetuning(parameters.harmonics);
    3992:	vldr	s0, [r1, #16]
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    3996:	mov	r5, r2
  // 1 = variable square controlled by TIMBRE.
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
    3998:	vmul.f32	s9, s15, s15
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    399c:	mov	r4, r0
    399e:	vpush	{d8-d15}
    39a2:	sub	sp, #36	; 0x24
    39a4:	str	r3, [sp, #16]
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
  const float auxiliary_detune = ComputeDetuning(parameters.harmonics);
    39a6:	bl	3888 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    39aa:	vmov.f32	s15, #34	; 0x41100000  9.0
  const float primary_f = NoteToFrequency(parameters.note);
    39ae:	vldr	s14, [r7, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    39b2:	vldr	s13, [pc, #308]	; 3ae8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    39b6:	ldr.w	lr, [sp, #136]	; 0x88
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    39ba:	vsub.f32	s15, s14, s15
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    39be:	vcmpe.f32	s15, s13
    39c2:	vmrs	APSR_nzcv, fpscr
    39c6:	bmi.n	39de <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x56>
    39c8:	vldr	s13, [pc, #288]	; 3aec <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    39cc:	vcmpe.f32	s15, s13
    39d0:	vmrs	APSR_nzcv, fpscr
    39d4:	ble.w	4b12 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x118a>
    39d8:	movs	r3, #0
    39da:	movs	r2, #255	; 0xff
    39dc:	b.n	39e2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a>
    39de:	movs	r3, #0
    39e0:	mov	r2, r3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    39e2:	ldr.w	ip, [pc, #272]	; 3af4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x16c>
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
  const float auxiliary_detune = ComputeDetuning(parameters.harmonics);
  const float primary_f = NoteToFrequency(parameters.note);
  const float auxiliary_f = NoteToFrequency(parameters.note + auxiliary_detune);
    39e6:	vadd.f32	s15, s0, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    39ea:	ldr.w	r8, [pc, #268]	; 3af8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x170>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    39ee:	vmov.f32	s13, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    39f2:	add.w	r2, ip, r2, lsl #2
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    39f6:	vldr	s11, [pc, #240]	; 3ae8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    39fa:	add.w	r3, r8, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    39fe:	vldr	s10, [pc, #252]	; 3afc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3a02:	vsub.f32	s13, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3a06:	vldr	s12, [r2]
    3a0a:	vldr	s8, [r3]

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3a0e:	vcmpe.f32	s13, s11
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3a12:	vmul.f32	s12, s12, s8

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3a16:	vmrs	APSR_nzcv, fpscr
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3a1a:	vmul.f32	s12, s12, s10
    3a1e:	vstr	s12, [sp, #4]

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3a22:	bmi.n	3a3a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb2>
    3a24:	vldr	s12, [pc, #196]	; 3aec <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    3a28:	vcmpe.f32	s13, s12
    3a2c:	vmrs	APSR_nzcv, fpscr
    3a30:	ble.w	4aea <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1162>
    3a34:	movs	r3, #0
    3a36:	movs	r2, #255	; 0xff
    3a38:	b.n	3a3e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb6>
    3a3a:	movs	r3, #0
    3a3c:	mov	r2, r3
  const float primary_sync_f = NoteToFrequency(
      parameters.note + sync_amount * 48.0f);
    3a3e:	vldr	s13, [pc, #176]	; 3af0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x168>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3a42:	vmov.f32	s8, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3a46:	add.w	r2, ip, r2, lsl #2
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3a4a:	vldr	s11, [pc, #156]	; 3ae8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
    3a4e:	vmul.f32	s13, s9, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3a52:	add.w	r3, r8, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3a56:	vldr	s12, [r2]
    3a5a:	vldr	s9, [r3]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3a5e:	vadd.f32	s14, s14, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3a62:	vldr	s10, [pc, #152]	; 3afc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
    3a66:	vmul.f32	s12, s12, s9
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3a6a:	vsub.f32	s14, s14, s8
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3a6e:	vmul.f32	s12, s12, s10

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3a72:	vcmpe.f32	s14, s11
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3a76:	vstr	s12, [sp, #8]

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3a7a:	vmrs	APSR_nzcv, fpscr
    3a7e:	bmi.n	3a96 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10e>
    3a80:	vldr	s12, [pc, #104]	; 3aec <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    3a84:	vcmpe.f32	s14, s12
    3a88:	vmrs	APSR_nzcv, fpscr
    3a8c:	ble.w	4ac2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x113a>
    3a90:	movs	r3, #0
    3a92:	movs	r2, #255	; 0xff
    3a94:	b.n	3a9a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x112>
    3a96:	movs	r3, #0
    3a98:	mov	r2, r3
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3a9a:	vadd.f32	s15, s15, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3a9e:	add.w	r2, ip, r2, lsl #2
    3aa2:	vmov.f32	s12, #34	; 0x41100000  9.0
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3aa6:	add.w	r3, r8, r3, lsl #2
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3aaa:	vldr	s13, [r2]
    3aae:	vldr	s14, [r3]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3ab2:	vsub.f32	s15, s15, s12
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3ab6:	vldr	s12, [pc, #68]	; 3afc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
    3aba:	vmul.f32	s14, s13, s14

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3abe:	vldr	s13, [pc, #40]	; 3ae8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
    3ac2:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3ac6:	vmul.f32	s14, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3aca:	vmrs	APSR_nzcv, fpscr
    3ace:	bmi.n	3b10 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x188>
    3ad0:	vldr	s13, [pc, #24]	; 3aec <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    3ad4:	vcmpe.f32	s15, s13
    3ad8:	vmrs	APSR_nzcv, fpscr
    3adc:	ble.w	4a9a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1112>
    3ae0:	movs	r3, #0
    3ae2:	movs	r2, #255	; 0xff
    3ae4:	b.n	3b14 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x18c>
    3ae6:	nop
    3ae8:	.word	0xc3000000
    3aec:	.word	0x42fe0000
    3af0:	.word	0x42400000
    3af4:	.word	0x20000024
    3af8:	.word	0x20000428
    3afc:	.word	0x39969651
    3b00:	.word	0x3f28f5c3
    3b04:	.word	0x3fbae148
    3b08:	.word	0x3f7eb852
    3b0c:	.word	0x00000000
    3b10:	movs	r3, #0
    3b12:	mov	r2, r3
  const float auxiliary_sync_f = NoteToFrequency(
      parameters.note + auxiliary_detune + sync_amount * 48.0f);

  float shape = parameters.morph * 1.5f;
    3b14:	vmov.f32	s30, #120	; 0x3fc00000  1.5
    3b18:	vldr	s15, [r7, #12]

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3b1c:	add.w	r2, ip, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3b20:	vldr	s12, [pc, #-40]	; 3afc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3b24:	add.w	r3, r8, r3, lsl #2
    3b28:	vmul.f32	s30, s15, s30
    3b2c:	vldr	s13, [r2]
    3b30:	vldr	s11, [r3]
  CONSTRAIN(shape, 0.0f, 1.0f);
    3b34:	vcmpe.f32	s30, #0.0
    3b38:	vmul.f32	s13, s13, s11
    3b3c:	vmrs	APSR_nzcv, fpscr
    3b40:	vmul.f32	s13, s13, s12
    3b44:	vstr	s13, [sp, #12]
    3b48:	bmi.w	4ba6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x121e>
    3b4c:	vmov.f32	s13, #112	; 0x3f800000  1.0
    3b50:	vcmp.f32	s30, s13
    3b54:	vmrs	APSR_nzcv, fpscr
    3b58:	it	gt
    3b5a:	vmovgt.f32	s30, s13

  float pw = 0.5f + (parameters.morph - 0.66f) * 1.46f;
    3b5e:	vmov.f32	s13, #96	; 0x3f000000  0.5
    3b62:	vldr	s11, [pc, #-100]	; 3b00 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    3b66:	vldr	s12, [pc, #-100]	; 3b04 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x17c>
    3b6a:	vsub.f32	s15, s15, s11
    3b6e:	vmov.f32	s11, s13
    3b72:	vfma.f32	s11, s15, s12
  CONSTRAIN(pw, 0.5f, 0.995f);
    3b76:	vcmpe.f32	s11, s13
    3b7a:	vmrs	APSR_nzcv, fpscr
    3b7e:	bmi.w	43a8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa20>
    3b82:	vldr	s15, [pc, #-124]	; 3b08 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x180>
    3b86:	vcmp.f32	s11, s15
    3b8a:	vmrs	APSR_nzcv, fpscr
    3b8e:	it	le
    3b90:	vmovle.f32	s15, s11
    3b94:	vstr	s15, [sp, #20]
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    3b98:	vmov.f32	s15, #80	; 0x3e800000  0.250
    3b9c:	vldr	s13, [sp, #4]
    3ba0:	vcmpe.f32	s13, s15
    3ba4:	vmrs	APSR_nzcv, fpscr
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
    3ba8:	vcmpe.f32	s14, s15
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    3bac:	it	ge
    3bae:	vmovge.f32	s13, s15
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
    3bb2:	vmrs	APSR_nzcv, fpscr
    3bb6:	bge.w	439e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa16>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    3bba:	bge.w	4bda <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1252>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    3bbe:	vadd.f32	s15, s14, s14
    3bc2:	vldr	s11, [sp, #20]
    3bc6:	vcmpe.f32	s11, s15
    3bca:	vmrs	APSR_nzcv, fpscr
    3bce:	bpl.w	4a80 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10f8>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    3bd2:	vmov	s12, lr
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    3bd6:	vldr	s23, [r4, #36]	; 0x24
    3bda:	vldr	s1, [r4, #40]	; 0x28
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    3bde:	add.w	r0, lr, #4294967295
    3be2:	vldr	s3, [r4, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    3be6:	vcvt.f32.u32	s31, s12
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    3bea:	vldr	s22, [r4, #48]	; 0x30
    increment_ = (new_value - *state) / static_cast<float>(size);
    3bee:	vsub.f32	s13, s13, s23
    3bf2:	vsub.f32	s14, s14, s1
    stmlib::ParameterInterpolator fm(&slave_frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    3bf6:	vldr	s11, [r4, #24]
    3bfa:	vsub.f32	s15, s15, s3
    3bfe:	vsub.f32	s12, s30, s22
    3c02:	vdiv.f32	s26, s13, s31
    3c06:	vdiv.f32	s27, s14, s31
    3c0a:	vdiv.f32	s28, s15, s31
    3c0e:	vdiv.f32	s29, s12, s31
    
    while (size--) {
    3c12:	cmp.w	lr, #0
    3c16:	beq.w	3e88 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x500>
    3c1a:	mov	sl, r5
    3c1c:	mov	r6, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    3c1e:	vldr	s25, [pc, #-276]	; 3b0c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    3c22:	mov	fp, r0
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    3c24:	vmov.f32	s0, #96	; 0x3f000000  0.5
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    3c28:	vmov.f32	s24, #0	; 0x40000000  2.0
    3c2c:	vmov.f32	s6, #112	; 0x3f800000  1.0
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    3c30:	vmov.f32	s21, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    3c34:	vadd.f32	s22, s22, s29
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    3c38:	vldr	s15, [r4, #16]
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    3c3c:	vmov.f32	s7, s6
    3c40:	vadd.f32	s23, s23, s26
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    3c44:	vsub.f32	s10, s22, s0
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    3c48:	vfms.f32	s7, s22, s24
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    3c4c:	vadd.f32	s15, s23, s15
    3c50:	vcmpe.f32	s10, #0.0
    3c54:	vadd.f32	s3, s3, s28
    3c58:	vadd.f32	s1, s1, s27
    3c5c:	vstr	s15, [r4, #16]
    3c60:	vmrs	APSR_nzcv, fpscr
	return __b;
    3c64:	vcmp.f32	s7, #0.0
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    3c68:	vsub.f32	s14, s6, s3
    3c6c:	ite	pl
    3c6e:	vaddpl.f32	s10, s10, s10
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    3c72:	vldrmi	s10, [pc, #-360]	; 3b0c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
	return __b;
    3c76:	vmrs	APSR_nzcv, fpscr

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    3c7a:	vcmpe.f32	s15, s6
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
    3c7e:	vdiv.f32	s5, s6, s3
    3c82:	it	mi
    3c84:	vmovmi.f32	s7, s25
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    3c88:	vmrs	APSR_nzcv, fpscr
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    3c8c:	vdiv.f32	s4, s6, s14

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    3c90:	blt.w	4372 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9ea>
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
    3c94:	vldr	s13, [r4, #20]
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    3c98:	vsub.f32	s15, s15, s6
          reset_time = master_phase_ / master_frequency;
    3c9c:	vdiv.f32	s2, s15, s23
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    3ca0:	vstr	s15, [r4, #16]
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
    3ca4:	vmov.f32	s15, s13
    3ca8:	vsub.f32	s9, s6, s2
    3cac:	vfma.f32	s15, s1, s9
          reset = true;
          if (slave_phase_at_reset >= 1.0f) {
    3cb0:	vcmpe.f32	s15, s6
    3cb4:	vmrs	APSR_nzcv, fpscr
    3cb8:	blt.w	4396 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa0e>
            slave_phase_at_reset -= 1.0f;
    3cbc:	vsub.f32	s15, s15, s6
            transition_during_reset = true;
    3cc0:	movs	r2, #1
          }
          if (!high_ && slave_phase_at_reset >= pw) {
    3cc2:	ldrb.w	r3, [r4, #32]
    3cc6:	cbnz	r3, 3cd4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x34c>
            transition_during_reset = true;
    3cc8:	vcmp.f32	s3, s15
    3ccc:	vmrs	APSR_nzcv, fpscr
    3cd0:	it	ls
    3cd2:	movls	r2, #1
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    3cd4:	vcmpe.f32	s3, s15
    3cd8:	vmrs	APSR_nzcv, fpscr
    3cdc:	ble.w	433e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9b6>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    3ce0:	vmul.f32	s8, s5, s15
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    3ce4:	vldr	s12, [pc, #-476]	; 3b0c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    3ce8:	vsub.f32	s12, s12, s15
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
          reset = true;
    3cec:	movs	r0, #1
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    3cee:	vmul.f32	s14, s2, s0
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    3cf2:	vfma.f32	s15, s12, s10
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    3cf6:	vmul.f32	s12, s9, s21
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    3cfa:	vmul.f32	s14, s14, s2
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    3cfe:	vmul.f32	s12, s12, s9
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    3d02:	vsub.f32	s9, s8, s15
    3d06:	vfma.f32	s15, s7, s9
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    3d0a:	vneg.f32	s15, s15
    3d0e:	vfma.f32	s11, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    3d12:	vmov.f32	s14, s25
    3d16:	vfma.f32	s14, s15, s12
    3d1a:	vmov.f32	s12, s14
        }
      }
      
      slave_phase_ += slave_frequency;
    3d1e:	vadd.f32	s15, s1, s13
      while (transition_during_reset || !reset) {
    3d22:	cmp	r0, r2
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    3d24:	mov.w	r3, #1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3d28:	vmov.f32	s8, #72	; 0x3e400000  0.1875000

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    3d2c:	mov.w	r9, #0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3d30:	vmov.f32	s9, #120	; 0x3fc00000  1.5
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
    3d34:	vstr	s15, [r4, #20]
      while (transition_during_reset || !reset) {
    3d38:	bhi.n	3e38 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b0>
        if (!high_) {
    3d3a:	ldrb.w	r1, [r4, #32]
          if (slave_phase_ < pw) {
    3d3e:	vldr	s13, [r4, #20]
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
        if (!high_) {
    3d42:	cbnz	r1, 3dbc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x434>
          if (slave_phase_ < pw) {
    3d44:	vcmpe.f32	s3, s13
    3d48:	vmrs	APSR_nzcv, fpscr
    3d4c:	bgt.w	436a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9e2>
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    3d50:	vldr	s15, [r4, #28]
    3d54:	vsub.f32	s16, s13, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    3d58:	vadd.f32	s14, s5, s4
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    3d5c:	strb.w	r3, [r4, #32]
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    3d60:	vsub.f32	s15, s15, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    3d64:	vmul.f32	s14, s14, s1
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    3d68:	vadd.f32	s15, s15, s1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3d6c:	vnmul.f32	s14, s14, s7
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    3d70:	vdiv.f32	s17, s16, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    3d74:	vsub.f32	s20, s6, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    3d78:	vmul.f32	s15, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    3d7c:	vmul.f32	s16, s20, s0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    3d80:	vmul.f32	s17, s17, s15
  const float t2 = t1 * t1;
    3d84:	vmul.f32	s18, s15, s15
    3d88:	vmul.f32	s19, s16, s16
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    3d8c:	vsub.f32	s15, s8, s15
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3d90:	vsub.f32	s16, s8, s16
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    3d94:	vfma.f32	s11, s17, s10
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    3d98:	vfma.f32	s15, s18, s9
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3d9c:	vfma.f32	s16, s19, s9
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    3da0:	vmul.f32	s17, s20, s21
    3da4:	vmul.f32	s20, s17, s20
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    3da8:	vfms.f32	s15, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3dac:	vfms.f32	s16, s19, s19
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    3db0:	vfma.f32	s12, s20, s10
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3db4:	vfma.f32	s11, s14, s16
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    3db8:	vfma.f32	s12, s14, s15
          high_ = true;
        }
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
    3dbc:	vcmpe.f32	s13, s6
    3dc0:	vmrs	APSR_nzcv, fpscr
    3dc4:	bmi.w	436a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9e2>
            break;
          }
          slave_phase_ -= 1.0f;
    3dc8:	vsub.f32	s13, s13, s6
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    3dcc:	cmp	r0, r2
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    3dce:	vsub.f32	s16, s6, s7
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    3dd2:	strb.w	r9, [r4, #32]
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    3dd6:	vadd.f32	s15, s5, s4
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
    3dda:	vdiv.f32	s17, s13, s1
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
    3dde:	vstr	s13, [r4, #20]
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    3de2:	vneg.f32	s16, s16
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    3de6:	vmul.f32	s15, s15, s1
          triangle_step *= triangle_amount;
    3dea:	vmul.f32	s15, s7, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    3dee:	vsub.f32	s20, s6, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    3df2:	vmul.f32	s14, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    3df6:	vmul.f32	s13, s20, s0

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    3dfa:	vmul.f32	s17, s17, s14
  const float t2 = t1 * t1;
    3dfe:	vmul.f32	s18, s14, s14
    3e02:	vmul.f32	s19, s13, s13
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    3e06:	vsub.f32	s14, s8, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3e0a:	vsub.f32	s13, s8, s13
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    3e0e:	vfma.f32	s11, s16, s17
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    3e12:	vfma.f32	s14, s18, s9
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3e16:	vfma.f32	s13, s19, s9
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    3e1a:	vmul.f32	s17, s20, s21
    3e1e:	vmul.f32	s20, s17, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    3e22:	vfms.f32	s14, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3e26:	vfms.f32	s13, s19, s19
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    3e2a:	vfma.f32	s12, s16, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    3e2e:	vfma.f32	s11, s15, s13
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    3e32:	vfma.f32	s12, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    3e36:	bls.n	3d3a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b2>
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    3e38:	vmul.f32	s13, s1, s2
        high_ = false;
    3e3c:	movs	r3, #0
    3e3e:	strb.w	r3, [r4, #32]
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    3e42:	vstr	s13, [r4, #20]
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    3e46:	vcmpe.f32	s3, s13
    3e4a:	vmrs	APSR_nzcv, fpscr
    3e4e:	ble.w	432c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a4>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    3e52:	vmul.f32	s5, s5, s13
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    3e56:	vldr	s14, [pc, #-844]	; 3b0c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    3e5a:	vsub.f32	s14, s14, s13
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    3e5e:	subs	r6, #1
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    3e60:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;
    3e64:	vstr	s3, [r4, #28]
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    3e68:	adds	r3, r6, #1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    3e6a:	vfma.f32	s13, s14, s10
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    3e6e:	vfma.f32	s15, s11, s24
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    3e72:	vsub.f32	s5, s5, s13
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    3e76:	vstmia	sl!, {s15}
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
        high_ = false;
      }
    
      next_sample += ComputeNaiveSample(
    3e7a:	vfma.f32	s13, s7, s5
    3e7e:	vadd.f32	s11, s13, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    3e82:	bne.w	3c34 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    3e86:	mov	r0, fp
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    3e88:	vmov.f32	s15, #80	; 0x3e800000  0.250
    3e8c:	vldr	s14, [sp, #8]
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    }
    
    next_sample_ = next_sample;
    3e90:	vstr	s11, [r4, #24]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    3e94:	vstr	s22, [r4, #48]	; 0x30
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    3e98:	vcmpe.f32	s14, s15
    3e9c:	vstr	s3, [r4, #44]	; 0x2c
    3ea0:	vstr	s1, [r4, #40]	; 0x28
    3ea4:	vstr	s23, [r4, #36]	; 0x24
    3ea8:	vmrs	APSR_nzcv, fpscr
    3eac:	ite	lt
    3eae:	vmovlt.f32	s13, s14
    3eb2:	vmovge.f32	s13, s15
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
    3eb6:	vldr	s14, [sp, #12]
    3eba:	vcmpe.f32	s14, s15
    3ebe:	vmrs	APSR_nzcv, fpscr
    3ec2:	bge.w	43b0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa28>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    3ec6:	bge.w	4bee <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1266>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    3eca:	vadd.f32	s14, s14, s14
    3ece:	vldr	s12, [sp, #20]
    3ed2:	vcmpe.f32	s12, s14
    3ed6:	vmrs	APSR_nzcv, fpscr
    3eda:	bpl.w	4a66 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10de>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    3ede:	vldr	s22, [r4, #72]	; 0x48
    3ee2:	vldr	s2, [r4, #76]	; 0x4c
    3ee6:	vldr	s4, [r4, #80]	; 0x50
    increment_ = (new_value - *state) / static_cast<float>(size);
    3eea:	vsub.f32	s13, s13, s22
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    3eee:	vldr	s21, [r4, #84]	; 0x54
    increment_ = (new_value - *state) / static_cast<float>(size);
    3ef2:	vldr	s15, [sp, #12]
    3ef6:	vsub.f32	s14, s14, s4
    3efa:	vsub.f32	s30, s30, s21
    stmlib::ParameterInterpolator fm(&slave_frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    3efe:	vldr	s29, [r4, #60]	; 0x3c
    3f02:	vsub.f32	s15, s15, s2
    3f06:	vdiv.f32	s25, s13, s31
    3f0a:	vdiv.f32	s26, s15, s31
    3f0e:	vdiv.f32	s27, s14, s31
    3f12:	vdiv.f32	s28, s30, s31
    
    while (size--) {
    3f16:	cmp.w	lr, #0
    3f1a:	beq.w	41c6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83e>
    3f1e:	ldr.w	sl, [sp, #16]
    3f22:	mov	r1, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    3f24:	vldr	s24, [pc, #976]	; 42f8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    3f28:	mov	fp, r0
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    3f2a:	vmov.f32	s1, #96	; 0x3f000000  0.5
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    3f2e:	vmov.f32	s23, #0	; 0x40000000  2.0
    3f32:	vmov.f32	s7, #112	; 0x3f800000  1.0
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    3f36:	vmov.f32	s20, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    3f3a:	vadd.f32	s21, s21, s28
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    3f3e:	vldr	s15, [r4, #52]	; 0x34
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    3f42:	vmov.f32	s8, s7
    3f46:	vadd.f32	s22, s22, s25
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    3f4a:	vsub.f32	s11, s21, s1
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    3f4e:	vfms.f32	s8, s21, s23
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    3f52:	vadd.f32	s15, s22, s15
    3f56:	vcmpe.f32	s11, #0.0
    3f5a:	vadd.f32	s4, s4, s27
    3f5e:	vadd.f32	s2, s2, s26
    3f62:	vstr	s15, [r4, #52]	; 0x34
    3f66:	vmrs	APSR_nzcv, fpscr
	return __b;
    3f6a:	vcmp.f32	s8, #0.0
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    3f6e:	vsub.f32	s14, s7, s4
    3f72:	ite	pl
    3f74:	vaddpl.f32	s11, s11, s11
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    3f78:	vldrmi	s11, [pc, #892]	; 42f8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
	return __b;
    3f7c:	vmrs	APSR_nzcv, fpscr

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    3f80:	vcmpe.f32	s15, s7
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
    3f84:	vdiv.f32	s6, s7, s4
    3f88:	it	mi
    3f8a:	vmovmi.f32	s8, s24
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    3f8e:	vmrs	APSR_nzcv, fpscr
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    3f92:	vdiv.f32	s5, s7, s14

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    3f96:	blt.w	4384 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9fc>
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
    3f9a:	vldr	s13, [r4, #56]	; 0x38
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    3f9e:	vsub.f32	s15, s15, s7
          reset_time = master_phase_ / master_frequency;
    3fa2:	vdiv.f32	s3, s15, s22
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    3fa6:	vstr	s15, [r4, #52]	; 0x34
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
    3faa:	vmov.f32	s15, s13
    3fae:	vsub.f32	s10, s7, s3
    3fb2:	vfma.f32	s15, s2, s10
          reset = true;
          if (slave_phase_at_reset >= 1.0f) {
    3fb6:	vcmpe.f32	s15, s7
    3fba:	vmrs	APSR_nzcv, fpscr
    3fbe:	blt.w	439a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa12>
            slave_phase_at_reset -= 1.0f;
    3fc2:	vsub.f32	s15, s15, s7
            transition_during_reset = true;
    3fc6:	movs	r2, #1
          }
          if (!high_ && slave_phase_at_reset >= pw) {
    3fc8:	ldrb.w	r3, [r4, #68]	; 0x44
    3fcc:	cbnz	r3, 3fda <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x652>
            transition_during_reset = true;
    3fce:	vcmp.f32	s4, s15
    3fd2:	vmrs	APSR_nzcv, fpscr
    3fd6:	it	ls
    3fd8:	movls	r2, #1
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    3fda:	vcmpe.f32	s4, s15
    3fde:	vmrs	APSR_nzcv, fpscr
    3fe2:	ble.w	4350 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9c8>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    3fe6:	vmul.f32	s9, s6, s15
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    3fea:	vldr	s0, [pc, #780]	; 42f8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    3fee:	vsub.f32	s0, s0, s15
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
          reset = true;
    3ff2:	movs	r0, #1
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    3ff4:	vmul.f32	s12, s10, s20
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    3ff8:	vmul.f32	s14, s3, s1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    3ffc:	vfma.f32	s15, s0, s11
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4000:	vmul.f32	s12, s12, s10
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4004:	vmul.f32	s14, s14, s3
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    4008:	vsub.f32	s10, s9, s15
    400c:	vfma.f32	s15, s8, s10
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4010:	vneg.f32	s15, s15
    4014:	vfma.f32	s29, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4018:	vmov.f32	s14, s24
    401c:	vfma.f32	s14, s15, s12
    4020:	vmov.f32	s12, s14
        }
      }
      
      slave_phase_ += slave_frequency;
    4024:	vadd.f32	s15, s2, s13
      while (transition_during_reset || !reset) {
    4028:	cmp	r0, r2
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    402a:	mov.w	r3, #1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    402e:	vmov.f32	s9, #72	; 0x3e400000  0.1875000

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    4032:	mov.w	r9, #0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4036:	vmov.f32	s10, #120	; 0x3fc00000  1.5
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
    403a:	vstr	s15, [r4, #56]	; 0x38
      while (transition_during_reset || !reset) {
    403e:	bhi.n	413e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b6>
        if (!high_) {
    4040:	ldrb.w	r6, [r4, #68]	; 0x44
          if (slave_phase_ < pw) {
    4044:	vldr	s13, [r4, #56]	; 0x38
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
        if (!high_) {
    4048:	cbnz	r6, 40c2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73a>
          if (slave_phase_ < pw) {
    404a:	vcmpe.f32	s4, s13
    404e:	vmrs	APSR_nzcv, fpscr
    4052:	bgt.w	4362 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9da>
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4056:	vldr	s14, [r4, #64]	; 0x40
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    405a:	vadd.f32	s15, s6, s5
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    405e:	vsub.f32	s16, s13, s4
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    4062:	strb.w	r3, [r4, #68]	; 0x44
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4066:	vsub.f32	s14, s14, s4
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    406a:	vmul.f32	s15, s15, s2
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    406e:	vadd.f32	s14, s14, s2
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4072:	vnmul.f32	s0, s15, s8
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4076:	vdiv.f32	s15, s16, s14
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    407a:	vsub.f32	s18, s7, s15
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    407e:	vmul.f32	s14, s15, s1
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    4082:	vmul.f32	s19, s18, s1
  const float t2 = t1 * t1;
    4086:	vmul.f32	s16, s14, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    408a:	vmul.f32	s15, s15, s14
    408e:	vmul.f32	s17, s19, s19
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4092:	vsub.f32	s14, s9, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4096:	vsub.f32	s19, s9, s19
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    409a:	vfma.f32	s29, s15, s11
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    409e:	vfma.f32	s14, s16, s10
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    40a2:	vfma.f32	s19, s17, s10
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    40a6:	vmul.f32	s15, s18, s20
    40aa:	vmul.f32	s18, s15, s18
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    40ae:	vfms.f32	s14, s16, s16
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    40b2:	vfms.f32	s19, s17, s17
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    40b6:	vfma.f32	s12, s18, s11
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    40ba:	vfma.f32	s29, s0, s19
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    40be:	vfma.f32	s12, s0, s14
          high_ = true;
        }
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
    40c2:	vcmpe.f32	s13, s7
    40c6:	vmrs	APSR_nzcv, fpscr
    40ca:	bmi.w	4362 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9da>
            break;
          }
          slave_phase_ -= 1.0f;
    40ce:	vsub.f32	s13, s13, s7
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    40d2:	cmp	r0, r2
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    40d4:	vadd.f32	s15, s6, s5

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    40d8:	strb.w	r9, [r4, #68]	; 0x44
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    40dc:	vsub.f32	s0, s7, s8
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
    40e0:	vdiv.f32	s16, s13, s2
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
    40e4:	vstr	s13, [r4, #56]	; 0x38
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    40e8:	vmul.f32	s15, s15, s2
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    40ec:	vneg.f32	s0, s0
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
    40f0:	vmul.f32	s13, s8, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    40f4:	vsub.f32	s18, s7, s16
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    40f8:	vmul.f32	s14, s16, s1
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    40fc:	vmul.f32	s15, s18, s1

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    4100:	vmul.f32	s16, s16, s14
  const float t2 = t1 * t1;
    4104:	vmul.f32	s19, s14, s14
    4108:	vmul.f32	s17, s15, s15
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    410c:	vsub.f32	s14, s9, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4110:	vsub.f32	s15, s9, s15
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    4114:	vfma.f32	s29, s0, s16
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4118:	vfma.f32	s14, s19, s10
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    411c:	vfma.f32	s15, s17, s10
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    4120:	vmul.f32	s16, s18, s20
    4124:	vmul.f32	s18, s16, s18
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4128:	vfms.f32	s14, s19, s19
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    412c:	vfms.f32	s15, s17, s17
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    4130:	vfma.f32	s12, s0, s18
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4134:	vfma.f32	s29, s13, s15
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4138:	vfma.f32	s12, s13, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    413c:	bls.n	4040 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6b8>
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    413e:	vmul.f32	s13, s2, s3
        high_ = false;
    4142:	movs	r3, #0
    4144:	strb.w	r3, [r4, #68]	; 0x44
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    4148:	vstr	s13, [r4, #56]	; 0x38
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    414c:	vcmpe.f32	s4, s13
    4150:	vmrs	APSR_nzcv, fpscr
    4154:	ble.w	42e6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95e>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    4158:	vmul.f32	s6, s6, s13
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    415c:	vldr	s14, [pc, #408]	; 42f8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    4160:	vsub.f32	s14, s14, s13
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    4164:	subs	r1, #1
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    4166:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;
    416a:	vstr	s4, [r4, #64]	; 0x40
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    416e:	adds	r0, r1, #1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    4170:	vfma.f32	s13, s14, s11
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    4174:	vfma.f32	s15, s29, s23
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    4178:	vsub.f32	s6, s6, s13
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    417c:	vstmia	sl!, {s15}
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
        high_ = false;
      }
    
      next_sample += ComputeNaiveSample(
    4180:	vfma.f32	s13, s8, s6
    4184:	vadd.f32	s29, s13, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    4188:	bne.w	3f3a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5b2>
    418c:	ldr	r3, [sp, #16]
  
  // Render monster sync to AUX.
  primary_.Render<true>(primary_f, primary_sync_f, pw, shape, out, size);
  auxiliary_.Render<true>(auxiliary_f, auxiliary_sync_f, pw, shape, aux, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] = (aux[i] - out[i]) * 0.5f;
    418e:	vmov.f32	s13, #96	; 0x3f000000  0.5
    4192:	mov	r0, fp
    4194:	mov	r2, r5
    4196:	add.w	r1, r3, lr, lsl #2
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    }
    
    next_sample_ = next_sample;
    419a:	vstr	s29, [r4, #60]	; 0x3c
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    419e:	vstr	s21, [r4, #84]	; 0x54
    41a2:	vstr	s4, [r4, #80]	; 0x50
    41a6:	vstr	s2, [r4, #76]	; 0x4c
    41aa:	vstr	s22, [r4, #72]	; 0x48
    41ae:	vldmia	r2!, {s14}
    41b2:	vldr	s15, [r3]
    41b6:	vsub.f32	s15, s15, s14
    41ba:	vmul.f32	s15, s15, s13
    41be:	vstmia	r3!, {s15}
  CONSTRAIN(pw, 0.5f, 0.995f);
  
  // Render monster sync to AUX.
  primary_.Render<true>(primary_f, primary_sync_f, pw, shape, out, size);
  auxiliary_.Render<true>(auxiliary_f, auxiliary_sync_f, pw, shape, aux, size);
  for (size_t i = 0; i < size; ++i) {
    41c2:	cmp	r3, r1
    41c4:	bne.n	41ae <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x826>
    aux[i] = (aux[i] - out[i]) * 0.5f;
  }
  
  // Render double varishape to OUT.
  float square_pw = 1.3f * parameters.timbre - 0.15f;
    41c6:	vldr	s14, [r7, #8]
    41ca:	vldr	s13, [pc, #304]	; 42fc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x974>
    41ce:	vldr	s12, [pc, #304]	; 4300 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x978>
  CONSTRAIN(square_pw, 0.005f, 0.5f);
    41d2:	vldr	s15, [pc, #304]	; 4304 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x97c>
  for (size_t i = 0; i < size; ++i) {
    aux[i] = (aux[i] - out[i]) * 0.5f;
  }
  
  // Render double varishape to OUT.
  float square_pw = 1.3f * parameters.timbre - 0.15f;
    41d6:	vfma.f32	s12, s14, s13
  CONSTRAIN(square_pw, 0.005f, 0.5f);
    41da:	vcmpe.f32	s12, s15
    41de:	vmrs	APSR_nzcv, fpscr
    41e2:	bpl.w	4a38 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10b0>
    41e6:	vmov.f32	s12, s15
  
  const float square_sync_ratio = parameters.timbre < 0.5f
      ? 0.0f
      : (parameters.timbre - 0.5f) * (parameters.timbre - 0.5f) * 4.0f * 48.0f;
    41ea:	vmov.f32	s15, #96	; 0x3f000000  0.5
    41ee:	vcmpe.f32	s14, s15
    41f2:	vmrs	APSR_nzcv, fpscr
    41f6:	bmi.w	4400 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
    41fa:	vsub.f32	s15, s14, s15
    41fe:	vldr	s13, [pc, #264]	; 4308 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x980>
    4202:	vmov.f32	s11, #16	; 0x40800000  4.0
    4206:	vmul.f32	s15, s15, s15
    420a:	vmul.f32	s15, s15, s11
    420e:	vmul.f32	s13, s15, s13
  
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
    4212:	vmov.f32	s11, #32	; 0x41000000  8.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    4216:	vmov.f32	s15, #112	; 0x3f800000  1.0
    421a:	vmul.f32	s14, s14, s11
    421e:	vcmpe.f32	s14, s15
    4222:	vmrs	APSR_nzcv, fpscr
    4226:	ble.w	4bb6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122e>
	return __b;
    422a:	vstr	s15, [sp, #16]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    422e:	vldr	s15, [pc, #220]	; 430c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x984>
    4232:	vstr	s15, [sp, #20]
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
    4236:	vmov.f32	s15, #96	; 0x3f000000  0.5
      ? 0.0f
      : (parameters.timbre - 0.5f) * (parameters.timbre - 0.5f) * 4.0f * 48.0f;
  
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
    423a:	vldr	s14, [r7, #12]
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
    423e:	vcmpe.f32	s14, s15
    4242:	vmrs	APSR_nzcv, fpscr
    4246:	bpl.w	4a4e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10c6>
    424a:	vadd.f32	s15, s14, s15
  saw_pw *= 1.1f;
    424e:	vldr	s10, [pc, #192]	; 4310 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x988>
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    4252:	vldr	s11, [pc, #176]	; 4304 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x97c>
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
    4256:	vmul.f32	s15, s15, s10
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    425a:	vcmpe.f32	s15, s11
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
    425e:	vmov.f32	s10, s15
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    4262:	vmrs	APSR_nzcv, fpscr
    4266:	bmi.w	43fa <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa72>
    426a:	vmov.f32	s15, #112	; 0x3f800000  1.0
    426e:	vcmp.f32	s10, s15
    4272:	vmrs	APSR_nzcv, fpscr
    4276:	it	le
    4278:	vmovle.f32	s15, s10
    427c:	vstr	s15, [sp, #28]
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
    4280:	vmov.f32	s15, #53	; 0x41a80000  21.0
    4284:	vmov.f32	s30, #36	; 0x41200000  10.0
    4288:	vfms.f32	s30, s14, s15
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
    428c:	vcmpe.f32	s30, #0.0
    4290:	vmrs	APSR_nzcv, fpscr
    4294:	bmi.w	4bae <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1226>
    4298:	vmov.f32	s15, #112	; 0x3f800000  1.0
    429c:	vcmp.f32	s30, s15
    42a0:	vmrs	APSR_nzcv, fpscr
    42a4:	it	gt
    42a6:	vmovgt.f32	s30, s15
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
    42aa:	vmov.f32	s15, #112	; 0x3f800000  1.0
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    42ae:	vldr	s11, [pc, #100]	; 4314 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x98c>
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
    42b2:	vmov.f32	s10, #32	; 0x41000000  8.0
    42b6:	vsub.f32	s14, s15, s14
    42ba:	vmul.f32	s14, s14, s10
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    42be:	vcmpe.f32	s14, s11
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
    42c2:	vstr	s14, [sp, #12]
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    42c6:	vmrs	APSR_nzcv, fpscr
    42ca:	bmi.n	43ba <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa32>
    42cc:	vcmpe.f32	s14, s15
    42d0:	vmrs	APSR_nzcv, fpscr
    42d4:	ble.w	4bca <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1242>
    42d8:	vmov.f32	s14, #96	; 0x3f000000  0.5
    42dc:	vstr	s15, [sp, #12]
    42e0:	vstr	s14, [sp, #24]
    42e4:	b.n	43c6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa3e>
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    42e6:	vsub.f32	s15, s13, s4
    42ea:	vmov.f32	s6, s7
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    42ee:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    42f2:	vfms.f32	s6, s5, s15
    42f6:	b.n	4160 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d8>
    42f8:	.word	0x00000000
    42fc:	.word	0x3fa66666
    4300:	.word	0xbe19999a
    4304:	.word	0x3ba3d70a
    4308:	.word	0x42400000
    430c:	.word	0x3e99999a
    4310:	.word	0x3f8ccccd
    4314:	.word	0x3ca3d70a
    4318:	.word	0x3c23d70a
    431c:	.word	0xc3000000
    4320:	.word	0x42fe0000
    4324:	.word	0x39969651
    4328:	.word	0x00000000
    432c:	vsub.f32	s15, s13, s3
    4330:	vmov.f32	s5, s6
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4334:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    4338:	vfms.f32	s5, s4, s15
    433c:	b.n	3e5a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4d2>
    433e:	vsub.f32	s14, s15, s3
    4342:	vmov.f32	s8, s6
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4346:	vmov.f32	s12, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    434a:	vfms.f32	s8, s4, s14
    434e:	b.n	3ce8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x360>
    4350:	vsub.f32	s14, s15, s4
    4354:	vmov.f32	s9, s7
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4358:	vmov.f32	s0, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    435c:	vfms.f32	s9, s5, s14
    4360:	b.n	3fee <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x666>
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
    4362:	cmp	r0, #0
    4364:	beq.w	414c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    4368:	b.n	413e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b6>
    436a:	cmp	r0, #0
    436c:	beq.w	3e46 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4be>
    4370:	b.n	3e38 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b0>
    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
      float reset_time = 0.0f;
    4372:	vldr	s2, [pc, #-76]	; 4328 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
    4376:	movs	r2, #0
    4378:	vldr	s13, [r4, #20]
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    437c:	vmov.f32	s12, s2
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
    4380:	mov	r0, r2
    4382:	b.n	3d1e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x396>
      bool transition_during_reset = false;
      float reset_time = 0.0f;
    4384:	vldr	s3, [pc, #-96]	; 4328 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
    4388:	movs	r2, #0
    438a:	vldr	s13, [r4, #56]	; 0x38
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    438e:	vmov.f32	s12, s3
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
    4392:	mov	r0, r2
    4394:	b.n	4024 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x69c>
      bool transition_during_reset = false;
    4396:	movs	r2, #0
    4398:	b.n	3cc2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x33a>
    439a:	movs	r2, #0
    439c:	b.n	3fc8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x640>
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    439e:	vmov.f32	s14, s15
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    43a2:	vmov.f32	s15, #96	; 0x3f000000  0.5
    43a6:	b.n	3bd2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>

  float shape = parameters.morph * 1.5f;
  CONSTRAIN(shape, 0.0f, 1.0f);

  float pw = 0.5f + (parameters.morph - 0.66f) * 1.46f;
  CONSTRAIN(pw, 0.5f, 0.995f);
    43a8:	vstr	s13, [sp, #20]
    43ac:	b.w	3b98 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x210>
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    43b0:	vstr	s15, [sp, #12]
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    43b4:	vmov.f32	s14, #96	; 0x3f000000  0.5
    43b8:	b.n	3ede <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
    43ba:	vldr	s15, [pc, #-164]	; 4318 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x990>
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    43be:	vstr	s11, [sp, #12]
    43c2:	vstr	s15, [sp, #24]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    43c6:	vldr	s15, [r7, #4]
    43ca:	vmov.f32	s11, #34	; 0x41100000  9.0
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    43ce:	vldr	s14, [pc, #-180]	; 431c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x994>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    43d2:	vadd.f32	s15, s13, s15
    43d6:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    43da:	vcmpe.f32	s15, s14
    43de:	vmrs	APSR_nzcv, fpscr
    43e2:	bmi.n	4406 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa7e>
    43e4:	vldr	s14, [pc, #-200]	; 4320 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x998>
    43e8:	vcmpe.f32	s15, s14
    43ec:	vmrs	APSR_nzcv, fpscr
    43f0:	ble.w	4b80 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f8>
    43f4:	movs	r3, #0
    43f6:	movs	r2, #255	; 0xff
    43f8:	b.n	440a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa82>
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    43fa:	vstr	s11, [sp, #28]
    43fe:	b.n	4280 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8f8>
  float square_pw = 1.3f * parameters.timbre - 0.15f;
  CONSTRAIN(square_pw, 0.005f, 0.5f);
  
  const float square_sync_ratio = parameters.timbre < 0.5f
      ? 0.0f
      : (parameters.timbre - 0.5f) * (parameters.timbre - 0.5f) * 4.0f * 48.0f;
    4400:	vldr	s13, [pc, #-220]	; 4328 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    4404:	b.n	4212 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x88a>
    4406:	movs	r3, #0
    4408:	mov	r2, r3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    440a:	add.w	r2, ip, r2, lsl #2
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    440e:	vmov.f32	s13, #80	; 0x3e800000  0.250
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4412:	add.w	r3, r8, r3, lsl #2
      master_frequency = kMaxFrequency;
    4416:	vldr	s10, [sp, #4]
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    441a:	vldr	s14, [r2]
    441e:	vldr	s15, [r3]
    4422:	vcmp.f32	s10, s13
    4426:	vldr	s11, [pc, #-260]	; 4324 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x99c>
    442a:	vmul.f32	s15, s14, s15
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
  
  const float square_sync_f = NoteToFrequency(
      parameters.note + square_sync_ratio);
  
  sync_.Render<true>(
    442e:	ldr.w	ip, [r4, #160]	; 0xa0
    4432:	vmrs	APSR_nzcv, fpscr
    4436:	vmul.f32	s15, s15, s11
    443a:	ite	ge
    443c:	vmovge.f32	s14, s13
    4440:	vmovlt.f32	s14, s10
    }
    if (frequency >= kMaxFrequency) {
    4444:	vcmpe.f32	s15, s13
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    4448:	vstr	s14, [sp, #4]
    }
    if (frequency >= kMaxFrequency) {
    444c:	vmrs	APSR_nzcv, fpscr
    4450:	bge.w	4a2e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10a6>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    4454:	bge.w	4be2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x125a>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    4458:	vadd.f32	s14, s15, s15
    445c:	vcmpe.f32	s12, s14
    4460:	vmrs	APSR_nzcv, fpscr
    4464:	bpl.w	4b68 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e0>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    4468:	vmov.f32	s10, #112	; 0x3f800000  1.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    446c:	vldr	s22, [r4, #120]	; 0x78
    4470:	vldr	s23, [r4, #108]	; 0x6c
    4474:	vldr	s1, [r4, #112]	; 0x70
    4478:	vldr	s3, [r4, #116]	; 0x74
    increment_ = (new_value - *state) / static_cast<float>(size);
    447c:	vsub.f32	s12, s10, s22
    4480:	vldr	s13, [sp, #4]
    4484:	vsub.f32	s15, s15, s1
    4488:	vsub.f32	s14, s14, s3
    stmlib::ParameterInterpolator fm(&slave_frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    448c:	vldr	s11, [r4, #96]	; 0x60
    4490:	vsub.f32	s13, s13, s23
    4494:	vdiv.f32	s29, s12, s31
    4498:	vdiv.f32	s26, s13, s31
    449c:	vdiv.f32	s27, s15, s31
    44a0:	vdiv.f32	s28, s14, s31
    
    while (size--) {
    44a4:	cmp.w	lr, #0
    44a8:	beq.w	4712 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd8a>
    44ac:	mov	r8, ip
    44ae:	mov	r6, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    44b0:	vldr	s25, [pc, #-396]	; 4328 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    44b4:	vmov.f32	s0, #96	; 0x3f000000  0.5
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    44b8:	vmov.f32	s24, #0	; 0x40000000  2.0
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    44bc:	vmov.f32	s21, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    44c0:	vadd.f32	s22, s22, s29
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    44c4:	vldr	s15, [r4, #88]	; 0x58
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    44c8:	vmov.f32	s6, s10
    44cc:	vadd.f32	s23, s23, s26
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    44d0:	vsub.f32	s9, s22, s0
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    44d4:	vfms.f32	s6, s22, s24
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    44d8:	vadd.f32	s15, s23, s15
    44dc:	vcmpe.f32	s9, #0.0
    44e0:	vadd.f32	s3, s3, s28
    44e4:	vadd.f32	s1, s1, s27
    44e8:	vstr	s15, [r4, #88]	; 0x58
    44ec:	vmrs	APSR_nzcv, fpscr
	return __b;
    44f0:	vcmp.f32	s6, #0.0
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    44f4:	vsub.f32	s14, s10, s3
    44f8:	ite	pl
    44fa:	vaddpl.f32	s9, s9, s9
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    44fe:	vldrmi	s9, [pc, #-472]	; 4328 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
	return __b;
    4502:	vmrs	APSR_nzcv, fpscr

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    4506:	vcmpe.f32	s15, s10
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
    450a:	vdiv.f32	s5, s10, s3
    450e:	it	mi
    4510:	vmovmi.f32	s6, s25
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    4514:	vmrs	APSR_nzcv, fpscr
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    4518:	vdiv.f32	s4, s10, s14

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    451c:	blt.w	4968 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfe0>
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
    4520:	vldr	s13, [r4, #92]	; 0x5c
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    4524:	vsub.f32	s15, s15, s10
          reset_time = master_phase_ / master_frequency;
    4528:	vdiv.f32	s2, s15, s23
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    452c:	vstr	s15, [r4, #88]	; 0x58
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
    4530:	vmov.f32	s15, s13
    4534:	vsub.f32	s8, s10, s2
    4538:	vfma.f32	s15, s1, s8
          reset = true;
          if (slave_phase_at_reset >= 1.0f) {
    453c:	vcmpe.f32	s15, s10
    4540:	vmrs	APSR_nzcv, fpscr
    4544:	blt.w	4984 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xffc>
            slave_phase_at_reset -= 1.0f;
    4548:	vsub.f32	s15, s15, s10
            transition_during_reset = true;
    454c:	movs	r2, #1
          }
          if (!high_ && slave_phase_at_reset >= pw) {
    454e:	ldrb.w	r3, [r4, #104]	; 0x68
    4552:	cbnz	r3, 4560 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd8>
            transition_during_reset = true;
    4554:	vcmp.f32	s3, s15
    4558:	vmrs	APSR_nzcv, fpscr
    455c:	it	ls
    455e:	movls	r2, #1
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4560:	vcmpe.f32	s3, s15
    4564:	vmrs	APSR_nzcv, fpscr
    4568:	ble.w	494e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfc6>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    456c:	vmul.f32	s7, s5, s15
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4570:	vldr	s12, [pc, #-588]	; 4328 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    4574:	vsub.f32	s12, s12, s15
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
          reset = true;
    4578:	movs	r7, #1
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    457a:	vmul.f32	s14, s2, s0
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    457e:	vfma.f32	s15, s12, s9
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4582:	vmul.f32	s12, s8, s21
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4586:	vmul.f32	s14, s14, s2
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    458a:	vmul.f32	s12, s12, s8
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    458e:	vsub.f32	s8, s7, s15
    4592:	vfma.f32	s15, s6, s8
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4596:	vneg.f32	s15, s15
    459a:	vfma.f32	s11, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    459e:	vmov.f32	s14, s25
    45a2:	vfma.f32	s14, s15, s12
    45a6:	vmov.f32	s12, s14
        }
      }
      
      slave_phase_ += slave_frequency;
    45aa:	vadd.f32	s15, s1, s13
      while (transition_during_reset || !reset) {
    45ae:	cmp	r7, r2
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    45b0:	mov.w	r3, #1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    45b4:	vmov.f32	s7, #72	; 0x3e400000  0.1875000

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    45b8:	mov.w	r9, #0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    45bc:	vmov.f32	s8, #120	; 0x3fc00000  1.5
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
    45c0:	vstr	s15, [r4, #92]	; 0x5c
      while (transition_during_reset || !reset) {
    45c4:	bhi.n	46c4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd3c>
        if (!high_) {
    45c6:	ldrb.w	r1, [r4, #104]	; 0x68
          if (slave_phase_ < pw) {
    45ca:	vldr	s13, [r4, #92]	; 0x5c
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
        if (!high_) {
    45ce:	cbnz	r1, 4648 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc0>
          if (slave_phase_ < pw) {
    45d0:	vcmpe.f32	s3, s13
    45d4:	vmrs	APSR_nzcv, fpscr
    45d8:	bgt.w	4960 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfd8>
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    45dc:	vldr	s15, [r4, #100]	; 0x64
    45e0:	vsub.f32	s16, s13, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    45e4:	vadd.f32	s14, s5, s4
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    45e8:	strb.w	r3, [r4, #104]	; 0x68
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    45ec:	vsub.f32	s15, s15, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    45f0:	vmul.f32	s14, s14, s1
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    45f4:	vadd.f32	s15, s15, s1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    45f8:	vnmul.f32	s14, s14, s6
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    45fc:	vdiv.f32	s17, s16, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    4600:	vsub.f32	s20, s10, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    4604:	vmul.f32	s15, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    4608:	vmul.f32	s16, s20, s0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    460c:	vmul.f32	s17, s17, s15
  const float t2 = t1 * t1;
    4610:	vmul.f32	s18, s15, s15
    4614:	vmul.f32	s19, s16, s16
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4618:	vsub.f32	s15, s7, s15
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    461c:	vsub.f32	s16, s7, s16
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    4620:	vfma.f32	s11, s17, s9
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4624:	vfma.f32	s15, s18, s8
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4628:	vfma.f32	s16, s19, s8
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    462c:	vmul.f32	s17, s20, s21
    4630:	vmul.f32	s20, s17, s20
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4634:	vfms.f32	s15, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4638:	vfms.f32	s16, s19, s19
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    463c:	vfma.f32	s12, s20, s9
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4640:	vfma.f32	s11, s14, s16
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4644:	vfma.f32	s12, s14, s15
          high_ = true;
        }
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
    4648:	vcmpe.f32	s13, s10
    464c:	vmrs	APSR_nzcv, fpscr
    4650:	bmi.w	4960 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfd8>
            break;
          }
          slave_phase_ -= 1.0f;
    4654:	vsub.f32	s13, s13, s10
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    4658:	cmp	r7, r2
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    465a:	vsub.f32	s16, s10, s6
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    465e:	strb.w	r9, [r4, #104]	; 0x68
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    4662:	vadd.f32	s15, s5, s4
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
    4666:	vdiv.f32	s17, s13, s1
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
    466a:	vstr	s13, [r4, #92]	; 0x5c
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    466e:	vneg.f32	s16, s16
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    4672:	vmul.f32	s15, s15, s1
          triangle_step *= triangle_amount;
    4676:	vmul.f32	s15, s6, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    467a:	vsub.f32	s20, s10, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    467e:	vmul.f32	s14, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    4682:	vmul.f32	s13, s20, s0

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    4686:	vmul.f32	s17, s17, s14
  const float t2 = t1 * t1;
    468a:	vmul.f32	s18, s14, s14
    468e:	vmul.f32	s19, s13, s13
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4692:	vsub.f32	s14, s7, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4696:	vsub.f32	s13, s7, s13
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    469a:	vfma.f32	s11, s16, s17
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    469e:	vfma.f32	s14, s18, s8
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    46a2:	vfma.f32	s13, s19, s8
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    46a6:	vmul.f32	s17, s20, s21
    46aa:	vmul.f32	s20, s17, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    46ae:	vfms.f32	s14, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    46b2:	vfms.f32	s13, s19, s19
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    46b6:	vfma.f32	s12, s16, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    46ba:	vfma.f32	s11, s15, s13
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    46be:	vfma.f32	s12, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    46c2:	bls.n	45c6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc3e>
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    46c4:	vmul.f32	s13, s1, s2
        high_ = false;
    46c8:	movs	r3, #0
    46ca:	strb.w	r3, [r4, #104]	; 0x68
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    46ce:	vstr	s13, [r4, #92]	; 0x5c
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    46d2:	vcmpe.f32	s3, s13
    46d6:	vmrs	APSR_nzcv, fpscr
    46da:	ble.w	493c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfb4>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    46de:	vmul.f32	s5, s5, s13
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    46e2:	vldr	s14, [pc, #-956]	; 4328 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    46e6:	vsub.f32	s14, s14, s13
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    46ea:	subs	r6, #1
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    46ec:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;
    46f0:	vstr	s3, [r4, #100]	; 0x64
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    46f4:	adds	r1, r6, #1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    46f6:	vfma.f32	s13, s14, s9
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    46fa:	vfma.f32	s15, s11, s24
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    46fe:	vsub.f32	s5, s5, s13
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    4702:	vstmia	r8!, {s15}
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
        high_ = false;
      }
    
      next_sample += ComputeNaiveSample(
    4706:	vfma.f32	s13, s6, s5
    470a:	vadd.f32	s11, s13, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    470e:	bne.w	44c0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb38>
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    4712:	vmov.f32	s15, #80	; 0x3e800000  0.250
    4716:	vldr	s14, [sp, #8]
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    }
    
    next_sample_ = next_sample;
    471a:	vstr	s11, [r4, #96]	; 0x60
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    471e:	vstr	s22, [r4, #120]	; 0x78
    4722:	vcmpe.f32	s14, s15
    4726:	vstr	s3, [r4, #116]	; 0x74
    472a:	vstr	s1, [r4, #112]	; 0x70
    472e:	vstr	s23, [r4, #108]	; 0x6c
    4732:	vmrs	APSR_nzcv, fpscr
    4736:	bge.w	4a24 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x109c>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    473a:	bge.w	4be8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1260>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    473e:	vadd.f32	s15, s14, s14
    4742:	vldr	s13, [sp, #28]
    4746:	vcmpe.f32	s13, s15
    474a:	vmrs	APSR_nzcv, fpscr
    474e:	bpl.w	4b3a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11b2>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    4752:	vldr	s14, [sp, #8]
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    4756:	vldr	s8, [r4, #140]	; 0x8c
    475a:	vldr	s11, [r4, #144]	; 0x90
    475e:	vldr	s9, [r4, #148]	; 0x94
    increment_ = (new_value - *state) / static_cast<float>(size);
    4762:	vsub.f32	s13, s14, s8
    4766:	vsub.f32	s15, s15, s11
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    476a:	vldr	s14, [r4, #128]	; 0x80
    476e:	vsub.f32	s30, s30, s9
    4772:	vdiv.f32	s3, s13, s31
    4776:	vdiv.f32	s2, s15, s31
    477a:	vdiv.f32	s1, s30, s31
    
    while (size--) {
    477e:	cmp.w	lr, #0
    4782:	beq.w	4988 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1000>
    4786:	mov	r3, r5
      float this_sample = next_sample;
      next_sample = 0.0f;
    4788:	vldr	s16, [pc, #968]	; 4b54 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11cc>
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
    478c:	vldr	s7, [pc, #968]	; 4b58 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = false;
    4790:	movs	r1, #0
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
    4792:	movs	r6, #1
    
      const float frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
    4794:	vmov.f32	s10, #112	; 0x3f800000  1.0
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    4798:	vmov.f32	s4, #96	; 0x3f000000  0.5
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    479c:	vmov.f32	s0, #224	; 0xbf000000 -0.5
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    47a0:	vmov.f32	s5, #72	; 0x3e400000  0.1875000
    47a4:	vmov.f32	s6, #120	; 0x3fc00000  1.5
    47a8:	b.n	486e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xee6>
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
    47aa:	vcmpe.f32	s11, s15
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
    47ae:	vmov.f32	s18, s15
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
    47b2:	vmrs	APSR_nzcv, fpscr
    47b6:	bhi.n	489e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf16>
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    47b8:	vldr	s17, [r4, #132]	; 0x84
    47bc:	vsub.f32	s13, s15, s11

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
    47c0:	vsub.f32	s22, s7, s11
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
    47c4:	strb.w	r6, [r4, #136]	; 0x88
      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    47c8:	vsub.f32	s15, s17, s11
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    47cc:	vadd.f32	s21, s12, s20
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
    47d0:	vmul.f32	s22, s22, s19
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    47d4:	vadd.f32	s15, s15, s8
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    47d8:	vmul.f32	s21, s21, s8
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    47dc:	vdiv.f32	s17, s13, s15
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    47e0:	vnmul.f32	s21, s9, s21
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    47e4:	vsub.f32	s24, s10, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    47e8:	vmul.f32	s15, s17, s4
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    47ec:	vmul.f32	s13, s24, s4
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
    47f0:	vmul.f32	s23, s17, s15
  const float t2 = t1 * t1;
    47f4:	vmul.f32	s25, s13, s13
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    47f8:	vsub.f32	s17, s5, s13
    47fc:	vmul.f32	s13, s15, s15
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4800:	vsub.f32	s15, s5, s15
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
    4804:	vfma.f32	s14, s22, s23
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4808:	vfma.f32	s17, s25, s6
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    480c:	vfma.f32	s15, s13, s6
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
    4810:	vmul.f32	s23, s24, s0
    4814:	vmul.f32	s24, s23, s24
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4818:	vfms.f32	s17, s25, s25
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    481c:	vfms.f32	s15, s13, s13
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
    4820:	vmov.f32	s13, s16
    4824:	vfma.f32	s13, s22, s24
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4828:	vfma.f32	s14, s21, s17
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    482c:	vfma.f32	s13, s21, s15
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    4830:	vcmpe.f32	s11, s18
    4834:	vmov.f32	s17, s18
    4838:	vmrs	APSR_nzcv, fpscr
    483c:	ble.n	492a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfa2>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    483e:	vmul.f32	s12, s12, s18
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    4842:	vmov.f32	s18, #0	; 0x40000000  2.0
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    4846:	subs	r0, #1
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    4848:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;
    484c:	vstr	s11, [r4, #132]	; 0x84
          phase_,
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
    4850:	vmul.f32	s12, s9, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    4854:	adds	r2, r0, #1
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    4856:	vfma.f32	s15, s14, s18
          phase_,
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
    485a:	vfma.f32	s12, s17, s19
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    485e:	vdiv.f32	s17, s15, s7
          phase_,
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
    4862:	vadd.f32	s14, s12, s13
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    4866:	vstmia	r3!, {s17}
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    486a:	beq.w	4988 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1000>
  }

  inline float Next() {
    value_ += increment_;
    486e:	vadd.f32	s11, s11, s2
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
    4872:	vldr	s15, [r4, #124]	; 0x7c
    4876:	vadd.f32	s8, s8, s3
      
      if (!high_ && phase_ >= pw) {
    487a:	ldrb.w	r2, [r4, #136]	; 0x88
    487e:	vadd.f32	s9, s9, s1
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    4882:	vsub.f32	s13, s10, s11

      phase_ += frequency;
    4886:	vadd.f32	s15, s8, s15
    
      const float frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
    488a:	vsub.f32	s19, s10, s9
      const float slope_up = 1.0f / (pw);
    488e:	vdiv.f32	s12, s10, s11
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
    4892:	vstr	s15, [r4, #124]	; 0x7c
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    4896:	vdiv.f32	s20, s10, s13

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
    489a:	cmp	r2, #0
    489c:	beq.n	47aa <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe22>
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
    489e:	vcmpe.f32	s15, s10
    48a2:	vmrs	APSR_nzcv, fpscr
    48a6:	blt.n	497a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xff2>
        phase_ -= 1.0f;
    48a8:	vsub.f32	s15, s15, s10
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = false;
    48ac:	strb.w	r1, [r4, #136]	; 0x88
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
    48b0:	vnmul.f32	s23, s7, s19
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    48b4:	vadd.f32	s21, s12, s20
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
    48b8:	vdiv.f32	s22, s15, s8
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    48bc:	vstr	s15, [r4, #124]	; 0x7c
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = false;
    48c0:	vmov.f32	s18, s15
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    48c4:	vmul.f32	s21, s21, s8
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    48c8:	vcmpe.f32	s11, s18
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    48cc:	vmul.f32	s21, s21, s9
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    48d0:	vmrs	APSR_nzcv, fpscr
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    48d4:	vmul.f32	s13, s22, s4
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    48d8:	vsub.f32	s24, s10, s22
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
  const float t2 = t1 * t1;
    48dc:	vmul.f32	s15, s13, s13
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
    48e0:	vmul.f32	s22, s22, s13
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    48e4:	vsub.f32	s13, s5, s13
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    48e8:	vmul.f32	s17, s24, s4
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
    48ec:	vfma.f32	s14, s23, s22
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    48f0:	vfma.f32	s13, s15, s6
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    48f4:	vmul.f32	s22, s24, s0
  const float t2 = t1 * t1;
    48f8:	vmul.f32	s25, s17, s17
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    48fc:	vsub.f32	s17, s5, s17
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    4900:	vmul.f32	s24, s22, s24
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4904:	vfms.f32	s13, s15, s15
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    4908:	vmov.f32	s15, s16
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    490c:	vfma.f32	s17, s25, s6
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    4910:	vfma.f32	s15, s23, s24
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4914:	vfms.f32	s17, s25, s25
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4918:	vfma.f32	s15, s21, s13
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    491c:	vfma.f32	s14, s21, s17
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    4920:	vmov.f32	s17, s18
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4924:	vmov.f32	s13, s15
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    4928:	bgt.n	483e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeb6>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    492a:	vsub.f32	s15, s18, s11
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    492e:	vldr	s17, [pc, #552]	; 4b58 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    4932:	vmov.f32	s12, s10
    4936:	vfms.f32	s12, s20, s15
    493a:	b.n	4842 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeba>
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    493c:	vsub.f32	s15, s13, s3
    4940:	vmov.f32	s5, s10
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4944:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    4948:	vfms.f32	s5, s4, s15
    494c:	b.n	46e6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd5e>
    494e:	vsub.f32	s14, s15, s3
    4952:	vmov.f32	s7, s10
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4956:	vmov.f32	s12, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    495a:	vfms.f32	s7, s4, s14
    495e:	b.n	4574 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbec>
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
    4960:	cmp	r7, #0
    4962:	beq.w	46d2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd4a>
    4966:	b.n	46c4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd3c>
    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
      float reset_time = 0.0f;
    4968:	vldr	s2, [pc, #488]	; 4b54 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11cc>

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
    496c:	movs	r2, #0
    496e:	vldr	s13, [r4, #92]	; 0x5c
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    4972:	vmov.f32	s12, s2
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
    4976:	mov	r7, r2
    4978:	b.n	45aa <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc22>
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
    497a:	vmov.f32	s18, s15

    float next_sample = next_sample_;
    
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    497e:	vldr	s13, [pc, #468]	; 4b54 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11cc>
    4982:	b.n	4830 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea8>
      bool transition_during_reset = false;
    4984:	movs	r2, #0
    4986:	b.n	454e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbc6>
    4988:	vldr	s15, [sp, #16]
      primary_f, square_sync_f, square_pw, 1.0f, temp_buffer_, size);
  variable_saw_.Render(auxiliary_f, saw_pw, saw_shape, out, size);
  
  float norm = 1.0f / (std::max(square_gain, saw_gain));
    498c:	vmov.f32	s10, #112	; 0x3f800000  1.0
    4990:	vldr	s7, [sp, #12]
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    }
    
    next_sample_ = next_sample;
    4994:	vstr	s14, [r4, #128]	; 0x80
    4998:	vcmp.f32	s15, s7
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    499c:	vldr	s13, [r4, #152]	; 0x98
    49a0:	vldr	s12, [r4, #156]	; 0x9c
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    49a4:	vstr	s11, [r4, #144]	; 0x90
    49a8:	vmrs	APSR_nzcv, fpscr
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    49ac:	vldr	s11, [sp, #20]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    49b0:	vstr	s9, [r4, #148]	; 0x94
    49b4:	vstr	s8, [r4, #140]	; 0x8c
    49b8:	it	mi
    49ba:	vmovmi.f32	s15, s7
    49be:	vmov.f32	s14, s15
    49c2:	vdiv.f32	s15, s10, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    49c6:	vldr	s10, [sp, #24]
    49ca:	vmov.f32	s14, s13
    49ce:	vfnms.f32	s14, s15, s11
    49d2:	vmov.f32	s11, s12
    49d6:	vfnms.f32	s11, s15, s10
    49da:	vdiv.f32	s10, s14, s31
    49de:	vmov.f32	s15, s11
    49e2:	vdiv.f32	s11, s15, s31
  ParameterInterpolator saw_gain_modulation(
      &xmod_amount_,
      saw_gain * 0.5f * norm,
      size);
  
  for (size_t i = 0; i < size; ++i) {
    49e6:	cmp.w	lr, #0
    49ea:	beq.n	4a12 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x108a>
    49ec:	mov	r3, ip
    49ee:	add.w	lr, r5, lr, lsl #2
    out[i] = out[i] * saw_gain_modulation.Next() + \
        square_gain_modulation.Next() * temp_buffer_[i];
    49f2:	vldmia	r3!, {s15}
    49f6:	vldr	s14, [r5]
  }

  inline float Next() {
    value_ += increment_;
    49fa:	vadd.f32	s13, s13, s10
    49fe:	vadd.f32	s12, s12, s11
    4a02:	vmul.f32	s15, s15, s13
    4a06:	vfma.f32	s15, s14, s12
    4a0a:	vstmia	r5!, {s15}
  ParameterInterpolator saw_gain_modulation(
      &xmod_amount_,
      saw_gain * 0.5f * norm,
      size);
  
  for (size_t i = 0; i < size; ++i) {
    4a0e:	cmp	lr, r5
    4a10:	bne.n	49f2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x106a>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    4a12:	vstr	s12, [r4, #156]	; 0x9c
    4a16:	vstr	s13, [r4, #152]	; 0x98
        square_gain_modulation.Next() * temp_buffer_[i];
  }

#endif  // VA_VARIANT values

}
    4a1a:	add	sp, #36	; 0x24
    4a1c:	vpop	{d8-d15}
    4a20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    4a24:	vstr	s15, [sp, #8]
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    4a28:	vmov.f32	s15, #96	; 0x3f000000  0.5
    4a2c:	b.n	4752 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdca>
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    4a2e:	vmov.f32	s15, s13
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    4a32:	vmov.f32	s14, #96	; 0x3f000000  0.5
    4a36:	b.n	4468 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xae0>
    aux[i] = (aux[i] - out[i]) * 0.5f;
  }
  
  // Render double varishape to OUT.
  float square_pw = 1.3f * parameters.timbre - 0.15f;
  CONSTRAIN(square_pw, 0.005f, 0.5f);
    4a38:	vmov.f32	s15, #96	; 0x3f000000  0.5
    4a3c:	vcmp.f32	s12, s15
    4a40:	vmrs	APSR_nzcv, fpscr
    4a44:	it	gt
    4a46:	vmovgt.f32	s12, s15
    4a4a:	b.w	41ea <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x862>
  
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
    4a4e:	vsub.f32	s15, s14, s15
    4a52:	vmov.f32	s10, #0	; 0x40000000  2.0
    4a56:	vmov.f32	s11, #112	; 0x3f800000  1.0
    4a5a:	vfms.f32	s11, s15, s10
    4a5e:	vmov.f32	s15, s11
    4a62:	b.w	424e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8c6>
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    4a66:	vmov.f32	s15, #112	; 0x3f800000  1.0
    4a6a:	vsub.f32	s14, s15, s14
    4a6e:	vcmpe.f32	s12, s14
    4a72:	vmrs	APSR_nzcv, fpscr
    4a76:	it	le
    4a78:	vmovle.f32	s14, s12
    4a7c:	b.w	3ede <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
    4a80:	vmov.f32	s12, #112	; 0x3f800000  1.0
    4a84:	vsub.f32	s15, s12, s15
    4a88:	vcmpe.f32	s11, s15
    4a8c:	vmrs	APSR_nzcv, fpscr
    4a90:	it	le
    4a92:	vmovle.f32	s15, s11
    4a96:	b.w	3bd2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>
    4a9a:	vldr	s13, [pc, #192]	; 4b5c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    4a9e:	vadd.f32	s15, s15, s13
    4aa2:	vcvt.s32.f32	s13, s15
    4aa6:	vmov	r2, s13
    4aaa:	vcvt.f32.s32	s13, s13
    4aae:	vsub.f32	s15, s15, s13
    4ab2:	vmov.f32	s13, s15
    4ab6:	vcvt.s32.f32	s13, s13, #8
    4aba:	vmov	r3, s13
    4abe:	b.w	3b14 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x18c>
    4ac2:	vldr	s12, [pc, #152]	; 4b5c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    4ac6:	vadd.f32	s14, s14, s12
    4aca:	vcvt.s32.f32	s12, s14
    4ace:	vmov	r2, s12
    4ad2:	vcvt.f32.s32	s12, s12
    4ad6:	vsub.f32	s14, s14, s12
    4ada:	vmov.f32	s12, s14
    4ade:	vcvt.s32.f32	s12, s12, #8
    4ae2:	vmov	r3, s12
    4ae6:	b.w	3a9a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x112>
    4aea:	vldr	s12, [pc, #112]	; 4b5c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    4aee:	vadd.f32	s13, s13, s12
    4af2:	vcvt.s32.f32	s12, s13
    4af6:	vmov	r2, s12
    4afa:	vcvt.f32.s32	s12, s12
    4afe:	vsub.f32	s13, s13, s12
    4b02:	vmov.f32	s12, s13
    4b06:	vcvt.s32.f32	s12, s12, #8
    4b0a:	vmov	r3, s12
    4b0e:	b.w	3a3e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb6>
    4b12:	vldr	s13, [pc, #72]	; 4b5c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    4b16:	vadd.f32	s15, s15, s13
    4b1a:	vcvt.s32.f32	s13, s15
    4b1e:	vmov	r2, s13
    4b22:	vcvt.f32.s32	s13, s13
    4b26:	vsub.f32	s15, s15, s13
    4b2a:	vmov.f32	s13, s15
    4b2e:	vcvt.s32.f32	s13, s13, #8
    4b32:	vmov	r3, s13
    4b36:	b.w	39e2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a>
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    4b3a:	vmov.f32	s14, #112	; 0x3f800000  1.0
    4b3e:	vsub.f32	s15, s14, s15
    4b42:	vcmpe.f32	s13, s15
    4b46:	vmrs	APSR_nzcv, fpscr
    4b4a:	it	le
    4b4c:	vmovle.f32	s15, s13
    4b50:	b.n	4752 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdca>
    4b52:	nop
    4b54:	.word	0x00000000
    4b58:	.word	0x3f99999a
    4b5c:	.word	0x43000000
    4b60:	.word	0x00000000
    4b64:	.word	0x3e99999a
    4b68:	vmov.f32	s13, #112	; 0x3f800000  1.0
    4b6c:	vsub.f32	s14, s13, s14
    4b70:	vcmpe.f32	s12, s14
    4b74:	vmrs	APSR_nzcv, fpscr
    4b78:	it	le
    4b7a:	vmovle.f32	s14, s12
    4b7e:	b.n	4468 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xae0>
    4b80:	vldr	s14, [pc, #-40]	; 4b5c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    4b84:	vadd.f32	s15, s15, s14
    4b88:	vcvt.s32.f32	s14, s15
    4b8c:	vmov	r2, s14
    4b90:	vcvt.f32.s32	s14, s14
    4b94:	vsub.f32	s15, s15, s14
    4b98:	vmov.f32	s14, s15
    4b9c:	vcvt.s32.f32	s14, s14, #8
    4ba0:	vmov	r3, s14
    4ba4:	b.n	440a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa82>
      parameters.note + sync_amount * 48.0f);
  const float auxiliary_sync_f = NoteToFrequency(
      parameters.note + auxiliary_detune + sync_amount * 48.0f);

  float shape = parameters.morph * 1.5f;
  CONSTRAIN(shape, 0.0f, 1.0f);
    4ba6:	vldr	s30, [pc, #-72]	; 4b60 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d8>
    4baa:	b.w	3b5e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d6>
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
    4bae:	vldr	s30, [pc, #-80]	; 4b60 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d8>
    4bb2:	b.w	42aa <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x922>
    4bb6:	vldr	s15, [pc, #-84]	; 4b64 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11dc>
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    4bba:	vstr	s14, [sp, #16]
    4bbe:	vmul.f32	s15, s14, s15
    4bc2:	vstr	s15, [sp, #20]
    4bc6:	b.w	4236 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8ae>
    4bca:	vmov.f32	s15, #96	; 0x3f000000  0.5
    4bce:	vmul.f32	s15, s14, s15
    4bd2:	vstr	s15, [sp, #24]
    4bd6:	b.w	43c6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa3e>
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    4bda:	vmov.f32	s15, #96	; 0x3f000000  0.5
    4bde:	b.w	3bd2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>
    4be2:	vmov.f32	s14, #96	; 0x3f000000  0.5
    4be6:	b.n	4468 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xae0>
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    4be8:	vmov.f32	s15, #96	; 0x3f000000  0.5
    4bec:	b.n	4752 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdca>
    4bee:	vmov.f32	s14, #96	; 0x3f000000  0.5
    4bf2:	b.w	3ede <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
    4bf6:	nop

00004bf8 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void ParticleEngine::Init(BufferAllocator* allocator) {
    4bf8:	push	{r4, r5, r6, r7}
 public:
  Particle() { }
  ~Particle() { }

  inline void Init() {
    pre_gain_ = 0.0f;
    4bfa:	movs	r2, #0
    4bfc:	mov	r3, r0
    4bfe:	add.w	r7, r0, #144	; 0x90

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    4c02:	ldr	r6, [pc, #116]	; (4c78 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x80>)
    r_ = 1.0f / resonance;
    4c04:	ldr	r5, [pc, #116]	; (4c7c <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x84>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    4c06:	ldr	r4, [pc, #120]	; (4c80 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x88>)
    4c08:	str	r2, [r3, #16]
    4c0a:	adds	r3, #24

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    4c0c:	str.w	r6, [r3, #-4]
    r_ = 1.0f / resonance;
    4c10:	str	r5, [r3, #0]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    4c12:	str	r4, [r3, #4]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    4c14:	str	r2, [r3, #12]
    4c16:	str	r2, [r3, #8]
  for (int i = 0; i < kNumParticles; ++i) {
    4c18:	cmp	r3, r7
    4c1a:	bne.n	4c08 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x10>
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    4c1c:	ldr	r3, [r1, #8]
    4c1e:	cmp.w	r3, #16384	; 0x4000
    4c22:	bcc.n	4c72 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x7a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    4c24:	ldr	r2, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    4c26:	sub.w	r3, r3, #16384	; 0x4000
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    4c2a:	add.w	r4, r2, #16384	; 0x4000
      free_ -= size_bytes;
    4c2e:	str	r3, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    4c30:	str	r4, [r1, #0]
  ~Diffuser() { }
  
  void Init(uint16_t* buffer) {
    engine_.Init(buffer);
    engine_.SetLFOFrequency(LFO_1, 0.3f / 48000.0f);
    lp_decay_ = 0.0f;
    4c32:	movs	r3, #0
    initial_amplitude_ = iir_coefficient_ * 0.25f;
  }
  
  inline void Start() {
    y1_ = initial_amplitude_;
    y0_ = 0.5f;
    4c34:	mov.w	r7, #1056964608	; 0x3f000000
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    4c38:	ldr	r6, [pc, #72]	; (4c84 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x8c>)
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    4c3a:	ldr	r1, [pc, #76]	; (4c88 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x90>)

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    4c3c:	ldr	r5, [pc, #56]	; (4c78 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x80>)
    r_ = 1.0f / resonance;
    4c3e:	ldr	r4, [pc, #60]	; (4c7c <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x84>)
  typedef typename DataType<format>::T T;
  FxEngine() { }
  ~FxEngine() { }

  void Init(T* buffer) {
    buffer_ = buffer;
    4c40:	str.w	r2, [r0, #164]	; 0xa4
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    4c44:	ldr	r2, [pc, #56]	; (4c80 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x88>)
  }
  
  inline void Start() {
    y1_ = initial_amplitude_;
    y0_ = 0.5f;
    4c46:	str.w	r7, [r0, #172]	; 0xac
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    4c4a:	str.w	r6, [r0, #176]	; 0xb0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    4c4e:	str.w	r5, [r0, #204]	; 0xcc
    r_ = 1.0f / resonance;
    4c52:	str.w	r4, [r0, #208]	; 0xd0
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    4c56:	str.w	r1, [r0, #180]	; 0xb4
  }
  
  inline void Start() {
    y1_ = initial_amplitude_;
    4c5a:	str.w	r1, [r0, #168]	; 0xa8
    4c5e:	str.w	r3, [r0, #200]	; 0xc8
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    4c62:	str.w	r3, [r0, #220]	; 0xdc
    4c66:	str.w	r3, [r0, #216]	; 0xd8
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    4c6a:	str.w	r2, [r0, #212]	; 0xd4
    particle_[i].Init();
  }
  diffuser_.Init(allocator->Allocate<uint16_t>(8192));
  post_filter_.Init();
}
    4c6e:	pop	{r4, r5, r6, r7}
    4c70:	bx	lr
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    4c72:	movs	r2, #0
    4c74:	b.n	4c32 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x3a>
    4c76:	nop
    4c78:	.word	0x3d00ba22
    4c7c:	.word	0x3c23d70a
    4c80:	.word	0x3f7faaca
    4c84:	.word	0x3ffffff5
    4c88:	.word	0x3efffff5

00004c8c <plaits::ParticleEngine::Reset()>:

void ParticleEngine::Reset() {
    4c8c:	ldr.w	r3, [r0, #164]	; 0xa4
    4c90:	push	{r4}
  }
  
  void Clear() {
    std::fill(&buffer_[0], &buffer_[size], 0);
    4c92:	add.w	r1, r3, #16384	; 0x4000
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    4c96:	movs	r4, #0
    4c98:	strh.w	r4, [r3], #2
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    4c9c:	cmp	r1, r3
	*__first = __tmp;
    4c9e:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    4ca2:	bne.n	4c98 <plaits::ParticleEngine::Reset()+0xc>
    write_ptr_ = 0;
    4ca4:	str.w	r2, [r0, #160]	; 0xa0
  diffuser_.Clear();
}
    4ca8:	ldr.w	r4, [sp], #4
    4cac:	bx	lr
    4cae:	nop

00004cb0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    4cb0:	vmov.f32	s13, #34	; 0x41100000  9.0
    4cb4:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4cb8:	vldr	s14, [pc, #928]	; 505c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    4cbc:	vsub.f32	s15, s15, s13
void ParticleEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    4cc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4cc4:	vcmpe.f32	s15, s14
    4cc8:	mov	sl, r0
    4cca:	mov	r8, r3
    4ccc:	vmrs	APSR_nzcv, fpscr
    4cd0:	vpush	{d8-d11}
    4cd4:	sub	sp, #20
    4cd6:	str	r2, [sp, #0]
    4cd8:	ldr.w	r9, [sp, #88]	; 0x58
    4cdc:	bmi.n	4cf4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    4cde:	vldr	s14, [pc, #896]	; 5060 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
    4ce2:	vcmpe.f32	s15, s14
    4ce6:	vmrs	APSR_nzcv, fpscr
    4cea:	ble.w	54a0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f0>
    4cee:	movs	r3, #0
    4cf0:	movs	r2, #255	; 0xff
    4cf2:	b.n	4cf8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    4cf4:	movs	r3, #0
    4cf6:	mov	r2, r3
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
    4cf8:	vldr	s14, [r1, #8]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    4cfc:	vmov.f32	s11, #34	; 0x41100000  9.0
    4d00:	vldr	s13, [pc, #864]	; 5064 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b4>
    4d04:	vmul.f32	s14, s14, s14
    4d08:	vldr	s15, [pc, #860]	; 5068 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4d0c:	ldr.w	lr, [pc, #912]	; 50a0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4d10:	ldr.w	ip, [pc, #912]	; 50a4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
    4d14:	vfma.f32	s15, s14, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4d18:	vldr	s13, [pc, #832]	; 505c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4d1c:	add.w	r2, lr, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4d20:	vldr	s12, [pc, #840]	; 506c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4d24:	add.w	r3, ip, r3, lsl #2
    4d28:	vldr	s14, [r2]
    4d2c:	vldr	s6, [r3]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    4d30:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4d34:	vmul.f32	s14, s14, s6

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4d38:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4d3c:	vmul.f32	s6, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4d40:	vmrs	APSR_nzcv, fpscr
    4d44:	bmi.n	4d5c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xac>
    4d46:	vldr	s14, [pc, #792]	; 5060 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
    4d4a:	vcmpe.f32	s15, s14
    4d4e:	vmrs	APSR_nzcv, fpscr
    4d52:	ble.w	547a <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ca>
    4d56:	movs	r3, #0
    4d58:	movs	r2, #255	; 0xff
    4d5a:	b.n	4d60 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb0>
    4d5c:	movs	r3, #0
    4d5e:	mov	r2, r3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4d60:	add.w	r2, lr, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4d64:	vldr	s9, [pc, #772]	; 506c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4d68:	add.w	r3, ip, r3, lsl #2
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    4d6c:	vmov.f32	s13, #96	; 0x3f000000  0.5
    4d70:	vldr	s14, [r2]
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
    4d74:	vmov.f32	s11, #112	; 0x3f800000  1.0
    4d78:	vldr	s15, [r3]
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    4d7c:	vldr	s12, [r1, #12]
    4d80:	vmul.f32	s15, s14, s15
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
    4d84:	vldr	s10, [pc, #744]	; 5070 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    4d88:	vcmpe.f32	s12, s13
      ? (parameters.morph - 0.5f) * 120.0f
    4d8c:	vsub.f32	s13, s12, s13
    4d90:	vmul.f32	s15, s15, s9
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    4d94:	vmrs	APSR_nzcv, fpscr
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
    4d98:	vmul.f32	s15, s15, s15
    4d9c:	vmul.f32	s10, s15, s10
  const float gain = 1.0f / density;
    4da0:	vdiv.f32	s8, s11, s10
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    4da4:	bge.w	5450 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a0>
    4da8:	movs	r3, #0
    4daa:	movs	r2, #128	; 0x80

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4dac:	add.w	r2, lr, r2, lsl #2
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
    4db0:	vldr	s5, [r1, #16]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4db4:	add.w	r3, ip, r3, lsl #2
    4db8:	vldr	s14, [pc, #696]	; 5074 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c4>
    4dbc:	vldr	s15, [r2]
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
    4dc0:	vmov.f32	s11, #96	; 0x3f000000  0.5
    4dc4:	vldr	s9, [r3]
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
    4dc8:	vmul.f32	s14, s5, s14
    4dcc:	vmul.f32	s15, s15, s9
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    4dd0:	vcmpe.f32	s12, s11
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
    4dd4:	vmov.f32	s7, s11
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
    4dd8:	vmul.f32	s5, s14, s5
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    4ddc:	vmrs	APSR_nzcv, fpscr
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
    4de0:	vfma.f32	s7, s15, s15
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    4de4:	bpl.w	544a <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x79a>
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
    4de8:	vabs.f32	s0, s13
    4dec:	vadd.f32	s0, s0, s0
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
    4df0:	vmul.f32	s0, s0, s0
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
  const bool sync = parameters.trigger & TRIGGER_RISING_EDGE;
  
  fill(&out[0], &out[size], 0.0f);
    4df4:	ldr	r3, [sp, #0]
    4df6:	mov.w	r2, r9, lsl #2
    4dfa:	ldrb.w	fp, [r1]
    4dfe:	adds	r1, r3, r2
    4e00:	and.w	r0, fp, #1
    4e04:	cmp	r3, r1
    4e06:	mov	r4, r0
    4e08:	beq.n	4e16 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x166>
    4e0a:	ldr	r3, [sp, #0]
	*__first = __tmp;
    4e0c:	movs	r0, #0
    4e0e:	str.w	r0, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    4e12:	cmp	r1, r3
    4e14:	bne.n	4e0e <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15e>
  fill(&aux[0], &aux[size], 0.0f);
    4e16:	add	r2, r8
    4e18:	cmp	r8, r2
    4e1a:	beq.n	4e28 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    4e1c:	mov	r3, r8
	*__first = __tmp;
    4e1e:	movs	r1, #0
    4e20:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    4e24:	cmp	r2, r3
    4e26:	bne.n	4e20 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x170>
    4e28:	add.w	r3, r9, #4294967295
    4e2c:	mov	r2, sl
    4e2e:	add.w	fp, sl, #144	; 0x90
    4e32:	str.w	sl, [sp, #8]
    4e36:	str	r3, [sp, #4]
    4e38:	mov	sl, r4
    4e3a:	ldr	r3, [pc, #572]	; (5078 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>)
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    4e3c:	vldr	s9, [pc, #572]	; 507c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    4e40:	ldr	r1, [r3, #0]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    4e42:	vldr	s3, [pc, #648]	; 50cc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4e46:	vldr	s4, [pc, #568]	; 5080 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    4e4a:	ldr	r3, [pc, #568]	; (5084 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>)
    4e4c:	mul.w	r3, r3, r1
    4e50:	ldr	r1, [pc, #564]	; (5088 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
    4e52:	add	r1, r3
      float q,
      float* out,
      float* aux,
      size_t size) {
    float u = stmlib::Random::GetFloat();
    if (sync) {
    4e54:	cmp.w	sl, #0
    4e58:	bne.w	5432 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x782>
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    4e5c:	vmov	s15, r1
    4e60:	vcvt.f32.u32	s16, s15
    4e64:	vmul.f32	s16, s16, s9
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    4e68:	cmp.w	r9, #0
    4e6c:	beq.w	4fe8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
    4e70:	ldr	r4, [sp, #0]
    4e72:	mov	r0, r8
    4e74:	ldr	r3, [sp, #4]
    4e76:	movs	r7, #1
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    4e78:	ldr	r6, [pc, #520]	; (5084 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>)
    4e7a:	vldr	s1, [pc, #528]	; 508c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
    4e7e:	vldr	s2, [pc, #528]	; 5090 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>
    4e82:	b.n	4f58 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
    4e84:	vmul.f32	s14, s15, s1
    4e88:	vmov.f32	s11, s2
    4e8c:	vfma.f32	s11, s15, s14
    4e90:	vmul.f32	s11, s11, s15
    4e94:	vmul.f32	s12, s11, s11
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    4e98:	vmov.f32	s13, #112	; 0x3f800000  1.0
              stmlib::SemitonesToRatio(spread * u) * frequency,
              0.25f);
          pre_gain_ = 0.5f / stmlib::Sqrt(q * f * stmlib::Sqrt(density));
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
    4e9c:	movs	r7, #0
    return sqrtf(x);
  }
#else
  inline float Sqrt(float x) {
    float result;
    __asm ("vsqrt.f32 %0, %1" : "=w" (result) : "w" (x) );
    4e9e:	vmul.f32	s15, s7, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    4ea2:	vstr	s11, [r2, #20]
        if (can_radomize_frequency) {
          const float u = 2.0f * stmlib::Random::GetFloat() - 1.0f;
          const float f = std::min(
              stmlib::SemitonesToRatio(spread * u) * frequency,
              0.25f);
          pre_gain_ = 0.5f / stmlib::Sqrt(q * f * stmlib::Sqrt(density));
    4ea6:	vmov.f32	s18, #96	; 0x3f000000  0.5
    r_ = 1.0f / resonance;
    4eaa:	vdiv.f32	s16, s13, s7
    4eae:	vsqrt.f32	s14, s10
    4eb2:	vmul.f32	s15, s15, s14
    4eb6:	vsqrt.f32	s15, s15
    4eba:	vdiv.f32	s14, s18, s15
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    4ebe:	vmov.f32	s15, s13
    4ec2:	vfma.f32	s15, s16, s11
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    4ec6:	vstr	s16, [r2, #24]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    4eca:	vadd.f32	s12, s15, s12
    4ece:	vstr	s14, [r2, #16]
    4ed2:	vdiv.f32	s15, s13, s12
    4ed6:	vstr	s15, [r2, #28]
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
        }
      }
      *aux++ += s;
    4eda:	vldmia	r0!, {s15}
    4ede:	mul.w	r5, r6, r1
    4ee2:	ldr	r1, [pc, #420]	; (5088 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    4ee4:	subs	r3, #1
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
        }
      }
      *aux++ += s;
    4ee6:	vadd.f32	s15, s15, s17
    4eea:	add	r1, r5
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    4eec:	adds	r5, r3, #1
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
        }
      }
      *aux++ += s;
    4eee:	vstr	s15, [r0, #-4]
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    4ef2:	vmov	s15, r1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    4ef6:	vldr	s13, [r2, #32]
    4efa:	vcvt.f32.u32	s16, s15
    4efe:	vldr	s15, [r2, #24]
    4f02:	vldr	s18, [r2, #16]
    4f06:	vnmul.f32	s15, s15, s13
    4f0a:	vldr	s11, [r2, #20]
    4f0e:	vldr	s12, [r2, #36]	; 0x24
    4f12:	vmul.f32	s16, s16, s9
    4f16:	vldr	s14, [r2, #28]
    4f1a:	vfma.f32	s15, s17, s18
    4f1e:	vfms.f32	s15, s13, s11
    4f22:	vsub.f32	s15, s15, s12
    4f26:	vmul.f32	s15, s15, s14
    bp = g_ * hp + state_1_;
    4f2a:	vmov.f32	s14, s13
    4f2e:	vfma.f32	s14, s11, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    4f32:	vfma.f32	s12, s11, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    4f36:	vmov.f32	s13, s14
    4f3a:	vfma.f32	s13, s11, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    4f3e:	vfma.f32	s12, s11, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    4f42:	vstr	s13, [r2, #32]
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    4f46:	vstr	s12, [r2, #36]	; 0x24
      *out++ += filter_.Process<stmlib::FILTER_MODE_BAND_PASS>(pre_gain_ * s);
    4f4a:	vldmia	r4!, {s15}
    4f4e:	vadd.f32	s14, s15, s14
    4f52:	vstr	s14, [r4, #-4]
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    4f56:	beq.n	4fe8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
      float s = 0.0f;
      if (u <= density) {
    4f58:	vcmpe.f32	s10, s16
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
      float s = 0.0f;
    4f5c:	vldr	s17, [pc, #356]	; 50c4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
      if (u <= density) {
    4f60:	vmrs	APSR_nzcv, fpscr
    4f64:	blt.n	4eda <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22a>
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    4f66:	mul.w	r5, r6, r1

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    4f6a:	vmov.f32	s13, #0	; 0x40000000  2.0
    4f6e:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    4f72:	vmov.f32	s18, #80	; 0x3e800000  0.250
        s = u * gain;
    4f76:	vmul.f32	s17, s8, s16
        if (can_radomize_frequency) {
    4f7a:	cmp	r7, #0
    4f7c:	beq.n	4eda <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22a>
    4f7e:	ldr	r1, [pc, #264]	; (5088 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
    4f80:	vldr	s11, [pc, #272]	; 5094 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    4f84:	add	r1, r5
    4f86:	vldr	s12, [pc, #272]	; 5098 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
    4f8a:	vmov	s14, r1
    4f8e:	vcvt.f32.u32	s14, s14
    4f92:	vmul.f32	s14, s14, s9
    4f96:	vfma.f32	s15, s14, s13
    4f9a:	vmov.f32	s14, s3
    4f9e:	vfma.f32	s14, s5, s15
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    4fa2:	vcvt.s32.f32	s15, s14

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4fa6:	vcvt.f32.s32	s13, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4faa:	vmov	r5, s15
    4fae:	add.w	r5, lr, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4fb2:	vsub.f32	s14, s14, s13
          const float u = 2.0f * stmlib::Random::GetFloat() - 1.0f;
          const float f = std::min(
              stmlib::SemitonesToRatio(spread * u) * frequency,
    4fb6:	vldr	s15, [r5]
    4fba:	vmul.f32	s14, s14, s4
    4fbe:	vcvt.s32.f32	s14, s14
    4fc2:	vmov	r5, s14
    4fc6:	add.w	r5, ip, r5, lsl #2
    4fca:	vldr	s14, [r5]
    4fce:	vmul.f32	s15, s14, s15
    4fd2:	vmul.f32	s15, s15, s6
    4fd6:	vcmpe.f32	s15, s18
    4fda:	vmrs	APSR_nzcv, fpscr
    4fde:	ble.w	4e84 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d4>
	return __b;
    4fe2:	vmov.f32	s15, s18
    4fe6:	b.n	4e98 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1e8>
    4fe8:	adds	r2, #24
  
  for (int i = 0; i < kNumParticles; ++i) {
    4fea:	cmp	fp, r2
    4fec:	bne.w	4e4a <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x19a>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    4ff0:	vldr	s15, [pc, #168]	; 509c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
    4ff4:	ldr	r3, [pc, #128]	; (5078 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>)
    4ff6:	vcmpe.f32	s6, s15
    4ffa:	ldr.w	sl, [sp, #8]
    4ffe:	str	r1, [r3, #0]
    5000:	vmrs	APSR_nzcv, fpscr
    5004:	bgt.w	54c6 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x816>
    5008:	vldr	s14, [pc, #128]	; 508c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
    500c:	vmov.f32	s13, #112	; 0x3f800000  1.0
    5010:	vldr	s15, [pc, #124]	; 5090 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>
    5014:	vmov.f32	s12, #0	; 0x40000000  2.0
    5018:	vmul.f32	s14, s6, s14
    501c:	vfma.f32	s15, s6, s14
    5020:	vmul.f32	s6, s15, s6
    5024:	vmov.f32	s15, s13
    5028:	vfma.f32	s15, s6, s12
    502c:	vfma.f32	s15, s6, s6
    5030:	vdiv.f32	s14, s13, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5034:	vstr	s6, [sl, #204]	; 0xcc
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5038:	vstr	s14, [sl, #212]	; 0xd4
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    503c:	vldr	s12, [sl, #216]	; 0xd8
    float state_2 = state_2_;
    5040:	vldr	s13, [sl, #220]	; 0xdc
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    5044:	vmov.f32	s10, #0	; 0x40000000  2.0
    5048:	vstr	s10, [sl, #208]	; 0xd0
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    504c:	cmp.w	r9, #0
    5050:	beq.w	5438 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    5054:	ldmia.w	sp, {r2, r3}
    5058:	b.n	50dc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42c>
    505a:	nop
    505c:	.word	0xc3000000
    5060:	.word	0x42fe0000
    5064:	.word	0x42900000
    5068:	.word	0x42700000
    506c:	.word	0x39969651
    5070:	.word	0x3e2aaaab
    5074:	.word	0x42400000
    5078:	.word	0x2001f96c
    507c:	.word	0x2f800000
    5080:	.word	0x43800000
    5084:	.word	0x0019660d
    5088:	.word	0x3c6ef35f
    508c:	.word	0x413957d7
    5090:	.word	0x40490fdb
    5094:	.word	0x3f7765d1
    5098:	.word	0x3f6f15a2
    509c:	.word	0x3efae148
    50a0:	.word	0x20000024
    50a4:	.word	0x20000428
    50a8:	.word	0x3f4ccccd
    50ac:	.word	0x39800000
    50b0:	.word	0x45800000
    50b4:	.word	0x422c0000
    50b8:	.word	0x43c80000
    50bc:	.word	0x43aa0000
    50c0:	.word	0x453fe000
    50c4:	.word	0x00000000
    50c8:	.word	0x42f00000
    50cc:	.word	0x43000000
    50d0:	vldr	s10, [sl, #208]	; 0xd0
    50d4:	vldr	s6, [sl, #204]	; 0xcc
    50d8:	vldr	s14, [sl, #212]	; 0xd4
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    50dc:	vneg.f32	s11, s12
    50e0:	vldr	s15, [r2]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    50e4:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    50e6:	vfma.f32	s15, s11, s10
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    50ea:	adds	r0, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    50ec:	vfma.f32	s15, s11, s6
    50f0:	vsub.f32	s15, s15, s13
    50f4:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    50f8:	vmov.f32	s14, s12
    50fc:	vfma.f32	s14, s15, s6
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    5100:	vfma.f32	s13, s14, s6
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    5104:	vmov.f32	s12, s14
    5108:	vfma.f32	s12, s15, s6
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    510c:	vstmia	r2!, {s13}
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    5110:	vfma.f32	s13, s14, s6
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5114:	bne.n	50d0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x420>
  }
  
  post_filter_.set_f_q<FREQUENCY_DIRTY>(min(f0, 0.49f), 0.5f);
  post_filter_.Process<FILTER_MODE_LOW_PASS>(out, out, size);
  
  diffuser_.Process(
    5116:	vldr	s15, [pc, #-112]	; 50a8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
    511a:	vmov.f32	s14, #96	; 0x3f000000  0.5
    511e:	vmov.f32	s8, #80	; 0x3e800000  0.250
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    5122:	vstr	s12, [sl, #216]	; 0xd8
    5126:	vmul.f32	s15, s0, s15
    state_2_ = state_2;
    512a:	vstr	s13, [sl, #220]	; 0xdc
    y0_ = 0.5f;
  }
  
  inline float value() const {
    return y1_ + 0.5f;
    512e:	vmov.f32	s3, s14
    E::DelayLine<Memory, 5> dapb;
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    5132:	vldr	s9, [sl, #200]	; 0xc8
    5136:	vfma.f32	s8, s0, s14
    513a:	ldr.w	r3, [sl, #160]	; 0xa0
    513e:	vmul.f32	s0, s15, s0
    5142:	ldr.w	r2, [sl, #164]	; 0xa4
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5146:	vldr	s13, [pc, #-156]	; 50ac <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fc>
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    514a:	vmov.f32	s11, #100	; 0x3f200000  0.625
    514e:	vldr	s2, [pc, #-140]	; 50c4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
    }
  }
#else
  inline int32_t Clip16(int32_t x) {
    int32_t result;
    __asm ("ssat %0, %1, %2" : "=r" (result) :  "I" (16), "r" (x) );
    5152:	vldr	s12, [pc, #-164]	; 50b0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x400>
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    5156:	vldr	s4, [pc, #-164]	; 50b4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x404>
    515a:	vldr	s5, [pc, #-164]	; 50b8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x408>
    515e:	vldr	s6, [pc, #-164]	; 50bc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40c>
    5162:	vldr	s7, [pc, #-164]	; 50c0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x410>
    5166:	ldr.w	r8, [sp, #4]
    516a:	ldr.w	r9, [sp]
    516e:	b.n	53ea <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73a>
    5170:	vldr	s1, [sl, #168]	; 0xa8
    5174:	vadd.f32	s1, s1, s3
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    5178:	add.w	r1, r3, #125	; 0x7d
    while (size--) {
      float wet;
      engine_.Start(&c);
      c.Read(*in_out);
    517c:	vldr	s10, [r9]
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    5180:	vmov.f32	s15, s5
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    5184:	add.w	r4, r3, #306	; 0x132
    5188:	ubfx	r1, r1, #0, #13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    518c:	vadd.f32	s22, s10, s2
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    5190:	ubfx	fp, r3, #0, #13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    5194:	ubfx	r4, r4, #0, #13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5198:	ldrsh.w	r1, [r2, r1, lsl #1]
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    519c:	vfma.f32	s15, s1, s4
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    51a0:	vmov.f32	s16, #228	; 0xbf200000 -0.625
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    51a4:	add.w	lr, r3, #127	; 0x7f
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    51a8:	vmov	s20, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    51ac:	add.w	r1, r3, #308	; 0x134
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    51b0:	vmov.f32	s19, s7
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    51b4:	add.w	r0, r3, #576	; 0x240
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    51b8:	vcvt.f32.s32	s20, s20
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    51bc:	ubfx	r1, r1, #0, #13
    51c0:	ubfx	lr, lr, #0, #13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    51c4:	ubfx	r0, r0, #0, #13
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
    51c8:	vcvt.s32.f32	s17, s15
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    51cc:	str	r1, [sp, #0]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    51ce:	vmul.f32	s20, s20, s13
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    51d2:	addw	r1, r3, #578	; 0x242
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    51d6:	vfma.f32	s19, s1, s6
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    51da:	movw	r7, #4689	; 0x1251
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    51de:	ubfx	r5, r1, #0, #13
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    51e2:	vcvt.f32.s32	s14, s17
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    51e6:	vfma.f32	s22, s20, s11
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    51ea:	vmov	r1, s17
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    51ee:	str	r5, [sp, #4]
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    51f0:	movw	r6, #4688	; 0x1250
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    51f4:	vsub.f32	s14, s15, s14
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    51f8:	add	r1, r3
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    51fa:	vmov.f32	s15, s20
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    while (size--) {
    51fe:	add.w	r8, r8, #4294967295
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
    5202:	vcvt.s32.f32	s21, s19
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    5206:	addw	ip, r1, #579	; 0x243
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    520a:	addw	r1, r1, #578	; 0x242
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    520e:	vmov.f32	s18, #104	; 0x3f400000  0.750
    5212:	vmul.f32	s23, s22, s12
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    5216:	ubfx	ip, ip, #0, #13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    521a:	vfma.f32	s15, s22, s16
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    521e:	ubfx	r1, r1, #0, #13
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    5222:	vcvt.f32.s32	s20, s21
    5226:	cmp.w	r8, #4294967295
    522a:	vcvt.s32.f32	s17, s23
      c.WriteAllPass(dapa, kap);
      c.Read(dapb TAIL, kap);
      c.WriteAllPass(dapb, -kap);
      c.Write(del, 2.0f);
      c.Write(wet, 0.0f);
      *in_out += amount * (wet - *in_out);
    522e:	vmov.f32	s1, #0	; 0x40000000  2.0
    5232:	vsub.f32	s19, s19, s20
    5236:	vmov	r5, s17
    523a:	ssat	r5, #16, r5
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    523e:	strh.w	r5, [r2, fp, lsl #1]
    5242:	addw	r5, r3, #1023	; 0x3ff
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5246:	ldrsh.w	r4, [r2, r4, lsl #1]
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    524a:	ubfx	r5, r5, #0, #13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    524e:	vmov	s17, r4
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    5252:	vmov	r4, s21
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5256:	vcvt.f32.s32	s17, s17
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    525a:	add	r4, r3
      float b = DataType<format>::Decompress(
    525c:	add	r7, r4
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    525e:	add	r6, r4
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5260:	vmul.f32	s17, s17, s13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    5264:	addw	r4, r3, #2675	; 0xa73
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    5268:	ubfx	r7, r7, #0, #13
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    526c:	ubfx	r6, r6, #0, #13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    5270:	ubfx	r4, r4, #0, #13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    5274:	vfma.f32	s15, s17, s11
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    5278:	str	r4, [sp, #8]
    527a:	movw	r4, #4686	; 0x124e
    527e:	add	r4, r3
    5280:	ubfx	r4, r4, #0, #13
    5284:	vmul.f32	s20, s15, s12
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    5288:	vfma.f32	s17, s15, s16
    528c:	vcvt.s32.f32	s15, s20
    5290:	vmov	fp, s15
    5294:	ssat	fp, #16, fp
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    5298:	strh.w	fp, [r2, lr, lsl #1]
    529c:	addw	fp, r3, #2677	; 0xa75
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    52a0:	ldrsh.w	lr, [r2, r0, lsl #1]
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    52a4:	movw	r0, #4688	; 0x1250
    52a8:	ubfx	fp, fp, #0, #13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    52ac:	vmov	s15, lr
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    52b0:	add	r0, r3
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    52b2:	vcvt.f32.s32	s15, s15
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    52b6:	ubfx	r0, r0, #0, #13
    52ba:	str	r0, [sp, #12]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    52bc:	vmul.f32	s15, s15, s13
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    52c0:	ldr	r0, [sp, #0]
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    52c2:	vfma.f32	s17, s15, s11
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
      previous_read_ = x;
      accumulator_ += x * scale;
    52c6:	vfma.f32	s15, s17, s16
    52ca:	vmul.f32	s20, s17, s12
    52ce:	vmov.f32	s17, s15
    52d2:	vcvt.s32.f32	s15, s20
    52d6:	vmov	lr, s15
    52da:	ssat	lr, #16, lr
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    52de:	strh.w	lr, [r2, r0, lsl #1]
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    52e2:	ldrsh.w	lr, [r2, ip, lsl #1]
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    52e6:	ldr	r0, [sp, #4]
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    52e8:	vmov	s15, lr
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    52ec:	ldrsh.w	lr, [r2, r1, lsl #1]
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    52f0:	vcvt.f32.s32	s15, s15
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    52f4:	vmov	s20, lr
    52f8:	vcvt.f32.s32	s20, s20
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    52fc:	vmul.f32	s15, s15, s13
    5300:	vfms.f32	s15, s20, s13
    5304:	vmul.f32	s15, s15, s14
      previous_read_ = x;
      accumulator_ += x * scale;
    5308:	vmov.f32	s14, s17
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    530c:	vfma.f32	s15, s20, s13
      previous_read_ = x;
      accumulator_ += x * scale;
    5310:	vfma.f32	s14, s15, s11
    5314:	vmul.f32	s17, s14, s12
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    5318:	vfma.f32	s15, s14, s16
    531c:	vcvt.s32.f32	s14, s17
    5320:	vmov	r1, s14
    5324:	ssat	r1, #16, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    5328:	strh.w	r1, [r2, r0, lsl #1]
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    532c:	ldrsh.w	r0, [r2, r7, lsl #1]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5330:	ldr	r1, [sp, #8]
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    5332:	vmov	s17, r0
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5336:	ldrsh.w	r0, [r2, r6, lsl #1]
    533a:	ldrsh.w	r1, [r2, r1, lsl #1]
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    533e:	vcvt.f32.s32	s17, s17
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5342:	vmov	s20, r0
    5346:	vmov	s14, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    534a:	ldr	r0, [sp, #12]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    534c:	vcvt.f32.s32	s20, s20
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    5350:	vmul.f32	s17, s17, s13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5354:	vcvt.f32.s32	s14, s14
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    5358:	vfms.f32	s17, s20, s13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    535c:	vmul.f32	s14, s14, s13
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    5360:	vmul.f32	s17, s17, s19
    5364:	vfma.f32	s17, s20, s13
    5368:	vfma.f32	s15, s17, s8
    536c:	vsub.f32	s15, s15, s9
    5370:	vfma.f32	s9, s15, s18
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    5374:	vmov.f32	s15, s9
    5378:	vfma.f32	s15, s14, s16
    537c:	vfma.f32	s14, s15, s11
    5380:	vmul.f32	s17, s15, s12
    5384:	vmov.f32	s15, s14
    5388:	vcvt.s32.f32	s14, s17
    538c:	vmov	r1, s14
    5390:	ssat	r1, #16, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    5394:	strh.w	r1, [r2, r5, lsl #1]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    5398:	ldrsh.w	r1, [r2, r4, lsl #1]
    539c:	vmov	s14, r1
    53a0:	vcvt.f32.s32	s14, s14
    53a4:	vmul.f32	s14, s14, s13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    53a8:	vfma.f32	s15, s14, s11
    }

    template<typename D>
    inline void WriteAllPass(D& d, int32_t offset, float scale) {
      Write(d, offset, scale);
      accumulator_ += previous_read_;
    53ac:	vfma.f32	s14, s15, s16
    53b0:	vmul.f32	s15, s15, s12
    53b4:	vcvt.s32.f32	s15, s15
    53b8:	vmov	r1, s15
    53bc:	vmov.f32	s15, s10
    53c0:	ssat	r1, #16, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    53c4:	strh.w	r1, [r2, fp, lsl #1]
    53c8:	vfnms.f32	s15, s14, s1
    53cc:	vmul.f32	s14, s14, s12
    53d0:	vcvt.s32.f32	s14, s14
    53d4:	vfma.f32	s10, s15, s0
    53d8:	vmov	r1, s14
    53dc:	ssat	r1, #16, r1
    53e0:	strh.w	r1, [r2, r0, lsl #1]
    53e4:	vstmia	r9!, {s10}
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    while (size--) {
    53e8:	beq.n	543c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x78c>
    lfo_[index].template Init<stmlib::COSINE_OSCILLATOR_APPROXIMATE>(frequency * 32.0f);
  }
  
  inline void Start(Context* c) {
    --write_ptr_;
    if (write_ptr_ < 0) {
    53ea:	subs	r3, #1
      write_ptr_ += size;
    53ec:	it	mi
    53ee:	addmi.w	r3, r3, #8192	; 0x2000
    }
    c->accumulator_ = 0.0f;
    c->previous_read_ = 0.0f;
    c->buffer_ = buffer_;
    c->write_ptr_ = write_ptr_;
    if ((write_ptr_ & 31) == 0) {
    53f2:	lsls	r1, r3, #27
  }
  
  inline void Start(Context* c) {
    --write_ptr_;
    if (write_ptr_ < 0) {
      write_ptr_ += size;
    53f4:	str.w	r3, [sl, #160]	; 0xa0
    }
    c->accumulator_ = 0.0f;
    c->previous_read_ = 0.0f;
    c->buffer_ = buffer_;
    c->write_ptr_ = write_ptr_;
    if ((write_ptr_ & 31) == 0) {
    53f8:	bne.w	5170 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c0>
  }

  inline float Next() {
    float temp = y0_;
    53fc:	vldr	s10, [sl, #172]	; 0xac
    y0_ = iir_coefficient_ * y0_ - y1_;
    5400:	vldr	s14, [sl, #168]	; 0xa8
    5404:	vldr	s17, [sl, #176]	; 0xb0
    y1_ = temp;
    return temp + 0.5f;
    5408:	vadd.f32	s1, s10, s3
  inline float value() const {
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    540c:	vldr	s16, [sl, #188]	; 0xbc
    y0_ = iir_coefficient_ * y0_ - y1_;
    5410:	vldr	s15, [sl, #184]	; 0xb8
    5414:	vfnms.f32	s14, s10, s17
    5418:	vldr	s17, [sl, #192]	; 0xc0
    y1_ = temp;
    541c:	vstr	s10, [sl, #168]	; 0xa8
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    y0_ = iir_coefficient_ * y0_ - y1_;
    5420:	vfnms.f32	s15, s16, s17
    y1_ = temp;
    5424:	vstr	s16, [sl, #184]	; 0xb8
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    y0_ = iir_coefficient_ * y0_ - y1_;
    5428:	vstr	s14, [sl, #172]	; 0xac
    542c:	vstr	s15, [sl, #188]	; 0xbc
    5430:	b.n	5178 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c8>
      float* out,
      float* aux,
      size_t size) {
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    5432:	vmov.f32	s16, s10
    5436:	b.n	4e68 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    E::DelayLine<Memory, 5> dapb;
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    5438:	vldr	s9, [sl, #200]	; 0xc8
      c.Write(del, 2.0f);
      c.Write(wet, 0.0f);
      *in_out += amount * (wet - *in_out);
      ++in_out;
    }
    lp_decay_ = lp;
    543c:	vstr	s9, [sl, #200]	; 0xc8
      0.8f * diffusion * diffusion,
      0.5f * diffusion + 0.25f,
      out,
      size);
}
    5440:	add	sp, #20
    5442:	vpop	{d8-d11}
    5446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    544a:	vldr	s0, [pc, #-904]	; 50c4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
    544e:	b.n	4df4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x144>
    5450:	vldr	s14, [pc, #-908]	; 50c8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x418>
    5454:	vldr	s15, [pc, #-908]	; 50cc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
    5458:	vfma.f32	s15, s13, s14
    545c:	vcvt.s32.f32	s14, s15
    5460:	vmov	r2, s14
    5464:	vcvt.f32.s32	s14, s14
    5468:	vsub.f32	s15, s15, s14
    546c:	vmov.f32	s14, s15
    5470:	vcvt.s32.f32	s14, s14, #8
    5474:	vmov	r3, s14
    5478:	b.n	4dac <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfc>
    547a:	vldr	s14, [pc, #-944]	; 50cc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
    547e:	vadd.f32	s15, s15, s14
    5482:	vcvt.s32.f32	s14, s15
    5486:	vmov	r2, s14
    548a:	vcvt.f32.s32	s14, s14
    548e:	vsub.f32	s15, s15, s14
    5492:	vmov.f32	s14, s15
    5496:	vcvt.s32.f32	s14, s14, #8
    549a:	vmov	r3, s14
    549e:	b.n	4d60 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb0>
    54a0:	vldr	s14, [pc, #44]	; 54d0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x820>
    54a4:	vadd.f32	s15, s15, s14
    54a8:	vcvt.s32.f32	s14, s15
    54ac:	vmov	r2, s14
    54b0:	vcvt.f32.s32	s14, s14
    54b4:	vsub.f32	s15, s15, s14
    54b8:	vmov.f32	s14, s15
    54bc:	vcvt.s32.f32	s14, s14, #8
    54c0:	vmov	r3, s14
    54c4:	b.n	4cf8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    54c6:	vldr	s14, [pc, #12]	; 54d4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x824>
    54ca:	vldr	s6, [pc, #12]	; 54d8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x828>
    54ce:	b.n	5034 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
    54d0:	.word	0x43000000
    54d4:	.word	0x3d867ebe
    54d8:	.word	0x4039bdfa

000054dc <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)>:

namespace plaits {

using namespace stmlib;

void HiHatEngine::Init(BufferAllocator* allocator) {
    54dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 public:
  SquareNoise() { }
  ~SquareNoise() { }

  void Init() {
    std::fill(&phase_[0], &phase_[6], 0);
    54e0:	add.w	r3, r0, #32
 public:
  HiHat() { }
  ~HiHat() { }

  void Init() {
    envelope_ = 0.0f;
    54e4:	movs	r5, #0
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    54e6:	movs	r4, #0
 public:
  SquareNoise() { }
  ~SquareNoise() { }

  void Init() {
    std::fill(&phase_[0], &phase_[6], 0);
    54e8:	add.w	r2, r0, #56	; 0x38
 public:
  HiHat() { }
  ~HiHat() { }

  void Init() {
    envelope_ = 0.0f;
    54ec:	str	r5, [r0, #16]
    noise_clock_ = 0.0f;
    54ee:	str	r5, [r0, #20]
    noise_sample_ = 0.0f;
    54f0:	str	r5, [r0, #24]
    sustain_gain_ = 0.0f;
    54f2:	str	r5, [r0, #28]
    54f4:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    54f8:	cmp	r2, r3
    54fa:	bne.n	54f4 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0x18>
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    54fc:	movs	r5, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    54fe:	ldr	r6, [pc, #204]	; (55cc <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf0>)
    r_ = 1.0f / resonance;
    5500:	ldr.w	r9, [pc, #208]	; 55d4 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf8>
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    5504:	mov.w	r4, #1056964608	; 0x3f000000
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5508:	ldr.w	r8, [pc, #204]	; 55d8 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xfc>
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    550c:	mov.w	ip, #1065353216	; 0x3f800000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5510:	str	r6, [r0, #56]	; 0x38
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    5512:	mov	r2, r5
    5514:	str	r6, [r0, #76]	; 0x4c
    5516:	mov	r3, r0
    5518:	add.w	lr, r0, #168	; 0xa8
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;
    551c:	movs	r7, #1

    frequency_ = 0.001f;
    551e:	ldr	r6, [pc, #176]	; (55d0 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf4>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    5520:	str	r5, [r0, #72]	; 0x48
    5522:	str	r5, [r0, #68]	; 0x44
    5524:	str	r5, [r0, #92]	; 0x5c
    5526:	str	r5, [r0, #88]	; 0x58
 public:
  HiHat() { }
  ~HiHat() { }

  void Init() {
    envelope_ = 0.0f;
    5528:	str	r5, [r0, #96]	; 0x60
    noise_clock_ = 0.0f;
    552a:	str	r5, [r0, #100]	; 0x64
    noise_sample_ = 0.0f;
    552c:	str	r5, [r0, #104]	; 0x68
    sustain_gain_ = 0.0f;
    552e:	str	r5, [r0, #108]	; 0x6c
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    5530:	str.w	r9, [r0, #60]	; 0x3c
    5534:	str.w	r9, [r0, #80]	; 0x50
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5538:	str.w	r8, [r0, #64]	; 0x40
    553c:	str.w	r8, [r0, #84]	; 0x54
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    5540:	str	r4, [r3, #112]	; 0x70
    5542:	adds	r3, #28
    next_sample_ = 0.0f;
    5544:	str	r2, [r3, #88]	; 0x58
    5546:	movs	r5, #0
    lp_state_ = 1.0f;
    5548:	str.w	ip, [r3, #92]	; 0x5c
    hp_state_ = 0.0f;
    554c:	str	r2, [r3, #96]	; 0x60
    high_ = true;
    554e:	strb.w	r7, [r3, #100]	; 0x64

    frequency_ = 0.001f;
    5552:	str	r6, [r3, #104]	; 0x68
    pw_ = 0.5f;
    5554:	str	r4, [r3, #108]	; 0x6c
 public:
  RingModNoise() { }
  ~RingModNoise() { }

  void Init() {
    for (int i = 0; i < 6; ++i) {
    5556:	cmp	r3, lr
    5558:	bne.n	5540 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0x64>
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    555a:	ldr	r2, [r1, #8]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    555c:	ldr	r6, [pc, #108]	; (55cc <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf0>)
    r_ = 1.0f / resonance;
    555e:	ldr	r4, [pc, #116]	; (55d4 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf8>)
    5560:	cmp	r2, #95	; 0x5f
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5562:	ldr	r3, [pc, #116]	; (55d8 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xfc>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    5564:	str.w	r5, [r0, #296]	; 0x128
    5568:	str.w	r5, [r0, #292]	; 0x124
    556c:	str.w	r5, [r0, #316]	; 0x13c
    5570:	str.w	r5, [r0, #312]	; 0x138

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5574:	str.w	r6, [r0, #280]	; 0x118
    5578:	str.w	r6, [r0, #300]	; 0x12c
    r_ = 1.0f / resonance;
    557c:	str.w	r4, [r0, #284]	; 0x11c
    5580:	str.w	r4, [r0, #304]	; 0x130
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5584:	str.w	r3, [r0, #288]	; 0x120
    5588:	str.w	r3, [r0, #308]	; 0x134
    558c:	bls.n	55b8 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xdc>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    558e:	ldr	r4, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    5590:	sub.w	r3, r2, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    5594:	add.w	r5, r4, #96	; 0x60
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    5598:	cmp	r3, #95	; 0x5f
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
      free_ -= size_bytes;
    559a:	str	r3, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    559c:	str	r5, [r1, #0]
  hi_hat_1_.Init();
  hi_hat_2_.Init();
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    559e:	str.w	r4, [r0, #320]	; 0x140
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    55a2:	bls.n	55c6 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xea>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    55a4:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    55a6:	subs	r2, #192	; 0xc0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    55a8:	add.w	r4, r3, #96	; 0x60
      free_ -= size_bytes;
    55ac:	str	r2, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    55ae:	str	r4, [r1, #0]
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
    55b0:	str.w	r3, [r0, #324]	; 0x144
}
    55b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
using namespace stmlib;

void HiHatEngine::Init(BufferAllocator* allocator) {
  hi_hat_1_.Init();
  hi_hat_2_.Init();
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    55b8:	movs	r3, #0
    55ba:	str.w	r3, [r0, #320]	; 0x140
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
    55be:	str.w	r3, [r0, #324]	; 0x144
}
    55c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    55c6:	movs	r3, #0
    55c8:	b.n	55b0 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xd4>
    55ca:	nop
    55cc:	.word	0x3d00ba22
    55d0:	.word	0x3a83126f
    55d4:	.word	0x3c23d70a
    55d8:	.word	0x3f7faaca

000055dc <plaits::HiHatEngine::Reset()>:

void HiHatEngine::Reset() {
    55dc:	bx	lr
    55de:	nop

000055e0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    55e0:	vmov.f32	s13, #34	; 0x41100000  9.0
    55e4:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    55e8:	vldr	s14, [pc, #740]	; 58d0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f0>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    55ec:	vsub.f32	s15, s15, s13
void HiHatEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    55f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    55f4:	vcmpe.f32	s15, s14
    55f8:	mov	r4, r0
    55fa:	mov	r7, r2
    55fc:	mov	r6, r3
    55fe:	vmrs	APSR_nzcv, fpscr
    5602:	vpush	{d8-d14}
    5606:	sub	sp, #164	; 0xa4
    5608:	str	r1, [sp, #36]	; 0x24
    560a:	ldr	r5, [sp, #256]	; 0x100
    560c:	bmi.w	68a8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12c8>
    5610:	vldr	s14, [pc, #704]	; 58d4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f4>
    5614:	vcmpe.f32	s15, s14
    5618:	vmrs	APSR_nzcv, fpscr
    561c:	ble.w	5b26 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x546>
    5620:	movs	r3, #0
    5622:	movs	r2, #255	; 0xff
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    5624:	ldr	r0, [sp, #36]	; 0x24
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    5626:	vmov.f32	s9, #112	; 0x3f800000  1.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    562a:	vldr	s15, [pc, #748]	; 5918 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
    562e:	vldr	s4, [r0, #12]
    5632:	vmov.f32	s11, s15
    5636:	vldr	s14, [pc, #672]	; 58d8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f8>
      float noisiness,
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
    563a:	vneg.f32	s13, s4
    563e:	vldr	s12, [pc, #668]	; 58dc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2fc>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5642:	ldr	r1, [pc, #668]	; (58e0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x300>)
    5644:	vldr	s8, [pc, #668]	; 58e4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x304>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    5648:	vfma.f32	s11, s13, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    564c:	add.w	r3, r1, r3, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    5650:	vfma.f32	s15, s13, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5654:	ldr	r1, [pc, #656]	; (58e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>)
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5656:	vldr	s12, [r3]
    565a:	add.w	r2, r1, r2, lsl #2
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  hi_hat_1_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
    565e:	ldrb	r1, [r0, #0]
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    5660:	vldr	s3, [r0, #20]
    5664:	and.w	r3, r1, #2
      f0,
      parameters.timbre,
      parameters.morph,
      parameters.harmonics,
    5668:	vldr	s0, [r0, #16]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    566c:	vmov.f32	s14, s11
    5670:	vldr	s11, [r2]
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    5674:	vcvt.s32.f32	s13, s15
    5678:	uxtb	r3, r3
    567a:	vmul.f32	s12, s11, s12
  hi_hat_1_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
    567e:	vldr	s11, [r0, #8]
    5682:	vcvt.s32.f32	s10, s14
    5686:	str	r3, [sp, #40]	; 0x28

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5688:	vcvt.f32.s32	s5, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    568c:	ldr	r3, [pc, #600]	; (58e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>)
        -decay * 84.0f);
    568e:	vldr	s6, [pc, #604]	; 58ec <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x30c>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5692:	vcvt.f32.s32	s2, s10

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5696:	vmov	r2, s10
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    569a:	vsub.f32	s15, s15, s5
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    569e:	vldr	s7, [pc, #592]	; 58f0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x310>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    56a2:	add.w	r3, r3, r2, lsl #2
    56a6:	vmov	r2, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    56aa:	vsub.f32	s14, s14, s2
    56ae:	vldr	s1, [pc, #580]	; 58f4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x314>
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    56b2:	vldr	s10, [r3]
    56b6:	vmul.f32	s15, s15, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    56ba:	ldr	r3, [pc, #556]	; (58e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>)
    56bc:	vmul.f32	s12, s12, s1
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    56c0:	vmul.f32	s14, s14, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    56c4:	add.w	r3, r3, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    56c8:	vcvt.s32.f32	s15, s15
    56cc:	vmov.f32	s8, s9
    56d0:	vcvt.s32.f32	s14, s14
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    56d4:	vldr	s13, [r3]
    56d8:	ldr	r3, [pc, #516]	; (58e0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x300>)
    56da:	vmov	r0, s15
    56de:	vmov	r2, s14
    56e2:	add.w	r2, r3, r2, lsl #2
    56e6:	add.w	r3, r3, r0, lsl #2
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    56ea:	vldr	s14, [r2]
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    56ee:	vldr	s15, [r3]
    
    if (trigger) {
    56f2:	ands.w	r3, r1, #1
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    56f6:	vnmul.f32	s14, s10, s14
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    56fa:	vnmul.f32	s15, s13, s15
    
    if (trigger) {
    56fe:	str	r3, [sp, #64]	; 0x40
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    5700:	vfma.f32	s8, s14, s6
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    5704:	vmov.f32	s14, s9
    5708:	vfma.f32	s14, s15, s7
    570c:	vmov.f32	s7, s14
    
    if (trigger) {
    5710:	beq.n	5736 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x156>
      envelope_ = (1.5f + 0.5f * (1.0f - decay)) * (0.3f + 0.7f * accent);
    5712:	vsub.f32	s9, s9, s4
    5716:	vldr	s10, [pc, #480]	; 58f8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x318>
    571a:	vmov.f32	s13, #96	; 0x3f000000  0.5
    571e:	vldr	s14, [pc, #476]	; 58fc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x31c>
    5722:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    5726:	vfma.f32	s14, s3, s10
    572a:	vfma.f32	s15, s9, s13
    572e:	vmul.f32	s15, s15, s14
    5732:	vstr	s15, [r4, #16]
    5736:	add.w	r3, r4, #28
    573a:	add	r2, sp, #136	; 0x88
    
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratios[6] = {
        // Nominal f0: 414 Hz
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
    573c:	ldr.w	ip, [pc, #464]	; 5910 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x330>
    5740:	add.w	lr, sp, #88	; 0x58
    5744:	str	r3, [sp, #28]
    if (trigger) {
      envelope_ = (1.5f + 0.5f * (1.0f - decay)) * (0.3f + 0.7f * accent);
    }

    // Render the metallic noise.
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);
    5746:	vadd.f32	s5, s12, s12
    574a:	str	r2, [sp, #32]
    574c:	add.w	r8, sp, #88	; 0x58
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
      if (f >= 0.499f) f = 0.499f;
    5750:	vldr	s14, [pc, #428]	; 5900 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x320>
    5754:	vldr	s13, [pc, #428]	; 5904 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x324>
    
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratios[6] = {
        // Nominal f0: 414 Hz
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
    5758:	ldr.w	r9, [sp, #32]
    575c:	ldmia.w	ip!, {r0, r1, r2, r3}
    5760:	stmia.w	lr!, {r0, r1, r2, r3}
    5764:	ldmia.w	ip, {r0, r1}
    5768:	ldr	r3, [sp, #28]
    576a:	add	r2, sp, #112	; 0x70
    576c:	stmia.w	lr, {r0, r1}
    5770:	add.w	lr, r4, #52	; 0x34
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
    5774:	vldmia	r8!, {s15}
      if (f >= 0.499f) f = 0.499f;
    5778:	ldr	r1, [pc, #396]	; (5908 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x328>)
    };
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
    577a:	vmul.f32	s15, s5, s15
      if (f >= 0.499f) f = 0.499f;
    577e:	vcmpe.f32	s15, s14
    5782:	vmrs	APSR_nzcv, fpscr
    5786:	bge.n	5794 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b4>
    5788:	vmul.f32	s15, s15, s13
    578c:	vcvt.u32.f32	s15, s15
    5790:	vmov	r1, s15
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    5794:	ldr.w	r0, [r3, #4]!
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
    5798:	str.w	r1, [r2], #4
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
    579c:	cmp	lr, r3
      float f = f0 * ratios[i];
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    579e:	str.w	r0, [r9], #4
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
    57a2:	bne.n	5774 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x194>
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    57a4:	subs	r2, r5, #1
    57a6:	cmp	r5, #0
    57a8:	beq.w	68fa <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x131a>
    57ac:	ldr	r3, [sp, #112]	; 0x70
      noise += (phase[1] >> 31);
      noise += (phase[2] >> 31);
      noise += (phase[3] >> 31);
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    57ae:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    57b2:	ldr	r1, [sp, #116]	; 0x74
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    57b4:	mov	sl, r7
    57b6:	mov	r0, r3
    57b8:	str	r3, [sp, #0]
    57ba:	ldr	r3, [sp, #136]	; 0x88
    57bc:	mov	r9, r2
    57be:	str	r1, [sp, #8]
    57c0:	add	r0, r3
    57c2:	ldr	r1, [sp, #140]	; 0x8c
    57c4:	ldr	r3, [sp, #8]
    57c6:	str	r0, [sp, #60]	; 0x3c
    57c8:	adds	r1, r3, r1
    57ca:	ldr	r0, [sp, #120]	; 0x78
    57cc:	ldr	r3, [sp, #148]	; 0x94
    57ce:	str	r1, [sp, #56]	; 0x38
    57d0:	ldr	r1, [sp, #124]	; 0x7c
    57d2:	str	r0, [sp, #12]
    57d4:	str	r1, [sp, #16]
    57d6:	ldr	r0, [sp, #144]	; 0x90
    57d8:	ldr	r1, [sp, #12]
    57da:	ldr.w	r8, [sp, #60]	; 0x3c
    57de:	adds	r0, r1, r0
    57e0:	ldr	r1, [sp, #152]	; 0x98
    57e2:	ldr.w	ip, [sp, #56]	; 0x38
    57e6:	str	r0, [sp, #52]	; 0x34
    57e8:	ldr	r0, [sp, #128]	; 0x80
    57ea:	ldr.w	lr, [sp, #52]	; 0x34
    57ee:	str	r0, [sp, #20]
    57f0:	ldr	r0, [sp, #16]
      noise += (phase[1] >> 31);
      noise += (phase[2] >> 31);
      noise += (phase[3] >> 31);
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    57f2:	vldr	s14, [pc, #280]	; 590c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x32c>
    57f6:	adds	r3, r0, r3
    57f8:	ldr	r0, [sp, #20]
    57fa:	str	r3, [sp, #48]	; 0x30
    57fc:	adds	r1, r0, r1
    57fe:	ldr	r3, [sp, #132]	; 0x84
    5800:	str	r1, [sp, #44]	; 0x2c
    5802:	str	r3, [sp, #24]
    5804:	ldr	r1, [sp, #24]
    5806:	ldr	r3, [sp, #156]	; 0x9c
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    5808:	ldr	r0, [sp, #48]	; 0x30
    580a:	adds	r3, r1, r3
    580c:	str	r3, [sp, #68]	; 0x44
    580e:	mov	r1, r3
    5810:	str	r4, [sp, #76]	; 0x4c
    5812:	ldr	r3, [sp, #8]
    5814:	str	r7, [sp, #80]	; 0x50
    5816:	str	r6, [sp, #84]	; 0x54
    5818:	str	r5, [sp, #256]	; 0x100
    581a:	ldr.w	fp, [sp, #44]	; 0x2c
    581e:	ldr	r4, [sp, #12]
    5820:	ldr	r7, [sp, #24]
    5822:	ldr	r6, [sp, #20]
    5824:	ldr	r5, [sp, #16]
    5826:	str	r2, [sp, #72]	; 0x48
    5828:	str	r3, [sp, #4]
      phase[3] += increment[3];
      phase[4] += increment[4];
      phase[5] += increment[5];
      uint32_t noise = 0;
      noise += (phase[0] >> 31);
      noise += (phase[1] >> 31);
    582a:	mov.w	r3, ip, lsr #31
      noise += (phase[2] >> 31);
      noise += (phase[3] >> 31);
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    582e:	vmov.f32	s10, s13
    5832:	ldr	r2, [sp, #4]
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    5834:	add.w	r9, r9, #4294967295
      phase[3] += increment[3];
      phase[4] += increment[4];
      phase[5] += increment[5];
      uint32_t noise = 0;
      noise += (phase[0] >> 31);
      noise += (phase[1] >> 31);
    5838:	add.w	r3, r3, r8, lsr #31
    583c:	add	ip, r2
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    583e:	cmp.w	r9, #4294967295
      phase[4] += increment[4];
      phase[5] += increment[5];
      uint32_t noise = 0;
      noise += (phase[0] >> 31);
      noise += (phase[1] >> 31);
      noise += (phase[2] >> 31);
    5842:	add.w	r3, r3, lr, lsr #31
    5846:	ldr	r2, [sp, #0]
    5848:	add	lr, r4
      noise += (phase[3] >> 31);
    584a:	add.w	r3, r3, r0, lsr #31
    584e:	add	r8, r2
    5850:	add	r0, r5
      noise += (phase[4] >> 31);
    5852:	add.w	r3, r3, fp, lsr #31
    5856:	add	fp, r6
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    5858:	add.w	r3, r3, r1, lsr #31
    585c:	add	r1, r7
    585e:	vmov	s15, r3
    5862:	vcvt.f32.s32	s15, s15
    5866:	vfma.f32	s10, s15, s14
    586a:	vstmia	sl!, {s10}
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    586e:	bne.n	582a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>
    5870:	add	r2, sp, #72	; 0x48
    5872:	ldr	r1, [sp, #60]	; 0x3c
    5874:	ldr	r3, [sp, #0]
    5876:	ldr	r0, [sp, #56]	; 0x38
    5878:	ldr	r6, [sp, #84]	; 0x54
    587a:	ldr	r5, [sp, #256]	; 0x100
    587c:	ldmia	r2, {r2, r4, r7}
    587e:	mla	r3, r3, r2, r1
    5882:	ldr	r1, [sp, #8]
    5884:	mla	r9, r1, r2, r0
    5888:	ldr	r0, [sp, #12]
    588a:	str	r3, [sp, #136]	; 0x88
    588c:	mov	r1, r0
    588e:	ldr	r0, [sp, #52]	; 0x34
    5890:	str.w	r9, [sp, #140]	; 0x8c
    5894:	mla	r0, r1, r2, r0
    5898:	ldr	r1, [sp, #16]
    589a:	mov	lr, r1
    589c:	ldr	r1, [sp, #48]	; 0x30
    589e:	str	r0, [sp, #144]	; 0x90
    58a0:	mla	lr, lr, r2, r1
    58a4:	ldr	r1, [sp, #20]
    58a6:	mov	ip, r1
    58a8:	ldr	r1, [sp, #44]	; 0x2c
    58aa:	str.w	lr, [sp, #148]	; 0x94
    58ae:	mla	ip, ip, r2, r1
    58b2:	ldr	r1, [sp, #24]
    58b4:	mov	r8, r1
    58b6:	ldr	r1, [sp, #68]	; 0x44
    58b8:	str.w	ip, [sp, #152]	; 0x98
    58bc:	mla	r8, r8, r2, r1
    58c0:	str.w	r8, [sp, #156]	; 0x9c
    58c4:	movs	r1, #0
    58c6:	ldr	r0, [sp, #28]
    58c8:	ldr.w	lr, [sp, #32]
    58cc:	b.n	5920 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x340>
    58ce:	nop
    58d0:	.word	0xc3000000
    58d4:	.word	0x42fe0000
    58d8:	.word	0x42a80000
    58dc:	.word	0x42100000
    58e0:	.word	0x20000428
    58e4:	.word	0x43800000
    58e8:	.word	0x20000024
    58ec:	.word	0x3b449ba6
    58f0:	.word	0x3b23d70a
    58f4:	.word	0x39969651
    58f8:	.word	0x3f333333
    58fc:	.word	0x3e99999a
    5900:	.word	0x3eff7cee
    5904:	.word	0x4f800000
    5908:	.word	0x7fbe7700
    590c:	.word	0x3ea8f5c3
    5910:	.word	0x2001f244
    5914:	.word	0x42900000
    5918:	.word	0x43000000
    591c:	ldr.w	r3, [lr, #4]!
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    }
  
    for (int i = 0; i < 6; ++i) {
    5920:	adds	r1, #1
      phase_[i] = phase[i];
    5922:	str.w	r3, [r0, #4]!
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    }
  
    for (int i = 0; i < 6; ++i) {
    5926:	cmp	r1, #6
    5928:	bne.n	591c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x33c>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    592a:	vldr	s14, [pc, #-24]	; 5914 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x334>
    592e:	vldr	s15, [pc, #-24]	; 5918 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5932:	ldr	r3, [pc, #712]	; (5bfc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x61c>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    5934:	vfma.f32	s15, s11, s14
    // Render the metallic noise.
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);

    // Apply BPF on the metallic noise.
    float cutoff = 150.0f / kSampleRate * stmlib::SemitonesToRatio(
        tone * 72.0f);
    5938:	vldr	s9, [pc, #708]	; 5c00 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x620>
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    593c:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5940:	vcvt.f32.s32	s10, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5944:	vmov	r1, s14
    5948:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    594c:	vsub.f32	s15, s15, s10
    5950:	vldr	s13, [r3]
    5954:	ldr	r3, [pc, #684]	; (5c04 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x624>)
    5956:	vcvt.s32.f32	s15, s15, #8
    595a:	vmov	r1, s15
    595e:	add.w	r3, r3, r1, lsl #2
    5962:	vldr	s14, [r3]
    5966:	vmul.f32	s15, s14, s13
    596a:	vmul.f32	s15, s15, s9
    CONSTRAIN(cutoff, 0.0f, 16000.0f / kSampleRate);
    596e:	vcmpe.f32	s15, #0.0
    5972:	vmrs	APSR_nzcv, fpscr
    5976:	bmi.w	68dc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12fc>
    597a:	vldr	s14, [pc, #652]	; 5c08 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x628>
    597e:	vcmpe.f32	s15, s14
    5982:	vmrs	APSR_nzcv, fpscr
    5986:	bgt.w	68be <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12de>
    598a:	vmul.f32	s14, s15, s15
    598e:	vldr	s13, [pc, #636]	; 5c0c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x62c>
    5992:	vldr	s2, [pc, #636]	; 5c10 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x630>
    5996:	vmov.f32	s1, #112	; 0x3f800000  1.0
    599a:	vldr	s6, [pc, #632]	; 5c14 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x634>
    599e:	vmov.f32	s16, #0	; 0x40000000  2.0
    59a2:	vfma.f32	s2, s14, s13
    59a6:	vldr	s10, [pc, #624]	; 5c18 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x638>
    59aa:	vldr	s13, [pc, #624]	; 5c1c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x63c>
    59ae:	vldr	s9, [pc, #624]	; 5c20 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x640>
    59b2:	vfma.f32	s6, s14, s2
    59b6:	vfma.f32	s10, s14, s6
    59ba:	vfma.f32	s13, s14, s10
    59be:	vfma.f32	s9, s14, s13
    59c2:	vmul.f32	s9, s9, s15
    59c6:	vmov.f32	s15, s1
    59ca:	vfma.f32	s15, s9, s16
    59ce:	vmul.f32	s16, s9, s9
    59d2:	vadd.f32	s15, s15, s16
    59d6:	vdiv.f32	s13, s1, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    59da:	vstr	s9, [r4, #56]	; 0x38
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    59de:	vldr	s6, [r4, #68]	; 0x44
    float state_2 = state_2_;
    59e2:	vldr	s10, [r4, #72]	; 0x48
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    59e6:	vmov.f32	s15, #24	; 0x40c00000  6.0
    59ea:	vmov.f32	s14, #8	; 0x40400000  3.0
    59ee:	vmov.f32	s2, #112	; 0x3f800000  1.0
    59f2:	vfma.f32	s14, s11, s15
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    59f6:	vmov.f32	s15, s2
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    59fa:	vdiv.f32	s1, s2, s14
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    59fe:	vfma.f32	s15, s1, s9
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    5a02:	vstr	s1, [r4, #60]	; 0x3c
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5a06:	vadd.f32	s15, s15, s16
    5a0a:	vdiv.f32	s14, s2, s15
    5a0e:	vstr	s14, [r4, #64]	; 0x40
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5a12:	cmp	r5, #0
    5a14:	beq.w	691e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x133e>
    5a18:	vmov.f32	s11, s9
    5a1c:	mov	r1, r7
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    5a1e:	mov	r3, r2
    5a20:	b.n	5a2e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44e>
    5a22:	vldr	s1, [r4, #60]	; 0x3c
    5a26:	vldr	s11, [r4, #56]	; 0x38
    5a2a:	vldr	s14, [r4, #64]	; 0x40
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    5a2e:	vneg.f32	s2, s6
    5a32:	vldr	s15, [r1]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5a36:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    5a38:	vfma.f32	s15, s2, s1
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5a3c:	adds	r0, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    5a3e:	vfma.f32	s15, s2, s11
    5a42:	vsub.f32	s15, s15, s10
    5a46:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    5a4a:	vmov.f32	s14, s6
    5a4e:	vfma.f32	s14, s15, s11
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    5a52:	vfma.f32	s10, s14, s11
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    5a56:	vstmia	r1!, {s14}
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    5a5a:	vmov.f32	s6, s14
    5a5e:	vfma.f32	s6, s15, s11
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    5a62:	vfma.f32	s10, s14, s11
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5a66:	bne.n	5a22 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x442>
        out, out, size);
    
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    5a68:	vmul.f32	s2, s0, s0
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    5a6c:	vstr	s6, [r4, #68]	; 0x44
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    5a70:	vmov.f32	s15, #112	; 0x3f800000  1.0
    state_2_ = state_2;
    5a74:	vstr	s10, [r4, #72]	; 0x48
    5a78:	vmov.f32	s11, #48	; 0x41800000  16.0
    5a7c:	vsub.f32	s15, s15, s2
    5a80:	vfma.f32	s11, s15, s11
    5a84:	vmul.f32	s11, s11, s12
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    5a88:	vcmpe.f32	s11, #0.0
    5a8c:	vmrs	APSR_nzcv, fpscr
    5a90:	bmi.w	68f2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1312>
    5a94:	vmov.f32	s15, #96	; 0x3f000000  0.5
    5a98:	vcmp.f32	s11, s15
    5a9c:	vmrs	APSR_nzcv, fpscr
    5aa0:	it	gt
    5aa2:	vmovgt.f32	s11, s15
    5aa6:	ldr.w	sl, [pc, #392]	; 5c30 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x650>
    5aaa:	mov.w	r9, #0
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
    5aae:	vmov.f32	s10, #112	; 0x3f800000  1.0
    5ab2:	mov	r1, r7
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    5ab4:	vmov.f32	s1, #224	; 0xbf000000 -0.5
    5ab8:	ldr.w	r3, [sl]
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    5abc:	mov	lr, r9
    5abe:	mov	r0, r7
    5ac0:	ldr.w	r8, [pc, #368]	; 5c34 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x654>
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    5ac4:	vldr	s6, [pc, #348]	; 5c24 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x644>
    5ac8:	b.n	5b06 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x526>
    5aca:	ldr	r3, [pc, #348]	; (5c28 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x648>)
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    5acc:	vsub.f32	s15, s15, s10
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    5ad0:	vmov.f32	s14, s1
    5ad4:	mov.w	r9, #1
    5ad8:	add	r3, ip
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    5ada:	vstr	s15, [r4, #20]
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    5ade:	vmov	s15, r3
    5ae2:	vcvt.f32.u32	s15, s15
    5ae6:	vfma.f32	s14, s15, s6
    5aea:	vstr	s14, [r4, #24]
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    5aee:	vldr	s15, [r0]
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    5af2:	add.w	lr, lr, #1
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    5af6:	vsub.f32	s14, s14, s15
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    5afa:	cmp	r5, lr
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    5afc:	vfma.f32	s15, s14, s2
    5b00:	vstmia	r0!, {s15}
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    5b04:	bls.n	5b4c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x56c>
      noise_clock_ += noise_f;
    5b06:	vldr	s15, [r4, #20]
    5b0a:	mul.w	ip, r8, r3
    5b0e:	vadd.f32	s15, s11, s15
      if (noise_clock_ >= 1.0f) {
    5b12:	vcmpe.f32	s15, s10
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
    5b16:	vstr	s15, [r4, #20]
      if (noise_clock_ >= 1.0f) {
    5b1a:	vmrs	APSR_nzcv, fpscr
    5b1e:	bge.n	5aca <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4ea>
    5b20:	vldr	s14, [r4, #24]
    5b24:	b.n	5aee <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x50e>
    5b26:	vldr	s14, [pc, #272]	; 5c38 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x658>
    5b2a:	vadd.f32	s15, s15, s14
    5b2e:	vcvt.s32.f32	s14, s15
    5b32:	vmov	r2, s14
    5b36:	vcvt.f32.s32	s14, s14
    5b3a:	vsub.f32	s15, s15, s14
    5b3e:	vmov.f32	s14, s15
    5b42:	vcvt.s32.f32	s14, s14, #8
    5b46:	vmov	r3, s14
    5b4a:	b.n	5624 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    5b4c:	cmp.w	r9, #0
    5b50:	bne.w	6946 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1366>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    5b54:	vmov	s15, r5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    5b58:	vldr	s2, [r4, #28]
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    5b5c:	vmov.f32	s0, #96	; 0x3f000000  0.5
    increment_ = (new_value - *state) / static_cast<float>(size);
    5b60:	movs	r3, #0
    5b62:	vcvt.f32.u32	s10, s15
};

class SwingVCA {
 public:
  float operator()(float s, float gain) {
   s *= s > 0.0f ? 10.0f : 0.1f;
    5b66:	vldr	s1, [pc, #196]	; 5c2c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x64c>
    5b6a:	vmov.f32	s15, s2
    5b6e:	ldr	r0, [sp, #40]	; 0x28
    5b70:	vfnms.f32	s15, s3, s4
    5b74:	vmov.f32	s3, #36	; 0x41200000  10.0
   s = s / (1.0f + fabsf(s));
    5b78:	vmov.f32	s4, #112	; 0x3f800000  1.0
    5b7c:	vdiv.f32	s16, s15, s10
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    5b80:	vldr	s15, [r4, #16]
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    5b84:	adds	r3, #1
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    5b86:	vcmpe.f32	s15, s0
    5b8a:	vmrs	APSR_nzcv, fpscr
    5b8e:	ite	le
    5b90:	vmovle.f32	s14, s7
    5b94:	vmovgt.f32	s14, s8
    5b98:	vmul.f32	s15, s15, s14
    5b9c:	vstr	s15, [r4, #16]
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    5ba0:	vldr	s14, [r1]
    5ba4:	cbz	r0, 5bae <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5ce>
  }

  inline float Next() {
    value_ += increment_;
    5ba6:	vadd.f32	s2, s2, s16
    5baa:	vmov.f32	s15, s2
};

class SwingVCA {
 public:
  float operator()(float s, float gain) {
   s *= s > 0.0f ? 10.0f : 0.1f;
    5bae:	vcmpe.f32	s14, #0.0
    5bb2:	vmrs	APSR_nzcv, fpscr
    5bb6:	ite	le
    5bb8:	vmovle.f32	s11, s1
    5bbc:	vmovgt.f32	s11, s3
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    5bc0:	cmp	r5, r3
};

class SwingVCA {
 public:
  float operator()(float s, float gain) {
   s *= s > 0.0f ? 10.0f : 0.1f;
    5bc2:	vmul.f32	s11, s14, s11
   s = s / (1.0f + fabsf(s));
    5bc6:	vabs.f32	s6, s11
    5bca:	vadd.f32	s6, s6, s4
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    5bce:	vdiv.f32	s14, s11, s6
    5bd2:	vadd.f32	s14, s14, s4
    5bd6:	vmul.f32	s15, s14, s15
    5bda:	vstmia	r1!, {s15}
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    5bde:	bhi.n	5b80 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a0>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    5be0:	vmov.f32	s7, #0	; 0x40000000  2.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5be4:	vstr	s9, [r4, #76]	; 0x4c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5be8:	vstr	s13, [r4, #84]	; 0x54
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    5bec:	mov	r3, r2
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    5bee:	vldr	s11, [r4, #88]	; 0x58
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    5bf2:	vstr	s7, [r4, #80]	; 0x50
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    5bf6:	vldr	s14, [r4, #92]	; 0x5c
    5bfa:	b.n	5c54 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x674>
    5bfc:	.word	0x20000024
    5c00:	.word	0x3b4ccccd
    5c04:	.word	0x20000428
    5c08:	.word	0x3eaaaaab
    5c0c:	.word	0x452efe23
    5c10:	.word	0x42acec90
    5c14:	.word	0x4321348f
    5c18:	.word	0x42234866
    5c1c:	.word	0x41255da8
    5c20:	.word	0x40490fdb
    5c24:	.word	0x2f800000
    5c28:	.word	0x3c6ef35f
    5c2c:	.word	0x3dcccccd
    5c30:	.word	0x2001f96c
    5c34:	.word	0x0019660d
    5c38:	.word	0x43000000
    5c3c:	.word	0x42a80000
    5c40:	.word	0x42100000
    5c44:	.word	0x43800000
    5c48:	vldr	s7, [r4, #80]	; 0x50
    5c4c:	vldr	s9, [r4, #76]	; 0x4c
    5c50:	vldr	s13, [r4, #84]	; 0x54
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    5c54:	vneg.f32	s8, s11
    5c58:	vldr	s15, [r7]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5c5c:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    5c5e:	vfma.f32	s15, s8, s7
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5c62:	adds	r1, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    5c64:	vfma.f32	s15, s8, s9
    5c68:	vsub.f32	s15, s15, s14
    5c6c:	vmul.f32	s15, s15, s13
      bp = g_ * hp + state_1;
    5c70:	vmov.f32	s13, s11
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    5c74:	vstmia	r7!, {s15}
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
    5c78:	vfma.f32	s13, s15, s9
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    5c7c:	vfma.f32	s14, s13, s9
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    5c80:	vmov.f32	s11, s13
    5c84:	vfma.f32	s11, s15, s9
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    5c88:	vfma.f32	s14, s13, s9
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5c8c:	bne.n	5c48 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x668>
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    5c8e:	ldr	r1, [sp, #36]	; 0x24
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    5c90:	vstr	s2, [r4, #28]
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    5c94:	vmov.f32	s2, #112	; 0x3f800000  1.0
    5c98:	vldr	s7, [r1, #12]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    5c9c:	vldr	s15, [pc, #-104]	; 5c38 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x658>
      float noisiness,
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
    5ca0:	vneg.f32	s8, s7
    5ca4:	vldr	s13, [pc, #-108]	; 5c3c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x65c>
    5ca8:	vmov.f32	s4, s15
    5cac:	vldr	s6, [pc, #-112]	; 5c40 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x660>
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    5cb0:	vstr	s11, [r4, #88]	; 0x58
    5cb4:	vfma.f32	s15, s8, s6
    state_2_ = state_2;
    5cb8:	vstr	s14, [r4, #92]	; 0x5c
    5cbc:	vfma.f32	s4, s8, s13
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5cc0:	vldr	s9, [pc, #-128]	; 5c44 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x664>
      size);
  
  hi_hat_2_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    5cc4:	vldr	s6, [r1, #20]
      f0,
      parameters.timbre,
    5cc8:	vldr	s3, [r1, #8]

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5ccc:	ldr	r3, [pc, #852]	; (6024 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa44>)
        -decay * 84.0f);
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    5cce:	vldr	s8, [pc, #856]	; 6028 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa48>
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    5cd2:	vcvt.s32.f32	s14, s15
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    5cd6:	vldr	s1, [pc, #852]	; 602c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa4c>
    5cda:	vcvt.s32.f32	s11, s4
      temp_buffer_[0],
      temp_buffer_[1],
      out,
      size);
  
  hi_hat_2_.Render(
    5cde:	ldr.w	r0, [r4, #320]	; 0x140

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    5ce2:	vmov.f32	s13, s4
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
      parameters.harmonics,
    5ce6:	vldr	s4, [r1, #16]
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5cea:	vcvt.f32.s32	s0, s14
      temp_buffer_[0],
      temp_buffer_[1],
      out,
      size);
  
  hi_hat_2_.Render(
    5cee:	ldr.w	r7, [r4, #324]	; 0x144
    5cf2:	vcvt.f32.s32	s16, s11

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5cf6:	vmov	r1, s11
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5cfa:	vsub.f32	s15, s15, s0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5cfe:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5d02:	vsub.f32	s13, s13, s16

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5d06:	vmov	r1, s14
    5d0a:	vldr	s11, [r3]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5d0e:	vmul.f32	s15, s15, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5d12:	ldr	r3, [pc, #784]	; (6024 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa44>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5d14:	vmul.f32	s13, s13, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5d18:	add.w	r3, r3, r1, lsl #2
    5d1c:	vmov.f32	s9, s2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5d20:	vcvt.s32.f32	s15, s15
    5d24:	vcvt.s32.f32	s13, s13
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    5d28:	vldr	s14, [r3]
    5d2c:	ldr	r3, [pc, #768]	; (6030 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa50>)
    5d2e:	vmov	lr, s15
    5d32:	vmov	r1, s13
    5d36:	add.w	r1, r3, r1, lsl #2
    5d3a:	add.w	r3, r3, lr, lsl #2
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    5d3e:	vldr	s13, [r1]
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    5d42:	vldr	s15, [r3]
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    5d46:	vnmul.f32	s13, s11, s13
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    
    if (trigger) {
    5d4a:	ldr	r3, [sp, #64]	; 0x40
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    5d4c:	vnmul.f32	s15, s14, s15
    5d50:	vmov.f32	s14, s2
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    5d54:	vfma.f32	s9, s13, s1
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    5d58:	vfma.f32	s14, s15, s8
    5d5c:	vmov.f32	s8, s14
    
    if (trigger) {
    5d60:	cbz	r3, 5d86 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a6>
      envelope_ = (1.5f + 0.5f * (1.0f - decay)) * (0.3f + 0.7f * accent);
    5d62:	vsub.f32	s2, s2, s7
    5d66:	vldr	s11, [pc, #716]	; 6034 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa54>
    5d6a:	vmov.f32	s13, #96	; 0x3f000000  0.5
    5d6e:	vldr	s14, [pc, #712]	; 6038 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa58>
    5d72:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    5d76:	vfma.f32	s14, s6, s11
    5d7a:	vfma.f32	s15, s2, s13
    5d7e:	vmul.f32	s15, s15, s14
    5d82:	vstr	s15, [r4, #96]	; 0x60
      oscillator_[i].Init();
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    5d86:	vldr	s13, [pc, #692]	; 603c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa5c>
    const float f2a = 510.0f / kSampleRate * ratio;
    const float f2b = 8075.0f / kSampleRate * ratio;
    const float f3a = 730.0f / kSampleRate * ratio;
    const float f3b = 10500.0f / kSampleRate * ratio;
    
    std::fill(&out[0], &out[size], 0.0f);
    5d8a:	add.w	r1, r6, r5, lsl #2
    const float f1a = 200.0f / kSampleRate * ratio;
    const float f1b = 7530.0f / kSampleRate * ratio;
    const float f2a = 510.0f / kSampleRate * ratio;
    const float f2b = 8075.0f / kSampleRate * ratio;
    const float f3a = 730.0f / kSampleRate * ratio;
    const float f3b = 10500.0f / kSampleRate * ratio;
    5d8e:	vmov.f32	s2, #76	; 0x3e600000  0.2187500
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    const float f1a = 200.0f / kSampleRate * ratio;
    5d92:	vldr	s15, [pc, #684]	; 6040 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa60>
      oscillator_[i].Init();
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    5d96:	vadd.f32	s13, s5, s13
    const float f1a = 200.0f / kSampleRate * ratio;
    const float f1b = 7530.0f / kSampleRate * ratio;
    5d9a:	vldr	s25, [pc, #680]	; 6044 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa64>
    const float f2a = 510.0f / kSampleRate * ratio;
    5d9e:	vldr	s16, [pc, #680]	; 6048 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa68>
    5da2:	cmp	r6, r1
    const float f2b = 8075.0f / kSampleRate * ratio;
    5da4:	vldr	s0, [pc, #676]	; 604c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa6c>
      oscillator_[i].Init();
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    5da8:	vdiv.f32	s14, s5, s13
    const float f1a = 200.0f / kSampleRate * ratio;
    const float f1b = 7530.0f / kSampleRate * ratio;
    const float f2a = 510.0f / kSampleRate * ratio;
    const float f2b = 8075.0f / kSampleRate * ratio;
    const float f3a = 730.0f / kSampleRate * ratio;
    5dac:	vldr	s11, [pc, #672]	; 6050 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa70>
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    const float f1a = 200.0f / kSampleRate * ratio;
    5db0:	vmul.f32	s15, s14, s15
    const float f1b = 7530.0f / kSampleRate * ratio;
    5db4:	vmul.f32	s25, s14, s25
    const float f2a = 510.0f / kSampleRate * ratio;
    5db8:	vmul.f32	s16, s14, s16
    const float f2b = 8075.0f / kSampleRate * ratio;
    5dbc:	vmul.f32	s0, s14, s0
    const float f3a = 730.0f / kSampleRate * ratio;
    5dc0:	vmul.f32	s11, s14, s11
    const float f3b = 10500.0f / kSampleRate * ratio;
    5dc4:	vmul.f32	s5, s14, s2
    5dc8:	beq.n	5dd8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f8>
    5dca:	mov	r3, r6
	*__first = __tmp;
    5dcc:	mov.w	lr, #0
    5dd0:	str.w	lr, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    5dd4:	cmp	r1, r3
    5dd6:	bne.n	5dd0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    5dd8:	vldr	s14, [pc, #632]	; 6054 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
    5ddc:	vcmpe.f32	s15, s14
    5de0:	vmrs	APSR_nzcv, fpscr
    5de4:	bmi.w	689c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12bc>
    5de8:	vmov.f32	s14, #80	; 0x3e800000  0.250
    5dec:	vcmpe.f32	s15, s14
    5df0:	vmrs	APSR_nzcv, fpscr
    5df4:	bgt.w	689c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12bc>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    5df8:	vabs.f32	s14, s15
    5dfc:	vmov.f32	s13, #96	; 0x3f000000  0.5
    5e00:	vadd.f32	s14, s14, s14
    5e04:	vcmpe.f32	s14, s13
    5e08:	vmrs	APSR_nzcv, fpscr
    5e0c:	bgt.n	5e24 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x844>
    5e0e:	vmov.f32	s2, #112	; 0x3f800000  1.0
    5e12:	vsub.f32	s14, s2, s14
    5e16:	vcmpe.f32	s14, s13
    5e1a:	vmrs	APSR_nzcv, fpscr
    5e1e:	it	pl
    5e20:	vmovpl.f32	s14, s13
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    5e24:	vldr	s1, [r4, #132]	; 0x84
    5e28:	vldr	s2, [r4, #136]	; 0x88
    increment_ = (new_value - *state) / static_cast<float>(size);
    5e2c:	vsub.f32	s15, s15, s1
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    5e30:	vldr	s26, [r4, #116]	; 0x74
    5e34:	vsub.f32	s14, s14, s2
    5e38:	vdiv.f32	s21, s15, s10
    5e3c:	vdiv.f32	s22, s14, s10
  
    while (size--) {
    5e40:	cmp	r5, #0
    5e42:	beq.n	5f28 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x948>
    5e44:	mov	lr, r0
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    5e46:	mov	r3, r2
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    5e48:	vldr	s18, [pc, #524]	; 6058 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    5e4c:	mov.w	r8, #0
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    5e50:	vmov.f32	s20, #96	; 0x3f000000  0.5
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    5e54:	vmov.f32	s17, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    5e58:	vmov.f32	s19, #224	; 0xbf000000 -0.5
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    5e5c:	vmov.f32	s24, #0	; 0x40000000  2.0
    5e60:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    5e64:	b.n	5eea <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x90a>
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    5e66:	vsub.f32	s14, s13, s2
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
    5e6a:	strb.w	r1, [r4, #128]	; 0x80
        }
        if (phase_ >= 1.0f) {
    5e6e:	vcmpe.f32	s13, s17
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    5e72:	vdiv.f32	s15, s14, s1
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    5e76:	vmrs	APSR_nzcv, fpscr
    5e7a:	vsub.f32	s14, s17, s15
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    5e7e:	vmul.f32	s28, s15, s20
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    5e82:	vmul.f32	s27, s14, s19
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    5e86:	vfma.f32	s26, s15, s28
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    5e8a:	vmov.f32	s15, s18
    5e8e:	vfma.f32	s15, s14, s27
    5e92:	vmov.f32	s27, s15
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    5e96:	blt.n	5f22 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x942>
          phase_ -= 1.0f;
    5e98:	vsub.f32	s13, s13, s17
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    5e9c:	strb.w	r8, [r4, #128]	; 0x80
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    5ea0:	vdiv.f32	s15, s13, s1
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    5ea4:	vstr	s13, [r4, #112]	; 0x70
    5ea8:	vsub.f32	s14, s17, s15
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    5eac:	vmul.f32	s29, s15, s20
          next_sample -= stmlib::NextBlepSample(t);
    5eb0:	vmul.f32	s28, s14, s19
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    5eb4:	vfms.f32	s26, s15, s29
          next_sample -= stmlib::NextBlepSample(t);
    5eb8:	vfms.f32	s27, s14, s28
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    5ebc:	vmov.f32	s15, s26
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    5ec0:	vcmpe.f32	s2, s13
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    5ec4:	subs	r3, #1
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    5ec6:	vmov.f32	s14, s23
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    5eca:	vmrs	APSR_nzcv, fpscr
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    5ece:	vfma.f32	s14, s15, s24
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    5ed2:	ite	le
    5ed4:	vmovle.f32	s15, s17
    5ed8:	vmovgt.f32	s15, s18
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    5edc:	cmp.w	r3, #4294967295
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    5ee0:	vadd.f32	s26, s27, s15
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    5ee4:	vstmia	lr!, {s14}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    5ee8:	beq.n	5f28 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x948>
  }

  inline float Next() {
    value_ += increment_;
    5eea:	vadd.f32	s1, s1, s21
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    5eee:	vldr	s13, [r4, #112]	; 0x70
    5ef2:	vadd.f32	s2, s2, s22
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    5ef6:	ldrb.w	ip, [r4, #128]	; 0x80
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    5efa:	vadd.f32	s13, s1, s13
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    5efe:	vcmpe.f32	s2, s13
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    5f02:	vstr	s13, [r4, #112]	; 0x70
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    5f06:	vmrs	APSR_nzcv, fpscr
    5f0a:	ite	ls
    5f0c:	movls	r1, #1
    5f0e:	movhi	r1, #0
    5f10:	cmp	ip, r1
    5f12:	bne.n	5e66 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x886>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    5f14:	vcmpe.f32	s13, s17
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    5f18:	vldr	s27, [pc, #316]	; 6058 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    5f1c:	vmrs	APSR_nzcv, fpscr
    5f20:	bge.n	5e98 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8b8>
    5f22:	vmov.f32	s15, s26
    5f26:	b.n	5ec0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    5f28:	vldr	s15, [pc, #296]	; 6054 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    5f2c:	vstr	s26, [r4, #116]	; 0x74
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    5f30:	vcmpe.f32	s25, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    5f34:	vstr	s2, [r4, #136]	; 0x88
    5f38:	vstr	s1, [r4, #132]	; 0x84
    5f3c:	vmrs	APSR_nzcv, fpscr
    5f40:	bmi.w	6890 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12b0>
    5f44:	vmov.f32	s15, #80	; 0x3e800000  0.250
    5f48:	vcmpe.f32	s25, s15
    5f4c:	vmrs	APSR_nzcv, fpscr
    5f50:	bgt.w	6890 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12b0>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    5f54:	vabs.f32	s15, s25
    5f58:	vmov.f32	s14, #96	; 0x3f000000  0.5
    5f5c:	vadd.f32	s15, s15, s15
    5f60:	vcmpe.f32	s15, s14
    5f64:	vmrs	APSR_nzcv, fpscr
    5f68:	bgt.n	5f80 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    5f6a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    5f6e:	vsub.f32	s15, s13, s15
    5f72:	vcmpe.f32	s15, s14
    5f76:	vmrs	APSR_nzcv, fpscr
    5f7a:	it	pl
    5f7c:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    5f80:	vldr	s17, [r4, #160]	; 0xa0
    5f84:	vldr	s18, [r4, #164]	; 0xa4
    increment_ = (new_value - *state) / static_cast<float>(size);
    5f88:	vsub.f32	s25, s25, s17
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    5f8c:	vldr	s14, [r4, #144]	; 0x90
    5f90:	vsub.f32	s15, s15, s18
    5f94:	vdiv.f32	s21, s25, s10
    5f98:	vdiv.f32	s22, s15, s10
  
    while (size--) {
    5f9c:	cmp	r5, #0
    5f9e:	beq.n	608c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaac>
    5fa0:	mov	r1, r7
    5fa2:	mov	r3, r2
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    5fa4:	vldr	s27, [pc, #176]	; 6058 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    5fa8:	vmov.f32	s2, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    5fac:	vmov.f32	s26, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    5fb0:	vmov.f32	s25, #224	; 0xbf000000 -0.5
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    5fb4:	vmov.f32	s24, #0	; 0x40000000  2.0
    5fb8:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    5fbc:	b.n	5ffe <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa1e>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    5fbe:	vsub.f32	s15, s15, s2
          float t = phase_ / frequency;
    5fc2:	vdiv.f32	s13, s15, s17
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    5fc6:	vstr	s15, [r4, #140]	; 0x8c
    5fca:	vsub.f32	s1, s2, s13
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    5fce:	vmul.f32	s20, s13, s26
          next_sample -= stmlib::NextBlepSample(t);
    5fd2:	vmul.f32	s19, s1, s25
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    5fd6:	vfms.f32	s14, s13, s20
          next_sample -= stmlib::NextBlepSample(t);
    5fda:	vmov.f32	s13, s27
    5fde:	vfms.f32	s13, s1, s19
    5fe2:	vmov.f32	s1, s13
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    5fe6:	vmov.f32	s13, s23
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    5fea:	subs	r3, #1
    5fec:	cmp.w	r3, #4294967295
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    5ff0:	vfma.f32	s13, s14, s24
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    5ff4:	vadd.f32	s14, s1, s15

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    5ff8:	vstmia	r1!, {s13}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    5ffc:	beq.n	605c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa7c>
  }

  inline float Next() {
    value_ += increment_;
    5ffe:	vadd.f32	s17, s17, s21
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6002:	vldr	s15, [r4, #140]	; 0x8c
    6006:	vadd.f32	s18, s18, s22
    600a:	vadd.f32	s15, s17, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    600e:	vcmpe.f32	s15, s2
    6012:	vmrs	APSR_nzcv, fpscr
    6016:	bge.n	5fbe <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9de>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6018:	vstr	s15, [r4, #140]	; 0x8c
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    601c:	vldr	s1, [pc, #56]	; 6058 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
    6020:	b.n	5fe6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa06>
    6022:	nop
    6024:	.word	0x20000024
    6028:	.word	0x3b23d70a
    602c:	.word	0x3b449ba6
    6030:	.word	0x20000428
    6034:	.word	0x3f333333
    6038:	.word	0x3e99999a
    603c:	.word	0x3c23d70a
    6040:	.word	0x3b888889
    6044:	.word	0x3e20a3d7
    6048:	.word	0x3c2e147b
    604c:	.word	0x3e2c4444
    6050:	.word	0x3c792c60
    6054:	.word	0x358637bd
    6058:	.word	0x00000000
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    605c:	mov	r1, r6
    605e:	mov	ip, r7
    6060:	mov	lr, r0
    6062:	mov	r3, r2
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    6064:	vstr	s14, [r4, #144]	; 0x90
    6068:	vstr	s18, [r4, #164]	; 0xa4
    606c:	vstr	s17, [r4, #160]	; 0xa0
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
      *out++ += *temp_1++ * *temp_2++;
    6070:	vldmia	lr!, {s13}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    6074:	subs	r3, #1
      *out++ += *temp_1++ * *temp_2++;
    6076:	vldmia	ip!, {s14}
    607a:	vldmia	r1!, {s15}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    607e:	cmp.w	r3, #4294967295
      *out++ += *temp_1++ * *temp_2++;
    6082:	vfma.f32	s15, s13, s14
    6086:	vstr	s15, [r1, #-4]
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    608a:	bne.n	6070 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa90>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    608c:	vldr	s15, [pc, #-60]	; 6054 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
    6090:	vcmpe.f32	s16, s15
    6094:	vmrs	APSR_nzcv, fpscr
    6098:	bmi.w	6886 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12a6>
    609c:	vmov.f32	s15, #80	; 0x3e800000  0.250
    60a0:	vcmpe.f32	s16, s15
    60a4:	vmrs	APSR_nzcv, fpscr
    60a8:	bgt.w	6886 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12a6>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    60ac:	vabs.f32	s15, s16
    60b0:	vmov.f32	s14, #96	; 0x3f000000  0.5
    60b4:	vadd.f32	s15, s15, s15
    60b8:	vcmpe.f32	s15, s14
    60bc:	vmrs	APSR_nzcv, fpscr
    60c0:	bgt.n	60d8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaf8>
    60c2:	vmov.f32	s13, #112	; 0x3f800000  1.0
    60c6:	vsub.f32	s15, s13, s15
    60ca:	vcmpe.f32	s15, s14
    60ce:	vmrs	APSR_nzcv, fpscr
    60d2:	it	pl
    60d4:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    60d8:	vldr	s17, [r4, #188]	; 0xbc
    60dc:	vldr	s1, [r4, #192]	; 0xc0
    increment_ = (new_value - *state) / static_cast<float>(size);
    60e0:	vsub.f32	s16, s16, s17
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    60e4:	vldr	s25, [r4, #172]	; 0xac
    60e8:	vsub.f32	s15, s15, s1
    60ec:	vdiv.f32	s21, s16, s10
    60f0:	vdiv.f32	s22, s15, s10
  
    while (size--) {
    60f4:	cmp	r5, #0
    60f6:	beq.n	61d8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf8>
    60f8:	mov	lr, r0
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    60fa:	mov	r3, r2
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    60fc:	vldr	s18, [pc, #-168]	; 6058 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    6100:	mov.w	r8, #0
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    6104:	vmov.f32	s20, #96	; 0x3f000000  0.5
    6108:	vmov.f32	s16, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    610c:	vmov.f32	s19, #224	; 0xbf000000 -0.5
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    6110:	vmov.f32	s24, #0	; 0x40000000  2.0
    6114:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    6118:	b.n	619a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbba>
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    611a:	vsub.f32	s14, s2, s1
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
    611e:	strb.w	r1, [r4, #184]	; 0xb8
        }
        if (phase_ >= 1.0f) {
    6122:	vcmpe.f32	s2, s16
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    6126:	vdiv.f32	s15, s14, s17
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    612a:	vmrs	APSR_nzcv, fpscr
    612e:	vsub.f32	s14, s16, s15
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    6132:	vmul.f32	s26, s15, s20
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    6136:	vmul.f32	s13, s14, s19
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    613a:	vfma.f32	s25, s15, s26
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    613e:	vmov.f32	s15, s18
    6142:	vfma.f32	s15, s14, s13
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    6146:	blt.n	61d2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf2>
          phase_ -= 1.0f;
    6148:	vsub.f32	s2, s2, s16
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    614c:	strb.w	r8, [r4, #184]	; 0xb8
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    6150:	vdiv.f32	s14, s2, s17
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    6154:	vstr	s2, [r4, #168]	; 0xa8
    6158:	vsub.f32	s13, s16, s14
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    615c:	vmul.f32	s27, s14, s20
          next_sample -= stmlib::NextBlepSample(t);
    6160:	vmul.f32	s26, s13, s19
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    6164:	vfms.f32	s25, s14, s27
          next_sample -= stmlib::NextBlepSample(t);
    6168:	vfms.f32	s15, s13, s26
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    616c:	vmov.f32	s14, s25
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    6170:	vcmpe.f32	s1, s2
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6174:	subs	r3, #1
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    6176:	vmov.f32	s13, s23
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    617a:	vmrs	APSR_nzcv, fpscr
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    617e:	vfma.f32	s13, s14, s24
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    6182:	ite	le
    6184:	vmovle.f32	s14, s16
    6188:	vmovgt.f32	s14, s18
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    618c:	cmp.w	r3, #4294967295
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    6190:	vadd.f32	s25, s15, s14
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    6194:	vstmia	lr!, {s13}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6198:	beq.n	61d8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf8>
  }

  inline float Next() {
    value_ += increment_;
    619a:	vadd.f32	s17, s17, s21
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    619e:	vldr	s2, [r4, #168]	; 0xa8
    61a2:	vadd.f32	s1, s1, s22
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    61a6:	ldrb.w	ip, [r4, #184]	; 0xb8
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    61aa:	vadd.f32	s2, s17, s2
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    61ae:	vcmpe.f32	s1, s2
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    61b2:	vstr	s2, [r4, #168]	; 0xa8
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    61b6:	vmrs	APSR_nzcv, fpscr
    61ba:	ite	ls
    61bc:	movls	r1, #1
    61be:	movhi	r1, #0
    61c0:	cmp	ip, r1
    61c2:	bne.n	611a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb3a>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    61c4:	vcmpe.f32	s2, s16
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    61c8:	vldr	s15, [pc, #-372]	; 6058 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    61cc:	vmrs	APSR_nzcv, fpscr
    61d0:	bge.n	6148 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb68>
    61d2:	vmov.f32	s14, s25
    61d6:	b.n	6170 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb90>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    61d8:	vldr	s15, [pc, #-392]	; 6054 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    61dc:	vstr	s25, [r4, #172]	; 0xac
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    61e0:	vcmpe.f32	s0, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    61e4:	vstr	s1, [r4, #192]	; 0xc0
    61e8:	vstr	s17, [r4, #188]	; 0xbc
    61ec:	vmrs	APSR_nzcv, fpscr
    61f0:	bmi.w	687c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x129c>
    61f4:	vmov.f32	s15, #80	; 0x3e800000  0.250
    61f8:	vcmpe.f32	s0, s15
    61fc:	vmrs	APSR_nzcv, fpscr
    6200:	bgt.w	687c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x129c>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    6204:	vabs.f32	s15, s0
    6208:	vmov.f32	s14, #96	; 0x3f000000  0.5
    620c:	vadd.f32	s15, s15, s15
    6210:	vcmpe.f32	s15, s14
    6214:	vmrs	APSR_nzcv, fpscr
    6218:	bgt.n	6230 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc50>
    621a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    621e:	vsub.f32	s15, s13, s15
    6222:	vcmpe.f32	s15, s14
    6226:	vmrs	APSR_nzcv, fpscr
    622a:	it	pl
    622c:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6230:	vldr	s16, [r4, #216]	; 0xd8
    6234:	vldr	s17, [r4, #220]	; 0xdc
    increment_ = (new_value - *state) / static_cast<float>(size);
    6238:	vsub.f32	s0, s0, s16
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    623c:	vldr	s14, [r4, #200]	; 0xc8
    6240:	vsub.f32	s15, s15, s17
    6244:	vdiv.f32	s19, s0, s10
    6248:	vdiv.f32	s20, s15, s10
  
    while (size--) {
    624c:	cmp	r5, #0
    624e:	beq.n	62fe <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd1e>
    6250:	mov	r1, r7
    6252:	mov	r3, r2
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    6254:	vldr	s25, [pc, #-512]	; 6058 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    6258:	vmov.f32	s2, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    625c:	vmov.f32	s24, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    6260:	vmov.f32	s23, #224	; 0xbf000000 -0.5
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    6264:	vmov.f32	s22, #0	; 0x40000000  2.0
    6268:	vmov.f32	s21, #240	; 0xbf800000 -1.0
    626c:	b.n	62aa <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcca>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    626e:	vsub.f32	s15, s15, s2
          float t = phase_ / frequency;
    6272:	vdiv.f32	s13, s15, s16
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    6276:	vstr	s15, [r4, #196]	; 0xc4
    627a:	vsub.f32	s1, s2, s13
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    627e:	vmul.f32	s18, s13, s24
          next_sample -= stmlib::NextBlepSample(t);
    6282:	vmul.f32	s0, s1, s23
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    6286:	vfms.f32	s14, s13, s18
          next_sample -= stmlib::NextBlepSample(t);
    628a:	vmov.f32	s13, s25
    628e:	vfms.f32	s13, s1, s0
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    6292:	vmov.f32	s1, s21
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6296:	subs	r3, #1
    6298:	cmp.w	r3, #4294967295
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    629c:	vfma.f32	s1, s14, s22
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    62a0:	vadd.f32	s14, s13, s15

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    62a4:	vstmia	r1!, {s1}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    62a8:	beq.n	62ce <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcee>
  }

  inline float Next() {
    value_ += increment_;
    62aa:	vadd.f32	s16, s16, s19
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    62ae:	vldr	s15, [r4, #196]	; 0xc4
    62b2:	vadd.f32	s17, s17, s20
    62b6:	vadd.f32	s15, s16, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    62ba:	vcmpe.f32	s15, s2
    62be:	vmrs	APSR_nzcv, fpscr
    62c2:	bge.n	626e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc8e>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    62c4:	vstr	s15, [r4, #196]	; 0xc4
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    62c8:	vldr	s13, [pc, #-628]	; 6058 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
    62cc:	b.n	6292 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb2>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    62ce:	mov	r1, r6
    62d0:	mov	ip, r7
    62d2:	mov	lr, r0
    62d4:	mov	r3, r2
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    62d6:	vstr	s14, [r4, #200]	; 0xc8
    62da:	vstr	s17, [r4, #220]	; 0xdc
    62de:	vstr	s16, [r4, #216]	; 0xd8
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
      *out++ += *temp_1++ * *temp_2++;
    62e2:	vldmia	lr!, {s13}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    62e6:	subs	r3, #1
      *out++ += *temp_1++ * *temp_2++;
    62e8:	vldmia	ip!, {s14}
    62ec:	vldmia	r1!, {s15}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    62f0:	cmp.w	r3, #4294967295
      *out++ += *temp_1++ * *temp_2++;
    62f4:	vfma.f32	s15, s13, s14
    62f8:	vstr	s15, [r1, #-4]
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    62fc:	bne.n	62e2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd02>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    62fe:	vldr	s15, [pc, #-684]	; 6054 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
    6302:	vcmpe.f32	s11, s15
    6306:	vmrs	APSR_nzcv, fpscr
    630a:	bmi.w	6872 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1292>
    630e:	vmov.f32	s15, #80	; 0x3e800000  0.250
    6312:	vcmpe.f32	s11, s15
    6316:	vmrs	APSR_nzcv, fpscr
    631a:	bgt.w	6872 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1292>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    631e:	vabs.f32	s15, s11
    6322:	vmov.f32	s14, #96	; 0x3f000000  0.5
    6326:	vadd.f32	s15, s15, s15
    632a:	vcmpe.f32	s15, s14
    632e:	vmrs	APSR_nzcv, fpscr
    6332:	bgt.n	634a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd6a>
    6334:	vmov.f32	s13, #112	; 0x3f800000  1.0
    6338:	vsub.f32	s15, s13, s15
    633c:	vcmpe.f32	s15, s14
    6340:	vmrs	APSR_nzcv, fpscr
    6344:	it	pl
    6346:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    634a:	vldr	s0, [r4, #244]	; 0xf4
    634e:	vldr	s1, [r4, #248]	; 0xf8
    increment_ = (new_value - *state) / static_cast<float>(size);
    6352:	vsub.f32	s11, s11, s0
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    6356:	vldr	s14, [r4, #228]	; 0xe4
    635a:	vsub.f32	s15, s15, s1
    635e:	vdiv.f32	s20, s11, s10
    6362:	vdiv.f32	s21, s15, s10
  
    while (size--) {
    6366:	cmp	r5, #0
    6368:	beq.n	6438 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe58>
    636a:	mov	lr, r0
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    636c:	mov	r3, r2
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    636e:	vldr	s17, [pc, #-792]	; 6058 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    6372:	mov.w	r8, #0
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    6376:	vmov.f32	s19, #96	; 0x3f000000  0.5
    637a:	vmov.f32	s16, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    637e:	vmov.f32	s18, #224	; 0xbf000000 -0.5
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    6382:	vmov.f32	s23, #0	; 0x40000000  2.0
    6386:	vmov.f32	s22, #240	; 0xbf800000 -1.0
    638a:	b.n	6408 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe28>
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    638c:	vsub.f32	s11, s15, s1
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
    6390:	strb.w	r1, [r4, #240]	; 0xf0
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    6394:	vdiv.f32	s13, s11, s0
    6398:	vsub.f32	s11, s16, s13
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    639c:	vmul.f32	s24, s13, s19
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    63a0:	vmul.f32	s2, s11, s18
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    63a4:	vfma.f32	s14, s13, s24
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    63a8:	vmov.f32	s13, s17
    63ac:	vfma.f32	s13, s11, s2
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    63b0:	vcmpe.f32	s15, s16
    63b4:	vmrs	APSR_nzcv, fpscr
    63b8:	blt.n	63de <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdfe>
          phase_ -= 1.0f;
    63ba:	vsub.f32	s15, s15, s16
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    63be:	strb.w	r8, [r4, #240]	; 0xf0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    63c2:	vdiv.f32	s11, s15, s0
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    63c6:	vstr	s15, [r4, #224]	; 0xe0
    63ca:	vsub.f32	s2, s16, s11
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    63ce:	vmul.f32	s25, s11, s19
          next_sample -= stmlib::NextBlepSample(t);
    63d2:	vmul.f32	s24, s2, s18
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    63d6:	vfms.f32	s14, s11, s25
          next_sample -= stmlib::NextBlepSample(t);
    63da:	vfms.f32	s13, s2, s24
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    63de:	vcmpe.f32	s1, s15
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    63e2:	subs	r3, #1
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    63e4:	vmov.f32	s15, s22
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    63e8:	vmrs	APSR_nzcv, fpscr
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    63ec:	vfma.f32	s15, s14, s23
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    63f0:	ite	le
    63f2:	vmovle.f32	s14, s16
    63f6:	vmovgt.f32	s14, s17
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    63fa:	cmp.w	r3, #4294967295
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    63fe:	vadd.f32	s14, s13, s14
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    6402:	vstmia	lr!, {s15}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6406:	beq.n	6438 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe58>
  }

  inline float Next() {
    value_ += increment_;
    6408:	vadd.f32	s0, s0, s20
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    640c:	vldr	s15, [r4, #224]	; 0xe0
    6410:	vadd.f32	s1, s1, s21
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    6414:	ldrb.w	ip, [r4, #240]	; 0xf0
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6418:	vadd.f32	s15, s0, s15
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    641c:	vcmpe.f32	s1, s15
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6420:	vstr	s15, [r4, #224]	; 0xe0
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    6424:	vmrs	APSR_nzcv, fpscr
    6428:	ite	ls
    642a:	movls	r1, #1
    642c:	movhi	r1, #0
    642e:	cmp	ip, r1
    6430:	bne.n	638c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdac>
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    6432:	vldr	s13, [pc, #892]	; 67b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
    6436:	b.n	63b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdd0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6438:	vldr	s15, [pc, #888]	; 67b4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    643c:	vstr	s14, [r4, #228]	; 0xe4
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6440:	vcmpe.f32	s5, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    6444:	vstr	s1, [r4, #248]	; 0xf8
    6448:	vstr	s0, [r4, #244]	; 0xf4
    644c:	vmrs	APSR_nzcv, fpscr
    6450:	bmi.w	6868 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1288>
    6454:	vmov.f32	s15, #80	; 0x3e800000  0.250
    6458:	vcmpe.f32	s5, s15
    645c:	vmrs	APSR_nzcv, fpscr
    6460:	bgt.w	6868 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1288>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    6464:	vabs.f32	s15, s5
    6468:	vmov.f32	s14, #96	; 0x3f000000  0.5
    646c:	vadd.f32	s15, s15, s15
    6470:	vcmpe.f32	s15, s14
    6474:	vmrs	APSR_nzcv, fpscr
    6478:	bgt.n	6490 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeb0>
    647a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    647e:	vsub.f32	s15, s13, s15
    6482:	vcmpe.f32	s15, s14
    6486:	vmrs	APSR_nzcv, fpscr
    648a:	it	pl
    648c:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6490:	vldr	s11, [r4, #272]	; 0x110
    6494:	vldr	s2, [r4, #276]	; 0x114
    increment_ = (new_value - *state) / static_cast<float>(size);
    6498:	vsub.f32	s5, s5, s11
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    649c:	vldr	s14, [r4, #256]	; 0x100
    64a0:	vsub.f32	s15, s15, s2
    64a4:	vdiv.f32	s17, s5, s10
    64a8:	vdiv.f32	s18, s15, s10
  
    while (size--) {
    64ac:	cmp	r5, #0
    64ae:	beq.n	655a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf7a>
    64b0:	mov	r1, r7
    64b2:	mov	r3, r2
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    64b4:	vldr	s23, [pc, #760]	; 67b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    64b8:	vmov.f32	s5, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    64bc:	vmov.f32	s22, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    64c0:	vmov.f32	s21, #224	; 0xbf000000 -0.5
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    64c4:	vmov.f32	s20, #0	; 0x40000000  2.0
    64c8:	vmov.f32	s19, #240	; 0xbf800000 -1.0
    64cc:	b.n	650a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2a>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    64ce:	vsub.f32	s15, s15, s5
          float t = phase_ / frequency;
    64d2:	vdiv.f32	s13, s15, s11
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    64d6:	vstr	s15, [r4, #252]	; 0xfc
    64da:	vsub.f32	s1, s5, s13
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    64de:	vmul.f32	s16, s13, s22
          next_sample -= stmlib::NextBlepSample(t);
    64e2:	vmul.f32	s0, s1, s21
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    64e6:	vfms.f32	s14, s13, s16
          next_sample -= stmlib::NextBlepSample(t);
    64ea:	vmov.f32	s13, s23
    64ee:	vfms.f32	s13, s1, s0
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    64f2:	vmov.f32	s1, s19
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    64f6:	subs	r3, #1
    64f8:	cmp.w	r3, #4294967295
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    64fc:	vfma.f32	s1, s14, s20
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    6500:	vadd.f32	s14, s13, s15

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    6504:	vstmia	r1!, {s1}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6508:	beq.n	652e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf4e>
  }

  inline float Next() {
    value_ += increment_;
    650a:	vadd.f32	s11, s11, s17
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    650e:	vldr	s15, [r4, #252]	; 0xfc
    6512:	vadd.f32	s2, s2, s18
    6516:	vadd.f32	s15, s11, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    651a:	vcmpe.f32	s15, s5
    651e:	vmrs	APSR_nzcv, fpscr
    6522:	bge.n	64ce <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeee>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6524:	vstr	s15, [r4, #252]	; 0xfc
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    6528:	vldr	s13, [pc, #644]	; 67b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
    652c:	b.n	64f2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf12>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    652e:	mov	r1, r6
    6530:	mov	r3, r2
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    6532:	vstr	s14, [r4, #256]	; 0x100
    6536:	vstr	s2, [r4, #276]	; 0x114
    653a:	vstr	s11, [r4, #272]	; 0x110
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
      *out++ += *temp_1++ * *temp_2++;
    653e:	vldmia	r0!, {s13}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    6542:	subs	r3, #1
      *out++ += *temp_1++ * *temp_2++;
    6544:	vldmia	r7!, {s14}
    6548:	vldmia	r1!, {s15}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    654c:	cmp.w	r3, #4294967295
      *out++ += *temp_1++ * *temp_2++;
    6550:	vfma.f32	s15, s13, s14
    6554:	vstr	s15, [r1, #-4]
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    6558:	bne.n	653e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf5e>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    655a:	vldr	s14, [pc, #604]	; 67b8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d8>
    655e:	vldr	s15, [pc, #604]	; 67bc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11dc>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6562:	ldr	r3, [pc, #604]	; (67c0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e0>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6564:	vfma.f32	s15, s3, s14
    // Render the metallic noise.
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);

    // Apply BPF on the metallic noise.
    float cutoff = 150.0f / kSampleRate * stmlib::SemitonesToRatio(
        tone * 72.0f);
    6568:	vldr	s11, [pc, #600]	; 67c4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e4>
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    656c:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6570:	vcvt.f32.s32	s5, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6574:	vmov	r1, s14
    6578:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    657c:	vsub.f32	s15, s15, s5
    6580:	vldr	s13, [r3]
    6584:	ldr	r3, [pc, #576]	; (67c8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e8>)
    6586:	vcvt.s32.f32	s15, s15, #8
    658a:	vmov	r1, s15
    658e:	add.w	r3, r3, r1, lsl #2
    6592:	vldr	s14, [r3]
    6596:	vmul.f32	s15, s14, s13
    659a:	vmul.f32	s15, s15, s11
    CONSTRAIN(cutoff, 0.0f, 16000.0f / kSampleRate);
    659e:	vcmpe.f32	s15, #0.0
    65a2:	vmrs	APSR_nzcv, fpscr
    65a6:	bmi.w	68ce <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12ee>
    65aa:	vldr	s14, [pc, #544]	; 67cc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11ec>
    65ae:	vcmpe.f32	s15, s14
    65b2:	vmrs	APSR_nzcv, fpscr
    65b6:	bgt.w	68b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12d0>
    65ba:	vmul.f32	s14, s15, s15
    65be:	vldr	s13, [pc, #528]	; 67d0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f0>
    65c2:	vldr	s1, [pc, #528]	; 67d4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f4>
    65c6:	vmov.f32	s5, #112	; 0x3f800000  1.0
    65ca:	vldr	s2, [pc, #524]	; 67d8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f8>
    65ce:	vmov.f32	s0, #0	; 0x40000000  2.0
    65d2:	vfma.f32	s1, s14, s13
    65d6:	vldr	s3, [pc, #516]	; 67dc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11fc>
    65da:	vldr	s13, [pc, #516]	; 67e0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1200>
    65de:	vldr	s11, [pc, #516]	; 67e4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1204>
    65e2:	vfma.f32	s2, s14, s1
    65e6:	vfma.f32	s3, s14, s2
    65ea:	vfma.f32	s13, s14, s3
    65ee:	vfma.f32	s11, s14, s13
    65f2:	vmul.f32	s11, s11, s15
    65f6:	vmov.f32	s15, s5
    65fa:	vadd.f32	s13, s11, s5
    65fe:	vfma.f32	s15, s11, s0
    6602:	vfma.f32	s13, s11, s11
    6606:	vfma.f32	s15, s11, s11
    660a:	vdiv.f32	s14, s5, s13
    660e:	vdiv.f32	s13, s5, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6612:	vstr	s11, [r4, #280]	; 0x118
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6616:	vstr	s14, [r4, #288]	; 0x120
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    661a:	vldr	s2, [r4, #292]	; 0x124
    float state_2 = state_2_;
    661e:	vldr	s3, [r4, #296]	; 0x128
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6622:	vmov.f32	s0, #112	; 0x3f800000  1.0
    6626:	vstr	s0, [r4, #284]	; 0x11c
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    662a:	cmp	r5, #0
    662c:	beq.w	6900 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1320>
    6630:	vmov.f32	s5, s11
    6634:	mov	r1, r6
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    6636:	mov	r3, r2
    6638:	b.n	6646 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1066>
    663a:	vldr	s0, [r4, #284]	; 0x11c
    663e:	vldr	s5, [r4, #280]	; 0x118
    6642:	vldr	s14, [r4, #288]	; 0x120
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6646:	vneg.f32	s1, s2
    664a:	vldr	s15, [r1]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    664e:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6650:	vfma.f32	s15, s1, s0
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6654:	adds	r0, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6656:	vfma.f32	s15, s1, s5
    665a:	vsub.f32	s15, s15, s3
    665e:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    6662:	vmov.f32	s14, s2
    6666:	vfma.f32	s14, s15, s5
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    666a:	vfma.f32	s3, s14, s5
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    666e:	vstmia	r1!, {s14}
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    6672:	vmov.f32	s2, s14
    6676:	vfma.f32	s2, s15, s5
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    667a:	vfma.f32	s3, s14, s5
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    667e:	bne.n	663a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x105a>
        out, out, size);
    
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    6680:	vmul.f32	s4, s4, s4
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    6684:	vstr	s2, [r4, #292]	; 0x124
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    6688:	vmov.f32	s14, #112	; 0x3f800000  1.0
    state_2_ = state_2;
    668c:	vstr	s3, [r4, #296]	; 0x128
    6690:	vmov.f32	s15, #48	; 0x41800000  16.0
    6694:	vsub.f32	s14, s14, s4
    6698:	vfma.f32	s15, s14, s15
    669c:	vmul.f32	s12, s15, s12
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    66a0:	vcmpe.f32	s12, #0.0
    66a4:	vmrs	APSR_nzcv, fpscr
    66a8:	bmi.w	68ec <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x130c>
    66ac:	vmov.f32	s15, #96	; 0x3f000000  0.5
    66b0:	vcmp.f32	s12, s15
    66b4:	vmrs	APSR_nzcv, fpscr
    66b8:	it	gt
    66ba:	vmovgt.f32	s12, s15
    66be:	ldr.w	sl, [pc, #304]	; 67f0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1210>
    66c2:	mov.w	r8, #0
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
    66c6:	vmov.f32	s5, #112	; 0x3f800000  1.0
    66ca:	mov	r1, r6
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    66cc:	vmov.f32	s2, #224	; 0xbf000000 -0.5
    66d0:	ldr.w	r3, [sl]
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    66d4:	mov	r7, r8
    66d6:	mov	r0, r6
    66d8:	ldr.w	ip, [pc, #280]	; 67f4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1214>
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    66dc:	vldr	s3, [pc, #264]	; 67e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1208>
    66e0:	b.n	671c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x113c>
    66e2:	ldr	r3, [pc, #264]	; (67ec <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x120c>)
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    66e4:	vsub.f32	s15, s15, s5
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    66e8:	vmov.f32	s14, s2
    66ec:	mov.w	r8, #1
    66f0:	add	r3, lr
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    66f2:	vstr	s15, [r4, #100]	; 0x64
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    66f6:	vmov	s15, r3
    66fa:	vcvt.f32.u32	s15, s15
    66fe:	vfma.f32	s14, s15, s3
    6702:	vstr	s14, [r4, #104]	; 0x68
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    6706:	vldr	s15, [r0]
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    670a:	adds	r7, #1
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    670c:	vsub.f32	s14, s14, s15
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    6710:	cmp	r5, r7
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    6712:	vfma.f32	s15, s14, s4
    6716:	vstmia	r0!, {s15}
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    671a:	bls.n	673c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x115c>
      noise_clock_ += noise_f;
    671c:	vldr	s15, [r4, #100]	; 0x64
    6720:	mul.w	lr, ip, r3
    6724:	vadd.f32	s15, s12, s15
      if (noise_clock_ >= 1.0f) {
    6728:	vcmpe.f32	s15, s5
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
    672c:	vstr	s15, [r4, #100]	; 0x64
      if (noise_clock_ >= 1.0f) {
    6730:	vmrs	APSR_nzcv, fpscr
    6734:	bge.n	66e2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1102>
    6736:	vldr	s14, [r4, #104]	; 0x68
    673a:	b.n	6706 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1126>
    673c:	cmp.w	r8, #0
    6740:	bne.w	6940 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1360>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6744:	vldr	s5, [r4, #108]	; 0x6c
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    6748:	vmov.f32	s12, #96	; 0x3f000000  0.5
    increment_ = (new_value - *state) / static_cast<float>(size);
    674c:	movs	r3, #0
    674e:	ldr	r0, [sp, #40]	; 0x28
    6750:	vmov.f32	s15, s5
    6754:	vfnms.f32	s15, s6, s7
    6758:	vdiv.f32	s7, s15, s10
    675c:	vldr	s15, [r4, #96]	; 0x60
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    6760:	adds	r3, #1
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    6762:	vcmpe.f32	s15, s12
    6766:	vmrs	APSR_nzcv, fpscr
    676a:	ite	le
    676c:	vmovle.f32	s14, s8
    6770:	vmovgt.f32	s14, s9
    6774:	vmul.f32	s15, s15, s14
    6778:	vstr	s15, [r4, #96]	; 0x60
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    677c:	vldr	s14, [r1]
    6780:	cbz	r0, 678a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11aa>
  }

  inline float Next() {
    value_ += increment_;
    6782:	vadd.f32	s5, s5, s7
    6786:	vmov.f32	s15, s5
    678a:	vmul.f32	s15, s14, s15
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    678e:	cmp	r5, r3
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    6790:	vstmia	r1!, {s15}
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    6794:	bhi.n	675c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x117c>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6796:	vmov.f32	s9, #0	; 0x40000000  2.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    679a:	vstr	s11, [r4, #300]	; 0x12c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    679e:	vstr	s13, [r4, #308]	; 0x134
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    67a2:	vldr	s12, [r4, #312]	; 0x138
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    67a6:	vstr	s9, [r4, #304]	; 0x130
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    67aa:	vldr	s14, [r4, #316]	; 0x13c
    67ae:	b.n	6818 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1238>
    67b0:	.word	0x00000000
    67b4:	.word	0x358637bd
    67b8:	.word	0x42900000
    67bc:	.word	0x43000000
    67c0:	.word	0x20000024
    67c4:	.word	0x3b4ccccd
    67c8:	.word	0x20000428
    67cc:	.word	0x3eaaaaab
    67d0:	.word	0x452efe23
    67d4:	.word	0x42acec90
    67d8:	.word	0x4321348f
    67dc:	.word	0x42234866
    67e0:	.word	0x41255da8
    67e4:	.word	0x40490fdb
    67e8:	.word	0x2f800000
    67ec:	.word	0x3c6ef35f
    67f0:	.word	0x2001f96c
    67f4:	.word	0x0019660d
    67f8:	.word	0x3e385c19
    67fc:	.word	0x3e0d508c
    6800:	.word	0x403732c1
    6804:	.word	0x3fd88fab
    6808:	.word	0x00000000
    680c:	vldr	s9, [r4, #304]	; 0x130
    6810:	vldr	s11, [r4, #300]	; 0x12c
    6814:	vldr	s13, [r4, #308]	; 0x134
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6818:	vneg.f32	s10, s12
    681c:	vldr	s15, [r6]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6820:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6822:	vfma.f32	s15, s10, s9
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6826:	adds	r3, r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6828:	vfma.f32	s15, s10, s11
    682c:	vsub.f32	s15, s15, s14
    6830:	vmul.f32	s15, s15, s13
      bp = g_ * hp + state_1;
    6834:	vmov.f32	s13, s12
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    6838:	vstmia	r6!, {s15}
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
    683c:	vfma.f32	s13, s15, s11
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    6840:	vfma.f32	s14, s13, s11
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    6844:	vmov.f32	s12, s13
    6848:	vfma.f32	s12, s15, s11
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    684c:	vfma.f32	s14, s13, s11
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6850:	bne.n	680c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122c>
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    6852:	vstr	s12, [r4, #312]	; 0x138
    state_2_ = state_2;
    6856:	vstr	s14, [r4, #316]	; 0x13c
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    685a:	vstr	s5, [r4, #108]	; 0x6c
      parameters.harmonics,
      temp_buffer_[0],
      temp_buffer_[1],
      aux,
      size);
}
    685e:	add	sp, #164	; 0xa4
    6860:	vpop	{d8-d14}
    6864:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6868:	vmov.f32	s5, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    686c:	vmov.f32	s15, #96	; 0x3f000000  0.5
    6870:	b.n	6490 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeb0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6872:	vmov.f32	s11, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    6876:	vmov.f32	s15, #96	; 0x3f000000  0.5
    687a:	b.n	634a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd6a>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    687c:	vmov.f32	s0, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    6880:	vmov.f32	s15, #96	; 0x3f000000  0.5
    6884:	b.n	6230 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc50>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6886:	vmov.f32	s16, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    688a:	vmov.f32	s15, #96	; 0x3f000000  0.5
    688e:	b.n	60d8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaf8>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6890:	vmov.f32	s25, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    6894:	vmov.f32	s15, #96	; 0x3f000000  0.5
    6898:	b.w	5f80 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    689c:	vmov.f32	s15, s14
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    68a0:	vmov.f32	s14, #96	; 0x3f000000  0.5
    68a4:	b.w	5e24 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x844>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    68a8:	movs	r3, #0
    68aa:	mov	r2, r3
    68ac:	b.w	5624 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);

    // Apply BPF on the metallic noise.
    float cutoff = 150.0f / kSampleRate * stmlib::SemitonesToRatio(
        tone * 72.0f);
    CONSTRAIN(cutoff, 0.0f, 16000.0f / kSampleRate);
    68b0:	vldr	s13, [pc, #-184]	; 67fc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x121c>
    68b4:	vldr	s14, [pc, #-192]	; 67f8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1218>
    68b8:	vldr	s11, [pc, #-184]	; 6804 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1224>
    68bc:	b.n	6612 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1032>
    68be:	vldr	s13, [pc, #-196]	; 67fc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x121c>
    68c2:	vldr	s16, [pc, #-196]	; 6800 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1220>
    68c6:	vldr	s9, [pc, #-196]	; 6804 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1224>
    68ca:	b.w	59da <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fa>
    68ce:	vmov.f32	s13, #112	; 0x3f800000  1.0
    68d2:	vldr	s11, [pc, #-204]	; 6808 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    68d6:	vmov.f32	s14, s13
    68da:	b.n	6612 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1032>
    68dc:	vldr	s16, [pc, #-216]	; 6808 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    68e0:	vmov.f32	s13, #112	; 0x3f800000  1.0
    68e4:	vmov.f32	s9, s16
    68e8:	b.w	59da <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fa>
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    68ec:	vldr	s12, [pc, #-232]	; 6808 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    68f0:	b.n	66be <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10de>
    68f2:	vldr	s11, [pc, #-236]	; 6808 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    68f6:	b.w	5aa6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c6>
    68fa:	ldr	r3, [sp, #136]	; 0x88
    68fc:	b.w	58c4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e4>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6900:	mov.w	r3, #1073741824	; 0x40000000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6904:	vstr	s11, [r4, #300]	; 0x12c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6908:	vstr	s13, [r4, #308]	; 0x134
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    690c:	vldr	s5, [r4, #108]	; 0x6c
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6910:	str.w	r3, [r4, #304]	; 0x130
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    6914:	vldr	s12, [r4, #312]	; 0x138
    float state_2 = state_2_;
    6918:	vldr	s14, [r4, #316]	; 0x13c
    691c:	b.n	6852 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1272>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    691e:	mov.w	r3, #1073741824	; 0x40000000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6922:	vstr	s9, [r4, #76]	; 0x4c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6926:	vstr	s13, [r4, #84]	; 0x54
    692a:	vldr	s2, [r4, #28]
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    692e:	str	r3, [r4, #80]	; 0x50
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    6930:	vldr	s11, [r4, #88]	; 0x58
    float state_2 = state_2_;
    6934:	vldr	s14, [r4, #92]	; 0x5c
    increment_ = (new_value - *state) / static_cast<float>(size);
    6938:	vldr	s10, [pc, #-308]	; 6808 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    693c:	b.w	5c8e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ae>
    6940:	str.w	r3, [sl]
    6944:	b.n	6744 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1164>
    6946:	str.w	r3, [sl]
    694a:	b.w	5b54 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x574>
    694e:	nop

00006950 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)>:
  { 0.00f, 4.00f,  7.00f, 12.00f },  // M
};

#endif  // JON_CHORDS

void ChordEngine::Init(BufferAllocator* allocator) {
    6950:	push	{r4, r5, r6, r7, lr}
    6952:	mov	ip, r1
 public:
  StringSynthOscillator() { }
  ~StringSynthOscillator() { }
  
  inline void Init() {
    phase_ = 0.0f;
    6954:	movs	r3, #0
    next_sample_ = 0.0f;
    segment_ = 0.0f;
    6956:	movs	r1, #0
    6958:	mov	r4, r0
    695a:	add.w	lr, r0, #140	; 0x8c
    695e:	mov	r2, r0
    
    frequency_ = 0.001f;
    6960:	ldr	r7, [pc, #100]	; (69c8 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)+0x78>)
 public:
  StringSynthOscillator() { }
  ~StringSynthOscillator() { }
  
  inline void Init() {
    phase_ = 0.0f;
    6962:	str	r3, [r2, #16]
    6964:	adds	r4, #28
    next_sample_ = 0.0f;
    6966:	str	r3, [r2, #20]
    segment_ = 0.0f;
    6968:	movs	r5, #0
    696a:	str	r1, [r2, #24]
 public:
  StringSynthOscillator() { }
  ~StringSynthOscillator() { }
  
  inline void Init() {
    phase_ = 0.0f;
    696c:	movs	r6, #0
    next_sample_ = 0.0f;
    segment_ = 0.0f;
    
    frequency_ = 0.001f;
    696e:	str	r7, [r2, #28]
    6970:	adds	r2, #32
    saw_8_gain_ = 0.0f;
    6972:	str	r3, [r2, #0]
    saw_4_gain_ = 0.0f;
    6974:	str	r3, [r2, #4]
    saw_2_gain_ = 0.0f;
    6976:	str	r3, [r2, #8]
    saw_1_gain_ = 0.0f;
    6978:	str	r3, [r2, #12]
 public:
  WavetableOscillator() { }
  ~WavetableOscillator() { }

  void Init() {
    phase_ = 0.0f;
    697a:	str.w	r3, [r4, #148]	; 0x94
    frequency_ = 0.0f;
    697e:	str.w	r3, [r4, #152]	; 0x98
    amplitude_ = 0.0f;
    6982:	str.w	r3, [r4, #156]	; 0x9c
    waveform_ = 0.0f;
    6986:	str.w	r3, [r4, #160]	; 0xa0
    lp_ = 0.0f;
    698a:	str.w	r3, [r4, #164]	; 0xa4
 public:
  Differentiator() { }
  ~Differentiator() { }

  void Init() {
    previous_ = 0.0f;
    698e:	str.w	r3, [r4, #172]	; 0xac
    lp_ = 0.0f;
    6992:	str.w	r3, [r4, #168]	; 0xa8
  for (int i = 0; i < kChordNumVoices; ++i) {
    6996:	cmp	r4, lr
    6998:	bne.n	6962 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)+0x12>
 public:
  HysteresisQuantizer() { }
  ~HysteresisQuantizer() { }

  void Init() {
    quantized_value_ = 0;
    699a:	str.w	r5, [r0, #316]	; 0x13c
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    699e:	ldr.w	r3, [ip, #8]
    divide_down_voice_[i].Init();
    wavetable_voice_[i].Init();
  }
  chord_index_quantizer_.Init();
  morph_lp_ = 0.0f;
    69a2:	str.w	r6, [r0, #320]	; 0x140
    69a6:	cmp	r3, #175	; 0xaf
  timbre_lp_ = 0.0f;
    69a8:	str.w	r6, [r0, #324]	; 0x144
    69ac:	bls.n	69c0 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)+0x70>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    69ae:	ldr.w	r5, [ip]
      next_ += size_bytes;
      free_ -= size_bytes;
    69b2:	subs	r3, #176	; 0xb0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    69b4:	add.w	r2, r5, #176	; 0xb0
      free_ -= size_bytes;
    69b8:	str.w	r3, [ip, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    69bc:	str.w	r2, [ip]
  
  ratios_ = allocator->Allocate<float>(kChordNumChords * kChordNumNotes);
    69c0:	str.w	r5, [r0, #332]	; 0x14c
    69c4:	pop	{r4, r5, r6, r7, pc}
    69c6:	nop
    69c8:	.word	0x3a83126f

000069cc <plaits::ChordEngine::Reset()>:
}

void ChordEngine::Reset() {
    69cc:	ldr.w	r2, [r0, #332]	; 0x14c
    69d0:	vldr	s15, [pc, #112]	; 6a44 <plaits::ChordEngine::Reset()+0x78>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    69d4:	vldr	s11, [pc, #112]	; 6a48 <plaits::ChordEngine::Reset()+0x7c>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    69d8:	vldr	s12, [pc, #112]	; 6a4c <plaits::ChordEngine::Reset()+0x80>
    69dc:	push	{r4, r5, r6, r7}
    69de:	ldr	r6, [pc, #112]	; (6a50 <plaits::ChordEngine::Reset()+0x84>)
    69e0:	add.w	r7, r2, #176	; 0xb0
    69e4:	ldr	r5, [pc, #108]	; (6a54 <plaits::ChordEngine::Reset()+0x88>)
    69e6:	ldr	r4, [pc, #112]	; (6a58 <plaits::ChordEngine::Reset()+0x8c>)
    69e8:	add.w	r0, r2, #16
    69ec:	mov	r1, r6

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    69ee:	vadd.f32	s15, s15, s11
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    69f2:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    69f6:	vcvt.f32.s32	s13, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    69fa:	vmov	r3, s14
    69fe:	add.w	r3, r4, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6a02:	vsub.f32	s15, s15, s13
  for (int i = 0; i < kChordNumChords; ++i) {
    for (int j = 0; j < kChordNumNotes; ++j) {
      ratios_[i * kChordNumNotes + j] = SemitonesToRatio(chords[i][j]);
    6a06:	vldr	s14, [r3]
    6a0a:	vmul.f32	s15, s15, s12
    6a0e:	vcvt.s32.f32	s15, s15
    6a12:	vmov	r3, s15
    6a16:	add.w	r3, r5, r3, lsl #2
    6a1a:	vldr	s15, [r3]
    6a1e:	vmul.f32	s15, s15, s14
    6a22:	vstmia	r2!, {s15}
  ratios_ = allocator->Allocate<float>(kChordNumChords * kChordNumNotes);
}

void ChordEngine::Reset() {
  for (int i = 0; i < kChordNumChords; ++i) {
    for (int j = 0; j < kChordNumNotes; ++j) {
    6a26:	cmp	r0, r2
    6a28:	beq.n	6a32 <plaits::ChordEngine::Reset()+0x66>
    6a2a:	adds	r1, #4
    6a2c:	vldr	s15, [r1]
    6a30:	b.n	69ee <plaits::ChordEngine::Reset()+0x22>
  
  ratios_ = allocator->Allocate<float>(kChordNumChords * kChordNumNotes);
}

void ChordEngine::Reset() {
  for (int i = 0; i < kChordNumChords; ++i) {
    6a32:	cmp	r2, r7
    6a34:	beq.n	6a3e <plaits::ChordEngine::Reset()+0x72>
    6a36:	adds	r6, #16
    6a38:	vldr	s15, [r6]
    6a3c:	b.n	69e8 <plaits::ChordEngine::Reset()+0x1c>
    for (int j = 0; j < kChordNumNotes; ++j) {
      ratios_[i * kChordNumNotes + j] = SemitonesToRatio(chords[i][j]);
    }
  }
}
    6a3e:	pop	{r4, r5, r6, r7}
    6a40:	bx	lr
    6a42:	nop
    6a44:	.word	0x00000000
    6a48:	.word	0x43000000
    6a4c:	.word	0x43800000
    6a50:	.word	0x2001f358
    6a54:	.word	0x20000428
    6a58:	.word	0x20000024

00006a5c <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)>:
    int chord_index,
    float inversion,
    float* ratios,
    float* amplitudes) {
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);
    6a5c:	vmov.f32	s15, #52	; 0x41a00000  20.0

int ChordEngine::ComputeChordInversion(
    int chord_index,
    float inversion,
    float* ratios,
    float* amplitudes) {
    6a60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);
    6a64:	vmul.f32	s0, s0, s15

int ChordEngine::ComputeChordInversion(
    int chord_index,
    float inversion,
    float* ratios,
    float* amplitudes) {
    6a68:	sub	sp, #20
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
    6a6a:	vcvt.s32.f32	s15, s0
    6a6e:	vmov	r4, s15
    6a72:	vcvt.f32.s32	s15, s15
  
  int num_rotations = inversion_integral / kChordNumNotes;
    6a76:	cmp	r4, #0
    float* ratios,
    float* amplitudes) {
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
    6a78:	vsub.f32	s0, s0, s15
  
  int num_rotations = inversion_integral / kChordNumNotes;
    6a7c:	blt.n	6b3a <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xde>
    6a7e:	mov	ip, r4
    6a80:	add.w	r8, r4, #3
  int rotated_note = inversion_integral % kChordNumNotes;
    6a84:	ldr.w	lr, [pc, #304]	; 6bb8 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x15c>
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
  
  int num_rotations = inversion_integral / kChordNumNotes;
    6a88:	mov.w	ip, ip, asr #2
  int rotated_note = inversion_integral % kChordNumNotes;
    6a8c:	and.w	lr, r4, lr
    6a90:	cmp.w	lr, #0
    6a94:	blt.n	6b42 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xe6>
    6a96:	ldr.w	r0, [r0, #332]	; 0x14c
    6a9a:	movs	r7, #1
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    6a9c:	vmov.f32	s13, #80	; 0x3e800000  0.250
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
  
  int num_rotations = inversion_integral / kChordNumNotes;
  int rotated_note = inversion_integral % kChordNumNotes;
    6aa0:	movs	r5, #0
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    6aa2:	vmov.f32	s12, #112	; 0x3f800000  1.0
    6aa6:	rsb	ip, ip, #5
    6aaa:	add.w	r1, r0, r1, lsl #4
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    6aae:	mov	sl, r7
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    6ab0:	ldr.w	r9, [pc, #264]	; 6bbc <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x160>
  int num_rotations = inversion_integral / kChordNumNotes;
  int rotated_note = inversion_integral % kChordNumNotes;
  
  const float kBaseGain = 0.25f;
  
  int mask = 0;
    6ab4:	str	r5, [sp, #0]
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    6ab6:	subs.w	r0, r8, r5
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    6aba:	add.w	r6, ip, r5
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    6abe:	vldr	s14, [r1]
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    6ac2:	it	mi
    6ac4:	addmi	r0, #3
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
    6ac6:	cmp	lr, r5
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    6ac8:	mov.w	r4, r0, asr #2
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    6acc:	smull	fp, r0, r9, r6
    6ad0:	mov.w	fp, r6, asr #31
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    6ad4:	lsl.w	r4, sl, r4
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    6ad8:	rsb	r0, fp, r0, asr #1
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    6adc:	vmov	s15, r4
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    6ae0:	add.w	r0, r0, r0, lsl #2
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    6ae4:	vcvt.f32.s32	s15, s15
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    6ae8:	sub.w	r0, r6, r0
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    6aec:	add.w	r6, r0, #4
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    6af0:	vmul.f32	s15, s15, s13
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    6af4:	smull	r4, fp, r9, r6
    6af8:	mov.w	r4, r6, asr #31
    6afc:	rsb	r4, r4, fp, asr #1
    6b00:	add.w	r4, r4, r4, lsl #2
    6b04:	sub.w	r4, r6, r4
    
    if (i == rotated_note) {
    6b08:	beq.n	6b70 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x114>
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    } else if (i < rotated_note) {
      ratios[previous_voice] = base_ratio[i] * transposition;
    6b0a:	it	gt
    6b0c:	lslgt	r6, r4, #2
      amplitudes[previous_voice] = kBaseGain;
    } else {
      ratios[target_voice] = base_ratio[i] * transposition;
    6b0e:	vmul.f32	s15, s14, s15
    6b12:	it	le
    6b14:	lslle	r6, r0, #2
    6b16:	add.w	fp, r2, r6
      amplitudes[target_voice] = kBaseGain;
    6b1a:	add	r6, r3
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    } else if (i < rotated_note) {
      ratios[previous_voice] = base_ratio[i] * transposition;
      amplitudes[previous_voice] = kBaseGain;
    } else {
      ratios[target_voice] = base_ratio[i] * transposition;
    6b1c:	vstr	s15, [fp]
      amplitudes[target_voice] = kBaseGain;
    6b20:	vstr	s13, [r6]
    }
    
    if (i == 0) {
    6b24:	cbz	r5, 6b50 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xf4>
  
  const float kBaseGain = 0.25f;
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    6b26:	cmp	r7, #4
    6b28:	beq.n	6b32 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xd6>
    6b2a:	adds	r5, #1
    6b2c:	adds	r7, #1
    6b2e:	adds	r1, #4
    6b30:	b.n	6ab6 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x5a>
        mask |= 1 << previous_voice;
      }
    }
  }
  return mask;
}
    6b32:	ldr	r0, [sp, #0]
    6b34:	add	sp, #20
    6b36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
  
  int num_rotations = inversion_integral / kChordNumNotes;
    6b3a:	add.w	r8, r4, #3
    6b3e:	mov	ip, r8
    6b40:	b.n	6a84 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x28>
  int rotated_note = inversion_integral % kChordNumNotes;
    6b42:	add.w	lr, lr, #4294967295
    6b46:	orn	lr, lr, #3
    6b4a:	add.w	lr, lr, #1
    6b4e:	b.n	6a96 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x3a>
      ratios[target_voice] = base_ratio[i] * transposition;
      amplitudes[target_voice] = kBaseGain;
    }
    
    if (i == 0) {
      if (i >= rotated_note) {
    6b50:	cmp.w	lr, #0
    6b54:	bgt.n	6b64 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x108>
        mask |= 1 << target_voice;
    6b56:	ldr	r6, [sp, #0]
    6b58:	lsl.w	r0, sl, r0
    6b5c:	orr.w	r6, r6, r0
    6b60:	str	r6, [sp, #0]
      }
      if (i <= rotated_note) {
    6b62:	bne.n	6b2a <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xce>
        mask |= 1 << previous_voice;
    6b64:	ldr	r0, [sp, #0]
    6b66:	lsl.w	r4, sl, r4
    6b6a:	orrs	r0, r4
    6b6c:	str	r0, [sp, #0]
    6b6e:	b.n	6b2a <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xce>
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    6b70:	mov.w	fp, r0, lsl #2
    6b74:	vmul.f32	s15, s15, s14
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    6b78:	vsub.f32	s11, s12, s0
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    6b7c:	add.w	r6, r2, fp
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    6b80:	add	fp, r3
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    6b82:	vmul.f32	s10, s0, s13
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    6b86:	str	r6, [sp, #4]
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    6b88:	lsls	r6, r4, #2
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    6b8a:	str.w	fp, [sp, #12]
    6b8e:	vmul.f32	s14, s11, s13
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    6b92:	add.w	fp, r2, r6
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    6b96:	add	r6, r3
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    6b98:	vadd.f32	s11, s15, s15
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    6b9c:	str	r6, [sp, #8]
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    6b9e:	ldr	r6, [sp, #4]
    6ba0:	vstr	s15, [r6]
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    6ba4:	ldr	r6, [sp, #8]
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    6ba6:	vstr	s11, [fp]
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    6baa:	vstr	s10, [r6]
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    6bae:	ldr	r6, [sp, #12]
    6bb0:	vstr	s14, [r6]
    6bb4:	b.n	6b24 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xc8>
    6bb6:	nop
    6bb8:	.word	0x80000003
    6bbc:	.word	0x66666667

00006bc0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    6bc0:	vldr	s14, [r1, #16]
    6bc4:	vmov.f32	s13, #36	; 0x41200000  10.0
    6bc8:	vldr	s12, [pc, #664]	; 6e64 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a4>
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    6bcc:	vmov.f32	s10, #208	; 0xbe800000 -0.250
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    6bd0:	vldr	s15, [pc, #660]	; 6e68 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    6bd4:	vmov.f32	s5, #80	; 0x3e800000  0.250
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    6bd8:	vmul.f32	s14, s14, s12
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    6bdc:	vldr	s12, [r0, #316]	; 0x13c
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    6be0:	vldr	s8, [r1, #12]
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    6be4:	vmov.f32	s6, #96	; 0x3f000000  0.5
  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    6be8:	vcvt.f32.s32	s9, s12
    6bec:	vldr	s11, [r0, #320]	; 0x140
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    6bf0:	vmov.f32	s12, s15
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    6bf4:	vldr	s0, [r0, #324]	; 0x144
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    6bf8:	vsub.f32	s8, s8, s11
    6bfc:	vldr	s7, [pc, #620]	; 6e6c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
  const int chord_index = chord_index_quantizer_.Process(
      parameters.harmonics * 1.02f, kChordNumChords);

  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
    6c00:	vldr	s4, [pc, #620]	; 6e70 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
    6c04:	vfma.f32	s12, s14, s13
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    6c08:	vldr	s13, [r1, #8]
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    6c0c:	vfma.f32	s11, s8, s7
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    6c10:	vsub.f32	s13, s13, s0
  const int chord_index = chord_index_quantizer_.Process(
      parameters.harmonics * 1.02f, kChordNumChords);

  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
    6c14:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    6c18:	vfma.f32	s0, s13, s7
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    6c1c:	vcmpe.f32	s12, s9
  const int chord_index = chord_index_quantizer_.Process(
      parameters.harmonics * 1.02f, kChordNumChords);

  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
    6c20:	vmov.f32	s13, s14
    6c24:	vmrs	APSR_nzcv, fpscr
    6c28:	vfms.f32	s13, s11, s4
void ChordEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    6c2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c30:	vpush	{d8-d14}
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    6c34:	vstr	s11, [r0, #320]	; 0x140
    6c38:	ite	le
    6c3a:	vmovle.f32	s11, s5
    6c3e:	vmovgt.f32	s11, s10
void ChordEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    6c42:	mov	r4, r1
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    6c44:	vcmpe.f32	s13, s15
    6c48:	sub	sp, #132	; 0x84
    6c4a:	mov	sl, r0
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    6c4c:	vadd.f32	s12, s12, s11
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    6c50:	vstr	s0, [r0, #324]	; 0x144
void ChordEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    6c54:	str	r2, [sp, #4]
    6c56:	str	r3, [sp, #8]
    6c58:	vadd.f32	s12, s12, s6
    6c5c:	vcvt.s32.f32	s12, s12
    6c60:	vmov	r1, s12
    6c64:	cmp	r1, #10
    6c66:	it	ge
    6c68:	movge	r1, #10
    6c6a:	vmrs	APSR_nzcv, fpscr
    6c6e:	bic.w	r1, r1, r1, asr #31
    CONSTRAIN(q, 0, num_steps - 1);
    quantized_value_ = q;
    6c72:	str.w	r1, [r0, #316]	; 0x13c
    6c76:	bmi.w	739c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7dc>
    6c7a:	vldr	s15, [pc, #504]	; 6e74 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    6c7e:	ldr	r6, [pc, #504]	; (6e78 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>)
    6c80:	vmul.f32	s13, s13, s15
    6c84:	vcvt.s32.f32	s15, s13
    6c88:	vmov	r3, s15
    6c8c:	vcvt.f32.s32	s15, s15
    6c90:	adds	r0, r3, #1
    6c92:	lsls	r2, r3, #1
    6c94:	vsub.f32	s13, s13, s15
    6c98:	mov.w	ip, r0, lsl #1
    6c9c:	add.w	lr, r2, r3
    6ca0:	add.w	r7, ip, r0
    6ca4:	add.w	lr, r6, lr, lsl #3
    6ca8:	add.w	r7, r6, r7, lsl #3
    6cac:	vldr	s15, [lr]
    6cb0:	vldr	s14, [r7]
    6cb4:	add	r2, r3
    6cb6:	add	r0, ip
    float registration,
    float* amplitudes) {
  registration *= (kRegistrationTableSize - 1.001f);
  MAKE_INTEGRAL_FRACTIONAL(registration);
  
  for (int i = 0; i < kChordNumHarmonics * 2; ++i) {
    6cb8:	movs	r3, #0
    6cba:	add.w	r2, r6, r2, lsl #3
    6cbe:	add.w	r0, r6, r0, lsl #3
    6cc2:	add	r6, sp, #96	; 0x60
    6cc4:	b.n	6cd2 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x112>
    6cc6:	adds	r2, #4
    6cc8:	adds	r0, #4
    6cca:	vldr	s15, [r2]
    6cce:	vldr	s14, [r0]
    float a = registrations[registration_integral][i];
    float b = registrations[registration_integral + 1][i];
    amplitudes[i] = a + (b - a) * registration_fractional;
    6cd2:	vsub.f32	s14, s14, s15
    float registration,
    float* amplitudes) {
  registration *= (kRegistrationTableSize - 1.001f);
  MAKE_INTEGRAL_FRACTIONAL(registration);
  
  for (int i = 0; i < kChordNumHarmonics * 2; ++i) {
    6cd6:	adds	r3, #1
    6cd8:	cmp	r3, #6
    float a = registrations[registration_integral][i];
    float b = registrations[registration_integral + 1][i];
    amplitudes[i] = a + (b - a) * registration_fractional;
    6cda:	vfma.f32	s15, s14, s13
    6cde:	vstmia	r6!, {s15}
    float registration,
    float* amplitudes) {
  registration *= (kRegistrationTableSize - 1.001f);
  MAKE_INTEGRAL_FRACTIONAL(registration);
  
  for (int i = 0; i < kChordNumHarmonics * 2; ++i) {
    6ce2:	bne.n	6cc6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x106>
  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
  
  ComputeRegistration(registration, harmonics);
  harmonics[kChordNumHarmonics * 2] = 0.0f;
    6ce4:	movs	r6, #0
  float ratios[kChordNumVoices];
  int aux_note_mask = ComputeChordInversion(
      chord_index,
      timbre_lp_,
      ratios,
      note_amplitudes);
    6ce6:	add	r3, sp, #28
    6ce8:	add	r2, sp, #48	; 0x30
    6cea:	mov	r0, sl
  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
  
  ComputeRegistration(registration, harmonics);
  harmonics[kChordNumHarmonics * 2] = 0.0f;
    6cec:	str	r6, [sp, #120]	; 0x78
  float ratios[kChordNumVoices];
  int aux_note_mask = ComputeChordInversion(
      chord_index,
      timbre_lp_,
      ratios,
      note_amplitudes);
    6cee:	bl	6a5c <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)>
  
  fill(&out[0], &out[size], 0.0f);
    6cf2:	ldr	r3, [sp, #224]	; 0xe0
    6cf4:	ldr	r2, [sp, #4]
    6cf6:	mov.w	r8, r3, lsl #2
  float ratios[kChordNumVoices];
  int aux_note_mask = ComputeChordInversion(
      chord_index,
      timbre_lp_,
      ratios,
      note_amplitudes);
    6cfa:	str	r0, [sp, #12]
  
  fill(&out[0], &out[size], 0.0f);
    6cfc:	add.w	r1, r2, r8
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    6d00:	cmp	r2, r1
    6d02:	beq.n	6d10 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x150>
	*__first = __tmp;
    6d04:	mov	r2, r6
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    6d06:	ldr	r3, [sp, #4]
	*__first = __tmp;
    6d08:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    6d0c:	cmp	r1, r3
    6d0e:	bne.n	6d08 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x148>
  fill(&aux[0], &aux[size], 0.0f);
    6d10:	ldr	r2, [sp, #8]
    6d12:	add	r8, r2
    6d14:	mov	r3, r2
    6d16:	cmp	r2, r8
    6d18:	beq.n	6d24 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
	*__first = __tmp;
    6d1a:	movs	r2, #0
    6d1c:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    6d20:	cmp	r8, r3
    6d22:	bne.n	6d1c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15c>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    6d24:	vmov.f32	s13, #34	; 0x41100000  9.0
    6d28:	vldr	s15, [r4, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    6d2c:	vldr	s14, [pc, #332]	; 6e7c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    6d30:	vsub.f32	s15, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    6d34:	vcmpe.f32	s15, s14
    6d38:	vmrs	APSR_nzcv, fpscr
    6d3c:	bpl.w	7362 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a2>
    6d40:	movs	r3, #0
    6d42:	mov	r1, r3
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
    6d44:	vldr	s20, [pc, #312]	; 6e80 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    6d48:	add.w	fp, sp, #28

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6d4c:	ldr	r2, [pc, #308]	; (6e84 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>)
    6d4e:	mov	r9, sl
    6d50:	vldr	s15, [sl, #320]	; 0x140
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    6d54:	mov	r4, sl
    6d56:	add.w	r1, r2, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6d5a:	ldr	r2, [pc, #300]	; (6e88 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c8>)
    6d5c:	vsub.f32	s14, s15, s20
    6d60:	vldr	s20, [pc, #268]	; 6e70 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
    6d64:	add.w	r3, r2, r3, lsl #2
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    6d68:	vldr	s19, [pc, #288]	; 6e8c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    6d6c:	vldr	s12, [pc, #248]	; 6e68 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    6d70:	movs	r7, #0
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
    6d72:	vmul.f32	s20, s14, s20
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    6d76:	vldr	s13, [r3]
    6d7a:	vldr	s14, [r1]
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);
    6d7e:	vmov.f32	s18, s12
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    6d82:	vldr	s11, [pc, #268]	; 6e90 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d0>
    6d86:	vcmp.f32	s20, #0.0
    6d8a:	ldr	r3, [pc, #264]	; (6e94 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d4>)
    6d8c:	vmul.f32	s13, s14, s13
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    6d90:	vldr	s21, [pc, #260]	; 6e98 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d8>
    6d94:	vldr	s14, [pc, #260]	; 6e9c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2dc>
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    6d98:	mov	r6, r3
    6d9a:	vmrs	APSR_nzcv, fpscr
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
      const float f0 = frequency_modulation.Next();
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
    6d9e:	vldr	s17, [pc, #256]	; 6ea0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e0>
    6da2:	vmul.f32	s13, s13, s19
    6da6:	str.w	r8, [sp, #20]
    6daa:	it	mi
    6dac:	vmovmi.f32	s20, s12
    6db0:	vmul.f32	s19, s13, s11
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    6db4:	vsub.f32	s15, s15, s14
    6db8:	vmul.f32	s15, s15, s21
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);
    6dbc:	vcmpe.f32	s15, #0.0
    6dc0:	vmrs	APSR_nzcv, fpscr
    6dc4:	bmi.w	730a <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x74a>
    6dc8:	vmov.f32	s16, #112	; 0x3f800000  1.0
    6dcc:	vcmpe.f32	s15, s16
    6dd0:	vmrs	APSR_nzcv, fpscr
    6dd4:	ble.w	734e <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x78e>
    6dd8:	vmov.f32	s15, s16
    6ddc:	vldr	s14, [pc, #136]	; 6e68 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    6de0:	add	r3, sp, #48	; 0x30
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    6de2:	vmov.f32	s16, #16	; 0x40800000  4.0
    6de6:	vldr	s13, [pc, #188]	; 6ea4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e4>
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    6dea:	add.w	r2, r3, r7, lsl #2
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    6dee:	ldr	r3, [sp, #12]
    
    const float note_f0 = f0 * ratios[note];
    6df0:	vldr	s9, [r2]
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    6df4:	asrs	r3, r7
    6df6:	ldr	r2, [sp, #8]
    
    const float note_f0 = f0 * ratios[note];
    6df8:	vmul.f32	s9, s19, s9
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    6dfc:	tst.w	r3, #1
    6e00:	ldr	r3, [sp, #4]
    6e02:	it	ne
    6e04:	movne	r5, r2
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    6e06:	vfms.f32	s16, s9, s13
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    6e0a:	it	eq
    6e0c:	moveq	r5, r3
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    6e0e:	vcmpe.f32	s16, #0.0
    6e12:	vmrs	APSR_nzcv, fpscr
    6e16:	bmi.w	7304 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x744>
    6e1a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    6e1e:	vcmp.f32	s16, s13
    6e22:	vmrs	APSR_nzcv, fpscr
    6e26:	it	gt
    6e28:	vmovgt.f32	s16, s13
    divide_down_amount *= divide_down_gain;
    
    if (wavetable_amount) {
    6e2c:	vcmp.f32	s15, #0.0
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    divide_down_amount *= divide_down_gain;
    6e30:	vmul.f32	s16, s16, s14
    
    if (wavetable_amount) {
    6e34:	vmrs	APSR_nzcv, fpscr
    6e38:	bne.n	6eb8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f8>
          wavetable,
          destination,
          size);
    }
    
    if (divide_down_amount) {
    6e3a:	vcmp.f32	s16, #0.0
    6e3e:	vmrs	APSR_nzcv, fpscr
    6e42:	bne.w	7078 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b8>
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    6e46:	adds	r7, #1
    6e48:	add.w	r9, r9, #32
    6e4c:	add.w	fp, fp, #4
    6e50:	adds	r4, #28
    6e52:	cmp	r7, #5
    6e54:	beq.w	7314 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x754>
    6e58:	adds	r6, #4
    6e5a:	vldr	s15, [sl, #320]	; 0x140
    6e5e:	vldr	s14, [r6]
    6e62:	b.n	6db4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f4>
    6e64:	.word	0x3f828f5c
    6e68:	.word	0x00000000
    6e6c:	.word	0x3dcccccd
    6e70:	.word	0x4009999a
    6e74:	.word	0x40dff7cf
    6e78:	.word	0x2001f270
    6e7c:	.word	0xc3000000
    6e80:	.word	0x3f08f5c3
    6e84:	.word	0x20000024
    6e88:	.word	0x20000428
    6e8c:	.word	0x39969651
    6e90:	.word	0x3f7f7cee
    6e94:	.word	0x2001f344
    6e98:	.word	0x42480000
    6e9c:	.word	0x3f0ccccd
    6ea0:	.word	0x43800000
    6ea4:	.word	0x42000000
    6ea8:	.word	0x3f808312
    6eac:	.word	0x48000000
    6eb0:	.word	0x3f733333
    6eb4:	.word	0x415fff97
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    divide_down_amount *= divide_down_gain;
    
    if (wavetable_amount) {
      wavetable_voice_[note].Render(
    6eb8:	vldr	s13, [pc, #-20]	; 6ea8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e8>
      float amplitude,
      float waveform,
      const int16_t** wavetable,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    6ebc:	vmov.f32	s12, #80	; 0x3e800000  0.250
    6ec0:	vldr	s14, [fp]
    6ec4:	vmul.f32	s13, s9, s13
    6ec8:	vmul.f32	s15, s15, s14
    6ecc:	vcmpe.f32	s13, s12
    6ed0:	vmrs	APSR_nzcv, fpscr
    6ed4:	bge.w	7354 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x794>
    6ed8:	vmov.f32	s8, #112	; 0x3f800000  1.0
    6edc:	vldr	s10, [pc, #-52]	; 6eac <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ec>
    6ee0:	vmov.f32	s14, #0	; 0x40000000  2.0
    6ee4:	vldr	s12, [pc, #-56]	; 6eb0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f0>
    6ee8:	vmul.f32	s10, s13, s10
    6eec:	vmov.f32	s11, s8
    6ef0:	vsub.f32	s12, s12, s13
    6ef4:	vfms.f32	s11, s13, s14
    6ef8:	vmov.f32	s14, s11
    6efc:	vdiv.f32	s11, s8, s10
    6f00:	vmul.f32	s12, s11, s12
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6f04:	vldr	s5, [r4, #184]	; 0xb8
    increment_ = (new_value - *state) / static_cast<float>(size);
    6f08:	vmul.f32	s15, s15, s14
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6f0c:	vldr	s7, [r4, #188]	; 0xbc
    increment_ = (new_value - *state) / static_cast<float>(size);
    6f10:	vmov.f32	s10, s5
    6f14:	vldr	s11, [pc, #-100]	; 6eb4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f4>
    6f18:	vldr	s14, [sp, #224]	; 0xe0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6f1c:	vldr	s8, [r4, #180]	; 0xb4
    increment_ = (new_value - *state) / static_cast<float>(size);
    6f20:	vfnms.f32	s10, s15, s12
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    6f24:	ldr	r3, [sp, #224]	; 0xe0
    6f26:	vmov.f32	s15, s7
    stmlib::ParameterInterpolator waveform_modulation(
        &waveform_,
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    6f2a:	vldr	s6, [r4, #192]	; 0xc0
    6f2e:	vcvt.f32.u32	s14, s14
    float phase = phase_;
    while (size--) {
    6f32:	subs	r2, r3, #1
    6f34:	vsub.f32	s13, s13, s8
    6f38:	vfnms.f32	s15, s20, s11
    6f3c:	vmov.f32	s12, s10
        &waveform_,
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    6f40:	vldr	s10, [r4, #176]	; 0xb0
    6f44:	vdiv.f32	s2, s13, s14
    6f48:	vdiv.f32	s1, s12, s14
    6f4c:	vdiv.f32	s0, s15, s14
    while (size--) {
    6f50:	cmp	r3, #0
    6f52:	beq.w	7058 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x498>
    6f56:	mov	r1, r5
    6f58:	ldr.w	ip, [pc, #1144]	; 73d4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x814>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    6f5c:	mov	lr, r5
    6f5e:	str	r6, [sp, #16]
    6f60:	vmov.f32	s4, #112	; 0x3f800000  1.0
    6f64:	vmov.f32	s22, #96	; 0x3f000000  0.5
  }

  inline float Next() {
    value_ += increment_;
    6f68:	vadd.f32	s8, s8, s2
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    6f6c:	vldr	s24, [r4, #200]	; 0xc8
    6f70:	vmov.f32	s3, #96	; 0x3f000000  0.5
    6f74:	vldr	s11, [r4, #196]	; 0xc4
    6f78:	vadd.f32	s7, s7, s0
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    6f7c:	subs	r2, #1
      const float f0 = frequency_modulation.Next();
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
    6f7e:	vmul.f32	s23, s8, s17
      
      const float scale = approximate_scale ? 1.0f : 1.0f / (f0 * 131072.0f) * (0.95f - f0);
      
      phase += f0;
    6f82:	vadd.f32	s10, s10, s8
      if (phase >= 1.0f) {
        phase -= 1.0f;
      }
      
      const float waveform = waveform_modulation.Next();
      MAKE_INTEGRAL_FRACTIONAL(waveform);
    6f86:	vcvt.s32.f32	s15, s7
    6f8a:	vcmpe.f32	s23, s4
    6f8e:	vadd.f32	s5, s5, s1
    6f92:	vmov	r3, s15
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    6f96:	vcvt.f32.s32	s26, s15
    6f9a:	vmrs	APSR_nzcv, fpscr
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
      
      const float scale = approximate_scale ? 1.0f : 1.0f / (f0 * 131072.0f) * (0.95f - f0);
      
      phase += f0;
      if (phase >= 1.0f) {
    6f9e:	vcmpe.f32	s10, s4
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
      
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
    6fa2:	add.w	r0, ip, r3, lsl #2
      MAKE_INTEGRAL_FRACTIONAL(waveform);
      
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
      
      const float x0 = InterpolateWave(
    6fa6:	ldr.w	r8, [ip, r3, lsl #2]
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    6faa:	vsub.f32	s26, s7, s26
    6fae:	it	le
    6fb0:	vmulle.f32	s3, s23, s22
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
      
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
    6fb4:	ldr	r5, [r0, #4]
	return __b;
    6fb6:	it	gt
    6fb8:	vmovgt.f32	s23, #112	; 0x3f800000  1.0
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
      
      const float scale = approximate_scale ? 1.0f : 1.0f / (f0 * 131072.0f) * (0.95f - f0);
      
      phase += f0;
      if (phase >= 1.0f) {
    6fbc:	vmrs	APSR_nzcv, fpscr
        phase -= 1.0f;
    6fc0:	it	ge
    6fc2:	vsubge.f32	s10, s10, s4
      }
      
      const float waveform = waveform_modulation.Next();
      MAKE_INTEGRAL_FRACTIONAL(waveform);
      
      const float p = phase * float(wavetable_size);
    6fc6:	vmul.f32	s15, s10, s17
      MAKE_INTEGRAL_FRACTIONAL(p);
    6fca:	vcvt.s32.f32	s14, s15
    6fce:	vmov	r0, s14
    6fd2:	vcvt.f32.s32	s14, s14

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    6fd6:	lsls	r3, r0, #1
    6fd8:	ldrsh.w	r6, [r8, r0, lsl #1]
    6fdc:	ldrsh.w	r0, [r5, r0, lsl #1]
      
      const float waveform = waveform_modulation.Next();
      MAKE_INTEGRAL_FRACTIONAL(waveform);
      
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
    6fe0:	vsub.f32	s15, s15, s14
inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
    6fe4:	adds	r3, #2

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    6fe6:	vmov	s13, r6
    6fea:	vmov	s12, r0
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    6fee:	ldrsh.w	r0, [r8, r3]

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    6ff2:	vcvt.f32.s32	s13, s13
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    6ff6:	ldrsh	r3, [r5, r3]

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    6ff8:	vcvt.f32.s32	s12, s12
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    6ffc:	vmov	s14, r0
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    7000:	adds	r0, r2, #1
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    7002:	vmov	s25, r3
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    7006:	vcvt.f32.s32	s14, s14
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    700a:	vcvt.f32.s32	s25, s25
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    700e:	vsub.f32	s14, s14, s13
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    7012:	vsub.f32	s25, s25, s12
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    7016:	vfma.f32	s13, s15, s14
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    701a:	vfma.f32	s12, s15, s25
    701e:	vmov.f32	s15, s13
    7022:	vsub.f32	s12, s12, s13
    7026:	vfma.f32	s15, s26, s12
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    702a:	vsub.f32	s14, s15, s24
    previous_ = s;
    702e:	vstr	s15, [r4, #200]	; 0xc8
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    7032:	vsub.f32	s15, s14, s11
    7036:	vfma.f32	s11, s23, s15
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
    703a:	vsub.f32	s14, s11, s6
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    703e:	vstr	s11, [r4, #196]	; 0xc4
      
      const float s = differentiator_.Process(
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
      *out++ += amplitude_modulation.Next() * lp;
    7042:	vldmia	r1!, {s15}
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
    7046:	vfma.f32	s6, s14, s3
      *out++ += amplitude_modulation.Next() * lp;
    704a:	vfma.f32	s15, s6, s5
    704e:	vstr	s15, [r1, #-4]
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    7052:	bne.n	6f68 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a8>
    7054:	ldr	r6, [sp, #16]
    7056:	mov	r5, lr
          wavetable,
          destination,
          size);
    }
    
    if (divide_down_amount) {
    7058:	vcmp.f32	s16, #0.0
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
      *out++ += amplitude_modulation.Next() * lp;
    }
    lp_ = lp;
    705c:	vstr	s6, [r4, #192]	; 0xc0
    phase_ = phase;
    7060:	vstr	s10, [r4, #176]	; 0xb0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7064:	vstr	s7, [r4, #188]	; 0xbc
    7068:	vmrs	APSR_nzcv, fpscr
    706c:	vstr	s5, [r4, #184]	; 0xb8
    7070:	vstr	s8, [r4, #180]	; 0xb4
    7074:	beq.w	6e46 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x286>
      float frequency,
      const float* unshifted_registration,
      float gain,
      float* out,
      size_t size) {
    frequency *= 8.0f;
    7078:	vmov.f32	s22, #32	; 0x41000000  8.0
    
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
    707c:	vmov.f32	s15, #96	; 0x3f000000  0.5
      float frequency,
      const float* unshifted_registration,
      float gain,
      float* out,
      size_t size) {
    frequency *= 8.0f;
    7080:	vmul.f32	s22, s9, s22
    
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
    7084:	vcmpe.f32	s22, s15
    7088:	vmrs	APSR_nzcv, fpscr
    708c:	ble.w	73ae <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ee>
    7090:	movs	r0, #0
      shift += 2;
      frequency *= 0.5f;
    7092:	vmul.f32	s22, s22, s15
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
      shift += 2;
    7096:	adds	r0, #2
    
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
    7098:	vcmpe.f32	s22, s15
    709c:	vmrs	APSR_nzcv, fpscr
    70a0:	bgt.n	7092 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4d2>
      shift += 2;
      frequency *= 0.5f;
    }
    // Frequency is just too high.
    if (shift >= 8) {
    70a2:	cmp	r0, #7
    70a4:	bhi.w	6e46 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x286>
      return;
    }
    
    float registration[7];
    std::fill(&registration[0], &registration[shift], 0.0f);
    70a8:	add	r3, sp, #68	; 0x44
    70aa:	lsls	r2, r0, #2
      divide_down_voice_[note].Render(
          note_f0,
          harmonics,
          note_amplitudes[note] * divide_down_amount,
    70ac:	vldr	s23, [fp]
    70b0:	add.w	r0, r3, r0, lsl #2
    70b4:	rsb	r2, r2, #28
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    70b8:	cmp	r0, r3
    70ba:	mov.w	r1, r2, asr #2
    70be:	beq.n	70c8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x508>
	*__first = __tmp;
    70c0:	vstmia	r3!, {s18}
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    70c4:	cmp	r0, r3
    70c6:	bne.n	70c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x500>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    70c8:	cmp	r1, #0
    70ca:	bne.w	73b6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f6>
        &registration[shift]);
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator saw_8_gain_modulation(
        &saw_8_gain_,
        (registration[0] + 2.0f * registration[1]) * gain,
    70ce:	vldr	s14, [sp, #72]	; 0x48
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    70d2:	vmov.f32	s10, #0	; 0x40000000  2.0
    70d6:	vldr	s12, [sp, #76]	; 0x4c
          destination,
          size);
    }
    
    if (divide_down_amount) {
      divide_down_voice_[note].Render(
    70da:	vmul.f32	s16, s16, s23
        size);
    stmlib::ParameterInterpolator saw_4_gain_modulation(
        &saw_4_gain_,
        (registration[2] - registration[1] + 2.0f * registration[3]) * gain,
    70de:	vldr	s9, [sp, #80]	; 0x50
    70e2:	vsub.f32	s12, s12, s14
    70e6:	vldr	s13, [sp, #84]	; 0x54
    70ea:	vldr	s15, [sp, #224]	; 0xe0
    70ee:	vldr	s11, [sp, #68]	; 0x44
    70f2:	vsub.f32	s13, s13, s9
    70f6:	vfma.f32	s12, s9, s10
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    70fa:	vmov	r3, s15
    70fe:	vcvt.f32.u32	s4, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7102:	vldr	s7, [r9, #36]	; 0x24
    increment_ = (new_value - *state) / static_cast<float>(size);
    7106:	vfma.f32	s11, s14, s10
        &saw_4_gain_,
        (registration[2] - registration[1] + 2.0f * registration[3]) * gain,
        size);
    stmlib::ParameterInterpolator saw_2_gain_modulation(
        &saw_2_gain_,
        (registration[4] - registration[3] + 2.0f * registration[5]) * gain,
    710a:	vldr	s15, [sp, #88]	; 0x58
    710e:	vldr	s14, [sp, #92]	; 0x5c
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    7112:	subs	r1, r3, #1
    7114:	vfma.f32	s13, s15, s10
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7118:	vldr	s6, [r9, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    711c:	vsub.f32	s15, s14, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7120:	vldr	s5, [r9, #32]
    increment_ = (new_value - *state) / static_cast<float>(size);
    7124:	vmov.f32	s14, s7
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7128:	vldr	s10, [r9, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    712c:	vmov.f32	s3, s5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7130:	vldr	s8, [r9, #28]
        (registration[6] - registration[5]) * gain,
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    7134:	ldr.w	r2, [r9, #24]
    increment_ = (new_value - *state) / static_cast<float>(size);
    7138:	vfnms.f32	s14, s16, s12
    713c:	vfnms.f32	s3, s16, s11
    stmlib::ParameterInterpolator saw_1_gain_modulation(
        &saw_1_gain_,
        (registration[6] - registration[5]) * gain,
        size);
    
    float phase = phase_;
    7140:	vldr	s11, [r9, #16]
    7144:	vsub.f32	s9, s22, s8
    7148:	vmov.f32	s12, s14
    714c:	vmov.f32	s14, s6
    7150:	vdiv.f32	s2, s3, s4
    7154:	vfnms.f32	s14, s16, s13
    7158:	vdiv.f32	s1, s12, s4
    715c:	vmov.f32	s13, s14
    7160:	vmov.f32	s14, s10
    7164:	vdiv.f32	s3, s9, s4
    7168:	vfnms.f32	s14, s16, s15
    float next_sample = next_sample_;
    716c:	vldr	s15, [r9, #20]
    7170:	vdiv.f32	s0, s13, s4
    7174:	vdiv.f32	s16, s14, s4
    int segment = segment_;
    while (size--) {
    7178:	cmp	r3, #0
    717a:	beq.w	728c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6cc>
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    717e:	vmov.f32	s9, #96	; 0x3f000000  0.5
    7182:	vmov.f32	s4, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7186:	vmov.f32	s22, #224	; 0xbf000000 -0.5
      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
    718a:	vmov.f32	s23, #32	; 0x41000000  8.0
  }

  inline float Next() {
    value_ += increment_;
    718e:	vadd.f32	s8, s8, s3
    7192:	vadd.f32	s5, s5, s2
    7196:	vadd.f32	s7, s7, s1
      const float saw_8_gain = saw_8_gain_modulation.Next();
      const float saw_4_gain = saw_4_gain_modulation.Next();
      const float saw_2_gain = saw_2_gain_modulation.Next();
      const float saw_1_gain = saw_1_gain_modulation.Next();

      phase += frequency;
    719a:	vadd.f32	s11, s11, s8
    719e:	vadd.f32	s6, s6, s0
    71a2:	vadd.f32	s10, s10, s16
      int next_segment = static_cast<int>(phase);
    71a6:	vcvt.s32.f32	s14, s11
    71aa:	vmov	r3, s14
      if (next_segment != segment) {
    71ae:	cmp	r3, r2
    71b0:	beq.w	72d6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x716>
        float discontinuity = 0.0f;
        if (next_segment == 8) {
    71b4:	cmp	r3, #8
    71b6:	beq.n	72ae <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ee>
    71b8:	and.w	r2, r3, #4
    71bc:	and.w	r0, r3, #1
      const float saw_1_gain = saw_1_gain_modulation.Next();

      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
    71c0:	vldr	s25, [pc, #508]	; 73c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    71c4:	vmov	s14, r2
    71c8:	and.w	r2, r3, #6
    71cc:	vmov	s24, r2
    71d0:	and.w	r2, r3, #7
    71d4:	vcvt.f32.s32	s14, s14
    71d8:	vmov	s13, r2
        if (next_segment == 8) {
          phase -= 8.0f;
          next_segment -= 8;
          discontinuity -= saw_8_gain;
        }
        if ((next_segment & 3) == 0) {
    71dc:	mov	r2, r3
    71de:	lsls	r3, r3, #30
    71e0:	vcvt.f32.s32	s24, s24
    71e4:	vcvt.f32.s32	s13, s13
    71e8:	beq.n	72c6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x706>
          discontinuity -= saw_4_gain;
        }
        if ((next_segment & 1) == 0) {
    71ea:	cbnz	r0, 71f0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x630>
          discontinuity -= saw_2_gain;
    71ec:	vsub.f32	s25, s25, s6
        }
        discontinuity -= saw_1_gain;
    71f0:	vsub.f32	s25, s25, s10
        if (discontinuity != 0.0f) {
    71f4:	vcmp.f32	s25, #0.0
    71f8:	vmrs	APSR_nzcv, fpscr
    71fc:	beq.n	72cc <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x70c>
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
    71fe:	vmov	s12, r2
    7202:	vcvt.f32.s32	s26, s12
    7206:	vsub.f32	s26, s11, s26
    720a:	vdiv.f32	s12, s26, s8
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    720e:	vmul.f32	s26, s12, s9
    7212:	vsub.f32	s27, s4, s12
    7216:	vmul.f32	s12, s26, s12
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    721a:	vmul.f32	s28, s27, s22
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    721e:	vfma.f32	s15, s25, s12
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7222:	vmul.f32	s27, s28, s27
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    7226:	vmov.f32	s12, s15
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    722a:	vmov.f32	s15, s18
    722e:	vfma.f32	s15, s25, s27
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    7232:	vmov.f32	s28, #16	; 0x40800000  4.0
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
      *out++ += 2.0f * this_sample;
    7236:	vldmia	r5!, {s25}
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    723a:	vmov.f32	s26, #0	; 0x40000000  2.0
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    723e:	subs	r1, #1
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    7240:	vsub.f32	s14, s11, s14
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    7244:	vsub.f32	s28, s11, s28
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    7248:	adds	r3, r1, #1
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    724a:	vmov.f32	s29, #64	; 0x3e000000  0.125
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    724e:	vsub.f32	s14, s14, s26
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    7252:	vmul.f32	s28, s28, s5
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    7256:	vsub.f32	s24, s11, s24
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    725a:	vmul.f32	s14, s14, s7
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    725e:	vfma.f32	s15, s28, s29
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    7262:	vmov.f32	s27, #80	; 0x3e800000  0.250
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    7266:	vsub.f32	s24, s24, s4
      *out++ += 2.0f * this_sample;
    726a:	vfma.f32	s25, s12, s26
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    726e:	vsub.f32	s13, s11, s13
    7272:	vmul.f32	s12, s24, s6
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    7276:	vfma.f32	s15, s14, s27
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    727a:	vsub.f32	s14, s13, s9
      *out++ += 2.0f * this_sample;
    727e:	vstr	s25, [r5, #-4]
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    7282:	vfma.f32	s15, s12, s9
    7286:	vfma.f32	s15, s10, s14
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    728a:	bne.n	718e <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5ce>
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
      *out++ += 2.0f * this_sample;
    }
    next_sample_ = next_sample;
    728c:	vstr	s15, [r9, #20]
    phase_ = phase;
    7290:	vstr	s11, [r9, #16]
    segment_ = segment;
    7294:	str.w	r2, [r9, #24]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7298:	vstr	s10, [r9, #44]	; 0x2c
    729c:	vstr	s6, [r9, #40]	; 0x28
    72a0:	vstr	s7, [r9, #36]	; 0x24
    72a4:	vstr	s5, [r9, #32]
    72a8:	vstr	s8, [r9, #28]
    72ac:	b.n	6e46 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x286>
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
          next_segment -= 8;
          discontinuity -= saw_8_gain;
    72ae:	vldr	s13, [pc, #272]	; 73c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    72b2:	movs	r2, #0
      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
    72b4:	vsub.f32	s11, s11, s23
          next_segment -= 8;
          discontinuity -= saw_8_gain;
    72b8:	vmov.f32	s24, s13
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
          next_segment -= 8;
    72bc:	mov	r0, r2
          discontinuity -= saw_8_gain;
    72be:	vmov.f32	s14, s13
    72c2:	vsub.f32	s25, s18, s5
        }
        if ((next_segment & 3) == 0) {
          discontinuity -= saw_4_gain;
    72c6:	vsub.f32	s25, s25, s7
    72ca:	b.n	71ea <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x62a>
        }
        if ((next_segment & 1) == 0) {
          discontinuity -= saw_2_gain;
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
    72cc:	vmov.f32	s12, s15
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    72d0:	vldr	s15, [pc, #236]	; 73c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    72d4:	b.n	7232 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x672>
    72d6:	and.w	r0, r2, #6
    72da:	and.w	lr, r2, #4
    72de:	and.w	r3, r2, #7
      const float saw_2_gain = saw_2_gain_modulation.Next();
      const float saw_1_gain = saw_1_gain_modulation.Next();

      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
    72e2:	vmov.f32	s12, s15
    72e6:	vmov	s13, r0
    72ea:	vmov	s15, lr
    72ee:	vcvt.f32.s32	s24, s13
    72f2:	vmov	s13, r3
    72f6:	vcvt.f32.s32	s14, s15
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    72fa:	vldr	s15, [pc, #196]	; 73c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    72fe:	vcvt.f32.s32	s13, s13
    7302:	b.n	7232 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x672>
    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    7304:	vldr	s16, [pc, #184]	; 73c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    7308:	b.n	6e2c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26c>
    730a:	vmov.f32	s14, #112	; 0x3f800000  1.0
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);
    730e:	vldr	s15, [pc, #176]	; 73c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    7312:	b.n	6de0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x220>
          destination,
          size);
    }
  }
  
  for (size_t i = 0; i < size; ++i) {
    7314:	ldr	r3, [sp, #224]	; 0xe0
    7316:	ldr.w	r8, [sp, #20]
    731a:	cbz	r3, 7344 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x784>
    out[i] += aux[i];
    aux[i] *= 3.0f;
    731c:	vmov.f32	s13, #8	; 0x40400000  3.0
    7320:	ldr	r5, [sp, #4]
    7322:	ldr	r3, [sp, #8]
          size);
    }
  }
  
  for (size_t i = 0; i < size; ++i) {
    out[i] += aux[i];
    7324:	vldr	s14, [r5]
    7328:	vldr	s15, [r3]
    732c:	vadd.f32	s15, s14, s15
    7330:	vstmia	r5!, {s15}
    aux[i] *= 3.0f;
    7334:	vldr	s15, [r3]
    7338:	vmul.f32	s15, s15, s13
    733c:	vstmia	r3!, {s15}
          destination,
          size);
    }
  }
  
  for (size_t i = 0; i < size; ++i) {
    7340:	cmp	r3, r8
    7342:	bne.n	7324 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x764>
    out[i] += aux[i];
    aux[i] *= 3.0f;
  }
}
    7344:	add	sp, #132	; 0x84
    7346:	vpop	{d8-d14}
    734a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    734e:	vsub.f32	s14, s16, s15
    7352:	b.n	6de0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x220>
      float waveform,
      const int16_t** wavetable,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    7354:	vmov.f32	s13, s12
      float amplitude,
      float waveform,
      const int16_t** wavetable,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    7358:	vldr	s12, [pc, #104]	; 73c4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x804>
    735c:	vmov.f32	s14, #96	; 0x3f000000  0.5
    7360:	b.n	6f04 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x344>
    7362:	vldr	s14, [pc, #100]	; 73c8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x808>
    7366:	vcmpe.f32	s15, s14
    736a:	vmrs	APSR_nzcv, fpscr
    736e:	ble.n	7376 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b6>
    7370:	movs	r3, #0
    7372:	movs	r1, #255	; 0xff
    7374:	b.n	6d44 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    7376:	vldr	s14, [pc, #84]	; 73cc <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80c>
    737a:	vadd.f32	s15, s15, s14
    737e:	vcvt.s32.f32	s14, s15
    7382:	vmov	r1, s14
    7386:	vcvt.f32.s32	s14, s14
    738a:	vsub.f32	s15, s15, s14
    738e:	vmov.f32	s14, s15
    7392:	vcvt.s32.f32	s14, s14, #8
    7396:	vmov	r3, s14
    739a:	b.n	6d44 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    739c:	movs	r3, #0
    739e:	movs	r0, #1
    73a0:	vmov.f32	s13, s15
    73a4:	ldr	r6, [pc, #40]	; (73d0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>)
    73a6:	mov	r2, r3
    73a8:	mov.w	ip, #2
    73ac:	b.n	6cb4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf4>
    
    if (divide_down_amount) {
      divide_down_voice_[note].Render(
          note_f0,
          harmonics,
          note_amplitudes[note] * divide_down_amount,
    73ae:	vldr	s23, [fp]
    73b2:	movs	r2, #28
    73b4:	add	r0, sp, #68	; 0x44
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    73b6:	add	r1, sp, #96	; 0x60
    73b8:	bl	fd78 <memcpy>
    73bc:	b.n	70ce <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x50e>
    73be:	nop
    73c0:	.word	0x00000000
    73c4:	.word	0x37b33333
    73c8:	.word	0x42fe0000
    73cc:	.word	0x43000000
    73d0:	.word	0x2001f270
    73d4:	.word	0x2001fc8c

000073d8 <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    73d8:	movs	r1, #0

using namespace std;
using namespace stmlib;

void AdditiveEngine::Init(BufferAllocator* allocator) {
  fill(
    73da:	add.w	r3, r0, #184	; 0xb8
    73de:	add.w	r2, r0, #328	; 0x148
    73e2:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    73e6:	cmp	r2, r3
    73e8:	bne.n	73e2 <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)+0xa>
namespace plaits {

using namespace std;
using namespace stmlib;

void AdditiveEngine::Init(BufferAllocator* allocator) {
    73ea:	push	{r4}
 public:
  HarmonicOscillator() { }
  ~HarmonicOscillator() { }

  void Init() {
    phase_ = 0.0f;
    73ec:	movs	r2, #0
    73ee:	add.w	r4, r0, #24
    73f2:	adds	r0, #192	; 0xc0
    73f4:	add.w	r1, r4, #48	; 0x30
    frequency_ = 0.0f;
    73f8:	mov	r3, r4
 public:
  HarmonicOscillator() { }
  ~HarmonicOscillator() { }

  void Init() {
    phase_ = 0.0f;
    73fa:	str.w	r2, [r4, #-8]
    frequency_ = 0.0f;
    73fe:	str.w	r2, [r4, #-4]
    for (int i = 0; i < num_harmonics; ++i) {
      amplitude_[i] = 0.0f;
    7402:	str.w	r2, [r3], #4
  ~HarmonicOscillator() { }

  void Init() {
    phase_ = 0.0f;
    frequency_ = 0.0f;
    for (int i = 0; i < num_harmonics; ++i) {
    7406:	cmp	r3, r1
    7408:	bne.n	7402 <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)+0x2a>
    740a:	adds	r4, #56	; 0x38
  fill(
      &amplitudes_[0],
      &amplitudes_[kNumHarmonics],
      0.0f);
  for (int i = 0; i < kNumHarmonicOscillators; ++i) {
    740c:	cmp	r4, r0
    740e:	bne.n	73f4 <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)+0x1c>
    harmonic_oscillator_[i].Init();
  }
}
    7410:	ldr.w	r4, [sp], #4
    7414:	bx	lr
    7416:	nop

00007418 <plaits::AdditiveEngine::Reset()>:

void AdditiveEngine::Reset() {
    7418:	bx	lr
    741a:	nop

0000741c <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)>:
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
  const float n = (static_cast<float>(num_harmonics) - 1.0f);
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
    741c:	vmov.f32	s10, #112	; 0x3f800000  1.0
  const float center = centroid * (n + margin) - 0.5f * margin;
    7420:	vmov	s15, r3
    7424:	vmov.f32	s14, #96	; 0x3f000000  0.5
    7428:	vcvt.f32.u32	s15, s15
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
  const float n = (static_cast<float>(num_harmonics) - 1.0f);
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
    742c:	vdiv.f32	s13, s10, s1
    7430:	vadd.f32	s12, s2, s10
  const float center = centroid * (n + margin) - 0.5f * margin;
    7434:	vsub.f32	s15, s15, s10
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
  const float n = (static_cast<float>(num_harmonics) - 1.0f);
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
    7438:	vsub.f32	s13, s13, s10
    743c:	vdiv.f32	s8, s13, s12
  const float center = centroid * (n + margin) - 0.5f * margin;
    7440:	vadd.f32	s15, s15, s8
    7444:	vnmul.f32	s8, s14, s8
    7448:	vfma.f32	s8, s15, s0

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    744c:	cmp	r3, #0
    744e:	beq.n	752c <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x110>
    7450:	vldr	s9, [pc, #220]	; 7530 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x114>
    float order = fabsf(static_cast<float>(i) - center) * slope;
    float gain = 1.0f - order;
    gain += fabsf(gain);
    gain *= gain;

    float b = 0.25f + order * bumps;
    7454:	vmov.f32	s4, #80	; 0x3e800000  0.250
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    7458:	vldr	s6, [pc, #216]	; 7534 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x118>
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    745c:	vmov.f32	s5, s9
    float centroid,
    float slope,
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
    7460:	push	{r4, r5, r6, r7, lr}
    7462:	ldr.w	lr, [pc, #212]	; 7538 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x11c>
    7466:	subs	r6, r2, #4
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    7468:	movs	r5, #0
    746a:	add.w	ip, lr, #4
    float order = fabsf(static_cast<float>(i) - center) * slope;
    746e:	vmov	s15, r5
    float gain = 1.0f - order;
    gain += fabsf(gain);
    gain *= gain;

    float b = 0.25f + order * bumps;
    7472:	vmov.f32	s13, s4
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    7476:	ldr.w	r0, [r6, #4]!
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    747a:	adds	r5, #1
    float order = fabsf(static_cast<float>(i) - center) * slope;
    747c:	vcvt.f32.u32	s15, s15
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    7480:	add.w	r0, r1, r0, lsl #2
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    7484:	cmp	r3, r5
    float order = fabsf(static_cast<float>(i) - center) * slope;
    float gain = 1.0f - order;
    7486:	vmov.f32	s7, #112	; 0x3f800000  1.0
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    float order = fabsf(static_cast<float>(i) - center) * slope;
    748a:	vsub.f32	s15, s15, s8
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    748e:	vldr	s12, [r0]
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    float order = fabsf(static_cast<float>(i) - center) * slope;
    7492:	vabs.f32	s15, s15
    7496:	vmul.f32	s15, s15, s1
    float gain = 1.0f - order;
    gain += fabsf(gain);
    gain *= gain;

    float b = 0.25f + order * bumps;
    749a:	vfma.f32	s13, s2, s15

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    float order = fabsf(static_cast<float>(i) - center) * slope;
    float gain = 1.0f - order;
    749e:	vsub.f32	s15, s10, s15
    gain += fabsf(gain);
    74a2:	vabs.f32	s11, s15
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    74a6:	vcvt.s32.f32	s14, s13
    74aa:	vadd.f32	s15, s15, s11
    74ae:	vcvt.f32.s32	s14, s14
    gain *= gain;
    74b2:	vmul.f32	s15, s15, s15
    74b6:	vsub.f32	s14, s13, s14
  index *= size;
    74ba:	vmul.f32	s14, s14, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    74be:	vcvt.s32.f32	s13, s14
  float a = table[index_integral];
    74c2:	vmov	r4, s13

    float b = 0.25f + order * bumps;
    float bump_factor = 1.0f + InterpolateWrap(lut_sine, b, 1024.0f);

    gain *= bump_factor;
    74c6:	vcvt.f32.s32	s13, s13
    74ca:	mov.w	r4, r4, lsl #2
    74ce:	vsub.f32	s13, s14, s13
    74d2:	add.w	r7, lr, r4
  float b = table[index_integral + 1];
    74d6:	add	r4, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    74d8:	vldr	s14, [r7]
    74dc:	vldr	s11, [r4]
    74e0:	vsub.f32	s11, s11, s14
    74e4:	vfma.f32	s14, s13, s11
    74e8:	vadd.f32	s14, s14, s10
    74ec:	vmul.f32	s15, s14, s15
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    74f0:	vmov.f32	s14, s12

    float b = 0.25f + order * bumps;
    float bump_factor = 1.0f + InterpolateWrap(lut_sine, b, 1024.0f);

    gain *= bump_factor;
    gain *= gain;
    74f4:	vmul.f32	s15, s15, s15
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    74f8:	vfnms.f32	s14, s15, s15
    74fc:	vfma.f32	s12, s14, s5
    7500:	vstr	s12, [r0]
    sum += amplitudes[j];
    7504:	vadd.f32	s9, s9, s12
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    7508:	bne.n	746e <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x52>
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    sum += amplitudes[j];
  }

  sum = 1.0f / sum;
    750a:	vdiv.f32	s14, s7, s9
    750e:	add.w	r3, r2, r3, lsl #2

  for (size_t i = 0; i < num_harmonics; ++i) {
    amplitudes[harmonic_indices[i]] *= sum;
    7512:	ldr.w	r0, [r2], #4
    7516:	add.w	r0, r1, r0, lsl #2
    sum += amplitudes[j];
  }

  sum = 1.0f / sum;

  for (size_t i = 0; i < num_harmonics; ++i) {
    751a:	cmp	r3, r2
    amplitudes[harmonic_indices[i]] *= sum;
    751c:	vldr	s15, [r0]
    7520:	vmul.f32	s15, s15, s14
    7524:	vstr	s15, [r0]
    sum += amplitudes[j];
  }

  sum = 1.0f / sum;

  for (size_t i = 0; i < num_harmonics; ++i) {
    7528:	bne.n	7512 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0xf6>
    752a:	pop	{r4, r5, r6, r7, pc}
    752c:	bx	lr
    752e:	nop
    7530:	.word	0x3a83126f
    7534:	.word	0x44800000
    7538:	.word	0x200025e0

0000753c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    753c:	vmov.f32	s13, #34	; 0x41100000  9.0
    7540:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7544:	vldr	s14, [pc, #956]	; 7904 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    7548:	vsub.f32	s15, s15, s13
void AdditiveEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    754c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7550:	vcmpe.f32	s15, s14
    7554:	mov	r5, r1
    7556:	mov	r4, r0
    7558:	mov	r7, r2
    755a:	mov	r8, r3
    755c:	vmrs	APSR_nzcv, fpscr
    7560:	vpush	{d8-d10}
    7564:	sub	sp, #148	; 0x94
    7566:	bmi.w	7ac6 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x58a>
    756a:	vldr	s14, [pc, #924]	; 7908 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    756e:	vcmpe.f32	s15, s14
    7572:	vmrs	APSR_nzcv, fpscr
    7576:	ble.w	7aa0 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x564>
    757a:	movs	r0, #0
    757c:	mov.w	lr, #255	; 0xff
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    7580:	vmov.f32	s20, #112	; 0x3f800000  1.0
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
    7584:	vldr	s13, [r5, #16]
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    7588:	vldr	s15, [pc, #896]	; 790c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
  const float bumps = 16.0f * raw_bumps * raw_bumps;
    758c:	vmov.f32	s17, #48	; 0x41800000  16.0
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    7590:	vldr	s11, [r5, #12]
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    7594:	movs	r3, #24
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    7596:	vmov.f32	s14, s20
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
    759a:	vldr	s19, [r5, #8]
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
    759e:	vldr	s18, [pc, #880]	; 7910 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>
  const float bumps = 16.0f * raw_bumps * raw_bumps;
    75a2:	vmul.f32	s17, s13, s17

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    75a6:	ldr	r2, [pc, #876]	; (7914 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
  UpdateAmplitudes(
    75a8:	add.w	r1, r4, #184	; 0xb8
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    75ac:	vfms.f32	s14, s13, s15
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
    75b0:	vldr	s15, [pc, #868]	; 7918 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    75b4:	ldr	r5, [pc, #868]	; (791c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    75b6:	add.w	r2, r2, lr, lsl #2
  const float bumps = 16.0f * raw_bumps * raw_bumps;
    75ba:	vmul.f32	s17, s17, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    75be:	vldr	s12, [pc, #864]	; 7920 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    75c2:	add.w	r5, r5, r0, lsl #2
    75c6:	vldr	s13, [r2]
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    75ca:	mov	r0, r4
    75cc:	ldr	r2, [pc, #852]	; (7924 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>)
    75ce:	vldr	s16, [r5]
    75d2:	vmov.f32	s0, s19
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    75d6:	vmul.f32	s14, s14, s11
    75da:	mov	r5, sp
    75dc:	vmul.f32	s13, s13, s16
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    75e0:	vmov.f32	s2, s17
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
    75e4:	vmul.f32	s15, s14, s15
    75e8:	vmul.f32	s16, s13, s12
    75ec:	vmul.f32	s15, s15, s14
    75f0:	vfma.f32	s18, s14, s15
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    75f4:	vmov.f32	s1, s18
    75f8:	bl	741c <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)>
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    75fc:	vmov.f32	s12, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    7600:	vldr	s15, [sp, #208]	; 0xd0
    7604:	vmov.f32	s9, #0	; 0x40000000  2.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7608:	vldr	s8, [r4, #20]
    760c:	vmov.f32	s10, s20
    7610:	vcmpe.f32	s16, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    7614:	mov	r3, sp
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
    7616:	vmov.f32	s11, s12
    761a:	add.w	r0, r4, #24
    761e:	vcvt.f32.u32	s3, s15
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    7622:	movs	r2, #0
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    7624:	vmrs	APSR_nzcv, fpscr
    7628:	it	lt
    762a:	vmovlt.f32	s12, s16
    762e:	vsub.f32	s15, s12, s8
    7632:	vdiv.f32	s7, s15, s3
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    7636:	adds	r2, #1
      if (f >= 0.5f) {
    7638:	vldr	s14, [pc, #748]	; 7928 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    763c:	vmov	s15, r2
    7640:	vcvt.f32.s32	s15, s15
    7644:	vmul.f32	s15, s15, s12
      if (f >= 0.5f) {
    7648:	vcmpe.f32	s15, s11
    764c:	vmrs	APSR_nzcv, fpscr
    7650:	bge.n	765a <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e>
    7652:	vmov.f32	s14, s10
    7656:	vfms.f32	s14, s15, s9
  ~ParameterInterpolator() {
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    765a:	str	r0, [r3, #0]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    765c:	cmp	r2, #12
    value_ = *state;
    765e:	vldmia	r0!, {s15}
    7662:	add.w	r3, r3, #12
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    7666:	vldmia	r1!, {s13}
    increment_ = (new_value - *state) / static_cast<float>(size);
    766a:	vmov.f32	s6, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    766e:	vstr	s15, [r3, #-8]
    increment_ = (new_value - *state) / static_cast<float>(size);
    7672:	vfnms.f32	s6, s13, s14
    7676:	vdiv.f32	s15, s6, s3
    767a:	vstr	s15, [r3, #-4]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    767e:	bne.n	7636 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfa>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    7680:	ldr	r3, [sp, #208]	; 0xd0
    7682:	subs	r6, r3, #1
    7684:	cmp	r3, #0
    7686:	beq.n	7734 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f8>
    7688:	ldr	r1, [pc, #672]	; (792c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>)
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
    768a:	vmov.f32	s6, #112	; 0x3f800000  1.0
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    768e:	vmov.f32	s4, #96	; 0x3f000000  0.5
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    7692:	mov	r9, r7
    7694:	adds	r0, r1, #4
    7696:	mov	ip, r6
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    7698:	vldr	s5, [pc, #660]	; 7930 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
    769c:	add	r2, sp, #144	; 0x90
  }

  inline float Next() {
    value_ += increment_;
    769e:	vadd.f32	s8, s8, s7
      phase_ += fm.Next();
    76a2:	vldr	s15, [r4, #16]
        phase_ -= 1.0f;
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
    76a6:	vmov.f32	s11, #112	; 0x3f800000  1.0
        previous = stmlib::InterpolateWrap(
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
    76aa:	vldr	s12, [pc, #636]	; 7928 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    76ae:	mov	r3, r5
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    76b0:	vadd.f32	s15, s8, s15
      if (phase_ >= 1.0f) {
    76b4:	vcmpe.f32	s15, s6
    76b8:	vmrs	APSR_nzcv, fpscr
        phase_ -= 1.0f;
    76bc:	it	ge
    76be:	vsubge.f32	s15, s15, s6
    76c2:	vstr	s15, [r4, #16]
    76c6:	vmul.f32	s15, s15, s5
  MAKE_INTEGRAL_FRACTIONAL(index)
    76ca:	vcvt.s32.f32	s14, s15
  float a = table[index_integral];
    76ce:	vmov	lr, s14
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    76d2:	vcvt.f32.s32	s14, s14
    76d6:	mov.w	lr, lr, lsl #2
    76da:	vsub.f32	s15, s15, s14
    76de:	add.w	sl, r1, lr
  float b = table[index_integral + 1];
    76e2:	add	lr, r0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    76e4:	vldr	s9, [sl]
    76e8:	vldr	s14, [lr]
    76ec:	vsub.f32	s14, s14, s9
    76f0:	vfma.f32	s9, s15, s14
    76f4:	vadd.f32	s9, s9, s9
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    76f8:	vmul.f32	s13, s9, s4
    76fc:	vldr	s15, [r3, #4]
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
        sum += am[i].Next() * current;
        float temp = current;
        current = two_x * current - previous;
    7700:	vfnms.f32	s11, s9, s13
    7704:	vldr	s14, [r3, #8]
    7708:	adds	r3, #12
    770a:	vadd.f32	s15, s14, s15
    770e:	vstr	s15, [r3, #-8]
    7712:	vmov.f32	s10, s11
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    7716:	cmp	r2, r3
    7718:	vmov.f32	s11, s13
        sum += am[i].Next() * current;
    771c:	vfma.f32	s12, s15, s13
        float temp = current;
        current = two_x * current - previous;
    7720:	vmov.f32	s13, s10
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    7724:	bne.n	76fc <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c0>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    7726:	add.w	ip, ip, #4294967295
        float temp = current;
        current = two_x * current - previous;
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
    772a:	vstmia	r9!, {s12}
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    772e:	cmp.w	ip, #4294967295
    7732:	bne.n	769e <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x162>
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    7734:	add	r3, sp, #144	; 0x90
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7736:	vstr	s8, [r4, #20]
    773a:	ldr.w	r2, [r3, #-12]!
    773e:	ldr	r1, [r3, #4]
    7740:	cmp	r3, r5
    7742:	str	r1, [r2, #0]
    7744:	bne.n	773a <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1fe>
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    7746:	vmov.f32	s12, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    774a:	vldr	s8, [r4, #76]	; 0x4c
    774e:	vmov.f32	s9, #0	; 0x40000000  2.0
    7752:	add.w	r0, r4, #232	; 0xe8
    7756:	vmov.f32	s10, #112	; 0x3f800000  1.0
    775a:	add.w	r1, r4, #80	; 0x50
    775e:	vcmpe.f32	s16, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    7762:	mov	r3, r5
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
    7764:	vmov.f32	s11, s12
    7768:	movs	r2, #13
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    776a:	vmrs	APSR_nzcv, fpscr
    776e:	it	lt
    7770:	vmovlt.f32	s12, s16
    7774:	vsub.f32	s15, s12, s8
    7778:	vdiv.f32	s5, s15, s3
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    777c:	vmov	s15, r2
      if (f >= 0.5f) {
    7780:	vldr	s14, [pc, #420]	; 7928 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    7784:	vcvt.f32.s32	s15, s15
    7788:	vmul.f32	s15, s15, s12
      if (f >= 0.5f) {
    778c:	vcmpe.f32	s15, s11
    7790:	vmrs	APSR_nzcv, fpscr
    7794:	bge.n	779e <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x262>
    7796:	vmov.f32	s14, s10
    779a:	vfms.f32	s14, s15, s9
  ~ParameterInterpolator() {
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    779e:	str	r1, [r3, #0]
    77a0:	adds	r2, #1
    value_ = *state;
    77a2:	vldmia	r1!, {s15}
    77a6:	adds	r3, #12
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    77a8:	vldmia	r0!, {s13}
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    77ac:	cmp	r2, #25
    increment_ = (new_value - *state) / static_cast<float>(size);
    77ae:	vmov.f32	s7, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    77b2:	vstr	s15, [r3, #-8]
    increment_ = (new_value - *state) / static_cast<float>(size);
    77b6:	vfnms.f32	s7, s13, s14
    77ba:	vdiv.f32	s15, s7, s3
    77be:	vstr	s15, [r3, #-4]
    77c2:	bne.n	777c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x240>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    77c4:	ldr	r3, [sp, #208]	; 0xd0
    77c6:	cmp	r3, #0
    77c8:	beq.w	7934 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
    77cc:	ldr	r1, [pc, #348]	; (792c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>)
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
    77ce:	vmov.f32	s6, #112	; 0x3f800000  1.0
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    77d2:	vmov.f32	s1, #40	; 0x41400000  12.0
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    77d6:	mov	r9, r6
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    77d8:	vmov.f32	s2, #80	; 0x3e800000  0.250
    77dc:	adds	r0, r1, #4
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
    77de:	vmov.f32	s4, #42	; 0x41500000  13.0
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    77e2:	vldr	s7, [pc, #332]	; 7930 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
    77e6:	add	r2, sp, #144	; 0x90
  }

  inline float Next() {
    value_ += increment_;
    77e8:	vadd.f32	s8, s8, s5
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    77ec:	vldr	s15, [r4, #72]	; 0x48
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    77f0:	vmov.f32	s13, s2
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    77f4:	mov	r3, r5
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
    77f6:	vldr	s12, [pc, #304]	; 7928 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    77fa:	vadd.f32	s15, s8, s15
      if (phase_ >= 1.0f) {
    77fe:	vcmpe.f32	s15, s6
    7802:	vmrs	APSR_nzcv, fpscr
        phase_ -= 1.0f;
    7806:	it	ge
    7808:	vsubge.f32	s15, s15, s6
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    780c:	vfma.f32	s13, s15, s1
    }

    while (size--) {
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    7810:	vstr	s15, [r4, #72]	; 0x48
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
    7814:	vmul.f32	s14, s15, s4
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    7818:	vmul.f32	s11, s15, s7
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    781c:	vcvt.s32.f32	s15, s14
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    7820:	vcvt.s32.f32	s0, s11
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    7824:	vcvt.s32.f32	s10, s13
    7828:	vcvt.f32.s32	s15, s15
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    782c:	vmov	lr, s0
    while (size--) {
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    7830:	vcvt.f32.s32	s9, s0
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    7834:	vcvt.f32.s32	s10, s10
    7838:	vsub.f32	s15, s14, s15
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    783c:	mov.w	lr, lr, lsl #2
    7840:	vsub.f32	s11, s11, s9
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    7844:	vsub.f32	s10, s13, s10
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7848:	add.w	ip, r1, lr
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    784c:	vmul.f32	s15, s15, s7

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
    7850:	add	lr, r0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7852:	vldr	s9, [ip]
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    7856:	vmul.f32	s10, s10, s7
    785a:	vldr	s20, [lr]
  MAKE_INTEGRAL_FRACTIONAL(index)
    785e:	vcvt.s32.f32	s14, s15
    7862:	vsub.f32	s20, s20, s9
    7866:	vcvt.s32.f32	s13, s10
  float a = table[index_integral];
    786a:	vmov	lr, s14
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    786e:	vcvt.f32.s32	s14, s14
    7872:	vfma.f32	s9, s11, s20

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7876:	vmov	ip, s13
    787a:	mov.w	lr, lr, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    787e:	vcvt.f32.s32	s0, s13

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7882:	mov.w	ip, ip, lsl #2
    7886:	add.w	fp, r1, lr
  float b = table[index_integral + 1];
    788a:	add	lr, r0
  return a + (b - a) * index_fractional;
    788c:	vsub.f32	s15, s15, s14

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7890:	add.w	sl, r1, ip
  float b = table[index_integral + 1];
    7894:	add	ip, r0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7896:	vldr	s13, [fp]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    789a:	vsub.f32	s10, s10, s0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    789e:	vldr	s11, [sl]
    78a2:	vadd.f32	s9, s9, s9
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    78a6:	vldr	s0, [ip]
    78aa:	vldr	s14, [lr]
    78ae:	vsub.f32	s0, s0, s11
    78b2:	vsub.f32	s14, s14, s13
    78b6:	vfma.f32	s11, s10, s0
    78ba:	vfma.f32	s13, s15, s14
    78be:	vldr	s15, [r3, #4]
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
        sum += am[i].Next() * current;
        float temp = current;
        current = two_x * current - previous;
    78c2:	vfnms.f32	s11, s9, s13
    78c6:	vldr	s14, [r3, #8]
    78ca:	adds	r3, #12
    78cc:	vadd.f32	s15, s14, s15
    78d0:	vstr	s15, [r3, #-8]
    78d4:	vmov.f32	s10, s11
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    78d8:	cmp	r2, r3
    78da:	vmov.f32	s11, s13
        sum += am[i].Next() * current;
    78de:	vfma.f32	s12, s15, s13
        float temp = current;
        current = two_x * current - previous;
    78e2:	vmov.f32	s13, s10
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    78e6:	bne.n	78be <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x382>
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
      } else {
        *out++ += sum;
    78e8:	vldmia	r7!, {s15}
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    78ec:	add.w	r9, r9, #4294967295
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
      } else {
        *out++ += sum;
    78f0:	vadd.f32	s12, s15, s12
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    78f4:	cmp.w	r9, #4294967295
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
      } else {
        *out++ += sum;
    78f8:	vstr	s12, [r7, #-4]
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    78fc:	bne.w	77e8 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    7900:	b.n	7934 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
    7902:	nop
    7904:	.word	0xc3000000
    7908:	.word	0x42fe0000
    790c:	.word	0x3f19999a
    7910:	.word	0x3c23d70a
    7914:	.word	0x20000024
    7918:	.word	0x3ffeb852
    791c:	.word	0x20000428
    7920:	.word	0x39969651
    7924:	.word	0x2001f428
    7928:	.word	0x00000000
    792c:	.word	0x200025e0
    7930:	.word	0x44800000
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    7934:	add	r3, sp, #144	; 0x90
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7936:	vstr	s8, [r4, #76]	; 0x4c
    793a:	ldr.w	r2, [r3, #-12]!
    793e:	ldr	r1, [r3, #4]
    7940:	cmp	r3, r5
    7942:	str	r1, [r2, #0]
    7944:	bne.n	793a <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fe>
      centroid,
      slope,
      bumps,
      &amplitudes_[24],
      organ_harmonics,
      8);
    7946:	movs	r3, #8
    7948:	ldr	r2, [pc, #384]	; (7acc <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x590>)
    794a:	mov	r0, r4
      integer_harmonics,
      24);
  harmonic_oscillator_[0].Render<1>(f0, &amplitudes_[0], out, size);
  harmonic_oscillator_[1].Render<13>(f0, &amplitudes_[12], out, size);

  UpdateAmplitudes(
    794c:	add.w	r1, r4, #280	; 0x118
      centroid,
      slope,
      bumps,
      &amplitudes_[24],
      organ_harmonics,
      8);
    7950:	vmov.f32	s2, s17
    7954:	vmov.f32	s1, s18
    7958:	vmov.f32	s0, s19
    795c:	bl	741c <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)>
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    7960:	vmov.f32	s15, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7964:	vldr	s8, [r4, #132]	; 0x84
    7968:	vmov.f32	s10, #0	; 0x40000000  2.0
    796c:	vmov.f32	s11, #112	; 0x3f800000  1.0
    7970:	add.w	r0, r4, #136	; 0x88
      frequency = 0.5f;
    7974:	vcmp.f32	s16, s15
    increment_ = (new_value - *state) / static_cast<float>(size);
    7978:	mov	r3, r5
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
    797a:	vmov.f32	s12, s15
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    797e:	movs	r2, #0
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    7980:	vmrs	APSR_nzcv, fpscr
    7984:	it	ge
    7986:	vmovge.f32	s16, s15
    798a:	vsub.f32	s15, s16, s8
    798e:	vdiv.f32	s6, s15, s3
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    7992:	adds	r2, #1
      if (f >= 0.5f) {
    7994:	vldr	s14, [pc, #312]	; 7ad0 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x594>
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    7998:	vmov	s15, r2
    799c:	vcvt.f32.s32	s15, s15
    79a0:	vmul.f32	s15, s15, s16
      if (f >= 0.5f) {
    79a4:	vcmpe.f32	s15, s12
    79a8:	vmrs	APSR_nzcv, fpscr
    79ac:	bge.n	79b6 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x47a>
    79ae:	vmov.f32	s14, s11
    79b2:	vfms.f32	s14, s15, s10
  ~ParameterInterpolator() {
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    79b6:	str	r0, [r3, #0]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    79b8:	cmp	r2, #12
    value_ = *state;
    79ba:	vldmia	r0!, {s15}
    79be:	add.w	r3, r3, #12
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    79c2:	vldmia	r1!, {s13}
    increment_ = (new_value - *state) / static_cast<float>(size);
    79c6:	vmov.f32	s9, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    79ca:	vstr	s15, [r3, #-8]
    increment_ = (new_value - *state) / static_cast<float>(size);
    79ce:	vfnms.f32	s9, s13, s14
    79d2:	vdiv.f32	s15, s9, s3
    79d6:	vstr	s15, [r3, #-4]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    79da:	bne.n	7992 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x456>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    79dc:	ldr	r3, [sp, #208]	; 0xd0
    79de:	cmp	r3, #0
    79e0:	beq.n	7a84 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x548>
    79e2:	ldr	r1, [pc, #240]	; (7ad4 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x598>)
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
    79e4:	vmov.f32	s7, #112	; 0x3f800000  1.0
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    79e8:	vmov.f32	s4, #96	; 0x3f000000  0.5
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    79ec:	vldr	s5, [pc, #232]	; 7ad8 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x59c>
    79f0:	adds	r0, r1, #4
    79f2:	add	r2, sp, #144	; 0x90
  }

  inline float Next() {
    value_ += increment_;
    79f4:	vadd.f32	s8, s8, s6
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    79f8:	vldr	s15, [r4, #128]	; 0x80
        phase_ -= 1.0f;
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
    79fc:	vmov.f32	s11, #112	; 0x3f800000  1.0
        current = two_x * 0.5f;
    7a00:	mov	r3, r5
        previous = stmlib::InterpolateWrap(
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
    7a02:	vldr	s12, [pc, #204]	; 7ad0 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x594>
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    7a06:	vadd.f32	s15, s8, s15
      if (phase_ >= 1.0f) {
    7a0a:	vcmpe.f32	s15, s7
    7a0e:	vmrs	APSR_nzcv, fpscr
        phase_ -= 1.0f;
    7a12:	it	ge
    7a14:	vsubge.f32	s15, s15, s7
    7a18:	vstr	s15, [r4, #128]	; 0x80
    7a1c:	vmul.f32	s15, s15, s5
  MAKE_INTEGRAL_FRACTIONAL(index)
    7a20:	vcvt.s32.f32	s14, s15
  float a = table[index_integral];
    7a24:	vmov	r7, s14
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    7a28:	vcvt.f32.s32	s14, s14
    7a2c:	lsls	r7, r7, #2
    7a2e:	vsub.f32	s15, s15, s14
    7a32:	add.w	lr, r1, r7
  float b = table[index_integral + 1];
    7a36:	add	r7, r0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7a38:	vldr	s9, [lr]
    7a3c:	vldr	s14, [r7]
    7a40:	vsub.f32	s14, s14, s9
    7a44:	vfma.f32	s9, s15, s14
    7a48:	vadd.f32	s9, s9, s9
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    7a4c:	vmul.f32	s13, s9, s4
    7a50:	vldr	s15, [r3, #4]
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
        sum += am[i].Next() * current;
        float temp = current;
        current = two_x * current - previous;
    7a54:	vfnms.f32	s11, s9, s13
    7a58:	vldr	s14, [r3, #8]
    7a5c:	adds	r3, #12
    7a5e:	vadd.f32	s15, s14, s15
    7a62:	vstr	s15, [r3, #-8]
    7a66:	vmov.f32	s10, s11
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    7a6a:	cmp	r3, r2
    7a6c:	vmov.f32	s11, s13
        sum += am[i].Next() * current;
    7a70:	vfma.f32	s12, s15, s13
        float temp = current;
        current = two_x * current - previous;
    7a74:	vmov.f32	s13, s10
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    7a78:	bne.n	7a50 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x514>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    7a7a:	subs	r6, #1
        float temp = current;
        current = two_x * current - previous;
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
    7a7c:	vstmia	r8!, {s12}
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    7a80:	adds	r3, r6, #1
    7a82:	bne.n	79f4 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b8>
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    7a84:	add	r3, sp, #144	; 0x90
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7a86:	vstr	s8, [r4, #132]	; 0x84
    7a8a:	ldr.w	r2, [r3, #-12]!
    7a8e:	ldr	r1, [r3, #4]
    7a90:	cmp	r3, r5
    7a92:	str	r1, [r2, #0]
    7a94:	bne.n	7a8a <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x54e>

  harmonic_oscillator_[2].Render<1>(f0, &amplitudes_[24], aux, size);
}
    7a96:	add	sp, #148	; 0x94
    7a98:	vpop	{d8-d10}
    7a9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7aa0:	vldr	s14, [pc, #56]	; 7adc <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a0>
    7aa4:	vadd.f32	s15, s15, s14
    7aa8:	vcvt.s32.f32	s14, s15
    7aac:	vmov	lr, s14
    7ab0:	vcvt.f32.s32	s14, s14
    7ab4:	vsub.f32	s15, s15, s14
    7ab8:	vmov.f32	s14, s15
    7abc:	vcvt.s32.f32	s14, s14, #8
    7ac0:	vmov	r0, s14
    7ac4:	b.n	7580 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7ac6:	movs	r0, #0
    7ac8:	mov	lr, r0
    7aca:	b.n	7580 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    7acc:	.word	0x2001f408
    7ad0:	.word	0x00000000
    7ad4:	.word	0x200025e0
    7ad8:	.word	0x44800000
    7adc:	.word	0x43000000

00007ae0 <plaits::GrainEngine::Init(stmlib::BufferAllocator*)>:
 public:
  GrainletOscillator() { }
  ~GrainletOscillator() { }

  void Init() {
    carrier_phase_ = 0.0f;
    7ae0:	movs	r3, #0
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    7ae2:	ldr	r1, [pc, #60]	; (7b20 <plaits::GrainEngine::Init(stmlib::BufferAllocator*)+0x40>)
    gi_ = 1.0f / (1.0f + g_);
    7ae4:	ldr	r2, [pc, #60]	; (7b24 <plaits::GrainEngine::Init(stmlib::BufferAllocator*)+0x44>)
    7ae6:	str	r3, [r0, #16]
    formant_phase_ = 0.0f;
    7ae8:	str	r3, [r0, #20]
    next_sample_ = 0.0f;
    7aea:	str	r3, [r0, #24]
  
    carrier_frequency_ = 0.0f;
    7aec:	str	r3, [r0, #28]
    formant_frequency_ = 0.0f;
    7aee:	str	r3, [r0, #32]
    carrier_shape_ = 0.0f;
    7af0:	str	r3, [r0, #36]	; 0x24
    carrier_bleed_ = 0.0f;
    7af2:	str	r3, [r0, #40]	; 0x28
 public:
  GrainletOscillator() { }
  ~GrainletOscillator() { }

  void Init() {
    carrier_phase_ = 0.0f;
    7af4:	str	r3, [r0, #44]	; 0x2c
    formant_phase_ = 0.0f;
    7af6:	str	r3, [r0, #48]	; 0x30
    next_sample_ = 0.0f;
    7af8:	str	r3, [r0, #52]	; 0x34
  
    carrier_frequency_ = 0.0f;
    7afa:	str	r3, [r0, #56]	; 0x38
    formant_frequency_ = 0.0f;
    7afc:	str	r3, [r0, #60]	; 0x3c
    carrier_shape_ = 0.0f;
    7afe:	str	r3, [r0, #64]	; 0x40
    carrier_bleed_ = 0.0f;
    7b00:	str	r3, [r0, #68]	; 0x44
 public:
  ZOscillator() { }
  ~ZOscillator() { }

  void Init() {
    carrier_phase_ = 0.0f;
    7b02:	str	r3, [r0, #72]	; 0x48
    discontinuity_phase_ = 0.0f;
    7b04:	str	r3, [r0, #76]	; 0x4c
    formant_phase_ = 0.0f;
    7b06:	str	r3, [r0, #80]	; 0x50
    next_sample_ = 0.0f;
    7b08:	str	r3, [r0, #84]	; 0x54
  
    carrier_frequency_ = 0.0f;
    7b0a:	str	r3, [r0, #88]	; 0x58
    formant_frequency_ = 0.0f;
    7b0c:	str	r3, [r0, #92]	; 0x5c
    carrier_shape_ = 0.0f;
    7b0e:	str	r3, [r0, #96]	; 0x60
    mode_ = 0.0f;
    7b10:	str	r3, [r0, #100]	; 0x64
    set_f<FREQUENCY_DIRTY>(0.01f);
    Reset();
  }
  
  void Reset() {
    state_ = 0.0f;
    7b12:	str	r3, [r0, #112]	; 0x70
    7b14:	str	r3, [r0, #124]	; 0x7c
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    7b16:	str	r1, [r0, #104]	; 0x68
    7b18:	str	r1, [r0, #116]	; 0x74
    gi_ = 1.0f / (1.0f + g_);
    7b1a:	str	r2, [r0, #108]	; 0x6c
    7b1c:	str	r2, [r0, #120]	; 0x78
    7b1e:	bx	lr
    7b20:	.word	0x3d00ba22
    7b24:	.word	0x3f783320

00007b28 <plaits::GrainEngine::Reset()>:
  z_oscillator_.Init();
  dc_blocker_[0].Init();
  dc_blocker_[1].Init();
}

void GrainEngine::Reset() {
    7b28:	bx	lr
    7b2a:	nop

00007b2c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    7b2c:	vmov.f32	s15, #34	; 0x41100000  9.0
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float root = parameters.note;
    7b30:	vldr	s13, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7b34:	vldr	s14, [pc, #156]	; 7bd4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    7b38:	vsub.f32	s15, s13, s15
void GrainEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    7b3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7b40:	vcmpe.f32	s15, s14
    7b44:	vpush	{d8-d15}
    7b48:	vmrs	APSR_nzcv, fpscr
    7b4c:	sub	sp, #20
  const float root = parameters.note;
    7b4e:	vstr	s13, [sp, #8]
void GrainEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    7b52:	str	r2, [sp, #4]
    7b54:	ldr.w	r9, [sp, #120]	; 0x78
    7b58:	bmi.n	7b70 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    7b5a:	vldr	s14, [pc, #124]	; 7bd8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xac>
    7b5e:	vcmpe.f32	s15, s14
    7b62:	vmrs	APSR_nzcv, fpscr
    7b66:	ble.w	9116 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15ea>
    7b6a:	movs	r2, #0
    7b6c:	movs	r4, #255	; 0xff
    7b6e:	b.n	7b74 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    7b70:	movs	r2, #0
    7b72:	mov	r4, r2
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    7b74:	vmov.f32	s15, #56	; 0x41c00000  24.0
    7b78:	vldr	s13, [r1, #8]
    7b7c:	vldr	s14, [pc, #92]	; 7bdc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb0>
    7b80:	vmov.f32	s11, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7b84:	ldr.w	fp, [pc, #88]	; 7be0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb4>
    7b88:	vfma.f32	s15, s13, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7b8c:	ldr.w	sl, [pc, #84]	; 7be4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8>
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7b90:	vldr	s13, [pc, #64]	; 7bd4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa8>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7b94:	add.w	r4, fp, r4, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7b98:	add.w	r2, sl, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    7b9c:	vldr	s12, [pc, #80]	; 7bf0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4>
    7ba0:	vldr	s14, [r4]
    7ba4:	vldr	s23, [r2]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    7ba8:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    7bac:	vmul.f32	s14, s14, s23

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7bb0:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    7bb4:	vmul.f32	s23, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7bb8:	vmrs	APSR_nzcv, fpscr
    7bbc:	bmi.n	7bfc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd0>
    7bbe:	vldr	s14, [pc, #24]	; 7bd8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xac>
    7bc2:	vcmpe.f32	s15, s14
    7bc6:	vmrs	APSR_nzcv, fpscr
    7bca:	ble.w	90ee <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15c2>
    7bce:	movs	r2, #0
    7bd0:	movs	r4, #255	; 0xff
    7bd2:	b.n	7c00 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd4>
    7bd4:	.word	0xc3000000
    7bd8:	.word	0x42fe0000
    7bdc:	.word	0x42a80000
    7be0:	.word	0x20000024
    7be4:	.word	0x20000428
    7be8:	.word	0x42400000
    7bec:	.word	0x43000000
    7bf0:	.word	0x39969651
    7bf4:	.word	0x00000000
    7bf8:	.word	0x3ea8f5c3
    7bfc:	movs	r2, #0
    7bfe:	mov	r4, r2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    7c00:	vmov.f32	s15, #184	; 0xc1c00000 -24.0
  const float root = parameters.note;
  const float f0 = NoteToFrequency(root);
  
  const float f1 = NoteToFrequency(24.0f + 84.0f * parameters.timbre);
  const float ratio = SemitonesToRatio(-24.0f + 48.0f * parameters.harmonics);
    7c04:	vldr	s13, [r1, #16]
    7c08:	vldr	s14, [pc, #-36]	; 7be8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbc>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7c0c:	add.w	r2, sl, r2, lsl #2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7c10:	add.w	r4, fp, r4, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    7c14:	vldr	s10, [pc, #-44]	; 7bec <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc0>
    7c18:	vfma.f32	s15, s13, s14
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    7c1c:	vldr	s28, [r2]
    7c20:	vldr	s14, [r4]
  const float carrier_bleed = parameters.harmonics < 0.5f
      ? 1.0f - 2.0f * parameters.harmonics
      : 0.0f;
    7c24:	vmov.f32	s12, #96	; 0x3f000000  0.5
    7c28:	vldr	s11, [pc, #-60]	; 7bf0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4>
    7c2c:	vmul.f32	s14, s14, s28
    7c30:	vcmpe.f32	s13, s12
    7c34:	vadd.f32	s15, s15, s10
    7c38:	vmul.f32	s28, s14, s11
    7c3c:	vmrs	APSR_nzcv, fpscr
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    7c40:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7c44:	vcvt.f32.s32	s11, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7c48:	vmov	r2, s14
    7c4c:	add.w	r2, fp, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7c50:	vsub.f32	s15, s15, s11
    7c54:	vldr	s14, [r2]
    7c58:	vcvt.s32.f32	s15, s15, #8
    7c5c:	vmov	r2, s15
    7c60:	add.w	r2, sl, r2, lsl #2
    7c64:	vldr	s15, [r2]
    7c68:	vmul.f32	s15, s15, s14
    7c6c:	vstr	s15, [sp, #12]
    7c70:	bpl.w	90a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1578>
    7c74:	vmov.f32	s14, #0	; 0x40000000  2.0
    7c78:	vmov.f32	s15, #112	; 0x3f800000  1.0
    7c7c:	vfms.f32	s15, s13, s14
    7c80:	vsub.f32	s14, s14, s15
    7c84:	vmul.f32	s15, s14, s15
    7c88:	vstr	s15, [sp]
  const float carrier_bleed_fixed = carrier_bleed * (2.0f - carrier_bleed);
  const float carrier_shape = 0.33f + (parameters.morph - 0.33f) * \
      max(1.0f - f0 * 24.0f, 0.0f);
    7c8c:	vmov.f32	s6, #112	; 0x3f800000  1.0
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
    7c90:	vldr	s18, [pc, #-160]	; 7bf4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc8>
    7c94:	vmov.f32	s14, #56	; 0x41c00000  24.0
  const float ratio = SemitonesToRatio(-24.0f + 48.0f * parameters.harmonics);
  const float carrier_bleed = parameters.harmonics < 0.5f
      ? 1.0f - 2.0f * parameters.harmonics
      : 0.0f;
  const float carrier_bleed_fixed = carrier_bleed * (2.0f - carrier_bleed);
  const float carrier_shape = 0.33f + (parameters.morph - 0.33f) * \
    7c98:	vldr	s31, [pc, #-164]	; 7bf8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc>
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    7c9c:	vmov.f32	s15, #64	; 0x3e000000  0.125
    7ca0:	vldr	s13, [r1, #12]
      max(1.0f - f0 * 24.0f, 0.0f);
    7ca4:	vmov.f32	s12, s6
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7ca8:	vldr	s2, [r0, #28]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    7cac:	vmov.f32	s0, #80	; 0x3e800000  0.250
    7cb0:	vldr	s3, [r0, #36]	; 0x24
  const float ratio = SemitonesToRatio(-24.0f + 48.0f * parameters.harmonics);
  const float carrier_bleed = parameters.harmonics < 0.5f
      ? 1.0f - 2.0f * parameters.harmonics
      : 0.0f;
  const float carrier_bleed_fixed = carrier_bleed * (2.0f - carrier_bleed);
  const float carrier_shape = 0.33f + (parameters.morph - 0.33f) * \
    7cb4:	vsub.f32	s13, s13, s31
    7cb8:	vldr	s1, [r0, #32]
      max(1.0f - f0 * 24.0f, 0.0f);
    7cbc:	vfms.f32	s12, s23, s14
    7cc0:	vldr	s9, [r0, #40]	; 0x28
    stmlib::ParameterInterpolator carrier_bleed_modulation(
        &carrier_bleed_,
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    7cc4:	vldr	s5, [r0, #24]
    
    while (size--) {
    7cc8:	add.w	r7, r9, #4294967295
    7ccc:	vmov.f32	s14, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    7cd0:	vmov	s12, r9
    7cd4:	vcvt.f32.u32	s24, s12
    7cd8:	vldr	s12, [sp]
    7cdc:	vcmpe.f32	s14, s18
    7ce0:	vsub.f32	s12, s12, s9
    7ce4:	vmrs	APSR_nzcv, fpscr
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    7ce8:	vcmpe.f32	s23, s15
    7cec:	vdiv.f32	s21, s12, s24
    7cf0:	it	mi
    7cf2:	vmovmi.f32	s14, s18
    7cf6:	vmrs	APSR_nzcv, fpscr
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    7cfa:	vcmpe.f32	s28, s0
    7cfe:	vfma.f32	s31, s13, s14
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    7d02:	it	lt
    7d04:	vmovlt.f32	s15, s23
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    7d08:	vmrs	APSR_nzcv, fpscr
    7d0c:	vsub.f32	s15, s15, s2
    7d10:	ite	lt
    7d12:	vmovlt.f32	s14, s28
    7d16:	vmovge.f32	s14, s0
    7d1a:	vsub.f32	s13, s31, s3
    7d1e:	vdiv.f32	s25, s15, s24
    7d22:	vsub.f32	s15, s14, s1
    7d26:	vdiv.f32	s20, s13, s24
    7d2a:	vdiv.f32	s26, s15, s24
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    7d2e:	cmp.w	r9, #0
    7d32:	beq.w	7fc0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x494>
    7d36:	ldr	r2, [pc, #972]	; (8104 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5d8>)
    7d38:	mov	lr, r7
    7d3a:	ldr.w	r8, [sp, #4]
    7d3e:	adds	r4, r2, #4
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    7d40:	vldr	s17, [pc, #964]	; 8108 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5dc>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    7d44:	vldr	s30, [pc, #964]	; 810c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e0>
    7d48:	vmov.f32	s22, #8	; 0x40400000  3.0
    7d4c:	vldr	s29, [pc, #960]	; 8110 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e4>
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    7d50:	vmov.f32	s19, #96	; 0x3f000000  0.5
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    7d54:	vmov.f32	s27, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    7d58:	vadd.f32	s2, s2, s25
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    7d5c:	vldr	s13, [r0, #16]
    7d60:	vadd.f32	s1, s1, s26
    7d64:	vadd.f32	s13, s2, s13
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    7d68:	vcmpe.f32	s13, s6
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    7d6c:	vstr	s13, [r0, #16]
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    7d70:	vmrs	APSR_nzcv, fpscr
    7d74:	blt.w	8dd0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12a4>
        carrier_phase_ -= 1.0f;
    7d78:	vsub.f32	s13, s13, s6
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    7d7c:	vldr	s14, [r0, #20]
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    7d80:	vmov.f32	s11, s3
    return value_;
  }

  inline float subsample(float t) {
    return value_ + increment_ * t;
    7d84:	vmov.f32	s10, s9
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
    7d88:	vdiv.f32	s15, s13, s2
    
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
    7d8c:	vstr	s13, [r0, #16]
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
            1.0f,
            formant_phase_ + (1.0f - reset_time) * f1,
    7d90:	vsub.f32	s8, s6, s15
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    7d94:	vfma.f32	s11, s20, s8
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    7d98:	vfma.f32	s14, s1, s8
    7d9c:	vfma.f32	s10, s21, s8
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    7da0:	vmul.f32	s11, s11, s22
    MAKE_INTEGRAL_FRACTIONAL(shape);
    7da4:	vcvt.s32.f32	s7, s11
    float t = 1.0f - shape_fractional;
    7da8:	vcvt.f32.s32	s12, s7
    
    if (shape_integral == 0) {
    7dac:	vmov	r5, s7
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    7db0:	vsub.f32	s12, s11, s12
    7db4:	vsub.f32	s12, s6, s12
    
    if (shape_integral == 0) {
    7db8:	cmp	r5, #0
    7dba:	bne.w	89fc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xed0>
      phase = phase * (1.0f + t * t * t * 15.0f);
    7dbe:	vmul.f32	s11, s12, s12
    7dc2:	vmov.f32	s7, #46	; 0x41700000  15.0
    7dc6:	vmul.f32	s12, s11, s12
    7dca:	vmov.f32	s11, s6
    7dce:	vfma.f32	s11, s12, s7
      if (phase >= 1.0f) {
    7dd2:	vcmpe.f32	s11, s6
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
      phase = phase * (1.0f + t * t * t * 15.0f);
    7dd6:	vmov.f32	s12, s11
      if (phase >= 1.0f) {
    7dda:	vmrs	APSR_nzcv, fpscr
    7dde:	blt.w	8c7c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1150>
    7de2:	movw	r6, #3076	; 0xc04
    7de6:	vldr	s11, [pc, #812]	; 8114 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    7dea:	mov.w	r5, #3072	; 0xc00
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    7dee:	vcvt.s32.f32	s12, s14
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7df2:	add	r5, r2
    7df4:	vadd.f32	s7, s21, s9
  float b = table[index_integral + 1];
    7df8:	add	r6, r2
    7dfa:	vadd.f32	s3, s20, s3

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7dfe:	vldr	s4, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    7e02:	vcvt.f32.s32	s9, s12
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    7e06:	vldr	s12, [r6]
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    7e0a:	vmul.f32	s16, s3, s22
    7e0e:	vsub.f32	s14, s14, s9
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    7e12:	vsub.f32	s12, s12, s4
  index *= size;
    7e16:	vmul.f32	s14, s14, s17
    7e1a:	vfma.f32	s4, s12, s11
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    7e1e:	vcvt.s32.f32	s12, s16
  MAKE_INTEGRAL_FRACTIONAL(index)
    7e22:	vcvt.s32.f32	s9, s14
    7e26:	vmov	r5, s12
  float a = table[index_integral];
    7e2a:	vmov	r6, s9
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    7e2e:	vcvt.f32.s32	s9, s9
    7e32:	vadd.f32	s4, s4, s6
    7e36:	lsls	r6, r6, #2
    7e38:	vsub.f32	s9, s14, s9
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    7e3c:	vmov	s14, r5
    7e40:	add.w	ip, r2, r6
  float b = table[index_integral + 1];
    7e44:	add	r6, r4
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    7e46:	vmul.f32	s4, s4, s0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7e4a:	vldr	s12, [ip]
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    7e4e:	vcvt.f32.s32	s14, s14
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    7e52:	vldr	s11, [r6]
    7e56:	vsub.f32	s11, s11, s12
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    7e5a:	vsub.f32	s14, s16, s14
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    7e5e:	vfma.f32	s12, s9, s11
    7e62:	vadd.f32	s9, s10, s6
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    7e66:	vsub.f32	s14, s6, s14
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    7e6a:	vadd.f32	s12, s12, s10
    7e6e:	vmul.f32	s12, s12, s4
    7e72:	vdiv.f32	s16, s12, s9
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    7e76:	cmp	r5, #0
    7e78:	bne.w	8b7e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1052>
      phase = phase * (1.0f + t * t * t * 15.0f);
    7e7c:	vmul.f32	s12, s14, s14
    7e80:	vmov.f32	s11, #46	; 0x41700000  15.0
    7e84:	vmov.f32	s10, s6
    7e88:	vmul.f32	s12, s12, s14
    7e8c:	vfma.f32	s10, s12, s11
    7e90:	vmul.f32	s12, s10, s18
      if (phase >= 1.0f) {
    7e94:	vcmpe.f32	s12, s6
    7e98:	vmrs	APSR_nzcv, fpscr
    7e9c:	blt.w	8cd0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11a4>
    7ea0:	movw	ip, #3076	; 0xc04
    7ea4:	vldr	s11, [pc, #620]	; 8114 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    7ea8:	mov.w	r6, #3072	; 0xc00
    7eac:	add	r6, r2
  float b = table[index_integral + 1];
    7eae:	add	ip, r2

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7eb0:	vldr	s10, [r2]
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    7eb4:	vadd.f32	s4, s7, s6
    7eb8:	vldr	s12, [r6]
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    7ebc:	vldr	s9, [ip]
    7ec0:	vsub.f32	s9, s9, s12
    7ec4:	vfma.f32	s12, s9, s11
    7ec8:	vldr	s11, [r2, #4]
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    7ecc:	vmov.f32	s9, s7
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    7ed0:	vsub.f32	s11, s11, s10
    7ed4:	vfma.f32	s10, s11, s18
    7ed8:	vadd.f32	s12, s12, s6
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    7edc:	vmul.f32	s11, s15, s19
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    7ee0:	vmul.f32	s12, s12, s0
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    7ee4:	vmul.f32	s11, s11, s15
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    7ee8:	vadd.f32	s10, s10, s7
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    7eec:	vmul.f32	s15, s1, s15
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    7ef0:	vmul.f32	s10, s12, s10
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    7ef4:	vmul.f32	s12, s8, s27
        formant_phase_ = reset_time * f1;
    7ef8:	vstr	s15, [r0, #20]
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    7efc:	vdiv.f32	s7, s10, s4
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    7f00:	vmul.f32	s8, s12, s8
    7f04:	vmov.f32	s12, s18
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    7f08:	vsub.f32	s16, s7, s16
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    7f0c:	vfma.f32	s5, s16, s11
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    7f10:	vfma.f32	s12, s16, s8
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    7f14:	cmp	r5, #0
    7f16:	bne.w	8948 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe1c>
      phase = phase * (1.0f + t * t * t * 15.0f);
    7f1a:	vmul.f32	s11, s14, s14
    7f1e:	vmov.f32	s10, #46	; 0x41700000  15.0
    7f22:	vmul.f32	s14, s11, s14
    7f26:	vmov.f32	s11, s6
    7f2a:	vfma.f32	s11, s14, s10
    7f2e:	vmul.f32	s13, s11, s13
      if (phase >= 1.0f) {
    7f32:	vcmpe.f32	s13, s6
    7f36:	vmrs	APSR_nzcv, fpscr
    7f3a:	blt.w	8f26 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13fa>
    7f3e:	movw	r6, #3076	; 0xc04
    7f42:	vldr	s13, [pc, #464]	; 8114 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    7f46:	mov.w	r5, #3072	; 0xc00
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    7f4a:	vcvt.s32.f32	s10, s15
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7f4e:	add	r5, r2
  float b = table[index_integral + 1];
    7f50:	add	r6, r2
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    7f52:	add.w	lr, lr, #4294967295

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7f56:	vldr	s14, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    7f5a:	vcvt.f32.s32	s10, s10
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    7f5e:	vldr	s11, [r6]
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    7f62:	cmp.w	lr, #4294967295
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    7f66:	vsub.f32	s11, s11, s14
    7f6a:	vsub.f32	s15, s15, s10
    7f6e:	vfma.f32	s14, s11, s13
  index *= size;
    7f72:	vmul.f32	s15, s15, s17
  MAKE_INTEGRAL_FRACTIONAL(index)
    7f76:	vcvt.s32.f32	s11, s15
    7f7a:	vadd.f32	s13, s14, s6
  float a = table[index_integral];
    7f7e:	vmov	r5, s11
    7f82:	vcvt.f32.s32	s11, s11
    7f86:	mov.w	r5, r5, lsl #2
    7f8a:	vmul.f32	s13, s13, s0
    7f8e:	vsub.f32	s15, s15, s11
    7f92:	add.w	r6, r2, r5
  float b = table[index_integral + 1];
    7f96:	add	r5, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    7f98:	vldr	s14, [r6]
    7f9c:	vldr	s11, [r5]
      *out++ = this_sample;
    7fa0:	vstmia	r8!, {s5}
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    7fa4:	vsub.f32	s11, s11, s14
    7fa8:	vfma.f32	s14, s15, s11
    7fac:	vadd.f32	s14, s14, s9
    7fb0:	vmul.f32	s14, s14, s13
    7fb4:	vdiv.f32	s5, s14, s4
    7fb8:	vadd.f32	s5, s5, s12
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    7fbc:	bne.w	7d58 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    7fc0:	vmov.f32	s15, #64	; 0x3e000000  0.125
  
  grainlet_[0].Render(f0, f1, carrier_shape, carrier_bleed_fixed, out, size);
  grainlet_[1].Render(f0, f1 * ratio, carrier_shape, carrier_bleed_fixed, aux, size);
    7fc4:	vldr	s14, [sp, #12]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    7fc8:	vmov.f32	s13, #80	; 0x3e800000  0.250
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7fcc:	vldr	s16, [r0, #56]	; 0x38
    7fd0:	vmul.f32	s28, s14, s28
    7fd4:	vldr	s17, [r0, #60]	; 0x3c
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    7fd8:	vcmpe.f32	s23, s15
    7fdc:	vldr	s8, [r0, #64]	; 0x40
    7fe0:	vldr	s0, [r0, #68]	; 0x44
    increment_ = (new_value - *state) / static_cast<float>(size);
    7fe4:	vldr	s14, [sp]
    7fe8:	vsub.f32	s31, s31, s8
    7fec:	vmrs	APSR_nzcv, fpscr
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
      *out++ = this_sample;
    }
    
    next_sample_ = next_sample;
    7ff0:	vstr	s5, [r0, #24]
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    7ff4:	vcmp.f32	s28, s13
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7ff8:	vstr	s9, [r0, #40]	; 0x28
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    7ffc:	vsub.f32	s14, s14, s0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    8000:	vstr	s3, [r0, #36]	; 0x24
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    8004:	it	lt
    8006:	vmovlt.f32	s15, s23
    800a:	vstr	s1, [r0, #32]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    800e:	vmrs	APSR_nzcv, fpscr
    8012:	vstr	s2, [r0, #28]
    stmlib::ParameterInterpolator carrier_bleed_modulation(
        &carrier_bleed_,
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    8016:	vldr	s5, [r0, #52]	; 0x34
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    801a:	vdiv.f32	s20, s31, s24
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    801e:	it	ge
    8020:	vmovge.f32	s28, s13
    8024:	vsub.f32	s15, s15, s16
    8028:	vdiv.f32	s21, s14, s24
    802c:	vsub.f32	s28, s28, s17
    8030:	vdiv.f32	s25, s15, s24
    8034:	vdiv.f32	s26, s28, s24
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8038:	cmp.w	r9, #0
    803c:	beq.w	830e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e2>
    8040:	ldr	r2, [pc, #192]	; (8104 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5d8>)
    8042:	mov	lr, r3
    8044:	mov	r6, r7
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    8046:	vldr	s18, [pc, #204]	; 8114 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    804a:	adds	r4, r2, #4
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    804c:	vldr	s1, [pc, #184]	; 8108 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5dc>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8050:	vldr	s29, [pc, #184]	; 810c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e0>
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8054:	vmov.f32	s2, s13
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8058:	vldr	s28, [pc, #180]	; 8110 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e4>
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    805c:	vmov.f32	s6, #112	; 0x3f800000  1.0
    8060:	vmov.f32	s22, #8	; 0x40400000  3.0
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    8064:	vmov.f32	s19, #96	; 0x3f000000  0.5
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8068:	vmov.f32	s27, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    806c:	vadd.f32	s16, s16, s25
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    8070:	vldr	s14, [r0, #44]	; 0x2c
    8074:	vadd.f32	s17, s17, s26
    8078:	vadd.f32	s14, s16, s14
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    807c:	vcmpe.f32	s14, s6
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    8080:	vstr	s14, [r0, #44]	; 0x2c
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    8084:	vmrs	APSR_nzcv, fpscr
    8088:	blt.w	8d88 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x125c>
        carrier_phase_ -= 1.0f;
    808c:	vsub.f32	s14, s14, s6
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    8090:	vldr	s12, [r0, #48]	; 0x30
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    8094:	vmov.f32	s13, s8
    return value_;
  }

  inline float subsample(float t) {
    return value_ + increment_ * t;
    8098:	vmov.f32	s11, s0
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
    809c:	vdiv.f32	s15, s14, s16
    
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
    80a0:	vstr	s14, [r0, #44]	; 0x2c
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
            1.0f,
            formant_phase_ + (1.0f - reset_time) * f1,
    80a4:	vsub.f32	s10, s6, s15
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    80a8:	vfma.f32	s13, s20, s10
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    80ac:	vfma.f32	s12, s17, s10
    80b0:	vfma.f32	s11, s21, s10
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    80b4:	vmul.f32	s13, s13, s22
    MAKE_INTEGRAL_FRACTIONAL(shape);
    80b8:	vcvt.s32.f32	s9, s13
    float t = 1.0f - shape_fractional;
    80bc:	vcvt.f32.s32	s7, s9
    
    if (shape_integral == 0) {
    80c0:	vmov	r5, s9
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    80c4:	vsub.f32	s13, s13, s7
    80c8:	vsub.f32	s13, s6, s13
    
    if (shape_integral == 0) {
    80cc:	cmp	r5, #0
    80ce:	bne.w	8c16 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10ea>
      phase = phase * (1.0f + t * t * t * 15.0f);
    80d2:	vmul.f32	s9, s13, s13
    80d6:	vmov.f32	s7, #46	; 0x41700000  15.0
    80da:	vmul.f32	s13, s9, s13
    80de:	vmov.f32	s9, s6
    80e2:	vfma.f32	s9, s13, s7
      if (phase >= 1.0f) {
    80e6:	vcmpe.f32	s9, s6
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
      phase = phase * (1.0f + t * t * t * 15.0f);
    80ea:	vmov.f32	s13, s9
      if (phase >= 1.0f) {
    80ee:	vmrs	APSR_nzcv, fpscr
    80f2:	blt.w	9022 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14f6>
    80f6:	movw	ip, #3076	; 0xc04
    80fa:	vldr	s4, [pc, #24]	; 8114 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    80fe:	mov.w	r5, #3072	; 0xc00
    8102:	b.n	8130 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x604>
    8104:	.word	0x200025e0
    8108:	.word	0x44800000
    810c:	.word	0x3eff7cee
    8110:	.word	0x3a83126f
    8114:	.word	0x00000000
    8118:	.word	0x3e99999a
    811c:	.word	0x413957d7
    8120:	.word	0x40490fdb
    8124:	.word	0x42c00000
    8128:	.word	0xc3000000
    812c:	.word	0x39969651
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8130:	vcvt.s32.f32	s3, s12
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8134:	add	r5, r2
  float b = table[index_integral + 1];
    8136:	add	ip, r2
    8138:	vadd.f32	s8, s20, s8
    813c:	vadd.f32	s9, s21, s0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8140:	vldr	s7, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8144:	vcvt.f32.s32	s3, s3
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8148:	vldr	s13, [ip]
    814c:	vsub.f32	s13, s13, s7
    8150:	vsub.f32	s12, s12, s3
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    8154:	vmul.f32	s3, s8, s22
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8158:	vfma.f32	s7, s13, s4
  index *= size;
    815c:	vmul.f32	s12, s12, s1
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    8160:	vcvt.s32.f32	s13, s3
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8164:	vadd.f32	s4, s11, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    8168:	vcvt.s32.f32	s0, s12
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    816c:	vmov	r5, s13
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8170:	vadd.f32	s7, s7, s6
  float a = table[index_integral];
    8174:	vmov	ip, s0
    8178:	vcvt.f32.s32	s0, s0
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    817c:	vmov	s30, r5
    8180:	mov.w	ip, ip, lsl #2
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8184:	vmul.f32	s7, s7, s2
    8188:	vsub.f32	s12, s12, s0
    818c:	add.w	r8, r2, ip
  float b = table[index_integral + 1];
    8190:	add	ip, r4
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    8192:	vcvt.f32.s32	s30, s30

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8196:	vldr	s13, [r8]
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    819a:	vldr	s0, [ip]
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    819e:	vsub.f32	s3, s3, s30
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    81a2:	vsub.f32	s0, s0, s13
    81a6:	vfma.f32	s13, s12, s0
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    81aa:	vsub.f32	s12, s6, s3
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    81ae:	vadd.f32	s13, s13, s11
    81b2:	vmul.f32	s13, s13, s7
    81b6:	vdiv.f32	s11, s13, s4
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    81ba:	cmp	r5, #0
    81bc:	bne.w	8bc8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x109c>
      phase = phase * (1.0f + t * t * t * 15.0f);
    81c0:	vmul.f32	s13, s12, s12
    81c4:	vmov.f32	s7, #46	; 0x41700000  15.0
    81c8:	vmov.f32	s4, s6
    81cc:	vmul.f32	s13, s13, s12
    81d0:	vfma.f32	s4, s13, s7
    81d4:	vmul.f32	s13, s4, s18
      if (phase >= 1.0f) {
    81d8:	vcmpe.f32	s13, s6
    81dc:	vmrs	APSR_nzcv, fpscr
    81e0:	blt.w	8d26 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11fa>
    81e4:	movw	ip, #3076	; 0xc04
    81e8:	vldr	s7, [pc, #-216]	; 8114 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    81ec:	mov.w	r8, #3072	; 0xc00
    81f0:	add	r8, r2
  float b = table[index_integral + 1];
    81f2:	add	ip, r2

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    81f4:	vldr	s4, [r2]
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    81f8:	vmov.f32	s13, s12
    81fc:	vldr	s3, [r8]
    8200:	vmov.f32	s0, s9
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8204:	vldr	s30, [ip]
    8208:	vldr	s12, [r2, #4]
    820c:	vsub.f32	s30, s30, s3
    8210:	vsub.f32	s12, s12, s4
    8214:	vfma.f32	s3, s30, s7
    8218:	vfma.f32	s4, s12, s18
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    821c:	vadd.f32	s12, s9, s6
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8220:	vmov.f32	s7, s3
    8224:	vmov.f32	s30, s4
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8228:	vmul.f32	s4, s10, s27
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    822c:	vadd.f32	s7, s7, s6
    8230:	vadd.f32	s9, s30, s9
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8234:	vmul.f32	s10, s4, s10
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8238:	vmul.f32	s7, s7, s2
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    823c:	vmul.f32	s3, s15, s19
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8240:	vmul.f32	s9, s7, s9
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    8244:	vmul.f32	s3, s3, s15
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    8248:	vmul.f32	s15, s17, s15
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    824c:	vdiv.f32	s7, s9, s12
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    8250:	vstr	s15, [r0, #48]	; 0x30
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8254:	vmov.f32	s9, s18
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8258:	vsub.f32	s11, s7, s11
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    825c:	vfma.f32	s9, s11, s10
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    8260:	vfma.f32	s5, s11, s3
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8264:	vmov.f32	s11, s9
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    8268:	cmp	r5, #0
    826a:	bne.w	8900 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdd4>
      phase = phase * (1.0f + t * t * t * 15.0f);
    826e:	vmul.f32	s10, s13, s13
    8272:	vmov.f32	s9, #46	; 0x41700000  15.0
    8276:	vmul.f32	s13, s10, s13
    827a:	vmov.f32	s10, s6
    827e:	vfma.f32	s10, s13, s9
    8282:	vmul.f32	s14, s10, s14
      if (phase >= 1.0f) {
    8286:	vcmpe.f32	s14, s6
    828a:	vmrs	APSR_nzcv, fpscr
    828e:	blt.w	89cc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea0>
    8292:	movw	ip, #3076	; 0xc04
    8296:	vldr	s13, [pc, #-388]	; 8114 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    829a:	mov.w	r5, #3072	; 0xc00
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    829e:	vcvt.s32.f32	s9, s15
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    82a2:	add	r5, r2
  float b = table[index_integral + 1];
    82a4:	add	ip, r2
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    82a6:	subs	r6, #1

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    82a8:	vldr	s14, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    82ac:	vcvt.f32.s32	s9, s9
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    82b0:	vldr	s10, [ip]
    82b4:	vsub.f32	s10, s10, s14
    82b8:	vsub.f32	s15, s15, s9
    82bc:	vfma.f32	s14, s10, s13
  index *= size;
    82c0:	vmul.f32	s15, s15, s1
  MAKE_INTEGRAL_FRACTIONAL(index)
    82c4:	vcvt.s32.f32	s10, s15
    82c8:	vadd.f32	s13, s14, s6
  float a = table[index_integral];
    82cc:	vmov	r5, s10
    82d0:	vcvt.f32.s32	s10, s10
    82d4:	lsls	r5, r5, #2
    82d6:	vmul.f32	s13, s13, s2
    82da:	vsub.f32	s15, s15, s10
    82de:	add.w	ip, r2, r5
  float b = table[index_integral + 1];
    82e2:	add	r5, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    82e4:	vldr	s14, [ip]
    82e8:	vldr	s10, [r5]
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    82ec:	adds	r5, r6, #1
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
      *out++ = this_sample;
    82ee:	vstmia	lr!, {s5}
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    82f2:	vsub.f32	s10, s10, s14
    82f6:	vfma.f32	s14, s15, s10
    82fa:	vadd.f32	s14, s14, s0
    82fe:	vmul.f32	s14, s14, s13
    8302:	vdiv.f32	s5, s14, s12
    8306:	vadd.f32	s5, s5, s11
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    830a:	bne.w	806c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x540>
  dc_blocker_[0].set_f<FREQUENCY_DIRTY>(0.3f * f0);
    830e:	vldr	s7, [pc, #-504]	; 8118 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5ec>
    8312:	vmov.f32	s13, #112	; 0x3f800000  1.0
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    8316:	vldr	s14, [pc, #-508]	; 811c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f0>
    831a:	vmul.f32	s15, s23, s7
    831e:	vldr	s7, [pc, #-512]	; 8120 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f4>
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
      *out++ = this_sample;
    }
    
    next_sample_ = next_sample;
    8322:	vstr	s5, [r0, #52]	; 0x34
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    8326:	vstr	s0, [r0, #68]	; 0x44
    832a:	vmul.f32	s14, s15, s14
    832e:	vstr	s8, [r0, #64]	; 0x40
    8332:	vstr	s17, [r0, #60]	; 0x3c
    8336:	vstr	s16, [r0, #56]	; 0x38
    833a:	vfma.f32	s7, s15, s14
    833e:	vmul.f32	s7, s7, s15
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    8342:	vadd.f32	s15, s7, s13
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    8346:	vstr	s7, [r0, #104]	; 0x68
    gi_ = 1.0f / (1.0f + g_);
    834a:	vdiv.f32	s3, s13, s15
    834e:	vstr	s3, [r0, #108]	; 0x6c
  for (size_t i = 0; i < size; ++i) {
    8352:	cmp.w	r9, #0
    8356:	beq.n	839e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x872>
    8358:	ldr	r2, [sp, #4]
    835a:	mov	r4, r3
    835c:	vmov.f32	s11, s3
    8360:	vmov.f32	s13, s7
    8364:	add.w	r5, r2, r9, lsl #2
    8368:	b.n	8372 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x846>
    836a:	vldr	s13, [r0, #104]	; 0x68
    836e:	vldr	s11, [r0, #108]	; 0x6c
    out[i] = dc_blocker_[0].Process<FILTER_MODE_HIGH_PASS>(out[i] + aux[i]);
    8372:	vldmia	r4!, {s15}
    8376:	vldr	s12, [r2]
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    837a:	vldr	s14, [r0, #112]	; 0x70
    837e:	vadd.f32	s15, s15, s12
    8382:	vfma.f32	s14, s15, s13
    state_ = g_ * (in - lp) + lp;
    8386:	vfms.f32	s15, s14, s11
    838a:	vmul.f32	s13, s15, s13
    838e:	vfma.f32	s13, s14, s11
    8392:	vstr	s13, [r0, #112]	; 0x70
    8396:	vstmia	r2!, {s15}
      max(1.0f - f0 * 24.0f, 0.0f);
  
  grainlet_[0].Render(f0, f1, carrier_shape, carrier_bleed_fixed, out, size);
  grainlet_[1].Render(f0, f1 * ratio, carrier_shape, carrier_bleed_fixed, aux, size);
  dc_blocker_[0].set_f<FREQUENCY_DIRTY>(0.3f * f0);
  for (size_t i = 0; i < size; ++i) {
    839a:	cmp	r5, r2
    839c:	bne.n	836a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83e>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    839e:	vldr	s15, [pc, #-636]	; 8124 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f8>
    83a2:	vmov.f32	s13, #34	; 0x41100000  9.0
    83a6:	vldr	s12, [r1, #8]
    83aa:	vldr	s11, [sp, #8]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    83ae:	vldr	s14, [pc, #-648]	; 8128 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5fc>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    83b2:	vfma.f32	s11, s12, s15
    83b6:	vsub.f32	s15, s11, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    83ba:	vcmpe.f32	s15, s14
    83be:	vmrs	APSR_nzcv, fpscr
    83c2:	bpl.w	90b0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1584>
    83c6:	movs	r2, #0
    83c8:	mov	r4, r2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    83ca:	add.w	fp, fp, r4, lsl #2
      float formant_frequency,
      float carrier_shape,
      float mode,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    83ce:	vmov.f32	s11, #64	; 0x3e000000  0.125
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    83d2:	add.w	sl, sl, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    83d6:	vldr	s10, [pc, #-684]	; 812c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x600>
    83da:	vldr	s14, [fp]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    83de:	vmov.f32	s12, #80	; 0x3e800000  0.250
    83e2:	vldr	s15, [sl]
      float carrier_shape,
      float mode,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    83e6:	vcmp.f32	s23, s11
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    83ea:	vldr	s4, [r0, #92]	; 0x5c
    83ee:	vmul.f32	s15, s14, s15
    83f2:	vldr	s5, [r0, #88]	; 0x58
    83f6:	vmrs	APSR_nzcv, fpscr

  const float cutoff = NoteToFrequency(root + 96.0f * parameters.timbre);
  z_oscillator_.Render(
      f0,
      cutoff,
      parameters.morph,
    83fa:	vldr	s13, [r1, #12]
    83fe:	vldr	s9, [r0, #96]	; 0x60
    8402:	vmul.f32	s15, s15, s10
      parameters.harmonics,
    8406:	vldr	s14, [r1, #16]
    840a:	it	ge
    840c:	vmovge.f32	s23, s11
    8410:	vldr	s8, [r0, #100]	; 0x64
    increment_ = (new_value - *state) / static_cast<float>(size);
    8414:	vsub.f32	s13, s13, s9
    stmlib::ParameterInterpolator mode_modulation(
        &mode_,
        mode,
        size);

    float next_sample = next_sample_;
    8418:	vldr	s20, [r0, #84]	; 0x54
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    841c:	vcmp.f32	s15, s12
    8420:	vsub.f32	s23, s23, s5
    8424:	vsub.f32	s14, s14, s8
    8428:	vmrs	APSR_nzcv, fpscr
    842c:	vdiv.f32	s17, s23, s24
    8430:	it	ge
    8432:	vmovge.f32	s15, s12
    8436:	vdiv.f32	s0, s13, s24
    843a:	vsub.f32	s15, s15, s4
    843e:	vdiv.f32	s16, s14, s24
    8442:	vdiv.f32	s18, s15, s24
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8446:	cmp.w	r9, #0
    844a:	beq.w	913e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1612>
    844e:	ldr	r2, [pc, #40]	; (8478 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x94c>)
    8450:	mov	r6, r3
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8452:	mov	r5, r7
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    8454:	vldr	s2, [pc, #48]	; 8488 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95c>
    8458:	adds	r4, r2, #4
    845a:	mov	lr, r2
  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    845c:	vldr	s1, [pc, #28]	; 847c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x950>
    
      discontinuity_phase_ += 2.0f * f0;
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
    8460:	vmov.f32	s11, #112	; 0x3f800000  1.0
  float b = table[index_integral + 1];
    8464:	mov	ip, r4
    8466:	vmov.f32	s10, #96	; 0x3f000000  0.5
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    846a:	vldr	s6, [pc, #20]	; 8480 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x954>
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    846e:	vldr	s19, [pc, #20]	; 8484 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x958>
    8472:	vmov.f32	s12, s20
    8476:	b.n	855c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa30>
    8478:	.word	0x200025e0
    847c:	.word	0x3eaa7efa
    8480:	.word	0x44800000
    8484:	.word	0x3f2a7efa
    8488:	.word	0x00000000
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    848c:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
    8490:	vmov.f32	s23, #112	; 0x3f800000  1.0
      phase_shift = 0.25f + mode * 1.50f;
    8494:	vfma.f32	s13, s8, s15
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    }
    
    float discontinuity = Sine(f + phase_shift);
    8498:	vadd.f32	s13, s13, s21
    float contour;
    if (shape < 0.5f) {
    849c:	vcmpe.f32	s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    84a0:	vcvt.s32.f32	s15, s13
    84a4:	vmrs	APSR_nzcv, fpscr
    84a8:	vcvt.f32.s32	s15, s15
    84ac:	vsub.f32	s15, s13, s15
  index *= size;
    84b0:	vmul.f32	s15, s15, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    84b4:	vcvt.s32.f32	s13, s15
  float a = table[index_integral];
    84b8:	vmov	r1, s13
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    84bc:	vcvt.f32.s32	s13, s13

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    84c0:	mov.w	r1, r1, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    84c4:	vsub.f32	s15, s15, s13

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    84c8:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    84cc:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    84ce:	vldr	s13, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    84d2:	vldr	s21, [r1]
    84d6:	vsub.f32	s21, s21, s13
    84da:	vfma.f32	s13, s15, s21
    84de:	bpl.w	88be <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd92>
      shape *= 2.0f;
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    84e2:	vmov.f32	s15, #80	; 0x3e800000  0.250
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    84e6:	vcmpe.f32	s14, s10
    }
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
    84ea:	vadd.f32	s21, s9, s9
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    84ee:	vadd.f32	s14, s14, s15
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    84f2:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    84f6:	vcvt.s32.f32	s15, s14
        ramp_down *= shape;
    84fa:	it	ge
    84fc:	vmulge.f32	s22, s22, s21
    8500:	vcvt.f32.s32	s15, s15
    8504:	vsub.f32	s14, s14, s15
  index *= size;
    8508:	vmul.f32	s14, s14, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    850c:	vcvt.s32.f32	s15, s14
  float a = table[index_integral];
    8510:	vmov	r1, s15
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    8514:	vcvt.f32.s32	s15, s15
    8518:	lsls	r1, r1, #2
    851a:	vsub.f32	s14, s14, s15
    851e:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    8522:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8524:	vldr	s15, [r8]
    8528:	vldr	s24, [r1]
    852c:	vsub.f32	s24, s24, s15
    8530:	vfma.f32	s15, s14, s24
    8534:	vmov.f32	s14, s11
    8538:	vsub.f32	s15, s15, s11
    853c:	vfma.f32	s14, s21, s15
      next_sample += Z(
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
    8540:	vadd.f32	s15, s13, s23
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8544:	subs	r5, #1
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
      *out++ = this_sample;
    8546:	vstmia	r6!, {s12}
      next_sample += Z(
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
    854a:	vmov.f32	s12, s20
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    854e:	adds	r1, r5, #1
      next_sample += Z(
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
    8550:	vfnms.f32	s23, s15, s22
    8554:	vfma.f32	s12, s23, s14
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8558:	beq.w	8f56 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x142a>
  }

  inline float Next() {
    value_ += increment_;
    855c:	vadd.f32	s5, s5, s17
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    8560:	vldr	s15, [r0, #76]	; 0x4c
      carrier_phase_ += f0;
    8564:	vldr	s14, [r0, #72]	; 0x48
    8568:	vadd.f32	s4, s4, s18
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    856c:	vadd.f32	s20, s5, s5
      carrier_phase_ += f0;
    8570:	vadd.f32	s14, s5, s14
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    8574:	vadd.f32	s15, s20, s15
      carrier_phase_ += f0;
    8578:	vstr	s14, [r0, #72]	; 0x48
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
    857c:	vcmpe.f32	s15, s11
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    8580:	vstr	s15, [r0, #76]	; 0x4c
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
    8584:	vmrs	APSR_nzcv, fpscr
    8588:	blt.w	8d5a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122e>
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    858c:	vcmpe.f32	s14, s11
      discontinuity_phase_ += 2.0f * f0;
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
        discontinuity_phase_ -= 1.0f;
    8590:	vsub.f32	s15, s15, s11
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    8594:	vmrs	APSR_nzcv, fpscr
      discontinuity_phase_ += 2.0f * f0;
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
        discontinuity_phase_ -= 1.0f;
    8598:	vstr	s15, [r0, #76]	; 0x4c
        reset_time = discontinuity_phase_ / (2.0f * f0);
    859c:	vdiv.f32	s13, s15, s20
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    85a0:	blt.w	8e8c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1360>
    85a4:	vmov.f32	s27, #112	; 0x3f800000  1.0
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
    85a8:	vldr	s24, [pc, #-292]	; 8488 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95c>
    85ac:	ldr	r1, [pc, #996]	; (8994 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe68>)
        float before = Z(
            carrier_phase_before,
            1.0f,
            formant_phase_ + (1.0f - reset_time) * f1,
    85ae:	vsub.f32	s20, s11, s13
    return value_;
  }

  inline float subsample(float t) {
    return value_ + increment_ * t;
    85b2:	vmov.f32	s29, s8
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
        float before = Z(
    85b6:	vldr	s22, [r0, #80]	; 0x50
    85ba:	vldr	s26, [r1]
    85be:	vmov.f32	s28, s9
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    85c2:	vldr	s25, [r1, #4]
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
        float before = Z(
    85c6:	vfma.f32	s22, s4, s20
    85ca:	vfma.f32	s29, s16, s20
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    85ce:	vsub.f32	s21, s25, s26
    85d2:	vfma.f32	s28, s0, s20
    85d6:	vfma.f32	s26, s21, s2
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
        float before = Z(
    85da:	vmov.f32	s23, s22
  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    85de:	vcmpe.f32	s29, s1
    85e2:	vmrs	APSR_nzcv, fpscr
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    85e6:	vadd.f32	s26, s26, s11
    85ea:	vmul.f32	s26, s26, s10
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    85ee:	bpl.w	8a84 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf58>
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    85f2:	vmov.f32	s21, #120	; 0x3fc00000  1.5
    85f6:	vmov.f32	s22, #80	; 0x3e800000  0.250
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
    85fa:	vmov.f32	s25, #112	; 0x3f800000  1.0
      phase_shift = 0.25f + mode * 1.50f;
    85fe:	vfma.f32	s22, s29, s21
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    }
    
    float discontinuity = Sine(f + phase_shift);
    8602:	vadd.f32	s22, s23, s22
    float contour;
    if (shape < 0.5f) {
    8606:	vcmpe.f32	s28, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    860a:	vcvt.s32.f32	s21, s22
    860e:	vmrs	APSR_nzcv, fpscr
    8612:	vcvt.f32.s32	s21, s21
    8616:	vsub.f32	s21, s22, s21
  index *= size;
    861a:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    861e:	vcvt.s32.f32	s22, s21
  float a = table[index_integral];
    8622:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8626:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    862a:	mov.w	r1, r1, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    862e:	vsub.f32	s21, s21, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8632:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    8636:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8638:	vldr	s23, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    863c:	vldr	s22, [r1]
    8640:	vsub.f32	s22, s22, s23
    8644:	vfma.f32	s23, s21, s22
    8648:	vmov.f32	s21, s23
    864c:	bpl.w	8b40 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1014>
      shape *= 2.0f;
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    8650:	vmov.f32	s22, #80	; 0x3e800000  0.250
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    8654:	vcmpe.f32	s27, s10
    }
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
    8658:	vadd.f32	s28, s28, s28
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    865c:	vadd.f32	s27, s27, s22
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    8660:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8664:	vcvt.s32.f32	s22, s27
        ramp_down *= shape;
    8668:	it	ge
    866a:	vmulge.f32	s26, s26, s28
    866e:	vcvt.f32.s32	s22, s22
    8672:	vsub.f32	s27, s27, s22
  index *= size;
    8676:	vmul.f32	s27, s27, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    867a:	vcvt.s32.f32	s22, s27
  float a = table[index_integral];
    867e:	vmov	r1, s22
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    8682:	vcvt.f32.s32	s22, s22
    8686:	lsls	r1, r1, #2
    8688:	vsub.f32	s27, s27, s22
    868c:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    8690:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8692:	vldr	s22, [r8]
    8696:	vldr	s23, [r1]
    869a:	vsub.f32	s23, s23, s22
    869e:	vfma.f32	s22, s27, s23
    86a2:	vmov.f32	s23, s11
    86a6:	vsub.f32	s22, s22, s11
    86aa:	vfma.f32	s23, s28, s22
    86ae:	vmov.f32	s22, s23
    86b2:	ldr	r1, [pc, #740]	; (8998 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe6c>)
    } else {
      contour = Sine(c + shape * 0.5f);
    }
    return (ramp_down * (offset + discontinuity) - offset) * contour;
    86b4:	vadd.f32	s27, s21, s25
    86b8:	vadd.f32	s8, s16, s8
    86bc:	vldr	s23, [r1]
    86c0:	vadd.f32	s9, s9, s0
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    86c4:	vldr	s21, [r1, #4]
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    }
    return (ramp_down * (offset + discontinuity) - offset) * contour;
    86c8:	vfnms.f32	s25, s27, s26
  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    86cc:	vcmpe.f32	s8, s1
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    86d0:	vsub.f32	s21, s21, s23
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    86d4:	vmrs	APSR_nzcv, fpscr
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    86d8:	vfma.f32	s23, s21, s2
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    }
    return (ramp_down * (offset + discontinuity) - offset) * contour;
    86dc:	vmul.f32	s25, s25, s22
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    86e0:	vadd.f32	s23, s23, s11
    86e4:	vmul.f32	s23, s23, s10
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    86e8:	bpl.w	8ae2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfb6>
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    86ec:	vmov.f32	s21, #120	; 0x3fc00000  1.5
    86f0:	vmov.f32	s22, #80	; 0x3e800000  0.250
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
    86f4:	vmov.f32	s26, #112	; 0x3f800000  1.0
      phase_shift = 0.25f + mode * 1.50f;
    86f8:	vfma.f32	s22, s8, s21
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    }
    
    float discontinuity = Sine(f + phase_shift);
    86fc:	vadd.f32	s22, s22, s2
    float contour;
    if (shape < 0.5f) {
    8700:	vcmpe.f32	s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8704:	vcvt.s32.f32	s21, s22
    8708:	vmrs	APSR_nzcv, fpscr
    870c:	vcvt.f32.s32	s21, s21
    8710:	vsub.f32	s21, s22, s21
  index *= size;
    8714:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    8718:	vcvt.s32.f32	s22, s21
  float a = table[index_integral];
    871c:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8720:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8724:	mov.w	r1, r1, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8728:	vsub.f32	s21, s21, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    872c:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    8730:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8732:	vldr	s27, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8736:	vldr	s22, [r1]
    873a:	vsub.f32	s22, s22, s27
    873e:	vfma.f32	s27, s21, s22
    8742:	vmov.f32	s21, s27
    8746:	bpl.w	8a42 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf16>
      shape *= 2.0f;
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    874a:	vmov.f32	s22, #80	; 0x3e800000  0.250
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    874e:	vcmpe.f32	s24, s10
    }
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
    8752:	vadd.f32	s27, s9, s9
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    8756:	vadd.f32	s24, s24, s22
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    875a:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    875e:	vcvt.s32.f32	s22, s24
        ramp_down *= shape;
    8762:	it	ge
    8764:	vmulge.f32	s23, s23, s27
    8768:	vcvt.f32.s32	s22, s22
    876c:	vsub.f32	s24, s24, s22
  index *= size;
    8770:	vmul.f32	s24, s24, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    8774:	vcvt.s32.f32	s22, s24
  float a = table[index_integral];
    8778:	vmov	r1, s22
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    877c:	vcvt.f32.s32	s22, s22
    8780:	lsls	r1, r1, #2
    8782:	vsub.f32	s24, s24, s22
    8786:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    878a:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    878c:	vldr	s22, [r8]
    8790:	vldr	s28, [r1]
    8794:	vsub.f32	s28, s28, s22
    8798:	vfma.f32	s22, s24, s28
    879c:	vmov.f32	s24, s11
    87a0:	vsub.f32	s22, s22, s11
    87a4:	vfma.f32	s24, s27, s22
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
    87a8:	vadd.f32	s21, s21, s26
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    87ac:	vmov.f32	s22, #224	; 0xbf000000 -0.5
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    87b0:	vmul.f32	s27, s13, s10
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
    87b4:	vfnms.f32	s26, s21, s23
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    87b8:	vmul.f32	s22, s20, s22
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    87bc:	vmul.f32	s23, s27, s13
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    87c0:	vmul.f32	s21, s4, s13
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    87c4:	vmul.f32	s20, s22, s20
    87c8:	vmov.f32	s13, s2
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
    87cc:	vfnms.f32	s25, s26, s24
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    87d0:	vstr	s21, [r0, #80]	; 0x50
        
        if (carrier_phase_ > 1.0f) {
    87d4:	vcmpe.f32	s14, s11
    87d8:	vmrs	APSR_nzcv, fpscr
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    87dc:	vfma.f32	s13, s25, s20
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    87e0:	vfma.f32	s12, s25, s23
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    87e4:	vmov.f32	s20, s13
        formant_phase_ = reset_time * f1;
        
        if (carrier_phase_ > 1.0f) {
    87e8:	ble.w	8e86 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x135a>
          carrier_phase_ = discontinuity_phase_ * 0.5f;
    87ec:	vmul.f32	s14, s15, s10
    87f0:	vmov.f32	s15, s14
    87f4:	vstr	s14, [r0, #72]	; 0x48
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
        }
      }
      
      if (carrier_phase_ >= 1.0f) {
    87f8:	vcmpe.f32	s14, s11
    87fc:	vmrs	APSR_nzcv, fpscr
    8800:	blt.n	880a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcde>
        carrier_phase_ -= 1.0f;
    8802:	vsub.f32	s14, s14, s11
    8806:	vstr	s14, [r0, #72]	; 0x48
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    880a:	vmov.f32	s13, #80	; 0x3e800000  0.250
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    880e:	vcmpe.f32	s8, s1
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    8812:	vadd.f32	s15, s15, s13
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    8816:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    881a:	vcvt.s32.f32	s22, s15
    881e:	vcvt.f32.s32	s22, s22
    8822:	vsub.f32	s15, s15, s22
  index *= size;
    8826:	vmul.f32	s15, s15, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    882a:	vcvt.s32.f32	s22, s15
  float a = table[index_integral];
    882e:	vmov	r1, s22
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    8832:	vcvt.f32.s32	s22, s22
    8836:	mov.w	r1, r1, lsl #2
    883a:	vsub.f32	s15, s15, s22
    883e:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    8842:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8844:	vldr	s22, [r8]
    8848:	vldr	s23, [r1]
    884c:	vsub.f32	s23, s23, s22
    8850:	vfma.f32	s22, s15, s23
    8854:	vadd.f32	s22, s22, s11
    8858:	vmul.f32	s22, s22, s10
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    885c:	bmi.w	848c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x960>
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    8860:	vcmpe.f32	s8, s19
    8864:	vmrs	APSR_nzcv, fpscr
    8868:	bpl.w	8e18 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12ec>
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    886c:	vldr	s23, [pc, #300]	; 899c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe70>
    8870:	vmov.f32	s15, #104	; 0x3f400000  0.750
    8874:	vldr	s13, [pc, #296]	; 89a0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe74>
    8878:	vsub.f32	s23, s8, s23
    887c:	vfms.f32	s13, s23, s15
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8880:	vcvt.s32.f32	s15, s13
    8884:	vcvt.f32.s32	s15, s15
    8888:	vsub.f32	s15, s13, s15
  index *= size;
    888c:	vmul.f32	s15, s15, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    8890:	vcvt.s32.f32	s23, s15
  float a = table[index_integral];
    8894:	vmov	r1, s23
      offset = -Sine(phase_shift);
    8898:	vcvt.f32.s32	s23, s23
    889c:	lsls	r1, r1, #2
    889e:	vsub.f32	s15, s15, s23
    88a2:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    88a6:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    88a8:	vldr	s23, [r8]
    88ac:	vldr	s24, [r1]
    88b0:	vsub.f32	s24, s24, s23
    88b4:	vfma.f32	s23, s15, s24
    88b8:	vneg.f32	s23, s23
    88bc:	b.n	8498 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x96c>
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    88be:	vfma.f32	s14, s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    88c2:	vcvt.s32.f32	s15, s14
    88c6:	vcvt.f32.s32	s15, s15
    88ca:	vsub.f32	s14, s14, s15
  index *= size;
    88ce:	vmul.f32	s14, s14, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    88d2:	vcvt.s32.f32	s15, s14
  float a = table[index_integral];
    88d6:	vmov	r1, s15
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    88da:	vcvt.f32.s32	s15, s15

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    88de:	lsls	r1, r1, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    88e0:	vsub.f32	s14, s14, s15

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    88e4:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    88e8:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    88ea:	vldr	s15, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    88ee:	vldr	s21, [r1]
    88f2:	vsub.f32	s21, s21, s15
    88f6:	vfma.f32	s15, s14, s21
    88fa:	vmov.f32	s14, s15
    88fe:	b.n	8540 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa14>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    8900:	cmp	r5, #1
    8902:	beq.n	89a8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe7c>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    8904:	vsub.f32	s13, s6, s13
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8908:	vmov.f32	s7, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    890c:	vmov.f32	s9, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8910:	vmul.f32	s10, s13, s13
    8914:	vmul.f32	s13, s10, s13
    8918:	vmov.f32	s10, s19
    891c:	vfma.f32	s10, s13, s7
    8920:	vmov.f32	s13, s10
    8924:	vmov.f32	s10, s2
    8928:	vfma.f32	s10, s13, s14
      if (phase >= 0.75f) phase = 0.75f;
    892c:	vcmpe.f32	s10, s9
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8930:	vmov.f32	s14, s10
      if (phase >= 0.75f) phase = 0.75f;
    8934:	vmrs	APSR_nzcv, fpscr
    8938:	blt.n	89d4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea8>
    893a:	movw	ip, #3076	; 0xc04
    893e:	mov.w	r5, #3072	; 0xc00
    8942:	vldr	s13, [pc, #96]	; 89a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    8946:	b.n	829e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x772>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    8948:	cmp	r5, #1
    894a:	beq.w	8eea <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13be>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    894e:	vsub.f32	s14, s6, s14
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8952:	vmov.f32	s8, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    8956:	vmov.f32	s10, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    895a:	vmul.f32	s11, s14, s14
    895e:	vmul.f32	s14, s11, s14
    8962:	vmov.f32	s11, s19
    8966:	vfma.f32	s11, s14, s8
    896a:	vmov.f32	s14, s11
    896e:	vmov.f32	s11, s0
    8972:	vfma.f32	s11, s14, s13
      if (phase >= 0.75f) phase = 0.75f;
    8976:	vcmpe.f32	s11, s10
    897a:	vmrs	APSR_nzcv, fpscr
    897e:	blt.w	8ec2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1396>
    8982:	movw	r6, #3076	; 0xc04
    8986:	mov.w	r5, #3072	; 0xc00
    898a:	vldr	s13, [pc, #24]	; 89a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    898e:	b.w	7f4a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41e>
    8992:	nop
    8994:	.word	0x200031e0
    8998:	.word	0x200029e0
    899c:	.word	0x3ea8f5c3
    89a0:	.word	0x3f3fdf3b
    89a4:	.word	0x00000000
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    89a8:	vmul.f32	s10, s13, s29
    89ac:	vmov.f32	s9, s28
    89b0:	vmul.f32	s10, s10, s13
    89b4:	vfma.f32	s9, s10, s13
      if (phase < breakpoint) {
    89b8:	vcmpe.f32	s9, s14
    89bc:	vmrs	APSR_nzcv, fpscr
    89c0:	ble.w	9004 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14d8>
        phase *= (0.5f / breakpoint);
    89c4:	vdiv.f32	s13, s19, s9
    89c8:	vmul.f32	s14, s13, s14
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    89cc:	vmov.f32	s13, #104	; 0x3f400000  0.750
    89d0:	vadd.f32	s14, s14, s13
    89d4:	vcvt.s32.f32	s13, s14
    89d8:	vcvt.f32.s32	s13, s13
    89dc:	vsub.f32	s14, s14, s13
    89e0:	vmul.f32	s14, s14, s1
    89e4:	vcvt.s32.f32	s10, s14
    89e8:	vmov	r5, s10
    89ec:	vcvt.f32.s32	s13, s10
    89f0:	lsls	r5, r5, #2
    89f2:	vsub.f32	s13, s14, s13
    89f6:	add.w	ip, r5, #4
    89fa:	b.n	829e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x772>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    89fc:	vmov	r5, s7
    8a00:	cmp	r5, #1
    8a02:	beq.w	8c5c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1130>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    8a06:	vsub.f32	s12, s6, s12
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8a0a:	vmov.f32	s4, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    8a0e:	vmov.f32	s11, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8a12:	vmul.f32	s7, s12, s12
    8a16:	vmul.f32	s12, s7, s12
    8a1a:	vmov.f32	s7, s19
    8a1e:	vfma.f32	s7, s12, s4
    8a22:	vadd.f32	s12, s7, s0
      if (phase >= 0.75f) phase = 0.75f;
    8a26:	vcmpe.f32	s12, s11
    8a2a:	vmrs	APSR_nzcv, fpscr
    8a2e:	blt.w	8c84 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1158>
    8a32:	movw	r6, #3076	; 0xc04
    8a36:	mov.w	r5, #3072	; 0xc00
    8a3a:	vldr	s11, [pc, #-152]	; 89a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    8a3e:	b.w	7dee <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c2>
    8a42:	vfma.f32	s24, s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8a46:	vcvt.s32.f32	s22, s24
    8a4a:	vcvt.f32.s32	s22, s22
    8a4e:	vsub.f32	s24, s24, s22
  index *= size;
    8a52:	vmul.f32	s24, s24, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    8a56:	vcvt.s32.f32	s22, s24
  float a = table[index_integral];
    8a5a:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8a5e:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8a62:	lsls	r1, r1, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8a64:	vsub.f32	s24, s24, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8a68:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    8a6c:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8a6e:	vldr	s27, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8a72:	vldr	s22, [r1]
    8a76:	vsub.f32	s22, s22, s27
    8a7a:	vfma.f32	s27, s24, s22
    8a7e:	vmov.f32	s24, s27
    8a82:	b.n	87a8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc7c>
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    8a84:	vcmpe.f32	s29, s19
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    8a88:	vldr	s25, [pc, #-240]	; 899c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe70>
    8a8c:	vmov.f32	s21, #104	; 0x3f400000  0.750
    8a90:	vldr	s22, [pc, #-244]	; 89a0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe74>
    8a94:	vsub.f32	s29, s29, s25
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    8a98:	vmrs	APSR_nzcv, fpscr
    8a9c:	bpl.w	8e9c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1370>
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    8aa0:	vfms.f32	s22, s29, s21
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8aa4:	vcvt.s32.f32	s21, s22
    8aa8:	vcvt.f32.s32	s21, s21
    8aac:	vsub.f32	s21, s22, s21
  index *= size;
    8ab0:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    8ab4:	vcvt.s32.f32	s25, s21
  float a = table[index_integral];
    8ab8:	vmov	r1, s25
      offset = -Sine(phase_shift);
    8abc:	vcvt.f32.s32	s25, s25
    8ac0:	lsls	r1, r1, #2
    8ac2:	vsub.f32	s21, s21, s25
    8ac6:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    8aca:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8acc:	vldr	s25, [r8]
    8ad0:	vldr	s29, [r1]
    8ad4:	vsub.f32	s29, s29, s25
    8ad8:	vfma.f32	s25, s21, s29
    8adc:	vneg.f32	s25, s25
    8ae0:	b.n	8602 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xad6>
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    8ae2:	vcmpe.f32	s8, s19
    8ae6:	vmrs	APSR_nzcv, fpscr
    8aea:	bpl.w	8ea8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x137c>
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    8aee:	vldr	s26, [pc, #-340]	; 899c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe70>
    8af2:	vmov.f32	s21, #104	; 0x3f400000  0.750
    8af6:	vldr	s22, [pc, #-344]	; 89a0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe74>
    8afa:	vsub.f32	s26, s8, s26
    8afe:	vfms.f32	s22, s26, s21
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8b02:	vcvt.s32.f32	s21, s22
    8b06:	vcvt.f32.s32	s21, s21
    8b0a:	vsub.f32	s21, s22, s21
  index *= size;
    8b0e:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    8b12:	vcvt.s32.f32	s26, s21
  float a = table[index_integral];
    8b16:	vmov	r1, s26
      offset = -Sine(phase_shift);
    8b1a:	vcvt.f32.s32	s26, s26
    8b1e:	lsls	r1, r1, #2
    8b20:	vsub.f32	s21, s21, s26
    8b24:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    8b28:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8b2a:	vldr	s26, [r8]
    8b2e:	vldr	s27, [r1]
    8b32:	vsub.f32	s27, s27, s26
    8b36:	vfma.f32	s26, s21, s27
    8b3a:	vneg.f32	s26, s26
    8b3e:	b.n	86fc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd0>
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    8b40:	vfma.f32	s27, s28, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8b44:	vcvt.s32.f32	s22, s27
    8b48:	vcvt.f32.s32	s22, s22
    8b4c:	vsub.f32	s27, s27, s22
  index *= size;
    8b50:	vmul.f32	s27, s27, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    8b54:	vcvt.s32.f32	s22, s27
  float a = table[index_integral];
    8b58:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8b5c:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8b60:	lsls	r1, r1, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8b62:	vsub.f32	s27, s27, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8b66:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    8b6a:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8b6c:	vldr	s22, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8b70:	vldr	s23, [r1]
    8b74:	vsub.f32	s23, s23, s22
    8b78:	vfma.f32	s22, s27, s23
    8b7c:	b.n	86b2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb86>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    8b7e:	cmp	r5, #1
    8b80:	beq.w	8cac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1180>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    8b84:	vsub.f32	s12, s6, s14
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8b88:	vmov.f32	s10, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    8b8c:	vmov.f32	s11, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8b90:	vmul.f32	s9, s12, s12
    8b94:	vmul.f32	s12, s9, s12
    8b98:	vmov.f32	s9, s19
    8b9c:	vfma.f32	s9, s12, s10
    8ba0:	vmov.f32	s10, s0
    8ba4:	vfma.f32	s10, s9, s18
      if (phase >= 0.75f) phase = 0.75f;
    8ba8:	vcmpe.f32	s10, s11
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8bac:	vmov.f32	s12, s10
      if (phase >= 0.75f) phase = 0.75f;
    8bb0:	vmrs	APSR_nzcv, fpscr
    8bb4:	blt.w	8cd8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11ac>
    8bb8:	movw	ip, #3076	; 0xc04
    8bbc:	mov.w	r6, #3072	; 0xc00
    8bc0:	vldr	s11, [pc, #-544]	; 89a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    8bc4:	b.w	7eac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    8bc8:	cmp	r5, #1
    8bca:	beq.w	8d02 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d6>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    8bce:	vsub.f32	s13, s6, s12
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8bd2:	vmov.f32	s3, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    8bd6:	vmov.f32	s4, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8bda:	vmul.f32	s7, s13, s13
    8bde:	vmul.f32	s13, s7, s13
    8be2:	vmov.f32	s7, s19
    8be6:	vfma.f32	s7, s13, s3
    8bea:	vmov.f32	s13, s7
    8bee:	vmov.f32	s7, s2
    8bf2:	vfma.f32	s7, s13, s18
      if (phase >= 0.75f) phase = 0.75f;
    8bf6:	vcmpe.f32	s7, s4
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8bfa:	vmov.f32	s13, s7
      if (phase >= 0.75f) phase = 0.75f;
    8bfe:	vmrs	APSR_nzcv, fpscr
    8c02:	blt.w	8d2e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1202>
    8c06:	movw	ip, #3076	; 0xc04
    8c0a:	mov.w	r8, #3072	; 0xc00
    8c0e:	vldr	s7, [pc, #-620]	; 89a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    8c12:	b.w	81f0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c4>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    8c16:	vmov	r5, s9
    8c1a:	cmp	r5, #1
    8c1c:	beq.w	8e34 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1308>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    8c20:	vsub.f32	s13, s6, s13
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8c24:	vmov.f32	s4, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    8c28:	vmov.f32	s7, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    8c2c:	vmul.f32	s9, s13, s13
    8c30:	vmul.f32	s13, s9, s13
    8c34:	vmov.f32	s9, s19
    8c38:	vfma.f32	s9, s13, s4
    8c3c:	vadd.f32	s13, s9, s2
      if (phase >= 0.75f) phase = 0.75f;
    8c40:	vcmpe.f32	s13, s7
    8c44:	vmrs	APSR_nzcv, fpscr
    8c48:	blt.w	8e5c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1330>
    8c4c:	movw	ip, #3076	; 0xc04
    8c50:	mov.w	r5, #3072	; 0xc00
    8c54:	vldr	s4, [pc, #-692]	; 89a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    8c58:	b.w	8130 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x604>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8c5c:	vmul.f32	s11, s12, s30
    8c60:	vmov.f32	s7, s29
    8c64:	vmul.f32	s11, s11, s12
    8c68:	vfma.f32	s7, s12, s11
      if (phase < breakpoint) {
    8c6c:	vcmpe.f32	s7, s6
    8c70:	vmrs	APSR_nzcv, fpscr
    8c74:	ble.w	903c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1510>
        phase *= (0.5f / breakpoint);
    8c78:	vdiv.f32	s12, s19, s7
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    8c7c:	vmov.f32	s11, #104	; 0x3f400000  0.750
    8c80:	vadd.f32	s12, s12, s11
    8c84:	vcvt.s32.f32	s11, s12
    8c88:	vcvt.f32.s32	s11, s11
    8c8c:	vsub.f32	s11, s12, s11
    8c90:	vmul.f32	s11, s11, s17
    8c94:	vcvt.s32.f32	s12, s11
    8c98:	vmov	r5, s12
    8c9c:	vcvt.f32.s32	s7, s12
    8ca0:	lsls	r5, r5, #2
    8ca2:	vsub.f32	s11, s11, s7
    8ca6:	adds	r6, r5, #4
    8ca8:	b.w	7dee <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c2>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8cac:	vmul.f32	s12, s14, s30
    8cb0:	vmov.f32	s11, s29
    8cb4:	vmul.f32	s12, s12, s14
    8cb8:	vfma.f32	s11, s14, s12
      if (phase < breakpoint) {
    8cbc:	vcmpe.f32	s11, #0.0
    8cc0:	vmrs	APSR_nzcv, fpscr
    8cc4:	ble.w	9068 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x153c>
        phase *= (0.5f / breakpoint);
    8cc8:	vdiv.f32	s12, s19, s11
    8ccc:	vmul.f32	s12, s12, s18
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    8cd0:	vmov.f32	s11, #104	; 0x3f400000  0.750
    8cd4:	vadd.f32	s12, s12, s11
    8cd8:	vcvt.s32.f32	s11, s12
    8cdc:	vcvt.f32.s32	s11, s11
    8ce0:	vsub.f32	s11, s12, s11
    8ce4:	vmul.f32	s11, s11, s17
    8ce8:	vcvt.s32.f32	s12, s11
    8cec:	vmov	r6, s12
    8cf0:	vcvt.f32.s32	s10, s12
    8cf4:	lsls	r6, r6, #2
    8cf6:	vsub.f32	s11, s11, s10
    8cfa:	add.w	ip, r6, #4
    8cfe:	b.w	7eac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8d02:	vmul.f32	s13, s12, s29
    8d06:	vmov.f32	s7, s28
    8d0a:	vmul.f32	s13, s13, s12
    8d0e:	vfma.f32	s7, s12, s13
      if (phase < breakpoint) {
    8d12:	vcmpe.f32	s7, #0.0
    8d16:	vmrs	APSR_nzcv, fpscr
    8d1a:	ble.w	9086 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x155a>
        phase *= (0.5f / breakpoint);
    8d1e:	vdiv.f32	s13, s19, s7
    8d22:	vmul.f32	s13, s13, s18
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    8d26:	vmov.f32	s7, #104	; 0x3f400000  0.750
    8d2a:	vadd.f32	s13, s13, s7
    8d2e:	vcvt.s32.f32	s7, s13
    8d32:	vcvt.f32.s32	s7, s7
    8d36:	vsub.f32	s7, s13, s7
    8d3a:	vmul.f32	s7, s7, s1
    8d3e:	vcvt.s32.f32	s13, s7
    8d42:	vmov	ip, s13
    8d46:	vcvt.f32.s32	s4, s13
    8d4a:	mov.w	r8, ip, lsl #2
    8d4e:	vsub.f32	s7, s7, s4
    8d52:	add.w	ip, r8, #4
    8d56:	b.w	81f0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c4>
        
        if (carrier_phase_ > 1.0f) {
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
    8d5a:	vldr	s13, [r0, #80]	; 0x50
    8d5e:	vadd.f32	s21, s4, s13
        if (formant_phase_ >= 1.0f) {
    8d62:	vcmpe.f32	s21, s11
    8d66:	vmrs	APSR_nzcv, fpscr
    8d6a:	blt.w	8fc2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1496>
          formant_phase_ -= 1.0f;
    8d6e:	vsub.f32	s21, s21, s11
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    8d72:	vldr	s20, [pc, #-976]	; 89a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    8d76:	vmul.f32	s15, s15, s10
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
    8d7a:	vadd.f32	s8, s16, s8
    8d7e:	vadd.f32	s9, s9, s0
    8d82:	vstr	s21, [r0, #80]	; 0x50
    8d86:	b.n	87f8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    8d88:	vldr	s15, [r0, #48]	; 0x30
    8d8c:	vadd.f32	s8, s20, s8
    8d90:	vadd.f32	s15, s17, s15
        if (formant_phase_ >= 1.0f) {
    8d94:	vcmpe.f32	s15, s6
    8d98:	vmrs	APSR_nzcv, fpscr
    8d9c:	blt.w	8fd8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14ac>
    8da0:	vadd.f32	s0, s21, s0
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    8da4:	vldr	s11, [pc, #928]	; 9148 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
    8da8:	vsub.f32	s15, s15, s6
    8dac:	vmul.f32	s13, s8, s22
    8db0:	vadd.f32	s12, s0, s6
    8db4:	vstr	s15, [r0, #48]	; 0x30
    8db8:	vcvt.s32.f32	s10, s13
    8dbc:	vmov	r5, s10
    8dc0:	vcvt.f32.s32	s10, s10
    8dc4:	vsub.f32	s13, s13, s10
    8dc8:	vsub.f32	s13, s6, s13
    8dcc:	b.w	8268 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73c>
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    8dd0:	vldr	s15, [r0, #20]
    8dd4:	vadd.f32	s3, s20, s3
    8dd8:	vadd.f32	s15, s1, s15
        if (formant_phase_ >= 1.0f) {
    8ddc:	vcmpe.f32	s15, s6
    8de0:	vmrs	APSR_nzcv, fpscr
    8de4:	blt.w	8fac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1480>
    8de8:	vadd.f32	s9, s21, s9
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    8dec:	vldr	s12, [pc, #856]	; 9148 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
    8df0:	vsub.f32	s15, s15, s6
    8df4:	vmul.f32	s14, s3, s22
    8df8:	vadd.f32	s4, s9, s6
    8dfc:	vstr	s15, [r0, #20]
    8e00:	vcvt.s32.f32	s11, s14
    8e04:	vmov	r5, s11
    8e08:	vcvt.f32.s32	s11, s11
    8e0c:	vsub.f32	s14, s14, s11
    8e10:	vsub.f32	s14, s6, s14
    8e14:	b.w	7f14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    8e18:	vldr	s24, [pc, #816]	; 914c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1620>
    8e1c:	vmov.f32	s15, #104	; 0x3f400000  0.750
    8e20:	vldr	s13, [pc, #812]	; 9150 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1624>
    8e24:	vsub.f32	s24, s8, s24
      offset = 0.001f;
    8e28:	vldr	s23, [pc, #808]	; 9154 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1628>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    8e2c:	vfms.f32	s13, s24, s15
    8e30:	b.w	8498 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x96c>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8e34:	vmul.f32	s9, s13, s29
    8e38:	vmov.f32	s7, s28
    8e3c:	vmul.f32	s9, s9, s13
    8e40:	vfma.f32	s7, s13, s9
      if (phase < breakpoint) {
    8e44:	vcmpe.f32	s7, s6
    8e48:	vmrs	APSR_nzcv, fpscr
    8e4c:	ble.w	9056 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x152a>
        phase *= (0.5f / breakpoint);
    8e50:	vdiv.f32	s13, s19, s7
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    8e54:	vmov.f32	s9, #104	; 0x3f400000  0.750
    8e58:	vadd.f32	s13, s13, s9
    8e5c:	vcvt.s32.f32	s4, s13
    8e60:	vcvt.f32.s32	s4, s4
    8e64:	vsub.f32	s4, s13, s4
    8e68:	vmul.f32	s9, s4, s1
    8e6c:	vcvt.s32.f32	s13, s9
    8e70:	vmov	r5, s13
    8e74:	vcvt.f32.s32	s4, s13
    8e78:	lsls	r5, r5, #2
    8e7a:	vsub.f32	s4, s9, s4
    8e7e:	add.w	ip, r5, #4
    8e82:	b.w	8130 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x604>
    8e86:	vmul.f32	s15, s15, s10
    8e8a:	b.n	87f8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
      
      if (reset) {
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    8e8c:	vmov.f32	s27, #96	; 0x3f000000  0.5
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
    8e90:	bge.w	85a8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa7c>
    8e94:	vmov.f32	s24, s27
    8e98:	b.w	85ac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa80>
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    8e9c:	vldr	s25, [pc, #692]	; 9154 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1628>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    8ea0:	vfms.f32	s22, s29, s21
    8ea4:	b.w	8602 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xad6>
    8ea8:	vldr	s27, [pc, #672]	; 914c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1620>
    8eac:	vmov.f32	s21, #104	; 0x3f400000  0.750
    8eb0:	vldr	s22, [pc, #668]	; 9150 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1624>
    8eb4:	vsub.f32	s27, s8, s27
      offset = 0.001f;
    8eb8:	vldr	s26, [pc, #664]	; 9154 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1628>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    8ebc:	vfms.f32	s22, s27, s21
    8ec0:	b.n	86fc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd0>
    8ec2:	vcvt.s32.f32	s13, s11
    8ec6:	vcvt.f32.s32	s13, s13
    8eca:	vsub.f32	s14, s11, s13
    8ece:	vmul.f32	s14, s14, s17
    8ed2:	vcvt.s32.f32	s11, s14
    8ed6:	vmov	r5, s11
    8eda:	vcvt.f32.s32	s13, s11
    8ede:	lsls	r5, r5, #2
    8ee0:	vsub.f32	s13, s14, s13
    8ee4:	adds	r6, r5, #4
    8ee6:	b.w	7f4a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41e>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8eea:	vmul.f32	s11, s14, s30
    8eee:	vmov.f32	s10, s29
    8ef2:	vmul.f32	s11, s11, s14
    8ef6:	vfma.f32	s10, s11, s14
      if (phase < breakpoint) {
    8efa:	vcmpe.f32	s10, s13
    8efe:	vmrs	APSR_nzcv, fpscr
    8f02:	ble.n	8fee <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14c2>
        phase *= (0.5f / breakpoint);
    8f04:	vdiv.f32	s14, s19, s10
    8f08:	vmul.f32	s13, s14, s13
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    8f0c:	vmov.f32	s14, #104	; 0x3f400000  0.750
    8f10:	vadd.f32	s13, s13, s14
    8f14:	vcvt.s32.f32	s14, s13
    8f18:	vcvt.f32.s32	s14, s14
    8f1c:	vsub.f32	s13, s13, s14
    8f20:	vmul.f32	s14, s13, s17
    8f24:	b.n	8ed2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13a6>
    8f26:	vmov.f32	s14, #104	; 0x3f400000  0.750
    8f2a:	vadd.f32	s13, s13, s14
    8f2e:	vcvt.s32.f32	s14, s13
    8f32:	vcvt.f32.s32	s14, s14
    8f36:	vsub.f32	s13, s13, s14
    8f3a:	vmul.f32	s13, s13, s17
    8f3e:	vcvt.s32.f32	s14, s13
    8f42:	vmov	r5, s14
    8f46:	vcvt.f32.s32	s11, s14
    8f4a:	lsls	r5, r5, #2
    8f4c:	vsub.f32	s13, s13, s11
    8f50:	adds	r6, r5, #4
    8f52:	b.w	7f4a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41e>
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
      *out++ = this_sample;
    }
    
    next_sample_ = next_sample;
    8f56:	vstr	s12, [r0, #84]	; 0x54
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    8f5a:	vstr	s8, [r0, #100]	; 0x64
    8f5e:	vstr	s9, [r0, #96]	; 0x60
    8f62:	vstr	s4, [r0, #92]	; 0x5c
    8f66:	vstr	s5, [r0, #88]	; 0x58
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    8f6a:	vstr	s7, [r0, #116]	; 0x74
    gi_ = 1.0f / (1.0f + g_);
    8f6e:	vstr	s3, [r0, #120]	; 0x78
    8f72:	b.n	8f7c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1450>
    8f74:	vldr	s7, [r0, #116]	; 0x74
    8f78:	vldr	s3, [r0, #120]	; 0x78
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
      *in_out = Process<mode>(*in_out);
    8f7c:	vldr	s15, [r3]
    }
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
    8f80:	subs	r7, #1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    8f82:	vldr	s14, [r0, #124]	; 0x7c
    }
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
    8f86:	adds	r2, r7, #1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    8f88:	vfma.f32	s14, s15, s7
    state_ = g_ * (in - lp) + lp;
    8f8c:	vfms.f32	s15, s14, s3
    8f90:	vmul.f32	s7, s15, s7
    8f94:	vfma.f32	s7, s14, s3
    8f98:	vstr	s7, [r0, #124]	; 0x7c
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
      *in_out = Process<mode>(*in_out);
    8f9c:	vstmia	r3!, {s15}
    }
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
    8fa0:	bne.n	8f74 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1448>
      aux,
      size);
  
  dc_blocker_[1].set_f<FREQUENCY_DIRTY>(0.3f * f0);
  dc_blocker_[1].Process<FILTER_MODE_HIGH_PASS>(aux, size);
}
    8fa2:	add	sp, #20
    8fa4:	vpop	{d8-d15}
    8fa8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8fac:	vadd.f32	s9, s21, s9
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    8fb0:	vstr	s15, [r0, #20]
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    8fb4:	vldr	s12, [pc, #400]	; 9148 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
    8fb8:	vmul.f32	s14, s3, s22
    8fbc:	vadd.f32	s4, s9, s6
    8fc0:	b.n	8e00 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12d4>
        
        if (carrier_phase_ > 1.0f) {
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
    8fc2:	vstr	s21, [r0, #80]	; 0x50
    8fc6:	vmul.f32	s15, s15, s10
    8fca:	vadd.f32	s8, s16, s8
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    8fce:	vldr	s20, [pc, #376]	; 9148 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
        
        if (carrier_phase_ > 1.0f) {
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
    8fd2:	vadd.f32	s9, s9, s0
    8fd6:	b.n	87f8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
    8fd8:	vadd.f32	s0, s21, s0
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    8fdc:	vstr	s15, [r0, #48]	; 0x30
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    8fe0:	vldr	s11, [pc, #356]	; 9148 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
    8fe4:	vmul.f32	s13, s8, s22
    8fe8:	vadd.f32	s12, s0, s6
    8fec:	b.n	8db8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x128c>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    8fee:	vsub.f32	s13, s13, s10
    8ff2:	vsub.f32	s11, s6, s10
    8ff6:	vmul.f32	s14, s13, s19
    8ffa:	vdiv.f32	s13, s14, s11
    8ffe:	vadd.f32	s13, s13, s19
    9002:	b.n	8f0c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13e0>
    9004:	vsub.f32	s14, s14, s9
    9008:	vsub.f32	s10, s6, s9
    900c:	vmul.f32	s13, s14, s19
    9010:	vdiv.f32	s14, s13, s10
      }
      phase += 0.75f;
    9014:	vmov.f32	s13, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9018:	vadd.f32	s14, s14, s19
      }
      phase += 0.75f;
    901c:	vadd.f32	s14, s14, s13
    9020:	b.n	89d4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea8>
    9022:	vmov.f32	s9, #104	; 0x3f400000  0.750
    9026:	vadd.f32	s13, s13, s9
    902a:	vcvt.s32.f32	s9, s13
    902e:	vcvt.f32.s32	s9, s9
    9032:	vsub.f32	s13, s13, s9
    9036:	vmul.f32	s9, s13, s1
    903a:	b.n	8e6c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1340>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    903c:	vsub.f32	s11, s6, s7
    9040:	vmul.f32	s7, s11, s19
    9044:	vdiv.f32	s12, s7, s11
      }
      phase += 0.75f;
    9048:	vmov.f32	s11, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    904c:	vadd.f32	s12, s12, s19
      }
      phase += 0.75f;
    9050:	vadd.f32	s12, s12, s11
    9054:	b.n	8c84 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1158>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9056:	vsub.f32	s9, s6, s7
    905a:	vmul.f32	s7, s9, s19
    905e:	vdiv.f32	s13, s7, s9
    9062:	vadd.f32	s13, s13, s19
    9066:	b.n	8e54 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1328>
    9068:	vsub.f32	s10, s18, s11
    906c:	vsub.f32	s11, s6, s11
    9070:	vmul.f32	s10, s10, s19
    9074:	vdiv.f32	s12, s10, s11
      }
      phase += 0.75f;
    9078:	vmov.f32	s11, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    907c:	vadd.f32	s12, s12, s19
      }
      phase += 0.75f;
    9080:	vadd.f32	s12, s12, s11
    9084:	b.n	8cd8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11ac>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9086:	vsub.f32	s4, s18, s7
    908a:	vsub.f32	s7, s6, s7
    908e:	vmul.f32	s4, s4, s19
    9092:	vdiv.f32	s13, s4, s7
      }
      phase += 0.75f;
    9096:	vmov.f32	s7, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    909a:	vadd.f32	s13, s13, s19
      }
      phase += 0.75f;
    909e:	vadd.f32	s13, s13, s7
    90a2:	b.n	8d2e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1202>
    90a4:	vldr	s15, [pc, #160]	; 9148 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
    90a8:	vstr	s15, [sp]
    90ac:	b.w	7c8c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    90b0:	vldr	s14, [pc, #164]	; 9158 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x162c>
    90b4:	vcmpe.f32	s15, s14
    90b8:	vmrs	APSR_nzcv, fpscr
    90bc:	ble.n	90c6 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x159a>
    90be:	movs	r2, #0
    90c0:	movs	r4, #255	; 0xff
    90c2:	b.w	83ca <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x89e>
    90c6:	vldr	s14, [pc, #148]	; 915c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1630>
    90ca:	vadd.f32	s15, s15, s14
    90ce:	vcvt.s32.f32	s14, s15
    90d2:	vmov	r4, s14
    90d6:	vcvt.f32.s32	s14, s14
    90da:	vsub.f32	s15, s15, s14
    90de:	vmov.f32	s14, s15
    90e2:	vcvt.s32.f32	s14, s14, #8
    90e6:	vmov	r2, s14
    90ea:	b.w	83ca <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x89e>
    90ee:	vldr	s14, [pc, #108]	; 915c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1630>
    90f2:	vadd.f32	s15, s15, s14
    90f6:	vcvt.s32.f32	s14, s15
    90fa:	vmov	r4, s14
    90fe:	vcvt.f32.s32	s14, s14
    9102:	vsub.f32	s15, s15, s14
    9106:	vmov.f32	s14, s15
    910a:	vcvt.s32.f32	s14, s14, #8
    910e:	vmov	r2, s14
    9112:	b.w	7c00 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd4>
    9116:	vldr	s14, [pc, #68]	; 915c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1630>
    911a:	vadd.f32	s15, s15, s14
    911e:	vcvt.s32.f32	s14, s15
    9122:	vmov	r4, s14
    9126:	vcvt.f32.s32	s14, s14
    912a:	vsub.f32	s15, s15, s14
    912e:	vmov.f32	s14, s15
    9132:	vcvt.s32.f32	s14, s14, #8
    9136:	vmov	r2, s14
    913a:	b.w	7b74 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    913e:	vstr	s7, [r0, #116]	; 0x74
    gi_ = 1.0f / (1.0f + g_);
    9142:	vstr	s3, [r0, #120]	; 0x78
    9146:	b.n	8fa2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1476>
    9148:	.word	0x00000000
    914c:	.word	0x3ea8f5c3
    9150:	.word	0x3f3fdf3b
    9154:	.word	0x3a83126f
    9158:	.word	0x42fe0000
    915c:	.word	0x43000000

00009160 <plaits::SwarmEngine::Init(stmlib::BufferAllocator*)>:
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    9160:	vmov.f32	s14, #8	; 0x40400000  3.0
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    interval_ = 1.0f;
    9164:	mov.w	r1, #1065353216	; 0x3f800000
using namespace std;
using namespace stmlib;

void SwarmEngine::Init(BufferAllocator* allocator) {
  const float n = (kNumSwarmVoices - 1) / 2;
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    9168:	movs	r2, #0
 public:
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    916a:	movs	r3, #0
namespace plaits {

using namespace std;
using namespace stmlib;

void SwarmEngine::Init(BufferAllocator* allocator) {
    916c:	push	{r4, r5}
    interval_ = 1.0f;
    phase_ = 1.0f;
    fm_ = 0.0f;
    amplitude_ = 0.5f;
    916e:	mov.w	r5, #1056964608	; 0x3f000000
  ~AdditiveSawOscillator() { }

  inline void Init() {
    phase_ = 0.0f;
    next_sample_ = 0.0f;
    frequency_ = 0.01f;
    9172:	ldr	r4, [pc, #80]	; (91c4 <plaits::SwarmEngine::Init(stmlib::BufferAllocator*)+0x64>)
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    9174:	vmov	s15, r2
  const float n = (kNumSwarmVoices - 1) / 2;
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    9178:	adds	r2, #1
 public:
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    917a:	str	r3, [r0, #20]
    917c:	adds	r0, #64	; 0x40
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    917e:	vcvt.f32.s32	s15, s15
    9182:	cmp	r2, #8
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    interval_ = 1.0f;
    9184:	str.w	r1, [r0, #-40]
    phase_ = 1.0f;
    9188:	str.w	r1, [r0, #-36]
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    918c:	vsub.f32	s15, s15, s14
  
  void Init() {
    from_ = 0.0f;
    interval_ = 1.0f;
    phase_ = 1.0f;
    fm_ = 0.0f;
    9190:	str.w	r3, [r0, #-32]
    amplitude_ = 0.5f;
    9194:	str.w	r5, [r0, #-28]
    previous_size_ratio_ = 0.0f;
    9198:	str.w	r3, [r0, #-24]
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    919c:	vdiv.f32	s13, s15, s14
 public:
  AdditiveSawOscillator() { }
  ~AdditiveSawOscillator() { }

  inline void Init() {
    phase_ = 0.0f;
    91a0:	str.w	r3, [r0, #-16]
    next_sample_ = 0.0f;
    91a4:	str.w	r3, [r0, #-12]
    frequency_ = 0.01f;
    91a8:	str.w	r4, [r0, #-8]
    gain_ = 0.0f;
    91ac:	str.w	r3, [r0, #-4]
 public:
  FastSineOscillator() { }
  ~FastSineOscillator() { }

  void Init() {
    x_ = 1.0f;
    91b0:	str	r1, [r0, #0]
    y_ = 0.0f;
    91b2:	str	r3, [r0, #4]
    epsilon_ = 0.0f;
    91b4:	str	r3, [r0, #8]
    amplitude_ = 0.0f;
    91b6:	str	r3, [r0, #12]
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    91b8:	vstr	s13, [r0, #-48]	; 0xffffffd0
    91bc:	bne.n	9174 <plaits::SwarmEngine::Init(stmlib::BufferAllocator*)+0x14>
    float rank = (static_cast<float>(i) - n) / n;
    swarm_voice_[i].Init(rank);
  }
}
    91be:	pop	{r4, r5}
    91c0:	bx	lr
    91c2:	nop
    91c4:	.word	0x3c23d70a

000091c8 <plaits::SwarmEngine::Reset()>:

void SwarmEngine::Reset() { }
    91c8:	bx	lr
    91ca:	nop

000091cc <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    91cc:	vmov.f32	s13, #34	; 0x41100000  9.0
    91d0:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    91d4:	vldr	s14, [pc, #856]	; 9530 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x364>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    91d8:	vsub.f32	s15, s15, s13
void SwarmEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    91dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    91e0:	vcmpe.f32	s15, s14
    91e4:	mov	r9, r3
    91e6:	vpush	{d8-d13}
    91ea:	vmrs	APSR_nzcv, fpscr
    91ee:	sub	sp, #12
    91f0:	ldr	r7, [sp, #96]	; 0x60
    91f2:	bmi.n	920a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    91f4:	vldr	s14, [pc, #828]	; 9534 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    91f8:	vcmpe.f32	s15, s14
    91fc:	vmrs	APSR_nzcv, fpscr
    9200:	ble.w	9810 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x644>
    9204:	movs	r3, #0
    9206:	movs	r4, #255	; 0xff
    9208:	b.n	920e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    920a:	movs	r3, #0
    920c:	mov	r4, r3
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    920e:	vmov.f32	s15, #162	; 0xc1100000 -9.0
    9212:	vldr	s12, [r1, #8]
    9216:	vldr	s13, [pc, #800]	; 9538 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
    921a:	vmov	s14, r7

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    921e:	ldr.w	ip, [pc, #860]	; 957c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
    9222:	vfma.f32	s15, s12, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    9226:	ldr.w	r8, [pc, #856]	; 9580 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b4>
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    922a:	vldr	s13, [pc, #772]	; 9530 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x364>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    922e:	add.w	r4, ip, r4, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    9232:	add.w	r3, r8, r3, lsl #2
    9236:	vcvt.f32.u32	s2, s14
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    923a:	vldr	s14, [r4]
    923e:	vldr	s0, [r3]
    9242:	vldr	s12, [pc, #760]	; 953c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9246:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    924a:	vmul.f32	s14, s14, s0

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    924e:	vmrs	APSR_nzcv, fpscr
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    9252:	vmul.f32	s0, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9256:	bmi.n	926e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa2>
    9258:	vldr	s14, [pc, #728]	; 9534 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    925c:	vcmpe.f32	s15, s14
    9260:	vmrs	APSR_nzcv, fpscr
    9264:	ble.w	97ea <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x61e>
    9268:	movs	r3, #0
    926a:	movs	r4, #255	; 0xff
    926c:	b.n	9272 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa6>
    926e:	movs	r3, #0
    9270:	mov	r4, r3

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    9272:	vmov.f32	s14, #112	; 0x3f800000  1.0
    9276:	vldr	s12, [r1, #12]
    927a:	vldr	s9, [pc, #708]	; 9540 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x374>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    927e:	add.w	r4, ip, r4, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    9282:	vldr	s15, [pc, #704]	; 9544 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x378>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    9286:	add.w	r3, r8, r3, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    928a:	vsub.f32	s12, s14, s12
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    928e:	vldr	s13, [r4]
    9292:	vldr	s14, [r3]
      (1.0f - parameters.morph) * 84.0f);
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
    9296:	lsls	r5, r7, #2
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    9298:	vldr	s10, [pc, #672]	; 953c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
  float size_ratio = 0.25f * SemitonesToRatio(
      (1.0f - parameters.morph) * 84.0f);
    929c:	vmov.f32	s11, #80	; 0x3e800000  0.250
    92a0:	vfma.f32	s15, s12, s9
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    92a4:	vldr	s16, [pc, #672]	; 9548 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
    92a8:	vmul.f32	s14, s13, s14
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
  float size_ratio = 0.25f * SemitonesToRatio(
      (1.0f - parameters.morph) * 84.0f);
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
    92ac:	ldrb	r3, [r1, #0]
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
  const float spread = parameters.harmonics * parameters.harmonics * \
    92ae:	vldr	s12, [r1, #16]
      (1.0f - parameters.morph) * 84.0f);
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
    92b2:	adds	r4, r2, r5
    92b4:	and.w	sl, r3, #2
    92b8:	and.w	r3, r3, #1
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    92bc:	vmul.f32	s14, s14, s10
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    92c0:	cmp	r2, r4
    92c2:	uxtb.w	r1, sl
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
    92c6:	vmul.f32	s1, s12, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    92ca:	vcvt.s32.f32	s13, s15
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    92ce:	vmul.f32	s16, s14, s16
    92d2:	str	r1, [sp, #4]
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
    92d4:	vmul.f32	s1, s1, s12

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    92d8:	vcvt.f32.s32	s14, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    92dc:	vmov	r1, s13
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    92e0:	vmul.f32	s16, s16, s2
    92e4:	add.w	r1, ip, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    92e8:	vsub.f32	s15, s15, s14
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
  float size_ratio = 0.25f * SemitonesToRatio(
      (1.0f - parameters.morph) * 84.0f);
    92ec:	vldr	s3, [r1]
    92f0:	vcvt.s32.f32	s15, s15, #8
    92f4:	vmov	r1, s15
    92f8:	add.w	r1, r8, r1, lsl #2
    92fc:	vldr	s15, [r1]
    9300:	vmul.f32	s15, s15, s3
    9304:	vmul.f32	s3, s15, s11
    9308:	beq.n	9316 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14a>
    930a:	mov	r1, r2
	*__first = __tmp;
    930c:	movs	r6, #0
    930e:	str.w	r6, [r1], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    9312:	cmp	r4, r1
    9314:	bne.n	930e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x142>
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
    9316:	add.w	r4, r9, r5
    931a:	cmp	r9, r4
    931c:	beq.n	932a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15e>
    931e:	mov	r1, r9
	*__first = __tmp;
    9320:	movs	r5, #0
    9322:	str.w	r5, [r1], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    9326:	cmp	r1, r4
    9328:	bne.n	9322 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x156>
    932a:	ldr	r1, [pc, #544]	; (954c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>)
      phase_ = 0.5f;
      fm_ = 16.0f;
      randomize = true;
    } else {
      phase_ += rate * fm_;
      if (phase_ >= 1.0f) {
    932c:	vmov.f32	s8, #112	; 0x3f800000  1.0
    9330:	add.w	lr, r7, #4294967295
    9334:	mov.w	sl, #0
    9338:	add.w	fp, r0, #512	; 0x200
    933c:	ldr	r1, [r1, #0]
      }
    }
    
    if (randomize) {
      from_ += interval_;
      interval_ = stmlib::Random::GetFloat() - from_;
    933e:	vldr	s17, [pc, #528]	; 9550 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
      // Randomize the duration of the grain.
      if (burst_mode) {
        fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
    9342:	vldr	s19, [pc, #528]	; 9554 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>
    9346:	vldr	s18, [pc, #528]	; 9558 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x38c>
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    if (size_ratio >= 1.0f) {
      float phase = (phase_ - 0.5f) * size_ratio;
      CONSTRAIN(phase, -1.0f, 1.0f);
    934a:	vldr	s4, [pc, #584]	; 9594 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
    934e:	vldr	s20, [pc, #524]	; 955c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x390>
    previous_size_ratio_ = 0.0f;
  }
  
  inline void Step(float rate, bool burst_mode, bool start_burst) {
    bool randomize = false;
    if (start_burst) {
    9352:	cmp	r3, #0
    9354:	beq.w	9722 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
      phase_ = 0.5f;
    9358:	mov.w	r5, #1056964608	; 0x3f000000
      fm_ = 16.0f;
    935c:	mov.w	r4, #1098907648	; 0x41800000
  }
  
  inline void Step(float rate, bool burst_mode, bool start_burst) {
    bool randomize = false;
    if (start_burst) {
      phase_ = 0.5f;
    9360:	str	r5, [r0, #28]
      fm_ = 16.0f;
    9362:	str	r4, [r0, #32]
    9364:	ldr	r5, [pc, #504]	; (9560 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x394>)
    9366:	ldr	r4, [pc, #508]	; (9564 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x398>)
    9368:	mul.w	r1, r5, r1
        randomize = true;
      }
    }
    
    if (randomize) {
      from_ += interval_;
    936c:	vldr	s14, [r0, #20]
    9370:	vldr	s15, [r0, #24]
    9374:	add	r4, r1
      interval_ = stmlib::Random::GetFloat() - from_;
      // Randomize the duration of the grain.
      if (burst_mode) {
    9376:	ldr	r1, [sp, #4]
        randomize = true;
      }
    }
    
    if (randomize) {
      from_ += interval_;
    9378:	vadd.f32	s15, s14, s15
      interval_ = stmlib::Random::GetFloat() - from_;
    937c:	vmov	s14, r4
    9380:	vcvt.f32.u32	s14, s14
        randomize = true;
      }
    }
    
    if (randomize) {
      from_ += interval_;
    9384:	vstr	s15, [r0, #20]
      interval_ = stmlib::Random::GetFloat() - from_;
    9388:	vfnms.f32	s15, s14, s17
    938c:	vstr	s15, [r0, #24]
      // Randomize the duration of the grain.
      if (burst_mode) {
    9390:	cmp	r1, #0
    9392:	beq.w	9750 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x584>
    9396:	mul.w	r4, r5, r4
    939a:	ldr	r1, [pc, #456]	; (9564 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x398>)
        fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
      } else {
        fm_ = 0.5f + 1.5f * stmlib::Random::GetFloat();
    939c:	vmov.f32	s13, #120	; 0x3fc00000  1.5
    93a0:	mov.w	sl, #1
    93a4:	add	r1, r4
    93a6:	vmov.f32	s15, #96	; 0x3f000000  0.5
    93aa:	vmov	s14, r1
    93ae:	vcvt.f32.u32	s14, s14
    93b2:	vmul.f32	s14, s14, s17
    93b6:	vfma.f32	s15, s14, s13
    93ba:	vstr	s15, [r0, #32]
    }
  }
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    if (size_ratio >= 1.0f) {
    93be:	vcmpe.f32	s3, s8
    93c2:	vmrs	APSR_nzcv, fpscr
    93c6:	blt.w	974a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x57e>
      float phase = (phase_ - 0.5f) * size_ratio;
    93ca:	vmov.f32	s13, #96	; 0x3f000000  0.5
    93ce:	vldr	s15, [r0, #28]
      CONSTRAIN(phase, -1.0f, 1.0f);
    93d2:	vmov.f32	s14, #240	; 0xbf800000 -1.0
  }
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    if (size_ratio >= 1.0f) {
      float phase = (phase_ - 0.5f) * size_ratio;
    93d6:	vsub.f32	s15, s15, s13
    93da:	vmul.f32	s15, s15, s3
      CONSTRAIN(phase, -1.0f, 1.0f);
    93de:	vcmpe.f32	s15, s14
    93e2:	vmrs	APSR_nzcv, fpscr
    93e6:	bmi.n	93f4 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x228>
    93e8:	vcmpe.f32	s15, s8
    93ec:	vmrs	APSR_nzcv, fpscr
    93f0:	ble.w	97b2 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e6>
    93f4:	movw	r6, #3076	; 0xc04
    93f8:	mov.w	r5, #3072	; 0xc00
    93fc:	vldr	s13, [pc, #404]	; 9594 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9400:	ldr	r4, [pc, #356]	; (9568 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x39c>)
      float e = stmlib::InterpolateWrap(
          lut_sine, 0.5f * phase + 1.25f, 1024.0f);
      target_amplitude = 0.5f * (e + 1.0f);
    9402:	vmov.f32	s14, #96	; 0x3f000000  0.5
    9406:	add	r5, r4
  float b = table[index_integral + 1];
    9408:	add	r4, r6

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    940a:	vldr	s15, [r5]
    940e:	vldr	s12, [r4]
    9412:	vsub.f32	s12, s12, s15
    9416:	vfma.f32	s15, s12, s13
    941a:	vadd.f32	s15, s15, s8
    941e:	vmul.f32	s15, s15, s14
    }
    
    if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
    9422:	vcmpe.f32	s3, s8
    9426:	vldr	s14, [r0, #40]	; 0x28
    942a:	vmrs	APSR_nzcv, fpscr
    942e:	vcmpe.f32	s14, s8
    9432:	ite	ge
    9434:	movge	r5, #1
    9436:	movlt	r5, #0
    9438:	vmrs	APSR_nzcv, fpscr
    943c:	ite	ge
    943e:	movge	r4, #1
    9440:	movlt	r4, #0
    9442:	cmp	r5, r4
    9444:	beq.w	977e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5b2>
    9448:	vldr	s13, [pc, #288]	; 956c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a0>
    944c:	vldr	s14, [pc, #288]	; 9570 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a4>
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    
    previous_size_ratio_ = size_ratio;
    ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
    9450:	vldr	s7, [r0, #36]	; 0x24
  
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
    9454:	vcmpe.f32	s3, s8
      float* sine,
      size_t size) {
    envelope_.Step(density, burst_mode, start_burst);
    
    const float scale = 1.0f / kNumSwarmVoices;
    const float amplitude = envelope_.amplitude(size_ratio) * scale;
    9458:	vmov.f32	s12, #64	; 0x3e000000  0.125
    }
    
    if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    945c:	vstr	s14, [r0, #44]	; 0x2c
    
    previous_size_ratio_ = size_ratio;
    ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
    9460:	vsub.f32	s15, s15, s7
    if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    
    previous_size_ratio_ = size_ratio;
    9464:	vstr	s3, [r0, #40]	; 0x28
  
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
    9468:	vmrs	APSR_nzcv, fpscr
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    
    previous_size_ratio_ = size_ratio;
    ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
    946c:	vfma.f32	s7, s15, s13
    9470:	vstr	s7, [r0, #36]	; 0x24
      float* sine,
      size_t size) {
    envelope_.Step(density, burst_mode, start_burst);
    
    const float scale = 1.0f / kNumSwarmVoices;
    const float amplitude = envelope_.amplitude(size_ratio) * scale;
    9474:	vmul.f32	s7, s7, s12
  
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
    9478:	bmi.w	9794 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c8>
      return 2.0f * (from_ + interval_ * phase_) - 1.0f;
    } else {
      return from_;
    947c:	vldr	s6, [r0, #20]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    9480:	vldr	s15, [pc, #240]	; 9574 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a8>

    const float expo_amount = envelope_.frequency(size_ratio);
    f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
    
    const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
    f0 *= 1.0f + linear_amount;
    9484:	vmov.f32	s5, #80	; 0x3e800000  0.250
    
    const float scale = 1.0f / kNumSwarmVoices;
    const float amplitude = envelope_.amplitude(size_ratio) * scale;

    const float expo_amount = envelope_.frequency(size_ratio);
    f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
    9488:	vldr	s12, [r0, #16]
    948c:	vmul.f32	s6, s6, s15
    9490:	vldr	s13, [pc, #176]	; 9544 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x378>
    
    const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
    f0 *= 1.0f + linear_amount;
    9494:	vldr	s11, [pc, #224]	; 9578 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    9498:	vldr	s10, [r0, #56]	; 0x38
    949c:	vmul.f32	s6, s6, s1
    94a0:	vldr	s9, [r0, #60]	; 0x3c
    94a4:	vadd.f32	s11, s12, s11
      frequency = kMaxFrequency;
    }
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    94a8:	vldr	s14, [r0, #52]	; 0x34
    increment_ = (new_value - *state) / static_cast<float>(size);
    94ac:	vsub.f32	s22, s7, s9
    float phase = phase_;
    94b0:	vldr	s15, [r0, #48]	; 0x30
    94b4:	vfma.f32	s13, s6, s12

    const float expo_amount = envelope_.frequency(size_ratio);
    f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
    
    const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
    f0 *= 1.0f + linear_amount;
    94b8:	vmul.f32	s12, s11, s12
    94bc:	vdiv.f32	s21, s22, s2
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    94c0:	vcvt.s32.f32	s6, s13
    94c4:	vmul.f32	s11, s12, s1

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    94c8:	vcvt.f32.s32	s12, s6

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    94cc:	vmov	r4, s6
    94d0:	vmov.f32	s6, s8
    94d4:	add.w	r4, ip, r4, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    94d8:	vsub.f32	s13, s13, s12
    94dc:	vfma.f32	s6, s11, s5
    94e0:	vldr	s11, [r4]
    94e4:	vcvt.s32.f32	s13, s13, #8
    94e8:	vmov	r4, s13
    94ec:	add.w	r4, r8, r4, lsl #2
    94f0:	vldr	s13, [r4]
    94f4:	vmul.f32	s13, s13, s11
    94f8:	vmul.f32	s13, s13, s0
    94fc:	vmul.f32	s6, s13, s6
  inline void Render(
      float frequency,
      float level,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    9500:	vcmpe.f32	s6, s5
    9504:	vmrs	APSR_nzcv, fpscr
    9508:	it	lt
    950a:	vmovlt.f32	s5, s6
    950e:	vsub.f32	s5, s5, s10
    9512:	vdiv.f32	s22, s5, s2
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    9516:	cmp	r7, #0
    9518:	beq.n	95f6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42a>
    951a:	mov	r5, r2
    951c:	mov	r4, lr
      phase += frequency;
  
      if (phase >= 1.0f) {
        phase -= 1.0f;
        float t = phase / frequency;
        this_sample -= stmlib::ThisBlepSample(t);
    951e:	vmov.f32	s26, #96	; 0x3f000000  0.5
        next_sample -= stmlib::NextBlepSample(t);
    9522:	vmov.f32	s25, #224	; 0xbf000000 -0.5
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    9526:	vmov.f32	s24, #0	; 0x40000000  2.0
    952a:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    952e:	b.n	95de <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x412>
    9530:	.word	0xc3000000
    9534:	.word	0x42fe0000
    9538:	.word	0x42f00000
    953c:	.word	0x39969651
    9540:	.word	0x42a80000
    9544:	.word	0x43000000
    9548:	.word	0x3ccccccd
    954c:	.word	0x2001f96c
    9550:	.word	0x2f800000
    9554:	.word	0x3e4ccccd
    9558:	.word	0x3f4ccccd
    955c:	.word	0x44800000
    9560:	.word	0x0019660d
    9564:	.word	0x3c6ef35f
    9568:	.word	0x200025e0
    956c:	.word	0x3cccccd0
    9570:	.word	0x3ef33333
    9574:	.word	0x42400000
    9578:	.word	0x3c23d70a
    957c:	.word	0x20000024
    9580:	.word	0x20000428
    9584:	.word	0x40490fdb
    9588:	.word	0x3ea3d70a
    958c:	.word	0x3f7851ec
    9590:	.word	0x3fb537c9
    9594:	.word	0x00000000
      const float frequency = fm.Next();

      phase += frequency;
  
      if (phase >= 1.0f) {
        phase -= 1.0f;
    9598:	vsub.f32	s15, s15, s8
        float t = phase / frequency;
    959c:	vdiv.f32	s13, s15, s10
    95a0:	vsub.f32	s12, s8, s13
        this_sample -= stmlib::ThisBlepSample(t);
    95a4:	vmul.f32	s5, s13, s26
        next_sample -= stmlib::NextBlepSample(t);
    95a8:	vmul.f32	s11, s12, s25
      phase += frequency;
  
      if (phase >= 1.0f) {
        phase -= 1.0f;
        float t = phase / frequency;
        this_sample -= stmlib::ThisBlepSample(t);
    95ac:	vfms.f32	s14, s13, s5
        next_sample -= stmlib::NextBlepSample(t);
    95b0:	vmov.f32	s13, s4
    95b4:	vfms.f32	s13, s12, s11
    95b8:	vmov.f32	s11, s13
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    95bc:	vmov.f32	s12, s23
    95c0:	vldmia	r5!, {s13}
  }

  inline float Next() {
    value_ += increment_;
    95c4:	vadd.f32	s9, s9, s21
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    95c8:	subs	r4, #1
        this_sample -= stmlib::ThisBlepSample(t);
        next_sample -= stmlib::NextBlepSample(t);
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    95ca:	vfma.f32	s12, s14, s24
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    95ce:	adds	r6, r4, #1
        float t = phase / frequency;
        this_sample -= stmlib::ThisBlepSample(t);
        next_sample -= stmlib::NextBlepSample(t);
      }

      next_sample += phase;
    95d0:	vadd.f32	s14, s11, s15
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    95d4:	vfma.f32	s13, s12, s9
    95d8:	vstr	s13, [r5, #-4]
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    95dc:	beq.n	95f6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42a>
    95de:	vadd.f32	s10, s10, s22
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();

      phase += frequency;
    95e2:	vadd.f32	s15, s15, s10
  
      if (phase >= 1.0f) {
    95e6:	vcmpe.f32	s15, s8
    95ea:	vmrs	APSR_nzcv, fpscr
    95ee:	bge.n	9598 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    95f0:	vldr	s11, [pc, #-96]	; 9594 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
    95f4:	b.n	95bc <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>
  
 private:
  template<bool additive>
  void RenderInternal(
      float frequency, float amplitude, float* out, size_t size) {
    if (frequency >= 0.25f) {
    95f6:	vmov.f32	s13, #80	; 0x3e800000  0.250
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    }
    phase_ = phase;
    95fa:	vstr	s15, [r0, #48]	; 0x30
    next_sample_ = next_sample;
    95fe:	vstr	s14, [r0, #52]	; 0x34
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    9602:	vstr	s9, [r0, #60]	; 0x3c
    9606:	vcmpe.f32	s6, s13
    960a:	vstr	s10, [r0, #56]	; 0x38
    960e:	vmrs	APSR_nzcv, fpscr
    9612:	bge.w	9718 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x54c>
    9616:	vldr	s15, [pc, #-148]	; 9584 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
    961a:	vmov.f32	s13, #0	; 0x40000000  2.0
    961e:	vldr	s12, [pc, #-152]	; 9588 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
      frequency = 0.25f;
      amplitude = 0.0f;
    } else {
      amplitude *= 1.0f - frequency * 4.0f;
    9622:	vmov.f32	s14, #16	; 0x40800000  4.0
    9626:	vmul.f32	s15, s6, s15
    962a:	vmov.f32	s11, s8
    962e:	vmul.f32	s12, s15, s12
    9632:	vfms.f32	s11, s6, s14
    9636:	vfms.f32	s13, s15, s12
    963a:	vmul.f32	s7, s11, s7
    963e:	vmul.f32	s13, s13, s15
    }
    
    stmlib::ParameterInterpolator epsilon(&epsilon_, Fast2Sin(frequency), size);
    stmlib::ParameterInterpolator am(&amplitude_, amplitude, size);
    float x = x_;
    float y = y_;
    9642:	vldr	s12, [r0, #68]	; 0x44
    
    const float norm = x * x + y * y;
    if (norm <= 0.5f || norm >= 2.0f) {
    9646:	vmov.f32	s5, #96	; 0x3f000000  0.5
      amplitude *= 1.0f - frequency * 4.0f;
    }
    
    stmlib::ParameterInterpolator epsilon(&epsilon_, Fast2Sin(frequency), size);
    stmlib::ParameterInterpolator am(&amplitude_, amplitude, size);
    float x = x_;
    964a:	vldr	s15, [r0, #64]	; 0x40
    float y = y_;
    
    const float norm = x * x + y * y;
    964e:	vmul.f32	s6, s12, s12
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    9652:	vldr	s14, [r0, #72]	; 0x48
    9656:	vldr	s11, [r0, #76]	; 0x4c
    increment_ = (new_value - *state) / static_cast<float>(size);
    965a:	vsub.f32	s13, s13, s14
    965e:	vfma.f32	s6, s15, s15
    9662:	vsub.f32	s7, s7, s11
    9666:	vdiv.f32	s10, s13, s2
    if (norm <= 0.5f || norm >= 2.0f) {
    966a:	vcmpe.f32	s6, s5
    966e:	vdiv.f32	s9, s7, s2
    9672:	vmrs	APSR_nzcv, fpscr
    9676:	bls.n	9686 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4ba>
    9678:	vmov.f32	s13, #0	; 0x40000000  2.0
    967c:	vcmpe.f32	s6, s13
    9680:	vmrs	APSR_nzcv, fpscr
    9684:	blt.n	96be <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4f2>

template<typename To, typename From>
To unsafe_bit_cast(From from) {
    unsafe_bit_cast_t<To, From> u;
    u.from = from;
    return u.to;
    9686:	vmov	r4, s6
  y = x;
  i = unsafe_bit_cast<uint32_t, float>(y);
  i = 0x5f3759df - (i >> 1);
  y = unsafe_bit_cast<float, uint32_t>(i);
  x2 = x * 0.5f;
  y = y * (threehalfs - (x2 * y * y));
    968a:	vmov.f32	s7, #96	; 0x3f000000  0.5
    968e:	vmov.f32	s13, #120	; 0x3fc00000  1.5

template<typename To, typename From>
To unsafe_bit_cast(From from) {
    unsafe_bit_cast_t<To, From> u;
    u.from = from;
    return u.to;
    9692:	lsrs	r4, r4, #1
  y = x;
  i = unsafe_bit_cast<uint32_t, float>(y);
  i = 0x5f3759df - (i >> 1);
  y = unsafe_bit_cast<float, uint32_t>(i);
  x2 = x * 0.5f;
  y = y * (threehalfs - (x2 * y * y));
    9694:	vmul.f32	s6, s6, s7

template<typename To, typename From>
To unsafe_bit_cast(From from) {
    unsafe_bit_cast_t<To, From> u;
    u.from = from;
    return u.to;
    9698:	rsb	r4, r4, #1593835520	; 0x5f000000
    969c:	add.w	r4, r4, #3620864	; 0x374000
    96a0:	add.w	r4, r4, #6592	; 0x19c0
    96a4:	adds	r4, #31
  y = x;
  i = unsafe_bit_cast<uint32_t, float>(y);
  i = 0x5f3759df - (i >> 1);
  y = unsafe_bit_cast<float, uint32_t>(i);
  x2 = x * 0.5f;
  y = y * (threehalfs - (x2 * y * y));
    96a6:	vmov	s7, r4
    96aa:	vmul.f32	s6, s6, s7
    96ae:	vfms.f32	s13, s7, s6
    96b2:	vmul.f32	s13, s13, s7
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
    96b6:	vmul.f32	s15, s15, s13
      y *= scale;
    96ba:	vmul.f32	s12, s12, s13
    }
    
    while (size--) {
    96be:	cbz	r7, 96e6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x51a>
    96c0:	mov	r5, r9
    96c2:	mov	r4, lr
  }

  inline float Next() {
    value_ += increment_;
    96c4:	vadd.f32	s14, s14, s10
      const float e = epsilon.Next();
      x += e * y;
      y -= e * x;
      if (additive) {
        *out++ += am.Next() * x;
    96c8:	vldmia	r5!, {s13}
    96cc:	vadd.f32	s11, s11, s9
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
      y *= scale;
    }
    
    while (size--) {
    96d0:	subs	r4, #1
      const float e = epsilon.Next();
      x += e * y;
    96d2:	vfma.f32	s15, s14, s12
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
      y *= scale;
    }
    
    while (size--) {
    96d6:	adds	r6, r4, #1
      const float e = epsilon.Next();
      x += e * y;
      y -= e * x;
      if (additive) {
        *out++ += am.Next() * x;
    96d8:	vfma.f32	s13, s15, s11
    }
    
    while (size--) {
      const float e = epsilon.Next();
      x += e * y;
      y -= e * x;
    96dc:	vfms.f32	s12, s14, s15
      if (additive) {
        *out++ += am.Next() * x;
    96e0:	vstr	s13, [r5, #-4]
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
      y *= scale;
    }
    
    while (size--) {
    96e4:	bne.n	96c4 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4f8>
        *out++ += am.Next() * x;
      } else {
        *out++ = x;
      }
    }
    x_ = x;
    96e6:	vstr	s15, [r0, #64]	; 0x40
    96ea:	adds	r0, #64	; 0x40
    y_ = y;
    96ec:	vstr	s12, [r0, #4]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    96f0:	vstr	s11, [r0, #12]
    96f4:	vstr	s14, [r0, #8]
  
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    96f8:	cmp	fp, r0
        spread,
        size_ratio,
        out,
        aux,
        size);
    size_ratio *= 0.97f;
    96fa:	vldr	s15, [pc, #-368]	; 958c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    96fe:	vmul.f32	s3, s3, s15
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    9702:	bne.w	9352 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x186>
    9706:	cmp.w	sl, #0
    970a:	bne.w	9836 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x66a>
        out,
        aux,
        size);
    size_ratio *= 0.97f;
  }
}
    970e:	add	sp, #12
    9710:	vpop	{d8-d13}
    9714:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  
 private:
  template<bool additive>
  void RenderInternal(
      float frequency, float amplitude, float* out, size_t size) {
    if (frequency >= 0.25f) {
    9718:	vldr	s13, [pc, #-396]	; 9590 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c4>
      frequency = 0.25f;
      amplitude = 0.0f;
    971c:	vldr	s7, [pc, #-396]	; 9594 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
    9720:	b.n	9642 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x476>
    if (start_burst) {
      phase_ = 0.5f;
      fm_ = 16.0f;
      randomize = true;
    } else {
      phase_ += rate * fm_;
    9722:	vldr	s14, [r0, #32]
    9726:	vldr	s15, [r0, #28]
    972a:	vfma.f32	s15, s16, s14
      if (phase_ >= 1.0f) {
    972e:	vcmpe.f32	s15, s8
    9732:	vmrs	APSR_nzcv, fpscr
    9736:	blt.n	97e4 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x618>
        phase_ -= static_cast<float>(static_cast<int>(phase_));
    9738:	vcvt.s32.f32	s14, s15
    973c:	vcvt.f32.s32	s14, s14
    9740:	vsub.f32	s15, s15, s14
    9744:	vstr	s15, [r0, #28]
    9748:	b.n	9364 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x198>
      return from_;
    }
  }
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    974a:	vmov.f32	s15, #112	; 0x3f800000  1.0
    974e:	b.n	9422 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x256>
    9750:	mul.w	r4, r5, r4
    9754:	ldr	r1, [pc, #228]	; (983c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x670>)
    if (randomize) {
      from_ += interval_;
      interval_ = stmlib::Random::GetFloat() - from_;
      // Randomize the duration of the grain.
      if (burst_mode) {
        fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
    9756:	vmov.f32	s13, s18
    975a:	vldr	s14, [r0, #32]
    975e:	add	r1, r4
    9760:	mov.w	sl, #1
    9764:	vmov	s15, r1
    9768:	vcvt.f32.u32	s15, s15
    976c:	vmul.f32	s15, s15, s17
    9770:	vfma.f32	s13, s15, s19
    9774:	vmul.f32	s15, s14, s13
    9778:	vstr	s15, [r0, #32]
    977c:	b.n	93be <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f2>
    977e:	vldr	s13, [r0, #44]	; 0x2c
    9782:	vmov.f32	s12, #96	; 0x3f000000  0.5
    9786:	vldr	s14, [pc, #184]	; 9840 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x674>
    978a:	vmul.f32	s14, s13, s14
    978e:	vsub.f32	s13, s12, s14
    9792:	b.n	9450 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x284>
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
      return 2.0f * (from_ + interval_ * phase_) - 1.0f;
    9794:	vldr	s12, [r0, #24]
    9798:	vmov.f32	s14, #0	; 0x40000000  2.0
    979c:	vldr	s13, [r0, #28]
    97a0:	vmov.f32	s6, #240	; 0xbf800000 -1.0
    97a4:	vldr	s15, [r0, #20]
    97a8:	vfma.f32	s15, s12, s13
    97ac:	vfma.f32	s6, s15, s14
    97b0:	b.n	9480 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    97b2:	vmov.f32	s14, #116	; 0x3fa00000  1.250
    97b6:	vfma.f32	s14, s15, s13
    97ba:	vmov.f32	s15, s14
    97be:	vcvt.s32.f32	s14, s14
    97c2:	vcvt.f32.s32	s14, s14
    97c6:	vsub.f32	s15, s15, s14
    97ca:	vmul.f32	s15, s15, s20
    97ce:	vcvt.s32.f32	s14, s15
    97d2:	vmov	r4, s14
    97d6:	vcvt.f32.s32	s13, s14
    97da:	lsls	r5, r4, #2
    97dc:	vsub.f32	s13, s15, s13
    97e0:	adds	r6, r5, #4
    97e2:	b.n	9400 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x234>
    if (start_burst) {
      phase_ = 0.5f;
      fm_ = 16.0f;
      randomize = true;
    } else {
      phase_ += rate * fm_;
    97e4:	vstr	s15, [r0, #28]
    97e8:	b.n	93be <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f2>
    97ea:	vldr	s14, [pc, #88]	; 9844 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x678>
    97ee:	vadd.f32	s15, s15, s14
    97f2:	vcvt.s32.f32	s14, s15
    97f6:	vmov	r4, s14
    97fa:	vcvt.f32.s32	s14, s14
    97fe:	vsub.f32	s15, s15, s14
    9802:	vmov.f32	s14, s15
    9806:	vcvt.s32.f32	s14, s14, #8
    980a:	vmov	r3, s14
    980e:	b.n	9272 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa6>
    9810:	vldr	s14, [pc, #48]	; 9844 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x678>
    9814:	vadd.f32	s15, s15, s14
    9818:	vcvt.s32.f32	s14, s15
    981c:	vmov	r4, s14
    9820:	vcvt.f32.s32	s14, s14
    9824:	vsub.f32	s15, s15, s14
    9828:	vmov.f32	s14, s15
    982c:	vcvt.s32.f32	s14, s14, #8
    9830:	vmov	r3, s14
    9834:	b.n	920e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    9836:	ldr	r3, [pc, #16]	; (9848 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x67c>)
    9838:	str	r1, [r3, #0]
    983a:	b.n	970e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x542>
    983c:	.word	0x3c6ef35f
    9840:	.word	0x3f733333
    9844:	.word	0x43000000
    9848:	.word	0x2001f96c

0000984c <plaits::FMEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace stmlib;

void FMEngine::Init(BufferAllocator* allocator) {
  carrier_phase_ = 0;
    984c:	movs	r2, #0
  modulator_phase_ = 0;
  sub_phase_ = 0;

  previous_carrier_frequency_ = a0;
  previous_modulator_frequency_ = a0;
  previous_amount_ = 0.0f;
    984e:	movs	r3, #0
void FMEngine::Init(BufferAllocator* allocator) {
  carrier_phase_ = 0;
  modulator_phase_ = 0;
  sub_phase_ = 0;

  previous_carrier_frequency_ = a0;
    9850:	ldr	r1, [pc, #16]	; (9864 <plaits::FMEngine::Init(stmlib::BufferAllocator*)+0x18>)
namespace plaits {

using namespace stmlib;

void FMEngine::Init(BufferAllocator* allocator) {
  carrier_phase_ = 0;
    9852:	str	r2, [r0, #16]
  modulator_phase_ = 0;
    9854:	str	r2, [r0, #20]
  sub_phase_ = 0;
    9856:	str	r2, [r0, #24]

  previous_carrier_frequency_ = a0;
    9858:	str	r1, [r0, #28]
  previous_modulator_frequency_ = a0;
    985a:	str	r1, [r0, #32]
  previous_amount_ = 0.0f;
    985c:	str	r3, [r0, #36]	; 0x24
  previous_feedback_ = 0.0f;
    985e:	str	r3, [r0, #40]	; 0x28
  previous_sample_ = 0.0f;
    9860:	str	r3, [r0, #44]	; 0x2c
    9862:	bx	lr
    9864:	.word	0x3a969651

00009868 <plaits::FMEngine::Reset()>:
}

void FMEngine::Reset() {
    9868:	bx	lr
    986a:	nop

0000986c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    986c:	vldr	s10, [pc, #952]	; 9c28 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
    float* aux,
    size_t size,
    bool* already_enveloped) {
  
  // 4x oversampling
  const float note = parameters.note - 24.0f;
    9870:	vmov.f32	s12, #56	; 0x41c00000  24.0
    9874:	vldr	s13, [r1, #16]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    9878:	vmov.f32	s14, #34	; 0x41100000  9.0
    987c:	vldr	s15, [r1, #4]
    9880:	vmul.f32	s13, s13, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9884:	vldr	s9, [pc, #864]	; 9be8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
    9888:	vsub.f32	s15, s15, s12
  MAKE_INTEGRAL_FRACTIONAL(index)
    988c:	vcvt.s32.f32	s12, s13
void FMEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    9890:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9894:	vpush	{d8-d13}
    9898:	sub	sp, #28
  float a = table[index_integral];
    989a:	ldr	r4, [pc, #848]	; (9bec <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>)
    989c:	mov	r8, r0
    989e:	str	r3, [sp, #12]
    98a0:	vmov	r3, s12
  const float ratio = Interpolate(
      lut_fm_frequency_quantizer,
      parameters.harmonics,
      128.0f);
  
  float modulator_note = note + ratio;
    98a4:	vcvt.f32.s32	s12, s12
void FMEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    98a8:	str	r2, [sp, #8]
    98aa:	lsls	r3, r3, #2
    98ac:	ldr	r5, [sp, #112]	; 0x70
    98ae:	adds	r2, r3, r4
  const float ratio = Interpolate(
      lut_fm_frequency_quantizer,
      parameters.harmonics,
      128.0f);
  
  float modulator_note = note + ratio;
    98b0:	vsub.f32	s12, s13, s12
    98b4:	vldr	s11, [r2, #4]
    98b8:	vldr	s13, [r2]
    98bc:	vsub.f32	s11, s11, s13
    98c0:	vfma.f32	s13, s12, s11
    98c4:	vadd.f32	s13, s13, s15
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    98c8:	vsub.f32	s14, s13, s14
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    98cc:	vcmpe.f32	s14, s9
    98d0:	vmrs	APSR_nzcv, fpscr
    98d4:	bmi.n	98ec <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80>
    98d6:	vldr	s12, [pc, #792]	; 9bf0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
    98da:	vcmpe.f32	s14, s12
    98de:	vmrs	APSR_nzcv, fpscr
    98e2:	ble.w	9cce <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x462>
    98e6:	movs	r2, #0
    98e8:	movs	r3, #255	; 0xff
    98ea:	b.n	98f0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x84>
    98ec:	movs	r2, #0
    98ee:	mov	r3, r2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    98f0:	ldr	r4, [pc, #768]	; (9bf4 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    98f2:	ldr	r0, [pc, #772]	; (9bf8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x38c>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    98f4:	add.w	r3, r4, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    98f8:	vldr	s11, [pc, #768]	; 9bfc <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x390>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    98fc:	add.w	r2, r0, r2, lsl #2
    9900:	vldr	s12, [r3]
    9904:	vldr	s14, [r2]
    9908:	vmul.f32	s14, s12, s14
    990c:	vmul.f32	s14, s14, s11
  float target_modulator_frequency = NoteToFrequency(modulator_note);
  CONSTRAIN(target_modulator_frequency, 0.0f, 0.5f);
    9910:	vcmpe.f32	s14, #0.0
    9914:	vmrs	APSR_nzcv, fpscr
    9918:	bmi.w	9cf6 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48a>
    991c:	vmov.f32	s12, #96	; 0x3f000000  0.5
    9920:	vcmp.f32	s14, s12
    9924:	vmrs	APSR_nzcv, fpscr
    9928:	it	gt
    992a:	vmovgt.f32	s14, s12

  // Reduce the maximum FM index for high pitched notes, to prevent aliasing.
  float hf_taming = 1.0f - (modulator_note - 72.0f) * 0.025f;
    992e:	vmov.f32	s12, #112	; 0x3f800000  1.0
    9932:	vldr	s10, [pc, #716]	; 9c00 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x394>
    9936:	vldr	s11, [pc, #716]	; 9c04 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x398>
    993a:	vsub.f32	s13, s13, s10
    993e:	vmov.f32	s10, s12
    9942:	vfms.f32	s10, s13, s11
  CONSTRAIN(hf_taming, 0.0f, 1.0f);
    9946:	vcmpe.f32	s10, #0.0
    994a:	vmrs	APSR_nzcv, fpscr
    994e:	bmi.w	9cf0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x484>
    9952:	vcmpe.f32	s10, s12
    9956:	vmrs	APSR_nzcv, fpscr
    995a:	ble.w	9cfc <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x490>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    995e:	vmov.f32	s11, #34	; 0x41100000  9.0
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9962:	vldr	s13, [pc, #644]	; 9be8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    9966:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    996a:	vcmpe.f32	s15, s13
    996e:	vmrs	APSR_nzcv, fpscr
    9972:	bmi.n	998a <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e>
    9974:	vldr	s13, [pc, #632]	; 9bf0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
    9978:	vcmpe.f32	s15, s13
    997c:	vmrs	APSR_nzcv, fpscr
    9980:	ble.w	9ca8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x43c>
    9984:	movs	r3, #0
    9986:	movs	r2, #255	; 0xff
    9988:	b.n	998e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122>
    998a:	movs	r3, #0
    998c:	mov	r2, r3
      &previous_carrier_frequency_, NoteToFrequency(note), size);
  ParameterInterpolator modulator_frequency(
      &previous_modulator_frequency_, target_modulator_frequency, size);
  ParameterInterpolator amount_modulation(
      &previous_amount_,
      2.0f * parameters.timbre * parameters.timbre * hf_taming,
    998e:	vldr	s10, [r1, #8]

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    9992:	add.w	r4, r4, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    9996:	add.w	r3, r0, r3, lsl #2
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    999a:	vmov.f32	s8, #0	; 0x40000000  2.0
    999e:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    99a2:	vldr	s7, [r1, #12]
    99a6:	vadd.f32	s13, s10, s10
    99aa:	vldr	s6, [r3]
    99ae:	vldr	s9, [r4]
    99b2:	vmov	s11, r5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    99b6:	vldr	s18, [r8, #28]
    increment_ = (new_value - *state) / static_cast<float>(size);
    99ba:	vfma.f32	s15, s7, s8
    99be:	vmul.f32	s9, s9, s6
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    99c2:	vldr	s6, [r8, #36]	; 0x24
    increment_ = (new_value - *state) / static_cast<float>(size);
    99c6:	vmov.f32	s8, s18
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    99ca:	vldr	s19, [r8, #32]
    increment_ = (new_value - *state) / static_cast<float>(size);
    99ce:	vmul.f32	s10, s13, s10
    99d2:	vldr	s13, [pc, #552]	; 9bfc <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x390>
    99d6:	vcvt.f32.u32	s11, s11
};

class Downsampler {
 public:
  Downsampler(float* state) {
    head_ = *state;
    99da:	vldr	s7, [r8, #52]	; 0x34
    99de:	vfnms.f32	s8, s9, s13
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    99e2:	vldr	s13, [r8, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    99e6:	vsub.f32	s14, s14, s19
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    99ea:	add.w	sl, r5, #4294967295
    99ee:	vsub.f32	s15, s15, s13
};

class Downsampler {
 public:
  Downsampler(float* state) {
    head_ = *state;
    99f2:	vldr	s5, [r8, #48]	; 0x30
    99f6:	vdiv.f32	s23, s14, s11
    99fa:	vmov.f32	s9, s8
    99fe:	vmov.f32	s8, s6
    9a02:	vdiv.f32	s21, s15, s11
    9a06:	vfnms.f32	s8, s10, s12
    9a0a:	vdiv.f32	s24, s9, s11
    9a0e:	vdiv.f32	s22, s8, s11
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    9a12:	cmp	r5, #0
    9a14:	beq.w	9c78 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40c>
    9a18:	ldr.w	r3, [r8, #16]
    9a1c:	ldr.w	r7, [r8, #20]
    9a20:	str	r3, [sp, #4]
    9a22:	ldr.w	r9, [pc, #512]	; 9c24 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
    9a26:	ldr.w	r3, [r8, #24]
    9a2a:	ldr	r2, [pc, #476]	; (9c08 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x39c>)
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    9a2c:	vldr	s20, [pc, #476]	; 9c0c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a0>
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9a30:	vldr	s10, [pc, #476]	; 9c10 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a4>
    9a34:	vldr	s11, [pc, #476]	; 9c14 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a8>
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    9a38:	vldr	s17, [pc, #476]	; 9c18 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>
    9a3c:	str	r3, [sp, #0]
  }

  inline float Next() {
    value_ += increment_;
    9a3e:	vadd.f32	s13, s13, s21
    9a42:	vadd.f32	s6, s6, s22
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    9a46:	vcmpe.f32	s13, #0.0
    9a4a:	vmrs	APSR_nzcv, fpscr
    9a4e:	bmi.w	9c9a <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42e>
    9a52:	vldr	s1, [pc, #472]	; 9c2c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    9a56:	vadd.f32	s18, s18, s24
    9a5a:	ldr	r3, [sp, #4]
    9a5c:	vadd.f32	s19, s19, s23
    9a60:	ldr	r1, [sp, #0]
    9a62:	vmov.f32	s3, s7
    9a66:	vldr	s7, [pc, #452]	; 9c2c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    9a6a:	vmul.f32	s15, s18, s20
    9a6e:	vldr	s14, [r8, #44]	; 0x2c
    9a72:	vmov.f32	s4, s5
    9a76:	ldr.w	ip, [pc, #428]	; 9c24 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    9a7a:	vmov.f32	s16, #112	; 0x3f800000  1.0
    9a7e:	vldr	s8, [pc, #412]	; 9c1c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    9a82:	vcvt.u32.f32	s15, s15
    9a86:	vldr	s9, [pc, #408]	; 9c20 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b4>
    9a8a:	vmov.f32	s5, s7
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    9a8e:	movs	r0, #0
    9a90:	vmul.f32	s0, s19, s20
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    9a94:	vmov	r6, s15
    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    9a98:	vmov.f32	s2, #80	; 0x3e800000  0.250
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9a9c:	vmov.f32	s12, #16	; 0x40800000  4.0
    9aa0:	mov.w	lr, r6, lsr #1
    9aa4:	adds	r3, r6, r3
    9aa6:	add	r1, lr
    9aa8:	mov	r5, r3
    9aaa:	str	r3, [sp, #20]
    9aac:	mov	r4, r1
    9aae:	str	r1, [sp, #16]
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    9ab0:	vmov.f32	s15, s16
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    9ab4:	vcmpe.f32	s13, #0.0
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    9ab8:	vfma.f32	s15, s1, s14
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    9abc:	vmrs	APSR_nzcv, fpscr
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    9ac0:	vmul.f32	s15, s15, s0
    9ac4:	vcvt.u32.f32	s15, s15
    9ac8:	vmov	r3, s15
    9acc:	add	r7, r3
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    9ace:	ble.w	9be0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x374>
    9ad2:	vmul.f32	s15, s13, s2
    9ad6:	vmul.f32	s15, s15, s13
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9ada:	vmov.f32	s25, s12
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    9ade:	adds	r0, #1
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9ae0:	vmov.f32	s27, s12
    9ae4:	mvns	r1, r0
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    9ae6:	cmp	r0, #4
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9ae8:	vfma.f32	s25, s15, s14
    9aec:	and.w	r1, r1, #3
    9af0:	add.w	r1, r9, r1, lsl #2
    9af4:	vmul.f32	s15, s25, s10
    9af8:	vcvt.u32.f32	s15, s15
    9afc:	vmov	r3, s15
    9b00:	add.w	r3, r7, r3, lsl #3
  uint32_t integral = phase >> 22;
    9b04:	mov.w	fp, r3, lsr #22
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9b08:	mov.w	r3, r3, lsl #10
    9b0c:	vmov	s15, r3
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    9b10:	add.w	r3, r2, fp, lsl #2
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9b14:	vcvt.f32.u32	s15, s15
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    9b18:	vldr	s25, [r3]
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9b1c:	vldr	s26, [r3, #4]
    9b20:	vmul.f32	s15, s15, s11
    9b24:	vsub.f32	s26, s26, s25
    9b28:	vfma.f32	s25, s15, s26
    9b2c:	vmov.f32	s15, s12
    9b30:	vfma.f32	s15, s6, s25
    9b34:	vmul.f32	s15, s15, s10
    9b38:	vcvt.u32.f32	s15, s15
    9b3c:	vmov	r3, s15
    9b40:	add.w	r3, r5, r3, lsl #3
    9b44:	add	r5, r6
  uint32_t integral = phase >> 22;
    9b46:	mov.w	fp, r3, lsr #22
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    9b4a:	mov.w	r3, r3, lsl #10
    9b4e:	vmov	s15, r3

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    9b52:	add.w	r3, r2, fp, lsl #2
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    9b56:	vcvt.f32.u32	s15, s15

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    9b5a:	vldr	s25, [r3]
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    9b5e:	vldr	s26, [r3, #4]
    9b62:	vmul.f32	s15, s15, s11
    9b66:	vsub.f32	s26, s26, s25
    9b6a:	vfma.f32	s25, s15, s26
    9b6e:	vmov.f32	s15, s25
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9b72:	vmul.f32	s25, s6, s25
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    9b76:	vsub.f32	s26, s15, s14
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9b7a:	vfma.f32	s27, s25, s2
  }
  ~Downsampler() {
    *state_ = head_;
  }
  inline void Accumulate(int i, float sample) {
    head_ += sample * fir_coefficient[3 - (i & 3)];
    9b7e:	vfma.f32	s3, s15, s9
    tail_ += sample * fir_coefficient[i & 3];
    9b82:	vfma.f32	s7, s15, s8
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    9b86:	vfma.f32	s14, s26, s17
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    9b8a:	vmul.f32	s15, s27, s10
    9b8e:	vcvt.u32.f32	s15, s15
    9b92:	vmov	r3, s15
    9b96:	add.w	r3, r4, r3, lsl #3
    9b9a:	add	r4, lr
  uint32_t integral = phase >> 22;
    9b9c:	mov.w	fp, r3, lsr #22
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    9ba0:	mov.w	r3, r3, lsl #10
    9ba4:	vmov	s15, r3

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    9ba8:	add.w	r3, r2, fp, lsl #2
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    9bac:	vcvt.f32.u32	s15, s15

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    9bb0:	vldr	s25, [r3]
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    9bb4:	vldr	s26, [r3, #4]
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    9bb8:	vstr	s14, [r8, #44]	; 0x2c
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    9bbc:	vmul.f32	s15, s15, s11
    9bc0:	vsub.f32	s26, s26, s25
    9bc4:	vfma.f32	s25, s15, s26
  }
  ~Downsampler() {
    *state_ = head_;
  }
  inline void Accumulate(int i, float sample) {
    head_ += sample * fir_coefficient[3 - (i & 3)];
    9bc8:	vfma.f32	s4, s25, s9
    tail_ += sample * fir_coefficient[i & 3];
    9bcc:	vfma.f32	s5, s25, s8
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    9bd0:	beq.n	9c30 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c4>
    9bd2:	add.w	ip, ip, #4
    9bd6:	vldr	s9, [r1]
    9bda:	vldr	s8, [ip]
    9bde:	b.n	9ab0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x244>
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    9be0:	vldr	s15, [pc, #72]	; 9c2c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    9be4:	b.n	9ada <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26e>
    9be6:	nop
    9be8:	.word	0xc3000000
    9bec:	.word	0x20000930
    9bf0:	.word	0x42fe0000
    9bf4:	.word	0x20000024
    9bf8:	.word	0x20000428
    9bfc:	.word	0x39969651
    9c00:	.word	0x42900000
    9c04:	.word	0x3ccccccd
    9c08:	.word	0x200025e0
    9c0c:	.word	0x4f800000
    9c10:	.word	0x4e000000
    9c14:	.word	0x2f800000
    9c18:	.word	0x3d4ccccd
    9c1c:	.word	0x3cc81528
    9c20:	.word	0x3e5ca50a
    9c24:	.word	0x2001f4d8
    9c28:	.word	0x43000000
    9c2c:	.word	0x00000000
    9c30:	ldr	r0, [sp, #20]
    9c32:	add.w	r3, r6, r6, lsl #1
      ONE_POLE(previous_sample_, carrier, 0.05f);
      carrier_downsampler.Accumulate(j, carrier);
      sub_downsampler.Accumulate(j, sub);
    }
    
    *out++ = carrier_downsampler.Read();
    9c36:	ldr	r1, [sp, #8]
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    9c38:	add.w	sl, sl, #4294967295
    9c3c:	add	r3, r0
    9c3e:	ldr	r0, [sp, #0]
      ONE_POLE(previous_sample_, carrier, 0.05f);
      carrier_downsampler.Accumulate(j, carrier);
      sub_downsampler.Accumulate(j, sub);
    }
    
    *out++ = carrier_downsampler.Read();
    9c40:	vstmia	r1!, {s3}
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    9c44:	cmp.w	sl, #4294967295
    9c48:	add.w	r0, r0, lr, lsl #2
      ONE_POLE(previous_sample_, carrier, 0.05f);
      carrier_downsampler.Accumulate(j, carrier);
      sub_downsampler.Accumulate(j, sub);
    }
    
    *out++ = carrier_downsampler.Read();
    9c4c:	str	r1, [sp, #8]
    9c4e:	ldr	r1, [sp, #4]
    9c50:	str	r0, [sp, #0]
    9c52:	add.w	r1, r1, r6, lsl #2
    *aux++ = sub_downsampler.Read();
    9c56:	ldr	r0, [sp, #12]
    9c58:	str	r1, [sp, #4]
    9c5a:	add.w	r1, lr, lr, lsl #1
    9c5e:	vstmia	r0!, {s4}
    9c62:	str	r0, [sp, #12]
    9c64:	ldr	r0, [sp, #16]
    9c66:	add	r0, r1
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    9c68:	bne.w	9a3e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d2>
    9c6c:	str.w	r7, [r8, #20]
    9c70:	str.w	r3, [r8, #16]
    9c74:	str.w	r0, [r8, #24]
    head_ = *state;
    tail_ = 0.0f;
    state_ = state;
  }
  ~Downsampler() {
    *state_ = head_;
    9c78:	vstr	s5, [r8, #48]	; 0x30
    9c7c:	vstr	s7, [r8, #52]	; 0x34
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    9c80:	vstr	s13, [r8, #40]	; 0x28
    9c84:	vstr	s6, [r8, #36]	; 0x24
    9c88:	vstr	s19, [r8, #32]
    9c8c:	vstr	s18, [r8, #28]
    }
    
    *out++ = carrier_downsampler.Read();
    *aux++ = sub_downsampler.Read();
  }
}
    9c90:	add	sp, #28
    9c92:	vpop	{d8-d13}
    9c96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    9c9a:	vmov.f32	s1, #96	; 0x3f000000  0.5
    9c9e:	vmul.f32	s1, s13, s1
    9ca2:	vmul.f32	s1, s1, s13
    9ca6:	b.n	9a56 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1ea>
    9ca8:	vldr	s13, [pc, #-132]	; 9c28 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
    9cac:	vadd.f32	s15, s15, s13
    9cb0:	vcvt.s32.f32	s13, s15
    9cb4:	vmov	r2, s13
    9cb8:	vcvt.f32.s32	s13, s13
    9cbc:	vsub.f32	s15, s15, s13
    9cc0:	vmov.f32	s13, s15
    9cc4:	vcvt.s32.f32	s13, s13, #8
    9cc8:	vmov	r3, s13
    9ccc:	b.n	998e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122>
    9cce:	vadd.f32	s14, s14, s10
    9cd2:	vcvt.s32.f32	s12, s14
    9cd6:	vmov	r3, s12
    9cda:	vcvt.f32.s32	s12, s12
    9cde:	vsub.f32	s14, s14, s12
    9ce2:	vmov.f32	s12, s14
    9ce6:	vcvt.s32.f32	s12, s12, #8
    9cea:	vmov	r2, s12
    9cee:	b.n	98f0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x84>
    9cf0:	vldr	s12, [pc, #-200]	; 9c2c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    9cf4:	b.n	995e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2>
      parameters.harmonics,
      128.0f);
  
  float modulator_note = note + ratio;
  float target_modulator_frequency = NoteToFrequency(modulator_note);
  CONSTRAIN(target_modulator_frequency, 0.0f, 0.5f);
    9cf6:	vldr	s14, [pc, #-204]	; 9c2c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    9cfa:	b.n	992e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc2>
    9cfc:	vmul.f32	s12, s10, s10
    9d00:	b.n	995e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2>
    9d02:	nop

00009d04 <plaits::StringEngine::Init(stmlib::BufferAllocator*)>:
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    9d04:	ldr	r2, [r1, #8]
    9d06:	cmp	r2, #95	; 0x5f
namespace plaits {

using namespace std;
using namespace stmlib;

void StringEngine::Init(BufferAllocator* allocator) {
    9d08:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d0c:	mov	r6, r1
    9d0e:	mov	r7, r0
    9d10:	bls.n	9d82 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x7e>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    9d12:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    9d14:	subs	r2, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    9d16:	add.w	r1, r3, #96	; 0x60
      free_ -= size_bytes;
    9d1a:	str	r2, [r6, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    9d1c:	str	r1, [r6, #0]
    9d1e:	add.w	r5, r7, #16
    9d22:	add.w	r4, r7, #304	; 0x130
    9d26:	add.w	r9, r7, #316	; 0x13c
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Init(allocator);
    f0_[i] = 0.01f;
    9d2a:	ldr.w	r8, [pc, #92]	; 9d88 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x84>

using namespace std;
using namespace stmlib;

void StringEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    9d2e:	str.w	r3, [r7, #328]	; 0x148
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Init(allocator);
    9d32:	mov	r0, r5
    9d34:	mov	r1, r6
    9d36:	bl	cce4 <plaits::StringVoice::Init(stmlib::BufferAllocator*)>
    f0_[i] = 0.01f;
    9d3a:	str.w	r8, [r4], #4
using namespace std;
using namespace stmlib;

void StringEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  for (int i = 0; i < kNumStrings; ++i) {
    9d3e:	cmp	r4, r9
    9d40:	add.w	r5, r5, #96	; 0x60
    9d44:	bne.n	9d32 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x2e>
    voice_[i].Init(allocator);
    f0_[i] = 0.01f;
  }
  active_string_ = kNumStrings - 1;
    9d46:	movs	r3, #2
    9d48:	str.w	r3, [r7, #324]	; 0x144
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    9d4c:	ldr	r2, [r6, #8]
    9d4e:	cmp	r2, #63	; 0x3f
    9d50:	bls.n	9d78 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x74>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    9d52:	ldr	r3, [r6, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    9d54:	subs	r2, #64	; 0x40
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    9d56:	add.w	r1, r3, #64	; 0x40
      free_ -= size_bytes;
    9d5a:	str	r2, [r6, #8]
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    9d5c:	mov	r2, r1
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    9d5e:	str	r1, [r6, #0]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    9d60:	str.w	r3, [r7, #320]	; 0x140
	*__first = __tmp;
    9d64:	movs	r1, #0
    9d66:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    9d6a:	cmp	r3, r2
    9d6c:	bne.n	9d66 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x62>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    9d6e:	movs	r3, #0
    9d70:	str.w	r3, [r7, #316]	; 0x13c
  f0_delay_.Init(allocator->Allocate<float>(16));
}
    9d74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    9d78:	movs	r3, #0
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    9d7a:	movs	r2, #64	; 0x40
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    9d7c:	str.w	r3, [r7, #320]	; 0x140
    9d80:	b.n	9d64 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x60>
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    9d82:	movs	r3, #0
    9d84:	b.n	9d1e <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x1a>
    9d86:	nop
    9d88:	.word	0x3c23d70a

00009d8c <plaits::StringEngine::Reset()>:
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    9d8c:	ldr.w	r3, [r0, #320]	; 0x140
	*__first = __tmp;
    9d90:	movs	r1, #0

void StringEngine::Reset() {
    9d92:	push	{r4, lr}
    9d94:	add.w	r2, r3, #64	; 0x40
    9d98:	mov	r4, r0
    9d9a:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    9d9e:	cmp	r2, r3
    9da0:	bne.n	9d9a <plaits::StringEngine::Reset()+0xe>
    write_ptr_ = 0;
    9da2:	movs	r3, #0
  f0_delay_.Reset();
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Reset();
    9da4:	add.w	r0, r4, #16
    9da8:	str.w	r3, [r4, #316]	; 0x13c
    9dac:	bl	cd14 <plaits::StringVoice::Reset()>
    9db0:	add.w	r0, r4, #112	; 0x70
    9db4:	bl	cd14 <plaits::StringVoice::Reset()>
    9db8:	add.w	r0, r4, #208	; 0xd0
  }
}
    9dbc:	ldmia.w	sp!, {r4, lr}
}

void StringEngine::Reset() {
  f0_delay_.Reset();
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Reset();
    9dc0:	b.w	cd14 <plaits::StringVoice::Reset()>

00009dc4 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
void StringEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    9dc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9dc8:	mov	r7, r2
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    9dca:	ldrb	r2, [r1, #0]
void StringEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    9dcc:	sub	sp, #20
    9dce:	mov	r8, r3
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    9dd0:	lsls	r3, r2, #31
void StringEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    9dd2:	mov	r5, r0
    9dd4:	mov	r4, r1
    9dd6:	ldr.w	r9, [sp, #56]	; 0x38
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    9dda:	ldr.w	r0, [r0, #316]	; 0x13c
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    9dde:	bmi.n	9e22 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e>
    9de0:	add.w	lr, r0, #15
    9de4:	ldr.w	r3, [r5, #324]	; 0x144
    9de8:	ldr.w	r6, [r5, #320]	; 0x140
    9dec:	and.w	lr, lr, #15
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    9df0:	vmov.f32	s13, #34	; 0x41100000  9.0
    9df4:	vldr	s15, [r4, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9df8:	vldr	s14, [pc, #384]	; 9f7c <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    9dfc:	vsub.f32	s15, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9e00:	vcmpe.f32	s15, s14
    9e04:	vmrs	APSR_nzcv, fpscr
    9e08:	bmi.n	9e78 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb4>
    9e0a:	vldr	s14, [pc, #372]	; 9f80 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1bc>
    9e0e:	vcmpe.f32	s15, s14
    9e12:	vmrs	APSR_nzcv, fpscr
    9e16:	ble.w	9f54 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x190>
    9e1a:	movs	r1, #0
    9e1c:	mov.w	fp, #255	; 0xff
    9e20:	b.n	9e7c <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8>
    9e22:	add.w	r3, r0, #14
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    9e26:	add.w	lr, r0, #15
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    9e2a:	ldr.w	r6, [r5, #320]	; 0x140
    9e2e:	and.w	r3, r3, #15
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    9e32:	and.w	lr, lr, #15
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    9e36:	ldr.w	ip, [r5, #324]	; 0x144
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    9e3a:	add.w	r3, r6, r3, lsl #2
    9e3e:	vldr	s13, [pc, #324]	; 9f84 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c0>
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    9e42:	add.w	sl, r6, lr, lsl #2
    active_string_ = (active_string_ + 1) % kNumStrings;
    9e46:	add.w	r1, ip, #1
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    9e4a:	vldr	s15, [r3]
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    9e4e:	add.w	ip, r5, ip, lsl #2
    9e52:	vldr	s14, [sl]
    active_string_ = (active_string_ + 1) % kNumStrings;
    9e56:	ldr	r3, [pc, #304]	; (9f88 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c4>)
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    9e58:	vsub.f32	s14, s14, s15
    active_string_ = (active_string_ + 1) % kNumStrings;
    9e5c:	smull	sl, r3, r3, r1
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    9e60:	vfma.f32	s15, s14, s13
    active_string_ = (active_string_ + 1) % kNumStrings;
    9e64:	sub.w	r3, r3, r1, asr #31
    9e68:	add.w	r3, r3, r3, lsl #1
    9e6c:	subs	r3, r1, r3
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    9e6e:	vstr	s15, [ip, #304]	; 0x130
    active_string_ = (active_string_ + 1) % kNumStrings;
    9e72:	str.w	r3, [r5, #324]	; 0x144
    9e76:	b.n	9df0 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c>
    9e78:	movs	r1, #0
    9e7a:	mov	fp, r1

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    9e7c:	ldr.w	sl, [pc, #276]	; 9f94 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d0>
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    9e80:	add.w	r6, r6, r0, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    9e84:	ldr.w	ip, [pc, #272]	; 9f98 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d4>
  }
  
  const float f0 = NoteToFrequency(parameters.note);
  f0_[active_string_] = f0;
    9e88:	add.w	r3, r5, r3, lsl #2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    9e8c:	add.w	sl, sl, fp, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    9e90:	vldr	s13, [pc, #248]	; 9f8c <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c8>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    9e94:	add.w	ip, ip, r1, lsl #2
    9e98:	vldr	s14, [sl]
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
    9e9c:	mov.w	r1, r9, lsl #2
    9ea0:	vldr	s15, [ip]
    9ea4:	adds	r0, r7, r1
    9ea6:	vmul.f32	s15, s14, s15
    9eaa:	cmp	r7, r0
    9eac:	vmul.f32	s15, s15, s13
    f0_[active_string_] = f0_delay_.Read(14);
    active_string_ = (active_string_ + 1) % kNumStrings;
  }
  
  const float f0 = NoteToFrequency(parameters.note);
  f0_[active_string_] = f0;
    9eb0:	vstr	s15, [r3, #304]	; 0x130
    9eb4:	vstr	s15, [r6]
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    9eb8:	str.w	lr, [r5, #316]	; 0x13c
    9ebc:	beq.n	9eca <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x106>
    9ebe:	mov	r3, r7
	*__first = __tmp;
    9ec0:	movs	r6, #0
    9ec2:	str.w	r6, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    9ec6:	cmp	r0, r3
    9ec8:	bne.n	9ec2 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfe>
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
    9eca:	add	r1, r8
    9ecc:	cmp	r8, r1
    9ece:	beq.n	9edc <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x118>
    9ed0:	mov	r3, r8
	*__first = __tmp;
    9ed2:	movs	r0, #0
    9ed4:	str.w	r0, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    9ed8:	cmp	r1, r3
    9eda:	bne.n	9ed4 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x110>
  
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Render(
    9edc:	and.w	r3, r2, #2
    9ee0:	add.w	fp, r5, #304	; 0x130
    9ee4:	add.w	sl, r5, #16
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    9ee8:	movs	r6, #0
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Render(
    9eea:	and.w	r1, r3, #255	; 0xff
    9eee:	cbz	r3, 9efc <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x138>
    9ef0:	ldr.w	r1, [r5, #324]	; 0x144
    9ef4:	subs	r1, r1, r6
    9ef6:	clz	r1, r1
    9efa:	lsrs	r1, r1, #5
    9efc:	ands.w	r2, r2, #1
    9f00:	beq.n	9f0e <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14a>
    9f02:	ldr.w	r2, [r5, #324]	; 0x144
    9f06:	subs	r2, r2, r6
    9f08:	clz	r2, r2
    9f0c:	lsrs	r2, r2, #5
        parameters.trigger & TRIGGER_UNPATCHED && i == active_string_,
        parameters.trigger & TRIGGER_RISING_EDGE && i == active_string_,
        parameters.accent,
        f0_[i],
        parameters.harmonics,
        parameters.timbre * parameters.timbre,
    9f0e:	vldr	s3, [r4, #8]
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumStrings; ++i) {
    9f12:	adds	r6, #1
    voice_[i].Render(
    9f14:	vldmia	fp!, {s1}
        parameters.timbre * parameters.timbre,
        parameters.morph,
        temp_buffer_,
        out,
        aux,
        size);
    9f18:	mov	r0, sl
    9f1a:	ldr.w	r3, [r5, #328]	; 0x148
    9f1e:	vmul.f32	s3, s3, s3
    9f22:	vldr	s4, [r4, #12]
    9f26:	add.w	sl, sl, #96	; 0x60
    9f2a:	vldr	s2, [r4, #16]
    9f2e:	vldr	s0, [r4, #20]
    9f32:	stmia.w	sp, {r7, r8, r9}
    9f36:	bl	cd1c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumStrings; ++i) {
    9f3a:	cmp	r6, #3
    9f3c:	beq.n	9f4e <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x18a>
    9f3e:	ldrb	r2, [r4, #0]
    voice_[i].Render(
    9f40:	and.w	r3, r2, #2
    9f44:	and.w	r1, r3, #255	; 0xff
    9f48:	cmp	r3, #0
    9f4a:	beq.n	9efc <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x138>
    9f4c:	b.n	9ef0 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12c>
        temp_buffer_,
        out,
        aux,
        size);
  }
}
    9f4e:	add	sp, #20
    9f50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f54:	vldr	s14, [pc, #56]	; 9f90 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1cc>
    9f58:	vadd.f32	s15, s15, s14
    9f5c:	vcvt.s32.f32	s14, s15
    9f60:	vmov	fp, s14
    9f64:	vcvt.f32.s32	s14, s14
    9f68:	vsub.f32	s15, s15, s14
    9f6c:	vmov.f32	s14, s15
    9f70:	vcvt.s32.f32	s14, s14, #8
    9f74:	vmov	r1, s14
    9f78:	b.n	9e7c <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8>
    9f7a:	nop
    9f7c:	.word	0xc3000000
    9f80:	.word	0x42fe0000
    9f84:	.word	0x00000000
    9f88:	.word	0x55555556
    9f8c:	.word	0x39969651
    9f90:	.word	0x43000000
    9f94:	.word	0x20000024
    9f98:	.word	0x20000428

00009f9c <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void SnareDrumEngine::Init(BufferAllocator* allocator) {
    9f9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  static const int kNumModes = 5;

  void Init() {
    pulse_remaining_samples_ = 0;
    pulse_ = 0.0f;
    9fa0:	movs	r4, #0
  ~AnalogSnareDrum() { }

  static const int kNumModes = 5;

  void Init() {
    pulse_remaining_samples_ = 0;
    9fa2:	movs	r5, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    9fa4:	ldr.w	r9, [pc, #176]	; a058 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xbc>
    9fa8:	mov	r3, r0
    9faa:	add.w	r8, r0, #100	; 0x64
    pulse_ = 0.0f;
    pulse_height_ = 0.0f;
    pulse_lp_ = 0.0f;
    noise_envelope_ = 0.0f;
    sustain_gain_ = 0.0f;
    9fae:	mov	r1, r0
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    9fb0:	mov	r2, r4
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    9fb2:	ldr.w	ip, [pc, #168]	; a05c <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc0>
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    9fb6:	ldr.w	lr, [pc, #168]	; a060 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc4>
  ~AnalogSnareDrum() { }

  static const int kNumModes = 5;

  void Init() {
    pulse_remaining_samples_ = 0;
    9fba:	str	r5, [r0, #16]
    pulse_ = 0.0f;
    9fbc:	str	r4, [r0, #20]
    pulse_height_ = 0.0f;
    9fbe:	str	r4, [r0, #24]
    pulse_lp_ = 0.0f;
    9fc0:	str	r4, [r0, #28]
    noise_envelope_ = 0.0f;
    9fc2:	str	r4, [r0, #32]
    sustain_gain_ = 0.0f;
    9fc4:	str	r4, [r0, #36]	; 0x24

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    9fc6:	str.w	r9, [r3, #40]	; 0x28
    9fca:	adds	r3, #20
    r_ = 1.0f / resonance;
    9fcc:	str.w	ip, [r3, #24]
    9fd0:	adds	r1, #12
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    9fd2:	str.w	lr, [r3, #28]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    9fd6:	movs	r4, #0
    9fd8:	str	r2, [r3, #36]	; 0x24
    9fda:	str	r2, [r3, #32]

    for (int i = 0; i < kNumModes; ++i) {
    9fdc:	cmp	r3, r8
 public:
  SineOscillator() { }
  ~SineOscillator() { }

  void Init() {
    phase_ = 0.0f;
    9fde:	str.w	r2, [r1, #148]	; 0x94
    frequency_ = 0.0f;
    9fe2:	str.w	r2, [r1, #152]	; 0x98
    amplitude_ = 0.0f;
    9fe6:	str.w	r2, [r1, #156]	; 0x9c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    9fea:	ldr	r5, [pc, #108]	; (a058 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xbc>)
    r_ = 1.0f / resonance;
    9fec:	ldr	r7, [pc, #108]	; (a05c <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc0>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    9fee:	ldr	r6, [pc, #112]	; (a060 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc4>)
    9ff0:	bne.n	9fc6 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0x2a>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    9ff2:	ldr	r3, [pc, #112]	; (a064 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc8>)
    phase_[0] = 0.0f;
    phase_[1] = 0.0f;
    drum_amplitude_ = 0.0f;
    snare_amplitude_ = 0.0f;
    fm_ = 0.0f;
    hold_counter_ = 0;
    9ff4:	movs	r2, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    9ff6:	str.w	r5, [r0, #140]	; 0x8c
    r_ = 1.0f / resonance;
    9ffa:	str.w	r7, [r0, #144]	; 0x90
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    9ffe:	str.w	r6, [r0, #148]	; 0x94
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    a002:	str.w	r4, [r0, #156]	; 0x9c
    a006:	str.w	r4, [r0, #152]	; 0x98
 public:
  SyntheticSnareDrum() { }
  ~SyntheticSnareDrum() { }

  void Init() {
    phase_[0] = 0.0f;
    a00a:	str.w	r4, [r0, #220]	; 0xdc
    phase_[1] = 0.0f;
    a00e:	str.w	r4, [r0, #224]	; 0xe0
    drum_amplitude_ = 0.0f;
    a012:	str.w	r4, [r0, #228]	; 0xe4
    snare_amplitude_ = 0.0f;
    a016:	str.w	r4, [r0, #232]	; 0xe8
    fm_ = 0.0f;
    a01a:	str.w	r4, [r0, #236]	; 0xec
    hold_counter_ = 0;
    sustain_gain_ = 0.0f;
    a01e:	str.w	r4, [r0, #240]	; 0xf0
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    a022:	str.w	r5, [r0, #248]	; 0xf8
    set_f<FREQUENCY_DIRTY>(0.01f);
    Reset();
  }
  
  void Reset() {
    state_ = 0.0f;
    a026:	str.w	r4, [r0, #256]	; 0x100
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    a02a:	str.w	r5, [r0, #260]	; 0x104
    set_f<FREQUENCY_DIRTY>(0.01f);
    Reset();
  }
  
  void Reset() {
    state_ = 0.0f;
    a02e:	str.w	r4, [r0, #268]	; 0x10c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    a032:	str.w	r5, [r0, #272]	; 0x110
    r_ = 1.0f / resonance;
    a036:	str.w	r7, [r0, #276]	; 0x114
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    a03a:	str.w	r6, [r0, #280]	; 0x118
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    a03e:	str.w	r4, [r0, #288]	; 0x120
    a042:	str.w	r4, [r0, #284]	; 0x11c
    phase_[0] = 0.0f;
    phase_[1] = 0.0f;
    drum_amplitude_ = 0.0f;
    snare_amplitude_ = 0.0f;
    fm_ = 0.0f;
    hold_counter_ = 0;
    a046:	str.w	r2, [r0, #244]	; 0xf4
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    a04a:	str.w	r3, [r0, #252]	; 0xfc
    a04e:	str.w	r3, [r0, #264]	; 0x108
    a052:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a056:	nop
    a058:	.word	0x3d00ba22
    a05c:	.word	0x3c23d70a
    a060:	.word	0x3f7faaca
    a064:	.word	0x3f783320

0000a068 <plaits::SnareDrumEngine::Reset()>:
  analog_snare_drum_.Init();
  synthetic_snare_drum_.Init();
}

void SnareDrumEngine::Reset() {
    a068:	bx	lr
    a06a:	nop

0000a06c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a06c:	vmov.f32	s13, #34	; 0x41100000  9.0
    a070:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a074:	vldr	s14, [pc, #604]	; a2d4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x268>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a078:	vsub.f32	s15, s15, s13
void SnareDrumEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    a07c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a080:	vcmpe.f32	s15, s14
    a084:	mov	r5, r2
    a086:	vpush	{d8-d15}
    a08a:	vmrs	APSR_nzcv, fpscr
    a08e:	sub	sp, #68	; 0x44
    a090:	str	r1, [sp, #8]
    a092:	str	r3, [sp, #16]
    a094:	bmi.w	ad20 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb4>
    a098:	vldr	s14, [pc, #572]	; a2d8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26c>
    a09c:	vcmpe.f32	s15, s14
    a0a0:	vmrs	APSR_nzcv, fpscr
    a0a4:	ble.w	a2ac <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x240>
    a0a8:	movs	r3, #0
    a0aa:	movs	r2, #255	; 0xff
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    a0ac:	ldr	r4, [sp, #8]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a0ae:	vmov.f32	s10, #36	; 0x41200000  10.0
    a0b2:	vmov.f32	s11, #112	; 0x3f800000  1.0
    a0b6:	vldr	s14, [pc, #548]	; a2dc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x270>
      parameters.harmonics,
    a0ba:	vldr	s8, [r4, #16]
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    a0be:	mov	r1, r4
    a0c0:	vldr	s7, [r4, #12]
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    a0c4:	vmov.f32	s13, #0	; 0x40000000  2.0
    a0c8:	vfma.f32	s14, s8, s10
    a0cc:	vldr	s15, [pc, #528]	; a2e0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x274>
    a0d0:	vsub.f32	s12, s7, s11
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a0d4:	ldr	r4, [pc, #524]	; (a2e4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a0d6:	vmov.f32	s6, s11
    a0da:	vldr	s9, [pc, #524]	; a2e8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27c>
    a0de:	vmov.f32	s10, s15
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a0e2:	add.w	r3, r4, r3, lsl #2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a0e6:	ldr	r4, [pc, #516]	; (a2ec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x280>)
    a0e8:	vsub.f32	s13, s13, s8

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a0ec:	vfma.f32	s6, s7, s12
    
    snappy = snappy * 1.1f - 0.05f;
    a0f0:	vldr	s3, [pc, #508]	; a2f0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x284>
    a0f4:	vfms.f32	s10, s7, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a0f8:	add.w	r2, r4, r2, lsl #2
    a0fc:	vldr	s12, [pc, #500]	; a2f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x288>
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    a100:	vmul.f32	s13, s13, s8
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    a104:	vldr	s5, [r3]
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  analog_snare_drum_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
    a108:	mov	r4, r1
    
    snappy = snappy * 1.1f - 0.05f;
    a10a:	vfma.f32	s3, s8, s12
    a10e:	vldr	s12, [r2]
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    a112:	vldr	s8, [pc, #484]	; a2f8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x28c>
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    a116:	vmov.f32	s0, s11

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a11a:	vmul.f32	s6, s6, s7
    a11e:	ldrb	r3, [r1, #0]
    a120:	vmov.f32	s14, s10
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a124:	vldr	s4, [pc, #468]	; a2fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x290>
    a128:	vmul.f32	s10, s12, s5
    a12c:	mov	r1, r3

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a12e:	vfma.f32	s15, s6, s9
    a132:	and.w	r7, r3, #2
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    a136:	vcvt.s32.f32	s12, s14
    a13a:	str	r3, [sp, #12]
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    a13c:	vmul.f32	s8, s13, s8

  return lut_pitch_ratio_high[pitch_integral] * \
    a140:	ldr	r3, [pc, #424]	; (a2ec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x280>)
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    a142:	vcmpe.f32	s3, #0.0
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    a146:	vldr	s1, [pc, #440]	; a300 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x294>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a14a:	vcvt.f32.s32	s9, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a14e:	vmov	r2, s12
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    a152:	vldr	s2, [pc, #432]	; a304 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x298>
    a156:	uxtb	r7, r7
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    a158:	vcvt.s32.f32	s13, s15

  return lut_pitch_ratio_high[pitch_integral] * \
    a15c:	add.w	r3, r3, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a160:	vsub.f32	s14, s14, s9
    a164:	and.w	r2, r1, #1
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    a168:	vldr	s12, [r3]
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    a16c:	vmrs	APSR_nzcv, fpscr
    a170:	vcvt.f32.s32	s9, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a174:	vmov	r1, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a178:	vmul.f32	s14, s14, s4

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a17c:	ldr	r3, [pc, #364]	; (a2ec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x280>)
    a17e:	vldr	s5, [pc, #392]	; a308 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x29c>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a182:	vsub.f32	s15, s15, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a186:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a18a:	vcvt.s32.f32	s14, s14
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    a18e:	vldr	s6, [r4, #20]
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    a192:	vldr	s9, [r3]
    a196:	vmul.f32	s5, s10, s5
    a19a:	vmul.f32	s15, s15, s4
    a19e:	ldr	r3, [pc, #324]	; (a2e4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>)
    a1a0:	vmov	r1, s14
      f0,
      parameters.timbre,
    a1a4:	vldr	s10, [r4, #8]
    a1a8:	vcvt.s32.f32	s15, s15
    a1ac:	add.w	r3, r3, r1, lsl #2
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    a1b0:	vldr	s14, [r3]
    a1b4:	vmov	r1, s15
    a1b8:	ldr	r3, [pc, #296]	; (a2e4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>)
    a1ba:	vnmul.f32	s14, s12, s14
    a1be:	add.w	r3, r3, r1, lsl #2
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    a1c2:	vldr	s15, [r3]
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    a1c6:	vfma.f32	s0, s14, s1
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    a1ca:	vmul.f32	s15, s15, s9
    a1ce:	vmul.f32	s9, s15, s2
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    a1d2:	bmi.w	ad56 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcea>
    a1d6:	vcmp.f32	s3, s11
    a1da:	vmrs	APSR_nzcv, fpscr
    a1de:	it	gt
    a1e0:	vmovgt.f32	s3, s11
    
    if (trigger) {
    a1e4:	cbz	r2, a200 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x194>
      pulse_remaining_samples_ = kTriggerPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    a1e6:	vmov.f32	s14, #28	; 0x40e00000  7.0
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    
    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    a1ea:	movs	r2, #48	; 0x30
      pulse_height_ = 3.0f + 7.0f * accent;
    a1ec:	vmov.f32	s15, #8	; 0x40400000  3.0
      noise_envelope_ = 2.0f;
    a1f0:	mov.w	r3, #1073741824	; 0x40000000
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    
    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    a1f4:	str	r2, [r0, #16]
      pulse_height_ = 3.0f + 7.0f * accent;
      noise_envelope_ = 2.0f;
    a1f6:	str	r3, [r0, #32]
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    
    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    a1f8:	vfma.f32	s15, s6, s14
    a1fc:	vstr	s15, [r0, #24]
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    a200:	vmov.f32	s14, #112	; 0x3f800000  1.0
    a204:	ldr	r4, [pc, #260]	; (a30c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a0>)
    
    for (int i = 0; i < kNumModes; ++i) {
      f[i] = std::min(f0 * kModeFrequencies[i], 0.499f);
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    a206:	vmov.f32	s1, #80	; 0x3e800000  0.250
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    a20a:	add	r1, sp, #24
    a20c:	mov	r3, r0
    a20e:	movs	r2, #0
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    a210:	vmov.f32	s12, s14
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    a214:	vldr	s2, [pc, #264]	; a320 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    a218:	vldr	s18, [pc, #264]	; a324 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
    a21c:	vldr	s17, [pc, #264]	; a328 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
    a220:	vldr	s16, [pc, #264]	; a32c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    
    float f[kNumModes];
    float gain[kNumModes];
    
    for (int i = 0; i < kNumModes; ++i) {
      f[i] = std::min(f0 * kModeFrequencies[i], 0.499f);
    a224:	vmul.f32	s14, s5, s14
    a228:	vldr	s13, [pc, #228]	; a310 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a4>
	return __b;
    a22c:	vldr	s11, [pc, #240]	; a320 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    a230:	vldr	s15, [pc, #224]	; a314 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
    a234:	vcmpe.f32	s14, s2
    a238:	vmrs	APSR_nzcv, fpscr
    a23c:	bgt.n	a25e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f2>
    a23e:	vmul.f32	s15, s14, s14
    a242:	vmov.f32	s13, s17
    a246:	vmov.f32	s4, s16
	return __b;
      return __a;
    a24a:	vmov.f32	s11, s14
    a24e:	vfma.f32	s13, s15, s18
    a252:	vfma.f32	s4, s15, s13
    a256:	vmul.f32	s13, s4, s14
    a25a:	vmul.f32	s15, s13, s13
    a25e:	vstmia	r1!, {s11}
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    a262:	cmp	r2, #0
    a264:	beq.w	ad84 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd18>
    a268:	vmul.f32	s14, s9, s1
    a26c:	vmov.f32	s4, s12
        5.62f};
    
    float f[kNumModes];
    float gain[kNumModes];
    
    for (int i = 0; i < kNumModes; ++i) {
    a270:	adds	r2, #1

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    a272:	vstr	s13, [r3, #40]	; 0x28
    a276:	adds	r3, #20
    a278:	cmp	r2, #5
    r_ = 1.0f / resonance;
    a27a:	vfma.f32	s4, s11, s14
    a27e:	vmov.f32	s14, s4
    a282:	vmov.f32	s4, #112	; 0x3f800000  1.0
    a286:	vdiv.f32	s11, s12, s14
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    a28a:	vmov.f32	s14, s12
    a28e:	vfma.f32	s14, s11, s13
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    a292:	vstr	s11, [r3, #24]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    a296:	vadd.f32	s15, s14, s15
    a29a:	vdiv.f32	s14, s12, s15
    a29e:	vstr	s14, [r3, #28]
    a2a2:	beq.n	a330 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>
    a2a4:	adds	r4, #4
    a2a6:	vldr	s14, [r4]
    a2aa:	b.n	a224 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    a2ac:	vldr	s14, [pc, #48]	; a2e0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x274>
    a2b0:	vadd.f32	s15, s15, s14
    a2b4:	vcvt.s32.f32	s14, s15
    a2b8:	vmov	r2, s14
    a2bc:	vcvt.f32.s32	s14, s14
    a2c0:	vsub.f32	s15, s15, s14
    a2c4:	vmov.f32	s14, s15
    a2c8:	vcvt.s32.f32	s14, s14, #8
    a2cc:	vmov	r3, s14
    a2d0:	b.n	a0ac <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
    a2d2:	nop
    a2d4:	.word	0xc3000000
    a2d8:	.word	0x42fe0000
    a2dc:	.word	0x42480000
    a2e0:	.word	0x43000000
    a2e4:	.word	0x20000428
    a2e8:	.word	0x42a80000
    a2ec:	.word	0x20000024
    a2f0:	.word	0xbd4ccccd
    a2f4:	.word	0x3f8ccccd
    a2f8:	.word	0x3dcccccd
    a2fc:	.word	0x43800000
    a300:	.word	0x3aded289
    a304:	.word	0x44fa0000
    a308:	.word	0x39969651
    a30c:	.word	0x2001f4fc
    a310:	.word	0x40919638
    a314:	.word	0x41a59707
    a318:	.word	0x3f2aaab0
    a31c:	.word	0x3e19999a
    a320:	.word	0x3eff7cee
    a324:	.word	0x425f2649
    a328:	.word	0x4121ba8f
    a32c:	.word	0x40490fdb
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    }
    
    if (tone < 0.666667f) {
    a330:	vldr	s15, [pc, #-28]	; a318 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    a334:	vcmpe.f32	s10, s15
    a338:	vmrs	APSR_nzcv, fpscr
    a33c:	bpl.w	acd8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc6c>
      // 808-style (2 modes)
      tone *= 1.5f;
    a340:	vmov.f32	s15, #120	; 0x3fc00000  1.5
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
    a344:	vldr	s14, [pc, #-44]	; a31c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    a348:	vmov.f32	s13, #18	; 0x40900000  4.5
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    a34c:	movs	r3, #0
      gain[1] = 2.0f * tone + 0.15f;
    a34e:	vmov.f32	s12, #0	; 0x40000000  2.0
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
    a352:	vmul.f32	s10, s10, s15
    a356:	str	r3, [sp, #52]	; 0x34
    a358:	str	r3, [sp, #56]	; 0x38
    a35a:	str	r3, [sp, #60]	; 0x3c
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    a35c:	vsub.f32	s4, s4, s10
      gain[1] = 2.0f * tone + 0.15f;
    a360:	vfma.f32	s14, s10, s12
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    a364:	vmul.f32	s4, s4, s4
    a368:	vfma.f32	s15, s4, s13
      gain[1] = 2.0f * tone + 0.15f;
    a36c:	vstr	s14, [sp, #48]	; 0x30
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    a370:	vstr	s15, [sp, #44]	; 0x2c
        gain[i] = tone;
        tone *= tone;
      }
    }

    float f_noise = f0 * 16.0f;
    a374:	vmov.f32	s15, #48	; 0x41800000  16.0
    a378:	vmul.f32	s15, s5, s15
    CONSTRAIN(f_noise, 0.0f, 0.499f);
    a37c:	vcmpe.f32	s15, #0.0
    a380:	vmrs	APSR_nzcv, fpscr
    a384:	bmi.w	ad46 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcda>
    a388:	vldr	s14, [pc, #-108]	; a320 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    a38c:	vcmpe.f32	s15, s14
    a390:	vmrs	APSR_nzcv, fpscr
    a394:	bgt.w	ad28 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcbc>
    a398:	vmov.f32	s12, #112	; 0x3f800000  1.0
    a39c:	vldr	s13, [pc, #-124]	; a324 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
    a3a0:	vmov.f32	s9, #120	; 0x3fc00000  1.5
    a3a4:	vldr	s11, [pc, #-128]	; a328 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
    a3a8:	vmul.f32	s10, s15, s15
    a3ac:	vldr	s14, [pc, #-132]	; a32c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    a3b0:	vmov.f32	s4, s12
    a3b4:	vfma.f32	s11, s10, s13
    a3b8:	vfma.f32	s4, s15, s9
    a3bc:	vfma.f32	s14, s10, s11
    a3c0:	vdiv.f32	s13, s12, s4
    a3c4:	vmul.f32	s15, s14, s15
    a3c8:	vmov.f32	s11, s12
    a3cc:	vfma.f32	s11, s15, s13
    a3d0:	vfma.f32	s11, s15, s15
    a3d4:	vdiv.f32	s14, s12, s11
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    a3d8:	vldr	s9, [r0, #36]	; 0x24

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    a3dc:	vstr	s15, [r0, #140]	; 0x8c
    increment_ = (new_value - *state) / static_cast<float>(size);
    a3e0:	vldr	s12, [sp, #168]	; 0xa8
    r_ = 1.0f / resonance;
    a3e4:	vstr	s13, [r0, #144]	; 0x90
    a3e8:	vmov.f32	s15, s9
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    a3ec:	vmov	r3, s12
    a3f0:	vcvt.f32.u32	s20, s12
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    a3f4:	vstr	s14, [r0, #148]	; 0x94
    a3f8:	add.w	r8, r3, #4294967295
    a3fc:	vfnms.f32	s15, s6, s7
    a400:	vdiv.f32	s16, s15, s20
    a404:	cmp	r3, #0
    a406:	beq.w	a608 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x59c>
    a40a:	ldr	r3, [pc, #976]	; (a7dc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x770>)
    a40c:	mov	r9, r8
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    a40e:	vldr	s19, [pc, #976]	; a7e0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x774>
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
      if (noise < 0.0f) noise = 0.0f;
    a412:	mov	fp, r5
    a414:	ldr.w	lr, [r3]
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
    a418:	vldr	s10, [pc, #968]	; a7e4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x778>
    a41c:	vmov.f32	s1, #112	; 0x3f800000  1.0
    a420:	vldr	s21, [pc, #964]	; a7e8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    a424:	vldr	s2, [pc, #964]	; a7ec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x780>
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    a428:	vldr	s18, [pc, #964]	; a7f0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x784>
    a42c:	vsub.f32	s1, s1, s3
      if (noise < 0.0f) noise = 0.0f;
    a430:	vldr	s17, [pc, #960]	; a7f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    a434:	str	r3, [sp, #4]
    a436:	str.w	r8, [sp, #20]
        size);
    
    while (size--) {
      // Q45 / Q46
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
    a43a:	ldr	r3, [r0, #16]
    a43c:	cmp	r3, #0
    a43e:	beq.w	ac36 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbca>
        --pulse_remaining_samples_;
    a442:	subs	r3, #1
    a444:	str	r3, [r0, #16]
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    a446:	cmp	r3, #0
    a448:	beq.w	ac40 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd4>
    a44c:	vldr	s11, [r0, #24]
      }
      
      float sustain_gain_value = sustain_gain.Next();
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
    a450:	vldr	s15, [r0, #28]
    a454:	vmov.f32	s14, #104	; 0x3f400000  0.750
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a458:	ldr.w	ip, [pc, #988]	; a838 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7cc>
  }

  inline float Next() {
    value_ += increment_;
    a45c:	vadd.f32	s9, s9, s16
    a460:	vsub.f32	s13, s11, s15
    a464:	add	r5, sp, #44	; 0x2c
  }
  
  inline float Next(float frequency) {
    if (frequency >= 0.5f) {
    a466:	vmov.f32	s7, #96	; 0x3f000000  0.5
  float b = table[index_integral + 1];
    a46a:	add.w	sl, ip, #4
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    if (phase_ >= 1.0f) {
    a46e:	vmov.f32	s6, #112	; 0x3f800000  1.0
    a472:	add	r4, sp, #24
    a474:	vfma.f32	s15, s13, s14
    a478:	mov	r1, r0
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
    a47a:	vmov.f32	s4, #80	; 0x3e800000  0.250
      }
      
      float sustain_gain_value = sustain_gain.Next();
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
    a47e:	mov	r3, r0
      
      float shell = 0.0f;
    a480:	vldr	s13, [pc, #880]	; a7f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
      for (int i = 0; i < kNumModes; ++i) {
    a484:	movs	r2, #0
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    a486:	vstr	s11, [r0, #20]
      }
      
      float sustain_gain_value = sustain_gain.Next();
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
    a48a:	vstr	s15, [r0, #28]
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
    a48e:	cmp	r2, #0
    a490:	beq.w	ad74 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd08>
    a494:	vmul.f32	s25, s11, s10
        shell += gain[i] * (sustain
    a498:	vldmia	r5!, {s12}
    a49c:	cmp	r7, #0
    a49e:	bne.w	ab28 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xabc>
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    a4a2:	vmov.f32	s14, s25
    a4a6:	vldr	s22, [r3, #52]	; 0x34
    a4aa:	vldr	s15, [r3, #44]	; 0x2c
    a4ae:	vldr	s24, [r3, #40]	; 0x28
    a4b2:	vfms.f32	s14, s15, s22
    a4b6:	vldr	s23, [r3, #56]	; 0x38
    a4ba:	vmov.f32	s15, s14
    a4be:	vldr	s14, [r3, #48]	; 0x30
    a4c2:	vfms.f32	s15, s22, s24
    a4c6:	vsub.f32	s15, s15, s23
    a4ca:	vmul.f32	s15, s15, s14
    bp = g_ * hp + state_1_;
    a4ce:	vmov.f32	s14, s22
    a4d2:	vfma.f32	s14, s24, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    a4d6:	vfma.f32	s23, s24, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    a4da:	vmov.f32	s22, s14
    a4de:	vfma.f32	s22, s24, s15
    a4e2:	vmov.f32	s15, s14
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    a4e6:	vfma.f32	s23, s24, s14
    a4ea:	vfma.f32	s15, s8, s25
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    a4ee:	vstr	s22, [r3, #52]	; 0x34
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    a4f2:	vstr	s23, [r3, #56]	; 0x38
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
    a4f6:	adds	r2, #1
    a4f8:	adds	r3, #20
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
            ? oscillator_[i].Next(f[i]) * sustain_gain_value * 0.25f
            : resonator_[i].Process<stmlib::FILTER_MODE_BAND_PASS>(
                  excitation) + excitation * exciter_leak);
    a4fa:	vfma.f32	s13, s12, s15
    a4fe:	adds	r1, #12
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
    a500:	cmp	r2, #5
    a502:	add.w	r4, r4, #4
    a506:	bne.n	a48e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x422>
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    a508:	vmov.f32	s15, #136	; 0xc0400000 -3.0
    a50c:	vcmpe.f32	s13, s15
    a510:	vmrs	APSR_nzcv, fpscr
    a514:	bmi.w	abae <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb42>
    return -1.0f;
  } else if (x > 3.0f) {
    a518:	vmov.f32	s15, #8	; 0x40400000  3.0
    a51c:	vcmpe.f32	s13, s15
    a520:	vmrs	APSR_nzcv, fpscr
    a524:	bgt.w	ac68 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbfc>
inline float Crossfade(float a, float b, float fade) {
  return a + (b - a) * fade;
}

inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
    a528:	vmov.f32	s14, #59	; 0x41d80000  27.0
    a52c:	vmov.f32	s12, #34	; 0x41100000  9.0
    a530:	vmov.f32	s15, s14
    a534:	vmul.f32	s12, s13, s12
    a538:	vfma.f32	s15, s13, s13
    a53c:	vfma.f32	s14, s13, s12
    a540:	vmul.f32	s13, s15, s13
    a544:	vdiv.f32	s7, s13, s14
    a548:	ldr	r3, [pc, #684]	; (a7f8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x78c>)
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    a54a:	add.w	r9, r9, #4294967295
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
      if (noise < 0.0f) noise = 0.0f;
      noise_envelope_ *= noise_envelope_decay;
    a54e:	vldr	s13, [r0, #32]
    a552:	mul.w	r3, r3, lr
    a556:	ldr.w	lr, [pc, #740]	; a83c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d0>
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    a55a:	vldr	s12, [r0, #152]	; 0x98
    a55e:	add	lr, r3
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    a560:	vmov.f32	s23, #0	; 0x40000000  2.0
    a564:	vmov.f32	s11, #240	; 0xbf800000 -1.0
    a568:	vldr	s15, [r0, #144]	; 0x90
    a56c:	vmov	s14, lr
      if (noise < 0.0f) noise = 0.0f;
      noise_envelope_ *= noise_envelope_decay;
    a570:	vmul.f32	s13, s0, s13
    a574:	vnmul.f32	s15, s15, s12
    a578:	vldr	s4, [r0, #140]	; 0x8c
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    a57c:	vcvt.f32.u32	s22, s14
    a580:	vldr	s6, [r0, #156]	; 0x9c
      if (noise < 0.0f) noise = 0.0f;
      noise_envelope_ *= noise_envelope_decay;
    a584:	vstr	s13, [r0, #32]
    a588:	vldr	s14, [r0, #148]	; 0x94
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    a58c:	vmul.f32	s22, s22, s18
    a590:	vfma.f32	s11, s22, s23
      if (noise < 0.0f) noise = 0.0f;
    a594:	vcmp.f32	s11, #0.0
    a598:	vmrs	APSR_nzcv, fpscr
    a59c:	it	mi
    a59e:	vmovmi.f32	s11, s17
    a5a2:	cmp	r7, #0
    a5a4:	it	ne
    a5a6:	vmovne.f32	s13, s9
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    a5aa:	cmp.w	r9, #4294967295
    a5ae:	vmul.f32	s13, s3, s13
    a5b2:	vadd.f32	s13, s13, s13
    a5b6:	vfma.f32	s15, s13, s11
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    a5ba:	vmov.f32	s13, s6
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    a5be:	vfms.f32	s15, s12, s4
    a5c2:	vsub.f32	s15, s15, s6
    a5c6:	vmul.f32	s15, s15, s14
    bp = g_ * hp + state_1_;
    a5ca:	vmov.f32	s14, s12
    a5ce:	vfma.f32	s14, s4, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    a5d2:	vfma.f32	s13, s4, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    a5d6:	vmov.f32	s11, s14

      // C66 / R201 / C67 / R202 / R203 / Q49
      noise = noise_filter_.Process<stmlib::FILTER_MODE_BAND_PASS>(noise);
      
      // IC13
      *out++ = noise + shell * (1.0f - snappy);
    a5da:	vmov.f32	s12, s14
    a5de:	vfma.f32	s11, s4, s15
    a5e2:	vfma.f32	s12, s7, s1
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    a5e6:	vmov.f32	s15, s13
    a5ea:	vfma.f32	s15, s4, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    a5ee:	vstr	s11, [r0, #152]	; 0x98
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    a5f2:	vstr	s15, [r0, #156]	; 0x9c
    a5f6:	vstmia	fp!, {s12}
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    a5fa:	bne.w	a43a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ce>
    a5fe:	ldr	r3, [sp, #4]
    a600:	ldr.w	r8, [sp, #20]
    a604:	str.w	lr, [r3]
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    a608:	ldr	r2, [sp, #8]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a60a:	vmov.f32	s8, #112	; 0x3f800000  1.0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    a60e:	vstr	s9, [r0, #36]	; 0x24
    a612:	vmov.f32	s14, #40	; 0x41400000  12.0
    a616:	vldr	s12, [r2, #12]
    a61a:	vmov.f32	s4, #28	; 0x40e00000  7.0
    a61e:	vmov.f32	s10, s8
  synthetic_snare_drum_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
    a622:	vldr	s2, [r2, #8]
    a626:	vsub.f32	s15, s12, s8
    a62a:	vldr	s13, [pc, #464]	; a7fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x790>
      float decay,
      float snappy,
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    a62e:	vmul.f32	s2, s2, s2
    a632:	vldr	s1, [pc, #460]	; a800 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x794>
    a636:	vnmul.f32	s13, s12, s13
      parameters.morph,
      parameters.harmonics,
    a63a:	vldr	s9, [r2, #16]
    a63e:	vfma.f32	s10, s12, s15
    a642:	vldr	s15, [pc, #448]	; a804 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x798>
    a646:	vnmul.f32	s14, s14, s2
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    a64a:	vldr	s11, [pc, #444]	; a808 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x79c>
    a64e:	vfms.f32	s13, s9, s4
    a652:	vldr	s0, [pc, #440]	; a80c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a0>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a656:	vldr	s7, [pc, #440]	; a810 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a4>
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    a65a:	vmov.f32	s22, s8
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    a65e:	vfma.f32	s0, s9, s11

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a662:	ldr	r3, [pc, #432]	; (a814 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a8>)
      size);
  
  synthetic_snare_drum_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    a664:	vldr	s11, [r2, #20]
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    a668:	vmov.f32	s21, s8

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a66c:	vnmul.f32	s10, s12, s10
    a670:	ldr	r4, [sp, #12]
    a672:	vldr	s6, [pc, #420]	; a818 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ac>
    a676:	vadd.f32	s13, s13, s15
    a67a:	and.w	r1, r4, #2
    a67e:	vfma.f32	s14, s10, s1
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    a682:	vldr	s3, [pc, #408]	; a81c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b0>
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    a686:	vcmpe.f32	s0, #0.0
    a68a:	uxtb	r1, r1
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    a68c:	vcvt.s32.f32	s10, s13
    a690:	and.w	r4, r4, #1
    a694:	vmrs	APSR_nzcv, fpscr

  return lut_pitch_ratio_high[pitch_integral] * \
    a698:	vmov	r2, s10

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a69c:	vfma.f32	s14, s9, s4
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a6a0:	vcvt.f32.s32	s9, s10

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a6a4:	add.w	r3, r3, r2, lsl #2
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    a6a8:	vldr	s10, [r3]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a6ac:	vsub.f32	s13, s13, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a6b0:	ldr	r3, [pc, #352]	; (a814 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a8>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a6b2:	vadd.f32	s15, s14, s15
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a6b6:	vmul.f32	s13, s13, s7
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    a6ba:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a6be:	vcvt.s32.f32	s13, s13
    a6c2:	vcvt.f32.s32	s9, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a6c6:	vmov	r2, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a6ca:	vmov	r5, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a6ce:	add.w	r2, r3, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a6d2:	ldr	r3, [pc, #332]	; (a820 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b4>)
    a6d4:	vsub.f32	s15, s15, s9
    a6d8:	add.w	r3, r3, r5, lsl #2
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    a6dc:	vldr	s14, [r2]
    a6e0:	vmul.f32	s15, s15, s7
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    a6e4:	vldr	s13, [r3]
    a6e8:	ldr	r3, [pc, #308]	; (a820 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b4>)
    a6ea:	vnmul.f32	s13, s10, s13
    a6ee:	vcvt.s32.f32	s15, s15
    a6f2:	vfma.f32	s22, s13, s3
    a6f6:	vmov	r2, s15
    a6fa:	add.w	r3, r3, r2, lsl #2
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    a6fe:	vldr	s15, [r3]
    a702:	vnmul.f32	s15, s14, s15
    a706:	vfma.f32	s21, s15, s6
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    a70a:	bmi.w	ad38 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
    a70e:	vcmpe.f32	s0, s8
    a712:	vmrs	APSR_nzcv, fpscr
    a716:	ble.w	ad5e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcf2>
    a71a:	vmov.f32	s0, s8
    a71e:	vldr	s6, [pc, #260]	; a824 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b8>
    a722:	vldr	s16, [pc, #208]	; a7f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    
    const float drum_level = stmlib::Sqrt(1.0f - snappy);
    const float snare_level = stmlib::Sqrt(snappy);
    
    const float snare_f_min = std::min(10.0f * f0, 0.5f);
    a726:	vmov.f32	s15, #36	; 0x41200000  10.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    a72a:	vmov.f32	s14, #96	; 0x3f000000  0.5
    return sqrtf(x);
  }
#else
  inline float Sqrt(float x) {
    float result;
    __asm ("vsqrt.f32 %0, %1" : "=w" (result) : "w" (x) );
    a72e:	vsqrt.f32	s16, s16
    a732:	vmul.f32	s15, s5, s15
    a736:	vsqrt.f32	s0, s0
    a73a:	vcmpe.f32	s15, s14
    a73e:	vmrs	APSR_nzcv, fpscr
    a742:	bgt.w	ac78 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc0c>
    a746:	vmul.f32	s9, s15, s15
    a74a:	vldr	s8, [pc, #220]	; a828 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>
    a74e:	vldr	s14, [pc, #220]	; a82c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
    a752:	vmov.f32	s13, #112	; 0x3f800000  1.0
    a756:	vldr	s10, [pc, #216]	; a830 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    a75a:	vfma.f32	s14, s9, s8
    a75e:	vfma.f32	s10, s9, s14
    a762:	vmul.f32	s10, s10, s15
    a766:	vadd.f32	s15, s10, s13
    a76a:	vdiv.f32	s7, s13, s15
    const float snare_f_max = std::min(35.0f * f0, 0.5f);
    a76e:	vldr	s13, [pc, #196]	; a834 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c8>
    a772:	vmov.f32	s15, #96	; 0x3f000000  0.5
    a776:	vmul.f32	s14, s5, s13
    a77a:	vcmpe.f32	s14, s15
    a77e:	vmrs	APSR_nzcv, fpscr
    a782:	bgt.w	ac6e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc02>
    a786:	vmul.f32	s9, s14, s14
    a78a:	vldr	s8, [pc, #156]	; a828 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>
    a78e:	vldr	s15, [pc, #156]	; a82c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
    a792:	vldr	s13, [pc, #156]	; a830 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    a796:	vfma.f32	s15, s9, s8
    a79a:	vfma.f32	s13, s9, s15
    a79e:	vmul.f32	s13, s13, s14
    a7a2:	vmul.f32	s4, s13, s13
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    a7a6:	vmov.f32	s8, #112	; 0x3f800000  1.0
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    a7aa:	vstr	s10, [r0, #260]	; 0x104

    snare_hp_.set_f<stmlib::FREQUENCY_FAST>(snare_f_min);
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    a7ae:	vmov.f32	s15, #8	; 0x40400000  3.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    a7b2:	vldr	s10, [pc, #120]	; a82c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    a7b6:	vstr	s7, [r0, #264]	; 0x108
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    a7ba:	vmov.f32	s9, s8

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    a7be:	vstr	s13, [r0, #272]	; 0x110
    a7c2:	vmul.f32	s14, s5, s15
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    a7c6:	vldr	s3, [pc, #96]	; a828 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>
    a7ca:	vldr	s15, [pc, #100]	; a830 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    a7ce:	vfma.f32	s9, s6, s13
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    a7d2:	vstr	s6, [r0, #276]	; 0x114
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    a7d6:	vmul.f32	s7, s14, s14
    a7da:	b.n	a854 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e8>
    a7dc:	.word	0x2001f96c
    a7e0:	.word	0x3f4aaaab
    a7e4:	.word	0x3cd4fdf4
    a7e8:	.word	0x3bc49ba6
    a7ec:	.word	0x44800000
    a7f0:	.word	0x2f800000
    a7f4:	.word	0x00000000
    a7f8:	.word	0x0019660d
    a7fc:	.word	0x42700000
    a800:	.word	0x42900000
    a804:	.word	0x43000000
    a808:	.word	0x3f8ccccd
    a80c:	.word	0xbd4ccccd
    a810:	.word	0x43800000
    a814:	.word	0x20000024
    a818:	.word	0x3ab60b61
    a81c:	.word	0x3b088889
    a820:	.word	0x20000428
    a824:	.word	0x3ecccccd
    a828:	.word	0x425f2649
    a82c:	.word	0x4121ba8f
    a830:	.word	0x40490fdb
    a834:	.word	0x420c0000
    a838:	.word	0x200025e0
    a83c:	.word	0x3c6ef35f
    a840:	.word	0x3cf5c28f
    a844:	.word	0x3d23d70a
    a848:	.word	0x473b8000
    a84c:	.word	0x3f333333
    a850:	.word	0x3e99999a
      return f * (M_PI_F + f2 * (a + b * f2));
    a854:	vmov.f32	s13, s10
    a858:	vfma.f32	s13, s7, s3
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    a85c:	vadd.f32	s10, s9, s4
    a860:	vdiv.f32	s9, s8, s10
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    a864:	vfma.f32	s15, s7, s13
    a868:	vmul.f32	s15, s15, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    a86c:	vadd.f32	s14, s15, s8
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    a870:	vstr	s15, [r0, #248]	; 0xf8
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    a874:	vstr	s9, [r0, #280]	; 0x118
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    a878:	vdiv.f32	s15, s8, s14
    a87c:	vstr	s15, [r0, #252]	; 0xfc
    
    if (trigger) {
    a880:	cbz	r4, a8c0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x854>
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    a882:	vldr	s14, [pc, #-68]	; a840 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d4>
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
    a886:	movs	r3, #0
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    a888:	vldr	s15, [pc, #-72]	; a844 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d8>
    a88c:	vldr	s13, [pc, #-72]	; a848 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7dc>
    a890:	vfma.f32	s15, s12, s14
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
    a894:	vldr	s10, [pc, #-76]	; a84c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e0>
    a898:	vldr	s14, [pc, #-76]	; a850 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e4>
      fm_ = 1.0f;
    a89c:	vstr	s8, [r0, #236]	; 0xec
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
    a8a0:	vfma.f32	s14, s11, s10
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
    a8a4:	str.w	r3, [r0, #224]	; 0xe0
    a8a8:	str.w	r3, [r0, #220]	; 0xdc
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    a8ac:	vmul.f32	s15, s15, s13
    a8b0:	vcvt.s32.f32	s15, s15
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
    a8b4:	vstr	s14, [r0, #228]	; 0xe4
    a8b8:	vstr	s14, [r0, #232]	; 0xe8
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    a8bc:	vstr	s15, [r0, #244]	; 0xf4
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    a8c0:	vldr	s4, [r0, #240]	; 0xf0
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    a8c4:	ldr	r3, [sp, #168]	; 0xa8
    increment_ = (new_value - *state) / static_cast<float>(size);
    a8c6:	vmov.f32	s15, s4
    a8ca:	vfnms.f32	s15, s11, s12
    a8ce:	vdiv.f32	s18, s15, s20
    a8d2:	cmp	r3, #0
    a8d4:	beq.w	ab1a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaae>
    a8d8:	ldr	r3, [pc, #936]	; (ac84 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc18>)
      if (sustain) {
        snare_amplitude_ = sustain_gain.Next();
        drum_amplitude_ = snare_amplitude_;
        fm_ = 0.0f;
    a8da:	movs	r4, #0
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    a8dc:	vldr	s20, [pc, #936]	; ac88 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc1c>
    a8e0:	str	r3, [sp, #4]
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
        }
        fm_ *= fm_decay;
    a8e2:	vldr	s19, [pc, #936]	; ac8c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc20>
    a8e6:	vmov.f32	s15, #64	; 0x3e000000  0.125
    a8ea:	ldr	r3, [r3, #0]
    a8ec:	vmov.f32	s3, #32	; 0x41000000  8.0
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
    a8f0:	vldr	s17, [pc, #924]	; ac90 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc24>
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    a8f4:	vmov.f32	s8, #112	; 0x3f800000  1.0
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    a8f8:	vldr	s1, [pc, #920]	; ac94 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc28>
    a8fc:	vsub.f32	s15, s15, s5
    a900:	ldr	r5, [sp, #16]
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    a902:	vmov.f32	s7, #96	; 0x3f000000  0.5
    a906:	vmul.f32	s3, s15, s3
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
      if (sustain) {
    a90a:	cmp	r1, #0
    a90c:	beq.w	abdc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb70>
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    a910:	vcmpe.f32	s3, #0.0
        size);
    while (size--) {
      if (sustain) {
        snare_amplitude_ = sustain_gain.Next();
        drum_amplitude_ = snare_amplitude_;
        fm_ = 0.0f;
    a914:	vldr	s15, [pc, #956]	; acd4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
  }

  inline float Next() {
    value_ += increment_;
    a918:	vadd.f32	s4, s4, s18
    a91c:	str.w	r4, [r0, #236]	; 0xec
    a920:	vmov.f32	s9, s15
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    a924:	vmrs	APSR_nzcv, fpscr
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
      if (sustain) {
        snare_amplitude_ = sustain_gain.Next();
    a928:	vstr	s4, [r0, #232]	; 0xe8
    a92c:	vmov.f32	s31, s4
        drum_amplitude_ = snare_amplitude_;
    a930:	vstr	s4, [r0, #228]	; 0xe4
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    a934:	bmi.w	ac30 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbc4>
    a938:	vcmpe.f32	s3, s8
    a93c:	vmrs	APSR_nzcv, fpscr
    a940:	ble.w	ac62 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf6>
    a944:	vmov.f32	s10, #112	; 0x3f800000  1.0
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
    a948:	vmov.f32	s14, s8
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    a94c:	vldr	s13, [r0, #224]	; 0xe0
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    a950:	vmov.f32	s12, #240	; 0xbf800000 -1.0
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
    a954:	vmul.f32	s10, s2, s10
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
    a958:	vfma.f32	s14, s2, s15
    a95c:	vmov.f32	s15, s14
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    a960:	vldr	s14, [r0, #220]	; 0xdc
    a964:	vcmpe.f32	s14, s7
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
    a968:	vmul.f32	s15, s15, s5
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    a96c:	vmrs	APSR_nzcv, fpscr
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    a970:	vcmpe.f32	s13, s7
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
    a974:	vfma.f32	s13, s15, s17
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    a978:	ite	le
    a97a:	vmovle.f32	s11, s8
    a97e:	vmovgt.f32	s11, s12
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    a982:	vmrs	APSR_nzcv, fpscr
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    a986:	vcmpe.f32	s10, s1
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
    a98a:	vadd.f32	s15, s14, s15
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    a98e:	it	le
    a990:	vmovle.f32	s12, s8
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    a994:	vmrs	APSR_nzcv, fpscr
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
    a998:	vstr	s13, [r0, #224]	; 0xe0
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
    a99c:	vstr	s15, [r0, #220]	; 0xdc
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    a9a0:	ble.w	abb4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb48>
        if (phase_[0] >= 1.0f + reset_noise) {
    a9a4:	vldr	s14, [pc, #752]	; ac98 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc2c>
    a9a8:	vadd.f32	s12, s12, s11
    a9ac:	vmul.f32	s10, s10, s14
    a9b0:	vmov.f32	s14, s8
    a9b4:	vfma.f32	s14, s12, s10
    a9b8:	vcmpe.f32	s15, s14
    a9bc:	vmrs	APSR_nzcv, fpscr
    a9c0:	blt.n	a9ca <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95e>
          phase_[0] = 1.0f - phase_[0];
    a9c2:	vsub.f32	s15, s8, s15
    a9c6:	vstr	s15, [r0, #220]	; 0xdc
        }
        if (phase_[1] >= 1.0f + reset_noise) {
    a9ca:	vcmpe.f32	s13, s14
    a9ce:	vmrs	APSR_nzcv, fpscr
    a9d2:	blt.n	a9dc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
          phase_[1] = 1.0f - phase_[1];
    a9d4:	vsub.f32	s13, s8, s13
    a9d8:	vstr	s13, [r0, #224]	; 0xe0
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    a9dc:	vldr	s14, [r0, #220]	; 0xdc
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    a9e0:	vcmpe.f32	s14, s7
    a9e4:	vmrs	APSR_nzcv, fpscr
    a9e8:	bpl.w	ab9c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb30>
    a9ec:	vmov.f32	s12, #16	; 0x40800000  4.0
    a9f0:	vldr	s15, [pc, #680]	; ac9c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    a9f4:	vfma.f32	s15, s14, s12
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    a9f8:	vabs.f32	s12, s15
    a9fc:	vldr	s11, [pc, #672]	; aca0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc34>
    aa00:	vadd.f32	s15, s15, s15
    aa04:	vldr	s14, [pc, #668]	; aca4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc38>
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    aa08:	vcmpe.f32	s13, s7
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    aa0c:	vadd.f32	s12, s12, s8
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    aa10:	vmrs	APSR_nzcv, fpscr
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    aa14:	vdiv.f32	s10, s15, s12
    aa18:	vfma.f32	s14, s10, s11
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    aa1c:	bpl.w	ab8a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb1e>
    aa20:	vmov.f32	s12, #16	; 0x40800000  4.0
    aa24:	vldr	s15, [pc, #628]	; ac9c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    aa28:	vfma.f32	s15, s13, s12
    aa2c:	ldr	r2, [pc, #632]	; (aca8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc3c>)
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
    aa2e:	vabs.f32	s13, s15
    aa32:	vadd.f32	s15, s15, s15
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    aa36:	vldr	s25, [r0, #284]	; 0x11c
    aa3a:	mul.w	r2, r2, r3
    aa3e:	ldr	r3, [pc, #620]	; (acac <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc40>)
    aa40:	vadd.f32	s13, s13, s8
    aa44:	vldr	s24, [r0, #276]	; 0x114
    aa48:	add	r3, r2
    aa4a:	vldr	s6, [pc, #612]	; acb0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc44>
    aa4e:	vnmul.f32	s24, s24, s25
    aa52:	vldr	s26, [r0, #272]	; 0x110
    aa56:	vmov	s12, r3
    aa5a:	vdiv.f32	s30, s15, s13
    aa5e:	vldr	s10, [r0, #288]	; 0x120
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    aa62:	add.w	r8, r8, #4294967295
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
      drum *= drum_amplitude_ * drum_level;
    aa66:	vldr	s13, [r0, #228]	; 0xe4
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    aa6a:	vldr	s15, [r0, #248]	; 0xf8
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    aa6e:	cmp.w	r8, #4294967295
    aa72:	vldr	s11, [r0, #260]	; 0x104
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    aa76:	vcvt.f32.u32	s28, s12
    aa7a:	vldr	s12, [r0, #280]	; 0x118
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
    aa7e:	vmov.f32	s29, #80	; 0x3e800000  0.250
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    aa82:	vldr	s27, [r0, #268]	; 0x10c
      drum *= drum_amplitude_ * drum_level;
    aa86:	vmul.f32	s13, s16, s13
    aa8a:	vldr	s23, [r0, #264]	; 0x108
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    aa8e:	vfma.f32	s24, s28, s6
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    aa92:	vldr	s28, [r0, #256]	; 0x100
    aa96:	vldr	s6, [r0, #252]	; 0xfc
      float noise = stmlib::Random::GetFloat();
      float snare = snare_lp_.Process<stmlib::FILTER_MODE_LOW_PASS>(noise);
      snare = snare_hp_.Process<stmlib::FILTER_MODE_HIGH_PASS>(snare);
      snare = (snare + 0.1f) * (snare_amplitude_ + fm_) * snare_level;
      
      *out++ = snare + drum;  // It's a snare, it's a drum, it's a snare drum.
    aa9a:	vadd.f32	s9, s9, s31
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    aa9e:	vfms.f32	s24, s25, s26
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
    aaa2:	vfma.f32	s14, s30, s29
    aaa6:	vsub.f32	s24, s24, s10
      drum *= drum_amplitude_ * drum_level;
    aaaa:	vmul.f32	s14, s13, s14
    aaae:	vmul.f32	s12, s24, s12
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    aab2:	vmov.f32	s13, s10
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    aab6:	vfma.f32	s28, s14, s15
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    aaba:	vfma.f32	s25, s26, s12
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    aabe:	vfms.f32	s14, s28, s6
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    aac2:	vfma.f32	s13, s26, s25
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    aac6:	vmov.f32	s10, s25
    aaca:	vfma.f32	s10, s26, s12
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    aace:	vmul.f32	s15, s14, s15
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    aad2:	vfma.f32	s27, s13, s11
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    aad6:	vmov.f32	s12, s13
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    aada:	vfma.f32	s15, s28, s6
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    aade:	vfma.f32	s12, s26, s25
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    aae2:	vstr	s10, [r0, #284]	; 0x11c
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    aae6:	vfms.f32	s13, s27, s23
    aaea:	vstr	s15, [r0, #256]	; 0x100
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    aaee:	vstr	s12, [r0, #288]	; 0x120
      float noise = stmlib::Random::GetFloat();
      float snare = snare_lp_.Process<stmlib::FILTER_MODE_LOW_PASS>(noise);
      snare = snare_hp_.Process<stmlib::FILTER_MODE_HIGH_PASS>(snare);
      snare = (snare + 0.1f) * (snare_amplitude_ + fm_) * snare_level;
      
      *out++ = snare + drum;  // It's a snare, it's a drum, it's a snare drum.
    aaf2:	vadd.f32	s15, s13, s1
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    aaf6:	vmul.f32	s13, s11, s13
    aafa:	vmul.f32	s9, s9, s15
    aafe:	vfma.f32	s13, s27, s23
    ab02:	vmul.f32	s9, s9, s0
    ab06:	vfma.f32	s9, s28, s6
    ab0a:	vstr	s13, [r0, #268]	; 0x10c
    ab0e:	vstmia	r5!, {s9}
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    ab12:	bne.w	a90a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x89e>
    ab16:	ldr	r2, [sp, #4]
    ab18:	str	r3, [r2, #0]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    ab1a:	vstr	s4, [r0, #240]	; 0xf0
      parameters.timbre,
      parameters.morph,
      parameters.harmonics,
      aux,
      size);
}
    ab1e:	add	sp, #68	; 0x44
    ab20:	vpop	{d8-d15}
    ab24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
            ? oscillator_[i].Next(f[i]) * sustain_gain_value * 0.25f
    ab28:	vldr	s15, [r4]
  inline float Next(float frequency) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    ab2c:	vldr	s14, [r1, #160]	; 0xa0
    amplitude_ = 0.0f;
  }
  
  inline float Next(float frequency) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    ab30:	vcmp.f32	s15, s7
    ab34:	vmrs	APSR_nzcv, fpscr
    ab38:	it	ge
    ab3a:	vmovge.f32	s15, s7
    }
    
    phase_ += frequency;
    ab3e:	vadd.f32	s15, s15, s14
    if (phase_ >= 1.0f) {
    ab42:	vcmpe.f32	s15, s6
    ab46:	vmrs	APSR_nzcv, fpscr
      phase_ -= 1.0f;
    ab4a:	it	ge
    ab4c:	vsubge.f32	s15, s15, s6
    ab50:	vstr	s15, [r1, #160]	; 0xa0
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    ab54:	vmul.f32	s15, s15, s2
  MAKE_INTEGRAL_FRACTIONAL(index)
    ab58:	vcvt.s32.f32	s14, s15
  float a = table[index_integral];
    ab5c:	vmov	r6, s14
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
    ab60:	vcvt.f32.s32	s14, s14
    ab64:	lsls	r6, r6, #2
    ab66:	vsub.f32	s15, s15, s14
    ab6a:	add.w	r8, r6, ip
  float b = table[index_integral + 1];
    ab6e:	add	r6, sl
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    ab70:	vldr	s14, [r8]
    ab74:	vldr	s22, [r6]
    ab78:	vsub.f32	s22, s22, s14
    ab7c:	vfma.f32	s14, s15, s22
    ab80:	vmul.f32	s15, s14, s9
    ab84:	vmul.f32	s15, s15, s4
    ab88:	b.n	a4f6 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48a>
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    ab8a:	vsub.f32	s13, s8, s13
    ab8e:	vldr	s15, [pc, #268]	; ac9c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    ab92:	vmov.f32	s12, #16	; 0x40800000  4.0
    ab96:	vfma.f32	s15, s13, s12
    ab9a:	b.n	aa2c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9c0>
    ab9c:	vsub.f32	s14, s8, s14
    aba0:	vldr	s15, [pc, #248]	; ac9c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    aba4:	vmov.f32	s12, #16	; 0x40800000  4.0
    aba8:	vfma.f32	s15, s14, s12
    abac:	b.n	a9f8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x98c>
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    return -1.0f;
    abae:	vmov.f32	s7, #240	; 0xbf800000 -1.0
    abb2:	b.n	a548 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4dc>
        }
        if (phase_[1] >= 1.0f + reset_noise) {
          phase_[1] = 1.0f - phase_[1];
        }
      } else {
        if (phase_[0] >= 1.0f) {
    abb4:	vcmpe.f32	s15, s8
    abb8:	vmrs	APSR_nzcv, fpscr
    abbc:	blt.n	abc6 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb5a>
          phase_[0] -= 1.0f;
    abbe:	vsub.f32	s15, s15, s8
    abc2:	vstr	s15, [r0, #220]	; 0xdc
        }
        if (phase_[1] >= 1.0f) {
    abc6:	vcmpe.f32	s13, s8
    abca:	vmrs	APSR_nzcv, fpscr
    abce:	blt.w	a9dc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
          phase_[1] -= 1.0f;
    abd2:	vsub.f32	s13, s13, s8
    abd6:	vstr	s13, [r0, #224]	; 0xe0
    abda:	b.n	a9dc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
      } else {
        // Compute all D envelopes.
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
    abdc:	vldr	s15, [r0, #228]	; 0xe4
            ? drum_decay
            : 1.0f;
    abe0:	vcmpe.f32	s15, s20
    abe4:	vmrs	APSR_nzcv, fpscr
    abe8:	bgt.n	ac5c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf0>
    abea:	tst.w	r8, #1
    abee:	ite	ne
    abf0:	vmovne.f32	s14, s8
    abf4:	vmoveq.f32	s14, s21
    abf8:	vmul.f32	s15, s15, s14
        if (hold_counter_) {
    abfc:	ldr.w	r2, [r0, #244]	; 0xf4
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    ac00:	vstr	s15, [r0, #228]	; 0xe4
        if (hold_counter_) {
    ac04:	cbz	r2, ac4e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbe2>
          --hold_counter_;
    ac06:	subs	r2, #1
    ac08:	vldr	s31, [r0, #232]	; 0xe8
    ac0c:	str.w	r2, [r0, #244]	; 0xf4
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    ac10:	vcmpe.f32	s3, #0.0
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
        }
        fm_ *= fm_decay;
    ac14:	vldr	s9, [r0, #236]	; 0xec
    ac18:	vmov.f32	s15, #16	; 0x40800000  4.0
    ac1c:	vmul.f32	s9, s9, s19
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    ac20:	vmrs	APSR_nzcv, fpscr
    ac24:	vmul.f32	s15, s9, s15
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
        }
        fm_ *= fm_decay;
    ac28:	vstr	s9, [r0, #236]	; 0xec
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    ac2c:	bpl.w	a938 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8cc>
    ac30:	vldr	s10, [pc, #160]	; acd4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    ac34:	b.n	a948 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8dc>
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    ac36:	vldr	s11, [r0, #20]
    ac3a:	vmul.f32	s11, s11, s19
    ac3e:	b.n	a450 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    while (size--) {
      // Q45 / Q46
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    ac40:	vmov.f32	s15, #112	; 0x3f800000  1.0
    ac44:	vldr	s11, [r0, #24]
    ac48:	vsub.f32	s11, s11, s15
    ac4c:	b.n	a450 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
            ? drum_decay
            : 1.0f;
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
    ac4e:	vldr	s31, [r0, #232]	; 0xe8
    ac52:	vmul.f32	s31, s31, s22
    ac56:	vstr	s31, [r0, #232]	; 0xe8
    ac5a:	b.n	ac10 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xba4>
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    ac5c:	vmov.f32	s14, s21
    ac60:	b.n	abf8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8c>
    ac62:	vmul.f32	s10, s3, s3
    ac66:	b.n	a948 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8dc>
  } else if (x > 3.0f) {
    return 1.0f;
    ac68:	vmov.f32	s7, #112	; 0x3f800000  1.0
    ac6c:	b.n	a548 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4dc>
    ac6e:	vldr	s4, [pc, #68]	; acb4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc48>
    ac72:	vldr	s13, [pc, #68]	; acb8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4c>
    ac76:	b.n	a7a6 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73a>
    ac78:	vldr	s7, [pc, #64]	; acbc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc50>
    ac7c:	vldr	s10, [pc, #56]	; acb8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4c>
    ac80:	b.n	a76e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x702>
    ac82:	nop
    ac84:	.word	0x2001f96c
    ac88:	.word	0x3cf5c28f
    ac8c:	.word	0x3f7f3cf4
    ac90:	.word	0x3fbc28f6
    ac94:	.word	0x3dcccccd
    ac98:	.word	0x3ccccccd
    ac9c:	.word	0xbfa66666
    aca0:	.word	0x3f19999a
    aca4:	.word	0xbdcccccd
    aca8:	.word	0x0019660d
    acac:	.word	0x3c6ef35f
    acb0:	.word	0x2f800000
    acb4:	.word	0x41a7a3bf
    acb8:	.word	0x40927c2d
    acbc:	.word	0x3e3796f0
    acc0:	.word	0x3f333333
    acc4:	.word	0x4009999a
    acc8:	.word	0x3d288df7
    accc:	.word	0x3f126945
    acd0:	.word	0x40919638
    acd4:	.word	0x00000000
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
    acd8:	vsub.f32	s10, s10, s15
      gain[0] = 1.5f - tone * 0.5f;
      gain[1] = 2.15f - tone * 0.7f;
    acdc:	vldr	s11, [pc, #-32]	; acc0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc54>
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
    ace0:	vmov.f32	s15, #8	; 0x40400000  3.0
      gain[0] = 1.5f - tone * 0.5f;
      gain[1] = 2.15f - tone * 0.7f;
    ace4:	vldr	s14, [pc, #-36]	; acc4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc58>
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
      gain[0] = 1.5f - tone * 0.5f;
    ace8:	vmov.f32	s9, #96	; 0x3f000000  0.5
    acec:	vmov.f32	s13, #120	; 0x3fc00000  1.5
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
    acf0:	vmul.f32	s15, s10, s15
      gain[0] = 1.5f - tone * 0.5f;
    acf4:	vneg.f32	s12, s15
      gain[1] = 2.15f - tone * 0.7f;
      for (int i = 2; i < kNumModes; ++i) {
        gain[i] = tone;
    acf8:	vstr	s15, [sp, #52]	; 0x34
        tone *= tone;
    acfc:	vmul.f32	s15, s15, s15
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
      gain[0] = 1.5f - tone * 0.5f;
    ad00:	vfma.f32	s13, s12, s9
      gain[1] = 2.15f - tone * 0.7f;
    ad04:	vfma.f32	s14, s12, s11
      for (int i = 2; i < kNumModes; ++i) {
        gain[i] = tone;
    ad08:	vstr	s15, [sp, #56]	; 0x38
    ad0c:	vmul.f32	s15, s15, s15
    ad10:	vstr	s15, [sp, #60]	; 0x3c
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
      gain[0] = 1.5f - tone * 0.5f;
    ad14:	vstr	s13, [sp, #44]	; 0x2c
      gain[1] = 2.15f - tone * 0.7f;
    ad18:	vstr	s14, [sp, #48]	; 0x30
    ad1c:	b.w	a374 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    ad20:	movs	r3, #0
    ad22:	mov	r2, r3
    ad24:	b.w	a0ac <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
        tone *= tone;
      }
    }

    float f_noise = f0 * 16.0f;
    CONSTRAIN(f_noise, 0.0f, 0.499f);
    ad28:	vldr	s14, [pc, #-100]	; acc8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc5c>
    ad2c:	vldr	s13, [pc, #-100]	; accc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc60>
    ad30:	vldr	s15, [pc, #-100]	; acd0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc64>
    ad34:	b.w	a3d8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    ad38:	vmov.f32	s16, s8
    ad3c:	vldr	s0, [pc, #-108]	; acd4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    ad40:	vmov.f32	s6, #0	; 0x40000000  2.0
    ad44:	b.n	a726 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ba>
    ad46:	vmov.f32	s14, #112	; 0x3f800000  1.0
    ad4a:	vldr	s15, [pc, #-120]	; acd4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    ad4e:	vmov.f32	s13, s14
    ad52:	b.w	a3d8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    ad56:	vldr	s3, [pc, #-132]	; acd4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    ad5a:	b.w	a1e4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    ad5e:	vmov.f32	s14, #0	; 0x40000000  2.0
    ad62:	vmov.f32	s15, #96	; 0x3f000000  0.5
    ad66:	vsub.f32	s16, s8, s0
    ad6a:	vfma.f32	s15, s0, s14
    ad6e:	vdiv.f32	s6, s8, s15
    ad72:	b.n	a726 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ba>
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
    ad74:	vldr	s25, [r0, #28]
    ad78:	vsub.f32	s25, s11, s25
    ad7c:	vfma.f32	s25, s11, s21
    ad80:	b.w	a498 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42c>
    
    for (int i = 0; i < kNumModes; ++i) {
      f[i] = std::min(f0 * kModeFrequencies[i], 0.499f);
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    ad84:	vmov.f32	s14, s9
    ad88:	b.w	a26c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x200>

0000ad8c <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)>:

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ad8c:	ldr	r1, [pc, #128]	; (ae10 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x84>)
  ~AnalogBassDrum() { }

  void Init() {
    pulse_remaining_samples_ = 0;
    fm_pulse_remaining_samples_ = 0;
    pulse_ = 0.0f;
    ad8e:	movs	r3, #0
 public:
  AnalogBassDrum() { }
  ~AnalogBassDrum() { }

  void Init() {
    pulse_remaining_samples_ = 0;
    ad90:	movs	r2, #0
    ad92:	str	r1, [r0, #56]	; 0x38
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ad94:	ldr	r1, [pc, #124]	; (ae14 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x88>)
    ad96:	str	r2, [r0, #16]
    fm_pulse_remaining_samples_ = 0;
    ad98:	str	r2, [r0, #20]
    f0_ = 0.0f;
    fm_ = 0.0f;
    fm_lp_ = 0.0f;
    body_env_lp_ = 0.0f;
    body_env_ = 0.0f;
    body_env_pulse_width_ = 0;
    ad9a:	str.w	r2, [r0, #168]	; 0xa8
    fm_pulse_width_ = 0;
    ad9e:	str.w	r2, [r0, #172]	; 0xac
    pulse_ = 0.0f;
    ada2:	str	r3, [r0, #24]
    pulse_height_ = 0.0f;
    ada4:	str	r3, [r0, #28]
    pulse_lp_ = 0.0f;
    ada6:	str	r3, [r0, #32]
    fm_pulse_lp_ = 0.0f;
    ada8:	str	r3, [r0, #36]	; 0x24
    retrig_pulse_ = 0.0f;
    adaa:	str	r3, [r0, #40]	; 0x28
    lp_out_ = 0.0f;
    adac:	str	r3, [r0, #44]	; 0x2c
    tone_lp_ = 0.0f;
    adae:	str	r3, [r0, #48]	; 0x30
    sustain_gain_ = 0.0f;
    adb0:	str	r3, [r0, #52]	; 0x34
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    adb2:	str	r3, [r0, #72]	; 0x48
    adb4:	str	r3, [r0, #68]	; 0x44
 public:
  SineOscillator() { }
  ~SineOscillator() { }

  void Init() {
    phase_ = 0.0f;
    adb6:	str	r3, [r0, #76]	; 0x4c
    frequency_ = 0.0f;
    adb8:	str	r3, [r0, #80]	; 0x50
    amplitude_ = 0.0f;
    adba:	str	r3, [r0, #84]	; 0x54
 public:
  SyntheticBassDrum() { }
  ~SyntheticBassDrum() { }

  void Init() {
    phase_ = 0.0f;
    adbc:	str	r3, [r0, #92]	; 0x5c
    phase_noise_ = 0.0f;
    adbe:	str	r3, [r0, #96]	; 0x60
    f0_ = 0.0f;
    adc0:	str	r3, [r0, #88]	; 0x58
    fm_ = 0.0f;
    adc2:	str	r3, [r0, #100]	; 0x64
    fm_lp_ = 0.0f;
    adc4:	str	r3, [r0, #104]	; 0x68
    body_env_lp_ = 0.0f;
    adc6:	str	r3, [r0, #112]	; 0x70
    body_env_ = 0.0f;
    adc8:	str	r3, [r0, #108]	; 0x6c
    body_env_pulse_width_ = 0;
    fm_pulse_width_ = 0;
    tone_lp_ = 0.0f;
    adca:	str.w	r3, [r0, #128]	; 0x80
    sustain_gain_ = 0.0f;
    adce:	str	r3, [r0, #124]	; 0x7c
 public:
  SyntheticBassDrumClick() { }
  ~SyntheticBassDrumClick() { }
  
  void Init() {
    lp_ = 0.0f;
    add0:	str.w	r3, [r0, #132]	; 0x84
    hp_ = 0.0f;
    add4:	str.w	r3, [r0, #136]	; 0x88
namespace plaits {

using namespace std;
using namespace stmlib;

void BassDrumEngine::Init(BufferAllocator* allocator) {
    add8:	push	{r4, r5, r6, r7}
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    adda:	mov.w	r4, #1056964608	; 0x3f000000
    adde:	ldr	r7, [pc, #56]	; (ae18 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x8c>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ade0:	ldr	r6, [pc, #56]	; (ae1c <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x90>)

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ade2:	ldr	r5, [pc, #60]	; (ae20 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x94>)
    r_ = 1.0f / resonance;
    ade4:	str	r7, [r0, #60]	; 0x3c
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ade6:	str	r6, [r0, #64]	; 0x40
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    ade8:	str.w	r3, [r0, #156]	; 0x9c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    adec:	str.w	r5, [r0, #140]	; 0x8c
    r_ = 1.0f / resonance;
    adf0:	str.w	r4, [r0, #144]	; 0x90
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    adf4:	str.w	r3, [r0, #152]	; 0x98
 public:
  SyntheticBassDrumAttackNoise() { }
  ~SyntheticBassDrumAttackNoise() { }
  
  void Init() {
    lp_ = 0.0f;
    adf8:	str.w	r3, [r0, #160]	; 0xa0
    hp_ = 0.0f;
    adfc:	str.w	r3, [r0, #164]	; 0xa4
 public:
  Overdrive() { }
  ~Overdrive() { }
  
  void Init() {
    pre_gain_ = 0.0f;
    ae00:	str.w	r3, [r0, #176]	; 0xb0
    post_gain_ = 0.0f;
    ae04:	str.w	r3, [r0, #180]	; 0xb4
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ae08:	str.w	r1, [r0, #148]	; 0x94
  analog_bass_drum_.Init();
  synthetic_bass_drum_.Init();
  overdrive_.Init();
}
    ae0c:	pop	{r4, r5, r6, r7}
    ae0e:	bx	lr
    ae10:	.word	0x3d00ba22
    ae14:	.word	0x3f473f01
    ae18:	.word	0x3c23d70a
    ae1c:	.word	0x3f7faaca
    ae20:	.word	0x3eadc061

0000ae24 <plaits::BassDrumEngine::Reset()>:

void BassDrumEngine::Reset() {
    ae24:	bx	lr
    ae26:	nop

0000ae28 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    ae28:	vmov.f32	s13, #34	; 0x41100000  9.0
    ae2c:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    ae30:	vldr	s14, [pc, #956]	; b1f0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    ae34:	vsub.f32	s15, s15, s13
void BassDrumEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    ae38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    ae3c:	vcmpe.f32	s15, s14
    ae40:	vpush	{d8-d15}
    ae44:	vmrs	APSR_nzcv, fpscr
    ae48:	sub	sp, #20
    ae4a:	bmi.n	ae62 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a>
    ae4c:	vldr	s14, [pc, #932]	; b1f4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    ae50:	vcmpe.f32	s15, s14
    ae54:	vmrs	APSR_nzcv, fpscr
    ae58:	ble.w	ba88 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc60>
    ae5c:	movs	r4, #0
    ae5e:	movs	r5, #255	; 0xff
    ae60:	b.n	ae66 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    ae62:	movs	r4, #0
    ae64:	mov	r5, r4
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
    ae66:	vmov.f32	s8, #16	; 0x40800000  4.0
    ae6a:	vldr	s13, [r1, #16]
    ae6e:	vmov.f32	s9, #112	; 0x3f800000  1.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ae72:	ldr.w	sl, [pc, #980]	; b248 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x420>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ae76:	ldr	r6, [pc, #896]	; (b1f8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>)
    ae78:	vmul.f32	s8, s13, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ae7c:	add.w	r5, sl, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ae80:	add.w	r4, r6, r4, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    ae84:	vldr	s12, [pc, #884]	; b1fc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>
    ae88:	vldr	s15, [r5]
	return __b;
      return __a;
    ae8c:	vcmpe.f32	s8, s9
    ae90:	vldr	s10, [r4]
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
    ae94:	vsub.f32	s14, s8, s9
    ae98:	vmul.f32	s15, s15, s10
    ae9c:	vmrs	APSR_nzcv, fpscr
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    aea0:	vcmpe.f32	s14, s9
    aea4:	vmul.f32	s10, s15, s12
	return __b;
      return __a;
    aea8:	it	gt
    aeaa:	vmovgt.f32	s8, s9
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    aeae:	vmrs	APSR_nzcv, fpscr
    aeb2:	ble.w	bab0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc88>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    aeb6:	vldr	s15, [pc, #840]	; b200 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
    aeba:	vmov.f32	s5, #0	; 0x40000000  2.0
  analog_bass_drum_.Render(
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
    aebe:	vldr	s12, [r1, #8]
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
    aec2:	vmov.f32	s17, #240	; 0xbf800000 -1.0
    aec6:	vmov.f32	s6, s15
    aeca:	vldr	s14, [pc, #824]	; b204 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    aece:	vldr	s11, [r1, #12]
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
      max(1.0f - 16.0f * f0, 0.0f);
    aed2:	vmov.f32	s4, #112	; 0x3f800000  1.0
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
    aed6:	vfma.f32	s17, s13, s5
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    aeda:	vldr	s1, [pc, #812]	; b208 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    aede:	vfma.f32	s6, s12, s14
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
    aee2:	vldr	s3, [pc, #872]	; b24c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
      max(1.0f - 16.0f * f0, 0.0f);
    aee6:	vmov.f32	s7, #48	; 0x41800000  16.0
  
  const bool sustain = parameters.trigger & TRIGGER_UNPATCHED;
    aeea:	ldrb	r4, [r1, #0]
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
      max(1.0f - 16.0f * f0, 0.0f);
    aeec:	vmov.f32	s13, s4
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
    aef0:	vldr	s18, [pc, #792]	; b20c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    aef4:	vneg.f32	s21, s10
  
  const bool sustain = parameters.trigger & TRIGGER_UNPATCHED;
    aef8:	mov	r6, r4
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    aefa:	vmov.f32	s19, #16	; 0x40800000  4.0
    aefe:	str	r4, [sp, #4]
    af00:	vcmpe.f32	s17, s3
    af04:	and.w	r4, r4, #2
    af08:	vmov.f32	s14, s6
    af0c:	vldr	s6, [pc, #768]	; b210 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
      max(1.0f - 16.0f * f0, 0.0f);
    af10:	vfma.f32	s13, s21, s7
    af14:	uxtb	r4, r4
    af16:	vfma.f32	s15, s11, s6
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    af1a:	vcvt.s32.f32	s5, s14
    af1e:	vmul.f32	s19, s10, s19
    af22:	vmrs	APSR_nzcv, fpscr

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    af26:	vcvt.f32.s32	s2, s5

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    af2a:	vmov	r5, s5
    af2e:	vcmpe.f32	s13, s3
    const int kFMPulseDuration = 6.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    af32:	vldr	s5, [pc, #736]	; b214 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    af36:	vcvt.s32.f32	s7, s15

  return lut_pitch_ratio_high[pitch_integral] * \
    af3a:	add.w	r5, sl, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    af3e:	vsub.f32	s14, s14, s2
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    af42:	vldr	s0, [r5]
    af46:	it	mi
    af48:	vmovmi.f32	s17, s3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    af4c:	vmov	r5, s7
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    af50:	vcvt.f32.s32	s7, s7
    af54:	vmul.f32	s14, s14, s1

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    af58:	add.w	r5, sl, r5, lsl #2
    af5c:	vmrs	APSR_nzcv, fpscr
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    af60:	vsub.f32	s15, s15, s7
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    af64:	vldr	s7, [pc, #688]	; b218 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>
    af68:	vcvt.s32.f32	s14, s14
    af6c:	vldr	s2, [r5]
    af70:	ldr	r5, [pc, #644]	; (b1f8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>)
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
    af72:	vmov.f32	s6, #80	; 0x3e800000  0.250
    af76:	vmul.f32	s15, s15, s1
    af7a:	vmov	r7, s14
    af7e:	it	mi
    af80:	vmovmi.f32	s13, s3
    af84:	vadd.f32	s12, s12, s6
    af88:	add.w	r5, r5, r7, lsl #2
    af8c:	vcvt.s32.f32	s15, s15
    af90:	vmul.f32	s17, s17, s13
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    af94:	vldr	s14, [r5]
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
    af98:	vmul.f32	s6, s12, s18
    af9c:	vmov	r7, s15
    afa0:	ldr	r5, [pc, #596]	; (b1f8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>)
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    afa2:	vmul.f32	s14, s14, s0
  const bool sustain = parameters.trigger & TRIGGER_UNPATCHED;
  
  analog_bass_drum_.Render(
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    afa6:	vldr	s12, [r1, #20]
    afaa:	add.w	r5, r5, r7, lsl #2
    const int kFMPulseDuration = 6.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    afae:	vdiv.f32	s18, s5, s10
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    afb2:	vldr	s15, [r5]
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    afb6:	vmul.f32	s14, s14, s19
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    afba:	vmul.f32	s15, s15, s2
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    afbe:	vcmpe.f32	s14, s4
    afc2:	vmul.f32	s2, s15, s7
    afc6:	vmrs	APSR_nzcv, fpscr
    afca:	it	le
    afcc:	vmovle.f32	s4, s14
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
    afd0:	ands.w	r7, r6, #1
    afd4:	beq.n	aff4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1cc>
      pulse_remaining_samples_ = kTriggerPulseDuration;
      fm_pulse_remaining_samples_ = kFMPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    afd6:	vmov.f32	s14, #28	; 0x40e00000  7.0
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    afda:	movs	r5, #48	; 0x30
      fm_pulse_remaining_samples_ = kFMPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    afdc:	vmov.f32	s15, #8	; 0x40400000  3.0
      lp_out_ = 0.0f;
    afe0:	vstr	s3, [r0, #44]	; 0x2c
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    afe4:	str	r5, [r0, #16]
      fm_pulse_remaining_samples_ = kFMPulseDuration;
    afe6:	mov.w	r5, #288	; 0x120
      pulse_height_ = 3.0f + 7.0f * accent;
    afea:	vfma.f32	s15, s12, s14
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
      fm_pulse_remaining_samples_ = kFMPulseDuration;
    afee:	str	r5, [r0, #20]
      pulse_height_ = 3.0f + 7.0f * accent;
    aff0:	vstr	s15, [r0, #28]
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    aff4:	vldr	s15, [sp, #120]	; 0x78
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    aff8:	vldr	s3, [r0, #52]	; 0x34
    increment_ = (new_value - *state) / static_cast<float>(size);
    affc:	vcvt.f32.u32	s1, s15
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b000:	vmov	r5, s15
    b004:	vmov.f32	s15, s3
    b008:	ldr	r6, [sp, #120]	; 0x78
    b00a:	subs	r5, #1
    b00c:	vfnms.f32	s15, s12, s11
    b010:	vdiv.f32	s24, s15, s1
    b014:	cmp	r6, #0
    b016:	beq.w	b358 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x530>
    b01a:	mov	ip, r2
    b01c:	mov	r6, r5
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    b01e:	vldr	s23, [pc, #508]	; b21c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
        pulse = pulse_;
      }
      if (sustain) {
    b022:	vldr	s5, [pc, #552]	; b24c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
    b026:	vldr	s22, [pc, #504]	; b220 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
        pulse = 0.0f;
      }
      
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
    b02a:	vldr	s11, [pc, #504]	; b224 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fc>
  inline float Diode(float x) {
    if (x >= 0.0f) {
      return x;
    } else {
      x *= 2.0f;
      return 0.7f * x / (1.0f + fabsf(x));
    b02e:	vldr	s7, [pc, #504]	; b228 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x400>
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
    b032:	vldr	s20, [pc, #504]	; b22c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x404>
      float fm_pulse = 0.0f;
      if (fm_pulse_remaining_samples_) {
        --fm_pulse_remaining_samples_;
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
    b036:	vldr	s16, [pc, #504]	; b230 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x408>
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
    b03a:	vldr	s0, [pc, #464]	; b20c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    b03e:	b.n	b1ca <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a2>
    
    while (size--) {
      // Q39 / Q40
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
    b040:	subs	r7, #1
    b042:	str	r7, [r0, #16]
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    b044:	cmp	r7, #0
    b046:	beq.w	b32c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x504>
    b04a:	vldr	s14, [r0, #28]
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    b04e:	vstr	s14, [r0, #24]
        pulse = pulse_;
      }
      if (sustain) {
    b052:	cmp	r4, #0
    b054:	bne.w	b1e4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
    b058:	vmul.f32	s15, s14, s22
        pulse = 0.0f;
      }
      
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
    b05c:	vldr	s13, [r0, #32]
    b060:	vsub.f32	s12, s14, s13
    b064:	vfma.f32	s13, s12, s11
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);
    b068:	vsub.f32	s14, s14, s13
      if (sustain) {
        pulse = 0.0f;
      }
      
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
    b06c:	vstr	s13, [r0, #32]
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);
    b070:	vadd.f32	s15, s14, s15
    resonator_.Init();
    oscillator_.Init();
  }
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
    b074:	vcmpe.f32	s15, #0.0
    b078:	vmrs	APSR_nzcv, fpscr
    b07c:	blt.w	b312 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4ea>
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);

      // Q41 / Q42
      float fm_pulse = 0.0f;
      if (fm_pulse_remaining_samples_) {
    b080:	ldr	r7, [r0, #20]
    b082:	cmp	r7, #0
    b084:	beq.w	b250 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x428>
        --fm_pulse_remaining_samples_;
    b088:	subs	r7, #1
        fm_pulse = 1.0f;
    b08a:	vmov.f32	s14, #112	; 0x3f800000  1.0
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
    b08e:	cmp	r7, #0
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);

      // Q41 / Q42
      float fm_pulse = 0.0f;
      if (fm_pulse_remaining_samples_) {
        --fm_pulse_remaining_samples_;
    b090:	str	r7, [r0, #20]
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
    b092:	ite	ne
    b094:	vmovne.f32	s13, s5
    b098:	vmoveq.f32	s13, s16
    b09c:	vstr	s13, [r0, #40]	; 0x28
        fm_pulse = 0.0f;
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);

      // Q43 and R170 leakage
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);
    b0a0:	vmov.f32	s25, #36	; 0x41200000  10.0
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
    b0a4:	cmp	r4, #0
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);

      // Q43 and R170 leakage
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);
    b0a6:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    b0aa:	vldr	s26, [r0, #44]	; 0x2c
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
    b0ae:	it	ne
    b0b0:	vmovne.f32	s14, s5
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);
    b0b4:	vldr	s12, [r0, #36]	; 0x24

      // Q43 and R170 leakage
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);
    b0b8:	vfma.f32	s13, s26, s25
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);
    b0bc:	vsub.f32	s14, s14, s12
    b0c0:	vfma.f32	s12, s14, s11
    resonator_.Init();
    oscillator_.Init();
  }
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
    b0c4:	vcmpe.f32	s13, #0.0
    b0c8:	vmrs	APSR_nzcv, fpscr
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);
    b0cc:	vstr	s12, [r0, #36]	; 0x24
    resonator_.Init();
    oscillator_.Init();
  }
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
    b0d0:	blt.w	b2f8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4d0>
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
    b0d4:	vldr	s25, [pc, #348]	; b234 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40c>
    b0d8:	vmov.f32	s14, #112	; 0x3f800000  1.0
    b0dc:	vadd.f32	s13, s13, s7
    b0e0:	vmul.f32	s12, s12, s25
    b0e4:	vmul.f32	s13, s13, s0
    b0e8:	vfma.f32	s14, s8, s12
    b0ec:	vfma.f32	s14, s13, s9
    b0f0:	vmul.f32	s14, s14, s10
      CONSTRAIN(f, 0.0f, 0.4f);
    b0f4:	vcmpe.f32	s14, #0.0
    b0f8:	vmrs	APSR_nzcv, fpscr
    b0fc:	bmi.w	b2ec <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c4>
    b100:	vldr	s13, [pc, #308]	; b238 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x410>
    b104:	vcmpe.f32	s14, s13
    b108:	vmrs	APSR_nzcv, fpscr
    b10c:	bgt.w	b262 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x43a>

      float resonator_out;
      if (sustain) {
    b110:	cmp	r4, #0
    b112:	bne.w	b33a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x512>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    b116:	vmov.f32	s26, #112	; 0x3f800000  1.0
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    b11a:	vldr	s12, [pc, #288]	; b23c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
    b11e:	vldr	s27, [pc, #288]	; b240 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x418>
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b122:	vmov.f32	s28, s15
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    b126:	vmul.f32	s12, s14, s12
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b12a:	vldr	s25, [r0, #40]	; 0x28
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    b12e:	vmov.f32	s29, s26
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b132:	vldr	s13, [pc, #272]	; b244 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    b136:	vfma.f32	s27, s12, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    b13a:	vfma.f32	s29, s2, s14
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b13e:	vfms.f32	s28, s25, s13
    b142:	vldr	s13, [r0, #68]	; 0x44
    b146:	vldr	s25, [r0, #72]	; 0x48
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    b14a:	vmul.f32	s14, s27, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    b14e:	vdiv.f32	s12, s26, s29

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    b152:	vstr	s14, [r0, #56]	; 0x38
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b156:	vmov.f32	s27, s26
    b15a:	vfma.f32	s27, s14, s12
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    b15e:	vstr	s12, [r0, #60]	; 0x3c
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b162:	vnmul.f32	s12, s13, s12
    b166:	vfma.f32	s12, s18, s28
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b16a:	vfma.f32	s27, s14, s14
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b16e:	vfms.f32	s12, s14, s13
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b172:	vdiv.f32	s28, s26, s27
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b176:	vsub.f32	s12, s12, s25
    b17a:	vmul.f32	s12, s12, s28
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b17e:	vstr	s28, [r0, #64]	; 0x40
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    b182:	vfma.f32	s13, s14, s12
    state_1_ = g_ * hp + bp;
    b186:	vmov.f32	s26, s13
    lp = g_ * bp + state_2_;
    b18a:	vfma.f32	s25, s14, s13
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b18e:	vfma.f32	s26, s14, s12
    } else if (mode_1 == FILTER_MODE_HIGH_PASS) {
      *out_1 = hp;
    }

    if (mode_2 == FILTER_MODE_LOW_PASS) {
      *out_2 = lp;
    b192:	vstr	s25, [r0, #44]	; 0x2c
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b196:	vmov.f32	s12, s26
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b19a:	vmov.f32	s26, s25
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b19e:	vstr	s12, [r0, #68]	; 0x44
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b1a2:	vfma.f32	s26, s14, s13
    b1a6:	vstr	s26, [r0, #72]	; 0x48
            (pulse - retrig_pulse_ * 0.2f) * scale,
            &resonator_out,
            &lp_out_);
      }
      
      ONE_POLE(tone_lp_, pulse * exciter_leak + resonator_out, tone_f);
    b1aa:	vfma.f32	s13, s6, s15
    b1ae:	vldr	s15, [r0, #48]	; 0x30
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b1b2:	subs	r6, #1
    b1b4:	adds	r7, r6, #1
            (pulse - retrig_pulse_ * 0.2f) * scale,
            &resonator_out,
            &lp_out_);
      }
      
      ONE_POLE(tone_lp_, pulse * exciter_leak + resonator_out, tone_f);
    b1b6:	vsub.f32	s13, s13, s15
    b1ba:	vfma.f32	s15, s4, s13
    b1be:	vstr	s15, [r0, #48]	; 0x30
      
      *out++ = tone_lp_;
    b1c2:	vstmia	ip!, {s15}
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b1c6:	beq.w	b352 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x52a>
      // Q39 / Q40
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
    b1ca:	ldr	r7, [r0, #16]
    b1cc:	cmp	r7, #0
    b1ce:	bne.w	b040 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    b1d2:	vldr	s14, [r0, #24]
    b1d6:	vmul.f32	s14, s14, s23
    b1da:	vstr	s14, [r0, #24]
        pulse = pulse_;
      }
      if (sustain) {
    b1de:	cmp	r4, #0
    b1e0:	beq.w	b058 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x230>
    b1e4:	vldr	s14, [pc, #100]	; b24c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
        pulse = 0.0f;
    b1e8:	vmov.f32	s15, s14
    b1ec:	b.n	b05c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x234>
    b1ee:	nop
    b1f0:	.word	0xc3000000
    b1f4:	.word	0x42fe0000
    b1f8:	.word	0x20000428
    b1fc:	.word	0x39969651
    b200:	.word	0x43000000
    b204:	.word	0x42d80000
    b208:	.word	0x43800000
    b20c:	.word	0x3da3d70a
    b210:	.word	0x42a00000
    b214:	.word	0x3a83126f
    b218:	.word	0x44bb8000
    b21c:	.word	0x3f655555
    b220:	.word	0x3d343958
    b224:	.word	0x3e555555
    b228:	.word	0x3f333333
    b22c:	.word	0x3f7fe4b1
    b230:	.word	0xbf4ccccd
    b234:	.word	0x3fd9999a
    b238:	.word	0x3ecccccd
    b23c:	.word	0x413957d7
    b240:	.word	0x40490fdb
    b244:	.word	0x3e4ccccd
    b248:	.word	0x20000024
    b24c:	.word	0x00000000
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
    b250:	vldr	s13, [r0, #40]	; 0x28
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);

      // Q41 / Q42
      float fm_pulse = 0.0f;
    b254:	vldr	s14, [pc, #-12]	; b24c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
    b258:	vmul.f32	s13, s13, s20
    b25c:	vstr	s13, [r0, #40]	; 0x28
    b260:	b.n	b0a0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
      CONSTRAIN(f, 0.0f, 0.4f);
    b262:	vmov.f32	s14, s13

      float resonator_out;
      if (sustain) {
    b266:	cmp	r4, #0
    b268:	beq.w	b116 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ee>
  }

  inline float Next() {
    value_ += increment_;
    b26c:	vadd.f32	s3, s3, s24
  inline void Next(float frequency, float amplitude, float* sin, float* cos) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    b270:	vldr	s13, [r0, #76]	; 0x4c
    if (phase_ >= 1.0f) {
    b274:	vmov.f32	s12, #112	; 0x3f800000  1.0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b278:	ldr.w	r9, [pc, #1000]	; b664 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83c>
  inline void Next(float frequency, float amplitude, float* sin, float* cos) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    b27c:	vadd.f32	s14, s14, s13
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    b280:	vldr	s13, [pc, #944]	; b634 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80c>
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b284:	add.w	r8, r9, #1024	; 0x400
    if (phase_ >= 1.0f) {
    b288:	vcmpe.f32	s14, s12
    b28c:	vmrs	APSR_nzcv, fpscr
      phase_ -= 1.0f;
    b290:	it	ge
    b292:	vsubge.f32	s14, s14, s12
    b296:	vstr	s14, [r0, #76]	; 0x4c
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    b29a:	vmul.f32	s14, s14, s13
  MAKE_INTEGRAL_FRACTIONAL(index)
    b29e:	vcvt.s32.f32	s13, s14
  float a = table[index_integral];
    b2a2:	vmov	r7, s13
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    b2a6:	vcvt.f32.s32	s13, s13
  float a = table[index_integral];
    b2aa:	lsls	r7, r7, #2
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    b2ac:	vsub.f32	s14, s14, s13
  float a = table[index_integral];
  float b = table[index_integral + 1];
    b2b0:	add.w	lr, r7, #4
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b2b4:	add.w	fp, r7, r8
    b2b8:	add	r7, r9
  float b = table[index_integral + 1];
    b2ba:	add	r8, lr
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b2bc:	vldr	s12, [fp]
  float b = table[index_integral + 1];
    b2c0:	add	lr, r9
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b2c2:	vldr	s13, [r7]
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    b2c6:	vldr	s26, [r8]
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    b2ca:	vldr	s25, [lr]
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    b2ce:	vsub.f32	s26, s26, s12
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    b2d2:	vsub.f32	s25, s25, s13
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    b2d6:	vfma.f32	s12, s14, s26
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    b2da:	vfma.f32	s13, s14, s25
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    b2de:	vmul.f32	s12, s12, s3
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    b2e2:	vmul.f32	s13, s13, s3
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    b2e6:	vstr	s12, [r0, #44]	; 0x2c
    b2ea:	b.n	b1aa <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x382>

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
      CONSTRAIN(f, 0.0f, 0.4f);
    b2ec:	vldr	s14, [pc, #840]	; b638 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>

      float resonator_out;
      if (sustain) {
    b2f0:	cmp	r4, #0
    b2f2:	beq.w	b116 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ee>
    b2f6:	b.n	b26c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x444>
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
      return x;
    } else {
      x *= 2.0f;
    b2f8:	vadd.f32	s13, s13, s13
      return 0.7f * x / (1.0f + fabsf(x));
    b2fc:	vmov.f32	s26, #112	; 0x3f800000  1.0
    b300:	vabs.f32	s14, s13
    b304:	vmul.f32	s25, s13, s7
    b308:	vadd.f32	s14, s14, s26
    b30c:	vdiv.f32	s13, s25, s14
    b310:	b.n	b0d4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
      return x;
    } else {
      x *= 2.0f;
    b312:	vadd.f32	s15, s15, s15
      return 0.7f * x / (1.0f + fabsf(x));
    b316:	vmov.f32	s12, #112	; 0x3f800000  1.0
    b31a:	vabs.f32	s13, s15
    b31e:	vmul.f32	s14, s15, s7
    b322:	vadd.f32	s13, s13, s12
    b326:	vdiv.f32	s15, s14, s13
    b32a:	b.n	b080 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x258>
    while (size--) {
      // Q39 / Q40
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    b32c:	vmov.f32	s14, #112	; 0x3f800000  1.0
    b330:	vldr	s15, [r0, #28]
    b334:	vsub.f32	s14, s15, s14
    b338:	b.n	b04e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x226>
    
    return stmlib::Interpolate(lut_sine, phase_, 1024.0f);
  }
  
  inline void Next(float frequency, float amplitude, float* sin, float* cos) {
    if (frequency >= 0.5f) {
    b33a:	vmov.f32	s13, #96	; 0x3f000000  0.5
    b33e:	vadd.f32	s3, s3, s24
      frequency = 0.5f;
    b342:	vcmp.f32	s14, s13
    b346:	vmrs	APSR_nzcv, fpscr
    b34a:	it	ge
    b34c:	vmovge.f32	s14, s13
    b350:	b.n	b270 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x448>
    b352:	ldr	r6, [sp, #4]
    b354:	and.w	r7, r6, #1
      attack_fm_amount,
      self_fm_amount,
      out,
      size);

  overdrive_.Process(
    b358:	vmov.f32	s9, #96	; 0x3f000000  0.5
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    b35c:	vldr	s12, [pc, #732]	; b63c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x814>
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    b360:	vmov.f32	s15, #56	; 0x41c00000  24.0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    b364:	vstr	s3, [r0, #52]	; 0x34
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    b368:	vmov.f32	s11, #0	; 0x40000000  2.0
    b36c:	vmov.f32	s13, s9
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    b370:	vmov.f32	s7, #136	; 0xc0400000 -3.0
    b374:	vfma.f32	s13, s17, s9
    pre_gain_ = 0.0f;
    post_gain_ = 0.0f;
  }
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    b378:	vmul.f32	s8, s13, s13
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    b37c:	vsub.f32	s11, s11, s13
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    b380:	vmul.f32	s14, s8, s8
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    b384:	vmul.f32	s11, s11, s13
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    b388:	vmul.f32	s14, s14, s13
    b38c:	vmul.f32	s15, s14, s15
    b390:	vfms.f32	s15, s13, s9
    b394:	vmul.f32	s15, s15, s8
    b398:	vfma.f32	s15, s13, s9
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    b39c:	vsub.f32	s14, s15, s12
    b3a0:	vfma.f32	s12, s11, s14
    b3a4:	vcmpe.f32	s12, s7
    b3a8:	vmov.f32	s14, s12
    b3ac:	vmrs	APSR_nzcv, fpscr
    b3b0:	bmi.n	b3ec <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c4>
    return -1.0f;
  } else if (x > 3.0f) {
    b3b2:	vmov.f32	s13, #8	; 0x40400000  3.0
    b3b6:	vcmpe.f32	s12, s13
    b3ba:	vmrs	APSR_nzcv, fpscr
    b3be:	bgt.w	bac6 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc9e>
    b3c2:	vmov.f32	s13, #59	; 0x41d80000  27.0
    b3c6:	vmov.f32	s11, #34	; 0x41100000  9.0
    b3ca:	vmov.f32	s9, #112	; 0x3f800000  1.0
    b3ce:	vmov.f32	s12, s13
    b3d2:	vmul.f32	s11, s14, s11
    b3d6:	vfma.f32	s12, s14, s14
    b3da:	vfma.f32	s13, s14, s11
    b3de:	vmul.f32	s14, s12, s14
    b3e2:	vdiv.f32	s12, s14, s13
    b3e6:	vdiv.f32	s14, s9, s12
    b3ea:	b.n	b3f0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c8>
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    b3ec:	vmov.f32	s14, #240	; 0xbf800000 -1.0
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b3f0:	vldr	s13, [r0, #176]	; 0xb0
    b3f4:	vldr	s12, [r0, #180]	; 0xb4
    increment_ = (new_value - *state) / static_cast<float>(size);
    b3f8:	vsub.f32	s15, s15, s13
    stmlib::ParameterInterpolator post_gain_modulation(
        &post_gain_,
        post_gain,
        size);
    
    while (size--) {
    b3fc:	ldr	r6, [sp, #120]	; 0x78
    b3fe:	vsub.f32	s14, s14, s12
    b402:	vdiv.f32	s11, s15, s1
    b406:	vdiv.f32	s9, s14, s1
    b40a:	cbz	r6, b47a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x652>
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b40c:	mov	r6, r5
    b40e:	vmov.f32	s8, #136	; 0xc0400000 -3.0
    return -1.0f;
  } else if (x > 3.0f) {
    b412:	vmov.f32	s5, #8	; 0x40400000  3.0
inline float Crossfade(float a, float b, float fade) {
  return a + (b - a) * fade;
}

inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
    b416:	vmov.f32	s7, #59	; 0x41d80000  27.0
    b41a:	vmov.f32	s4, #34	; 0x41100000  9.0
    b41e:	b.n	b450 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x628>
    b420:	vmov.f32	s14, s7
    b424:	vmul.f32	s6, s15, s4
    b428:	vmov.f32	s3, s7
    b42c:	vfma.f32	s14, s15, s15
    b430:	vfma.f32	s3, s15, s6
    b434:	vmul.f32	s15, s14, s15
    b438:	vdiv.f32	s14, s15, s3
    b43c:	subs	r6, #1
    b43e:	cmp.w	r6, #4294967295
  }

  inline float Next() {
    value_ += increment_;
    b442:	vadd.f32	s12, s12, s9
      float pre = pre_gain_modulation.Next() * *in_out;
      *in_out++ = stmlib::SoftClip(pre) * post_gain_modulation.Next();
    b446:	vmul.f32	s14, s12, s14
    b44a:	vstr	s14, [r2, #-4]
    stmlib::ParameterInterpolator post_gain_modulation(
        &post_gain_,
        post_gain,
        size);
    
    while (size--) {
    b44e:	beq.n	b47a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x652>
    b450:	vadd.f32	s13, s13, s11
      float pre = pre_gain_modulation.Next() * *in_out;
    b454:	vldmia	r2!, {s15}
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    return -1.0f;
    b458:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    b45c:	vmul.f32	s15, s13, s15
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    b460:	vcmpe.f32	s15, s8
    b464:	vmrs	APSR_nzcv, fpscr
    b468:	bmi.n	b43c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x614>
    return -1.0f;
  } else if (x > 3.0f) {
    b46a:	vcmpe.f32	s15, s5
    b46e:	vmrs	APSR_nzcv, fpscr
    b472:	ble.n	b420 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f8>
    return 1.0f;
    b474:	vmov.f32	s14, #112	; 0x3f800000  1.0
    b478:	b.n	b43c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x614>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    b47a:	vstr	s12, [r0, #180]	; 0xb4
    b47e:	vstr	s13, [r0, #176]	; 0xb0
      size);

  synthetic_bass_drum_.Render(
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    b482:	vldr	s11, [r1, #20]
      f0,
      parameters.timbre,
    b486:	vldr	s25, [r1, #8]
      parameters.morph,
    b48a:	vldr	s13, [r1, #12]
  overdrive_.Process(
      0.5f + 0.5f * drive,
      out,
      size);

  synthetic_bass_drum_.Render(
    b48e:	cmp	r4, #0
    b490:	beq.w	ba6e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc46>
    b494:	vldr	s7, [r1, #16]
    b498:	vmov.f32	s22, s7
      parameters.timbre,
      parameters.morph,
      sustain
          ? parameters.harmonics
          : 0.4f - 0.25f * parameters.morph * parameters.morph,
      min(parameters.harmonics * 2.0f, 1.0f),
    b49c:	vadd.f32	s22, s22, s22
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    b4a0:	vmov.f32	s15, #112	; 0x3f800000  1.0
	return __b;
      return __a;
    b4a4:	vcmpe.f32	s22, s15
      max(parameters.harmonics * 2.0f - 1.0f, 0.0f),
    b4a8:	vsub.f32	s14, s22, s15
    b4ac:	vmrs	APSR_nzcv, fpscr
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    b4b0:	vcmpe.f32	s14, #0.0
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    b4b4:	it	gt
    b4b6:	vmovgt.f32	s22, s15
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    b4ba:	vmrs	APSR_nzcv, fpscr
    b4be:	bmi.w	bacc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xca4>
    b4c2:	vmul.f32	s14, s14, s14
    b4c6:	vldr	s8, [pc, #376]	; b640 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x818>
    b4ca:	vmov.f32	s12, #16	; 0x40800000  4.0
    b4ce:	vldr	s9, [pc, #372]	; b644 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x81c>
    b4d2:	vmov.f32	s6, s15
    b4d6:	vfma.f32	s6, s14, s12
    b4da:	vmul.f32	s14, s6, s8
    b4de:	vmul.f32	s14, s14, s9
    b4e2:	vdiv.f32	s23, s15, s14
    b4e6:	vsub.f32	s23, s15, s23

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b4ea:	vldr	s15, [pc, #348]	; b648 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x820>
      float dirtiness,
      float fm_envelope_amount,
      float fm_envelope_decay,
      float* out,
      size_t size) {
    decay *= decay;
    b4ee:	vmul.f32	s13, s13, s13
    b4f2:	vldr	s14, [pc, #344]	; b64c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x824>
    fm_envelope_decay *= fm_envelope_decay;
    
    stmlib::ParameterInterpolator f0_mod(&f0_, f0, size);
    
    dirtiness *= std::max(1.0f - 8.0f * f0, 0.0f);
    b4f6:	vmov.f32	s9, #32	; 0x41000000  8.0
    b4fa:	vmov.f32	s8, s15
    b4fe:	vldr	s12, [pc, #336]	; b650 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x828>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b502:	vldr	s5, [pc, #336]	; b654 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b506:	vfms.f32	s15, s13, s12
	return __b;
      return __a;
    b50a:	vldr	s6, [pc, #300]	; b638 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>
    b50e:	vfma.f32	s8, s25, s14
    b512:	vmov.f32	s12, #112	; 0x3f800000  1.0
    b516:	vmov.f32	s3, s12
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    b51a:	vmov.f32	s30, s12
    b51e:	vmov.f32	s14, s8
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    b522:	vcvt.s32.f32	s8, s8
    decay *= decay;
    fm_envelope_decay *= fm_envelope_decay;
    
    stmlib::ParameterInterpolator f0_mod(&f0_, f0, size);
    
    dirtiness *= std::max(1.0f - 8.0f * f0, 0.0f);
    b526:	vfma.f32	s3, s21, s9
    b52a:	vcvt.s32.f32	s9, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b52e:	vcvt.f32.s32	s4, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b532:	vmov	r2, s8
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    b536:	vldr	s8, [pc, #288]	; b658 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x830>
    b53a:	vmov	r1, s9
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b53e:	vcvt.f32.s32	s9, s9
    b542:	vsub.f32	s14, s14, s4

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b546:	add.w	r2, sl, r2, lsl #2
    b54a:	add.w	sl, sl, r1, lsl #2
    b54e:	vcmpe.f32	s3, s6
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b552:	vsub.f32	s15, s15, s9
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    b556:	vldr	s16, [r2]
    b55a:	vmul.f32	s14, s14, s5
    b55e:	ldr	r2, [pc, #252]	; (b65c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x834>)
    b560:	vmrs	APSR_nzcv, fpscr
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    b564:	vldr	s9, [sl]
    b568:	vmul.f32	s15, s15, s5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b56c:	vldr	s5, [r0, #88]	; 0x58
    b570:	vcvt.s32.f32	s14, s14
    b574:	it	mi
    b576:	vmovmi.f32	s3, s6
    b57a:	vcvt.s32.f32	s15, s15
    b57e:	vmov	r1, s14
    increment_ = (new_value - *state) / static_cast<float>(size);
    b582:	vsub.f32	s10, s10, s5
    decay *= decay;
    fm_envelope_decay *= fm_envelope_decay;
    
    stmlib::ParameterInterpolator f0_mod(&f0_, f0, size);
    
    dirtiness *= std::max(1.0f - 8.0f * f0, 0.0f);
    b586:	vmul.f32	s3, s7, s3
    b58a:	add.w	r2, r2, r1, lsl #2
    b58e:	vmov	r6, s15
    b592:	ldr	r1, [pc, #200]	; (b65c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x834>)
    b594:	vdiv.f32	s24, s10, s1

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    b598:	vldr	s15, [r2]
    b59c:	add.w	r1, r1, r6, lsl #2
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    b5a0:	vldr	s14, [r1]
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    b5a4:	vmul.f32	s16, s15, s16
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    b5a8:	vnmul.f32	s15, s9, s14
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    b5ac:	vmul.f32	s16, s16, s19
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    b5b0:	vfma.f32	s30, s15, s8
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    b5b4:	vcmpe.f32	s16, s12
    b5b8:	vmrs	APSR_nzcv, fpscr
    b5bc:	it	gt
    b5be:	vmovgt.f32	s16, s12
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
    b5c2:	cbz	r7, b5e8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
      fm_ = 1.0f;
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    b5c4:	vldr	s14, [pc, #152]	; b660 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x838>
      body_env_pulse_width_ = kSampleRate * 0.001f;
    b5c8:	movs	r1, #48	; 0x30
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
      fm_ = 1.0f;
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    b5ca:	vldr	s15, [pc, #188]	; b688 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x860>
      body_env_pulse_width_ = kSampleRate * 0.001f;
      fm_pulse_width_ = kSampleRate * 0.0013f;
    b5ce:	movs	r2, #62	; 0x3e
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
      fm_ = 1.0f;
    b5d0:	vstr	s12, [r0, #100]	; 0x64
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    b5d4:	vfma.f32	s15, s11, s14
      body_env_pulse_width_ = kSampleRate * 0.001f;
    b5d8:	str.w	r1, [r0, #168]	; 0xa8
      fm_pulse_width_ = kSampleRate * 0.0013f;
    b5dc:	str.w	r2, [r0, #172]	; 0xac
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
      fm_ = 1.0f;
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    b5e0:	vstr	s15, [r0, #116]	; 0x74
    b5e4:	vstr	s15, [r0, #108]	; 0x6c
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b5e8:	vldr	s2, [r0, #124]	; 0x7c
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b5ec:	ldr	r2, [sp, #120]	; 0x78
    increment_ = (new_value - *state) / static_cast<float>(size);
    b5ee:	vmov.f32	s15, s2
    b5f2:	vfnms.f32	s15, s11, s13
    b5f6:	vdiv.f32	s26, s15, s1
    b5fa:	cmp	r2, #0
    b5fc:	beq.w	ba5c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc34>
    b600:	ldr.w	lr, [pc, #128]	; b684 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x85c>
    b604:	ldr	r6, [pc, #92]	; (b664 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83c>)
    b606:	ldr.w	r2, [lr]
    b60a:	adds	r7, r6, #4
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
    b60c:	vldr	s18, [pc, #88]	; b668 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x840>
    b610:	vldr	s21, [pc, #88]	; b66c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x844>
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    b614:	vldr	s1, [pc, #88]	; b670 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x848>
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    b618:	vldr	s20, [pc, #24]	; b634 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80c>
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
    b61c:	vldr	s17, [pc, #24]	; b638 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    b620:	vldr	s29, [pc, #80]	; b674 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x84c>
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    b624:	vldr	s28, [pc, #80]	; b678 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x850>
    ONE_POLE(hp_, lp_, 0.005f);
    b628:	vldr	s27, [pc, #80]	; b67c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x854>
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    b62c:	vldr	s19, [pc, #80]	; b680 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x858>
    b630:	b.n	b78e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x966>
    b632:	nop
    b634:	.word	0x44800000
    b638:	.word	0x00000000
    b63c:	.word	0x3ea8f5c3
    b640:	.word	0x3c03126f
    b644:	.word	0x473b8000
    b648:	.word	0x43000000
    b64c:	.word	0x42d80000
    b650:	.word	0x42700000
    b654:	.word	0x43800000
    b658:	.word	0x3a888889
    b65c:	.word	0x20000428
    b660:	.word	0x3f333333
    b664:	.word	0x200025e0
    b668:	.word	0x2f800000
    b66c:	.word	0x3b03126f
    b670:	.word	0x3dcccccd
    b674:	.word	0x3d23d70a
    b678:	.word	0x3d4ccccd
    b67c:	.word	0x3ba3d70a
    b680:	.word	0x3f19999a
    b684:	.word	0x2001f96c
    b688:	.word	0x3e99999a
  }

  inline float Next() {
    value_ += increment_;
    b68c:	vadd.f32	s5, s5, s24
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
      
      float mix = 0.0f;

      if (sustain) {
        phase_ += f0_mod.Next();
    b690:	vldr	s15, [r0, #92]	; 0x5c
        if (phase_ >= 1.0f) {
    b694:	vmov.f32	s13, #112	; 0x3f800000  1.0
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
      
      float mix = 0.0f;

      if (sustain) {
        phase_ += f0_mod.Next();
    b698:	vadd.f32	s15, s5, s15
        if (phase_ >= 1.0f) {
    b69c:	vcmpe.f32	s15, s13
    b6a0:	vmrs	APSR_nzcv, fpscr
          phase_ -= 1.0f;
    b6a4:	it	ge
    b6a6:	vsubge.f32	s15, s15, s13
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    b6aa:	vmov.f32	s13, #96	; 0x3f000000  0.5
      float mix = 0.0f;

      if (sustain) {
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    b6ae:	vstr	s15, [r0, #92]	; 0x5c
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    b6b2:	vfma.f32	s15, s3, s14
    MAKE_INTEGRAL_FRACTIONAL(phase);
    b6b6:	vcvt.s32.f32	s14, s15
    b6ba:	vcvt.f32.s32	s14, s14
    b6be:	vsub.f32	s15, s15, s14
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    b6c2:	vcmpe.f32	s15, s13
    b6c6:	vmrs	APSR_nzcv, fpscr
    b6ca:	bmi.w	ba4a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc22>
    b6ce:	vmov.f32	s13, #112	; 0x3f800000  1.0
    b6d2:	vmov.f32	s12, #16	; 0x40800000  4.0
    b6d6:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    b6da:	vsub.f32	s13, s13, s15
    b6de:	vfma.f32	s14, s13, s12
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
    b6e2:	vmov.f32	s13, #104	; 0x3f400000  0.750
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
    b6e6:	vldr	s12, [pc, #-96]	; b688 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x860>
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    b6ea:	vabs.f32	s10, s14
    b6ee:	vmov.f32	s9, #112	; 0x3f800000  1.0
    float clean_sine = stmlib::InterpolateWrap(
    b6f2:	vadd.f32	s15, s15, s13
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    b6f6:	vadd.f32	s14, s14, s14
    b6fa:	vadd.f32	s10, s10, s9
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    b6fe:	vcvt.s32.f32	s11, s15
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    b702:	vsub.f32	s9, s9, s3
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    b706:	vdiv.f32	s13, s14, s10
    b70a:	vcvt.f32.s32	s14, s11
    b70e:	vadd.f32	s2, s2, s26
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
    b712:	vmov.f32	s10, #0	; 0x40000000  2.0
    b716:	vsub.f32	s15, s15, s14
    b71a:	vmov.f32	s14, #8	; 0x40400000  3.0
  index *= size;
    b71e:	vmul.f32	s15, s15, s20
  MAKE_INTEGRAL_FRACTIONAL(index)
    b722:	vcvt.s32.f32	s11, s15
  float a = table[index_integral];
    b726:	vmov	r1, s11
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    b72a:	vcvt.f32.s32	s11, s11
    b72e:	lsls	r1, r1, #2
    b730:	vsub.f32	s15, s15, s11
    b734:	add.w	ip, r6, r1
  float b = table[index_integral + 1];
    b738:	add	r1, r7

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b73a:	vldr	s11, [ip]
    b73e:	vldr	s8, [r1]
    b742:	vsub.f32	s8, s8, s11
    b746:	vfma.f32	s11, s15, s8
    b74a:	vsub.f32	s11, s11, s13
    b74e:	vfma.f32	s13, s9, s11
    b752:	vsub.f32	s13, s13, s19
    b756:	vmul.f32	s15, s13, s2
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
    b75a:	vabs.f32	s13, s15
    b75e:	vmul.f32	s14, s15, s14
    b762:	vadd.f32	s10, s13, s10
    b766:	vdiv.f32	s15, s14, s10
    b76a:	vfma.f32	s15, s2, s12
    b76e:	vsub.f32	s15, s17, s15
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
      }

      ONE_POLE(tone_lp_, mix, tone_f);
    b772:	vldr	s14, [r0, #128]	; 0x80
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b776:	subs	r5, #1
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
      }

      ONE_POLE(tone_lp_, mix, tone_f);
    b778:	vsub.f32	s15, s15, s14
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b77c:	adds	r1, r5, #1
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
      }

      ONE_POLE(tone_lp_, mix, tone_f);
    b77e:	vfma.f32	s14, s16, s15
    b782:	vstr	s14, [r0, #128]	; 0x80
      *out++ = tone_lp_;
    b786:	vstmia	r3!, {s14}
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b78a:	beq.w	ba58 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    b78e:	ldr	r1, [pc, #836]	; (bad4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcac>)
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
    b790:	vmov.f32	s15, #224	; 0xbf000000 -0.5
    b794:	vldr	s14, [r0, #96]	; 0x60
    b798:	mul.w	r1, r1, r2
    b79c:	ldr	r2, [pc, #824]	; (bad8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb0>)
    b79e:	add	r2, r1
    b7a0:	vmov	s13, r2
    b7a4:	vcvt.f32.u32	s13, s13
    b7a8:	vfma.f32	s15, s13, s18
    b7ac:	vsub.f32	s15, s15, s14
    b7b0:	vfma.f32	s14, s15, s21
    b7b4:	vstr	s14, [r0, #96]	; 0x60
      
      float mix = 0.0f;

      if (sustain) {
    b7b8:	cmp	r4, #0
    b7ba:	bne.w	b68c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x864>
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
      } else {
        if (fm_pulse_width_) {
    b7be:	ldr.w	r1, [r0, #172]	; 0xac
    b7c2:	cmp	r1, #0
    b7c4:	beq.w	b9bc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb94>
          --fm_pulse_width_;
    b7c8:	subs	r1, #1
          phase_ = 0.25f;
    b7ca:	mov.w	ip, #1048576000	; 0x3e800000
    b7ce:	vldr	s11, [r0, #100]	; 0x64
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
    b7d2:	str.w	r1, [r0, #172]	; 0xac
          if (phase_ >= 1.0f) {
            phase_ -= 1.0f;
          }
        }
      
        if (body_env_pulse_width_) {
    b7d6:	ldr.w	r1, [r0, #168]	; 0xa8
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
    b7da:	str.w	ip, [r0, #92]	; 0x5c
    b7de:	vldr	s15, [r0, #104]	; 0x68
          if (phase_ >= 1.0f) {
            phase_ -= 1.0f;
          }
        }
      
        if (body_env_pulse_width_) {
    b7e2:	cmp	r1, #0
    b7e4:	beq.w	ba1e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf6>
          --body_env_pulse_width_;
    b7e8:	subs	r1, #1
    b7ea:	vldr	s12, [r0, #108]	; 0x6c
    b7ee:	vldr	s13, [r0, #116]	; 0x74
    b7f2:	str.w	r1, [r0, #168]	; 0xa8
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    b7f6:	vldr	s9, [r0, #92]	; 0x5c
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
    b7fa:	vsub.f32	s10, s11, s15
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    b7fe:	vldr	s11, [r0, #112]	; 0x70
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    b802:	vmov.f32	s8, #96	; 0x3f000000  0.5
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    b806:	vfma.f32	s9, s3, s14
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    b80a:	vsub.f32	s12, s12, s11
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
    b80e:	vfma.f32	s15, s10, s1
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    b812:	vfma.f32	s11, s12, s1
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    b816:	vmov.f32	s14, s9
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
    b81a:	vldr	s9, [r0, #120]	; 0x78
    b81e:	vsub.f32	s13, s13, s9
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
    b822:	vstr	s15, [r0, #104]	; 0x68
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    b826:	vstr	s11, [r0, #112]	; 0x70
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
    b82a:	vfma.f32	s9, s13, s1
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    b82e:	vcvt.s32.f32	s13, s14
    b832:	vcvt.f32.s32	s13, s13
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
    b836:	vstr	s9, [r0, #120]	; 0x78
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    b83a:	vsub.f32	s14, s14, s13
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    b83e:	vcmpe.f32	s14, s8
    b842:	vmrs	APSR_nzcv, fpscr
    b846:	bmi.w	ba3c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc14>
    b84a:	vmov.f32	s15, #112	; 0x3f800000  1.0
    b84e:	vmov.f32	s12, #16	; 0x40800000  4.0
    b852:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    b856:	vsub.f32	s15, s15, s14
    b85a:	vfma.f32	s13, s15, s12
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
    b85e:	vmov.f32	s12, #104	; 0x3f400000  0.750
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
    b862:	cmp	r1, #0
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    b864:	vmov.f32	s6, #112	; 0x3f800000  1.0
    b868:	ldr	r1, [pc, #616]	; (bad4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcac>)
    b86a:	vabs.f32	s4, s13
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    b86e:	vldr	s15, [r0, #132]	; 0x84
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
    b872:	vadd.f32	s14, s14, s12
    b876:	mul.w	r1, r1, r2
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    b87a:	vadd.f32	s10, s13, s13
    b87e:	ldr	r2, [pc, #600]	; (bad8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb0>)
    b880:	vadd.f32	s4, s4, s6
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    b884:	vldr	s7, [r0, #136]	; 0x88
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    b888:	vcvt.s32.f32	s8, s14
    b88c:	add	r2, r1
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    b88e:	vmov.f32	s0, #96	; 0x3f000000  0.5
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b892:	vldr	s12, [r0, #152]	; 0x98
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    b896:	vdiv.f32	s13, s10, s4
    b89a:	vcvt.f32.s32	s10, s8
    b89e:	vldr	s8, [r0, #140]	; 0x8c
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
    b8a2:	ite	ne
    b8a4:	vmovne.f32	s4, s17
    b8a8:	vmoveq.f32	s4, s6
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    b8ac:	vsub.f32	s6, s6, s3
    b8b0:	vsub.f32	s14, s14, s10
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    b8b4:	vsub.f32	s4, s4, s15
  index *= size;
    b8b8:	vmul.f32	s14, s14, s20
    b8bc:	vcmpe.f32	s4, #0.0
  MAKE_INTEGRAL_FRACTIONAL(index)
    b8c0:	vcvt.s32.f32	s31, s14
    b8c4:	vmrs	APSR_nzcv, fpscr
  float a = table[index_integral];
    b8c8:	vmov	r1, s31
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    b8cc:	vcvt.f32.s32	s31, s31
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    b8d0:	it	le
    b8d2:	vmovle.f32	s0, s1
    b8d6:	lsls	r1, r1, #2
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    b8d8:	vsub.f32	s14, s14, s31
    b8dc:	add.w	ip, r6, r1
  float b = table[index_integral + 1];
    b8e0:	add	r1, r7
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    b8e2:	vfma.f32	s15, s4, s0
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    b8e6:	vmov	s4, r2

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b8ea:	vldr	s10, [ip]
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    b8ee:	vldr	s31, [r1]
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    b8f2:	vcvt.f32.u32	s0, s4
    b8f6:	vldr	s4, [r0, #156]	; 0x9c
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    b8fa:	vsub.f32	s31, s31, s10
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    b8fe:	vstr	s15, [r0, #132]	; 0x84
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    b902:	vfma.f32	s10, s14, s31
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    b906:	vldr	s14, [r0, #160]	; 0xa0
    b90a:	vmov.f32	s31, s14
    b90e:	vfnms.f32	s31, s0, s18
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    b912:	vsub.f32	s10, s10, s13
    b916:	vfma.f32	s13, s6, s10
    b91a:	vldr	s6, [r0, #148]	; 0x94
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    b91e:	vmov.f32	s10, #0	; 0x40000000  2.0
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    b922:	vmov.f32	s0, s31
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    b926:	vsub.f32	s31, s15, s7
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    b92a:	vfma.f32	s14, s0, s28
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    b92e:	vfma.f32	s7, s31, s29
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    b932:	vsub.f32	s13, s13, s19
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    b936:	vmov.f32	s0, #8	; 0x40400000  3.0
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    b93a:	vmul.f32	s13, s13, s11
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    b93e:	vstr	s14, [r0, #160]	; 0xa0
    b942:	vsub.f32	s15, s15, s7
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    b946:	vstr	s7, [r0, #136]	; 0x88
    b94a:	vldr	s7, [r0, #144]	; 0x90
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    b94e:	vabs.f32	s31, s13
    b952:	vmul.f32	s0, s13, s0
    b956:	vfms.f32	s15, s7, s12
    b95a:	vldr	s7, [pc, #384]	; badc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb4>
    b95e:	vadd.f32	s31, s31, s10
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    ONE_POLE(hp_, lp_, 0.005f);
    b962:	vldr	s10, [r0, #164]	; 0xa4
    b966:	vfms.f32	s15, s12, s8
    b96a:	vmov.f32	s13, s15
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    b96e:	vdiv.f32	s15, s0, s31
    b972:	vsub.f32	s13, s13, s4
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    ONE_POLE(hp_, lp_, 0.005f);
    b976:	vsub.f32	s0, s14, s10
    b97a:	vmul.f32	s13, s13, s6
    b97e:	vfma.f32	s10, s0, s27
    bp = g_ * hp + state_1_;
    b982:	vfma.f32	s12, s8, s13
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
    b986:	vsub.f32	s14, s14, s10
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    ONE_POLE(hp_, lp_, 0.005f);
    b98a:	vstr	s10, [r0, #164]	; 0xa4
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    b98e:	vfma.f32	s15, s11, s7
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    b992:	vfma.f32	s4, s8, s12
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b996:	vmov.f32	s11, s12
    b99a:	vfma.f32	s11, s8, s13
    b99e:	vsub.f32	s15, s17, s15
        mix -= transient * transient_env_lp_ * transient_level;
    b9a2:	vadd.f32	s14, s14, s4
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b9a6:	vfma.f32	s4, s8, s12
    b9aa:	vmul.f32	s9, s14, s9
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b9ae:	vstr	s11, [r0, #152]	; 0x98
    b9b2:	vfms.f32	s15, s25, s9
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b9b6:	vstr	s4, [r0, #156]	; 0x9c
    b9ba:	b.n	b772 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x94a>
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    b9bc:	vmov.f32	s9, #112	; 0x3f800000  1.0
    b9c0:	vldr	s15, [r0, #104]	; 0x68
    b9c4:	vmov.f32	s10, #12	; 0x40600000  3.5
    b9c8:	vldr	s13, [r0, #92]	; 0x5c
    b9cc:	vadd.f32	s5, s5, s24
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
    b9d0:	vldr	s11, [r0, #100]	; 0x64
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    b9d4:	vmov.f32	s8, s9
          if (phase_ >= 1.0f) {
            phase_ -= 1.0f;
          }
        }
      
        if (body_env_pulse_width_) {
    b9d8:	ldr.w	r1, [r0, #168]	; 0xa8
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    b9dc:	vmul.f32	s10, s22, s10
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    b9e0:	vmov.f32	s12, #96	; 0x3f000000  0.5
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
    b9e4:	vmul.f32	s11, s11, s23
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    b9e8:	vfma.f32	s8, s10, s15
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
    b9ec:	vstr	s11, [r0, #100]	; 0x64
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    b9f0:	vmul.f32	s10, s8, s5
	return __b;
      return __a;
    b9f4:	vcmpe.f32	s10, s12
    b9f8:	vmrs	APSR_nzcv, fpscr
    b9fc:	it	le
    b9fe:	vmovle.f32	s12, s10
    ba02:	vadd.f32	s13, s12, s13
          if (phase_ >= 1.0f) {
    ba06:	vcmpe.f32	s13, s9
    ba0a:	vmrs	APSR_nzcv, fpscr
            phase_ -= 1.0f;
    ba0e:	it	ge
    ba10:	vsubge.f32	s13, s13, s9
    ba14:	vstr	s13, [r0, #92]	; 0x5c
          }
        }
      
        if (body_env_pulse_width_) {
    ba18:	cmp	r1, #0
    ba1a:	bne.w	b7e8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9c0>
          --body_env_pulse_width_;
        } else {
          body_env_ *= body_env_decay;
    ba1e:	vldr	s12, [r0, #108]	; 0x6c
          transient_env_ *= transient_env_decay;
    ba22:	vldr	s13, [r0, #116]	; 0x74
    ba26:	vldr	s10, [pc, #184]	; bae0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb8>
        }
      
        if (body_env_pulse_width_) {
          --body_env_pulse_width_;
        } else {
          body_env_ *= body_env_decay;
    ba2a:	vmul.f32	s12, s30, s12
          transient_env_ *= transient_env_decay;
    ba2e:	vmul.f32	s13, s13, s10
        }
      
        if (body_env_pulse_width_) {
          --body_env_pulse_width_;
        } else {
          body_env_ *= body_env_decay;
    ba32:	vstr	s12, [r0, #108]	; 0x6c
          transient_env_ *= transient_env_decay;
    ba36:	vstr	s13, [r0, #116]	; 0x74
    ba3a:	b.n	b7f6 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9ce>
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    ba3c:	vmov.f32	s15, #16	; 0x40800000  4.0
    ba40:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    ba44:	vfma.f32	s13, s14, s15
    ba48:	b.n	b85e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa36>
    ba4a:	vmov.f32	s13, #16	; 0x40800000  4.0
    ba4e:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    ba52:	vfma.f32	s14, s15, s13
    ba56:	b.n	b6e2 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8ba>
    ba58:	str.w	r2, [lr]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    ba5c:	vstr	s2, [r0, #124]	; 0x7c
    ba60:	vstr	s5, [r0, #88]	; 0x58
      aux,
      size);
}
    ba64:	add	sp, #20
    ba66:	vpop	{d8-d15}
    ba6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  overdrive_.Process(
      0.5f + 0.5f * drive,
      out,
      size);

  synthetic_bass_drum_.Render(
    ba6e:	vmov.f32	s15, #80	; 0x3e800000  0.250
    ba72:	vldr	s3, [pc, #112]	; bae4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcbc>
    ba76:	vldr	s22, [r1, #16]
    ba7a:	vmov.f32	s7, s3
    ba7e:	vmul.f32	s15, s13, s15
    ba82:	vfms.f32	s7, s13, s15
    ba86:	b.n	b49c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x674>
    ba88:	vldr	s14, [pc, #92]	; bae8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc0>
    ba8c:	vadd.f32	s15, s15, s14
    ba90:	vcvt.s32.f32	s14, s15
    ba94:	vmov	r5, s14
    ba98:	vcvt.f32.s32	s14, s14
    ba9c:	vsub.f32	s15, s15, s14
    baa0:	vmov.f32	s14, s15
    baa4:	vcvt.s32.f32	s14, s14, #8
    baa8:	vmov	r4, s14
    baac:	b.w	ae66 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    bab0:	vcmpe.f32	s14, #0.0
    bab4:	vldr	s9, [pc, #52]	; baec <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc4>
    bab8:	vmrs	APSR_nzcv, fpscr
    babc:	it	pl
    babe:	vmovpl.f32	s9, s14
    bac2:	b.w	aeb6 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e>
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    return -1.0f;
  } else if (x > 3.0f) {
    bac6:	vmov.f32	s14, #112	; 0x3f800000  1.0
    baca:	b.n	b3f0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c8>
    bacc:	vldr	s23, [pc, #32]	; baf0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc8>
    bad0:	b.n	b4ea <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c2>
    bad2:	nop
    bad4:	.word	0x0019660d
    bad8:	.word	0x3c6ef35f
    badc:	.word	0x3e99999a
    bae0:	.word	0x3f7eeeef
    bae4:	.word	0x3ecccccd
    bae8:	.word	0x43000000
    baec:	.word	0x00000000
    baf0:	.word	0x3f7f5555

0000baf4 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void NoiseEngine::Init(BufferAllocator* allocator) {
    baf4:	push	{r4, r5, r6, r7}
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    baf6:	ldr	r6, [r1, #8]
 public:
  ClockedNoise() { }
  ~ClockedNoise() { }
  
  void Init() {
    phase_ = 0.0f;
    baf8:	movs	r3, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bafa:	ldr	r5, [pc, #92]	; (bb58 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x64>)
    r_ = 1.0f / resonance;
    bafc:	ldr	r4, [pc, #92]	; (bb5c <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x68>)
    bafe:	cmp	r6, #95	; 0x5f
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bb00:	ldr	r2, [pc, #92]	; (bb60 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x6c>)
    sample_ = 0.0f;
    next_sample_ = 0.0f;
    frequency_ = 0.001f;
    bb02:	ldr	r7, [pc, #96]	; (bb64 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x70>)
 public:
  ClockedNoise() { }
  ~ClockedNoise() { }
  
  void Init() {
    phase_ = 0.0f;
    bb04:	str	r3, [r0, #16]
    sample_ = 0.0f;
    bb06:	str	r3, [r0, #20]
    next_sample_ = 0.0f;
    bb08:	str	r3, [r0, #24]
 public:
  ClockedNoise() { }
  ~ClockedNoise() { }
  
  void Init() {
    phase_ = 0.0f;
    bb0a:	str	r3, [r0, #32]
    sample_ = 0.0f;
    bb0c:	str	r3, [r0, #36]	; 0x24
    next_sample_ = 0.0f;
    bb0e:	str	r3, [r0, #40]	; 0x28
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    bb10:	str	r3, [r0, #64]	; 0x40
    bb12:	str	r3, [r0, #60]	; 0x3c
    bb14:	str	r3, [r0, #84]	; 0x54
    bb16:	str	r3, [r0, #80]	; 0x50
    bb18:	str	r3, [r0, #104]	; 0x68
    bb1a:	str	r3, [r0, #100]	; 0x64
  clocked_noise_[1].Init();
  lp_hp_filter_.Init();
  bp_filter_[0].Init();
  bp_filter_[1].Init();

  previous_f0_ = 0.0f;
    bb1c:	str	r3, [r0, #108]	; 0x6c
  previous_f1_ = 0.0f;
    bb1e:	str	r3, [r0, #112]	; 0x70
  previous_q_ = 0.0f;
    bb20:	str	r3, [r0, #116]	; 0x74
  previous_mode_ = 0.0f;
    bb22:	str	r3, [r0, #120]	; 0x78
    frequency_ = 0.001f;
    bb24:	str	r7, [r0, #28]
    bb26:	str	r7, [r0, #44]	; 0x2c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bb28:	str	r5, [r0, #48]	; 0x30
    bb2a:	str	r5, [r0, #68]	; 0x44
    bb2c:	str	r5, [r0, #88]	; 0x58
    r_ = 1.0f / resonance;
    bb2e:	str	r4, [r0, #52]	; 0x34
    bb30:	str	r4, [r0, #72]	; 0x48
    bb32:	str	r4, [r0, #92]	; 0x5c
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bb34:	str	r2, [r0, #56]	; 0x38
    bb36:	str	r2, [r0, #76]	; 0x4c
    bb38:	str	r2, [r0, #96]	; 0x60
    bb3a:	bls.n	bb4e <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x5a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    bb3c:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    bb3e:	subs	r6, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    bb40:	add.w	r2, r3, #96	; 0x60
      free_ -= size_bytes;
    bb44:	str	r6, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    bb46:	str	r2, [r1, #0]

  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    bb48:	str	r3, [r0, #124]	; 0x7c
}
    bb4a:	pop	{r4, r5, r6, r7}
    bb4c:	bx	lr
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    bb4e:	movs	r3, #0
    bb50:	pop	{r4, r5, r6, r7}
  previous_f0_ = 0.0f;
  previous_f1_ = 0.0f;
  previous_q_ = 0.0f;
  previous_mode_ = 0.0f;

  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    bb52:	str	r3, [r0, #124]	; 0x7c
}
    bb54:	bx	lr
    bb56:	nop
    bb58:	.word	0x3d00ba22
    bb5c:	.word	0x3c23d70a
    bb60:	.word	0x3f7faaca
    bb64:	.word	0x3a83126f

0000bb68 <plaits::NoiseEngine::Reset()>:

void NoiseEngine::Reset() {
    bb68:	bx	lr
    bb6a:	nop

0000bb6c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bb6c:	vmov.f32	s14, #34	; 0x41100000  9.0
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
    bb70:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bb74:	vldr	s13, [pc, #840]	; bec0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x354>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bb78:	vsub.f32	s14, s15, s14
void NoiseEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    bb7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bb80:	vcmpe.f32	s14, s13
    bb84:	vpush	{d8-d15}
    bb88:	vmrs	APSR_nzcv, fpscr
    bb8c:	ldr.w	ip, [sp, #96]	; 0x60
    bb90:	bmi.n	bba8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c>
    bb92:	vldr	s13, [pc, #816]	; bec4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x358>
    bb96:	vcmpe.f32	s14, s13
    bb9a:	vmrs	APSR_nzcv, fpscr
    bb9e:	ble.w	c292 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x726>
    bba2:	movs	r4, #0
    bba4:	movs	r7, #255	; 0xff
    bba6:	b.n	bbac <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
    bba8:	movs	r4, #0
    bbaa:	mov	r7, r4
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bbac:	vldr	s13, [r1, #16]
    bbb0:	vmov.f32	s10, #56	; 0x41c00000  24.0
    bbb4:	vldr	s14, [pc, #784]	; bec8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x35c>
    bbb8:	vmov.f32	s11, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bbbc:	ldr	r6, [pc, #780]	; (becc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x360>)
    bbbe:	vfma.f32	s15, s13, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bbc2:	ldr	r5, [pc, #780]	; (bed0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x364>)
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bbc4:	vldr	s13, [pc, #760]	; bec0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x354>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bbc8:	add.w	r7, r6, r7, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bbcc:	add.w	r4, r5, r4, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    bbd0:	vldr	s12, [pc, #768]	; bed4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    bbd4:	vldr	s14, [r7]
    bbd8:	vldr	s5, [r4]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bbdc:	vsub.f32	s15, s15, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    bbe0:	vmul.f32	s14, s14, s5
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bbe4:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    bbe8:	vmul.f32	s5, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bbec:	vcmpe.f32	s15, s13
    bbf0:	vmrs	APSR_nzcv, fpscr
    bbf4:	bmi.n	bc0c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa0>
    bbf6:	vldr	s14, [pc, #716]	; bec4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x358>
    bbfa:	vcmpe.f32	s15, s14
    bbfe:	vmrs	APSR_nzcv, fpscr
    bc02:	ble.w	c26c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x700>
    bc06:	movs	r4, #0
    bc08:	movs	r7, #255	; 0xff
    bc0a:	b.n	bc10 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa4>
    bc0c:	movs	r4, #0
    bc0e:	mov	r7, r4
  const float f0 = NoteToFrequency(parameters.note);
  const float f1 = NoteToFrequency(
      parameters.note + parameters.harmonics * 48.0f - 24.0f);
  const float clock_lowest_note = parameters.trigger & TRIGGER_UNPATCHED
    bc10:	ldrb.w	r9, [r1]
      ? 0.0f
      : -24.0f;
    bc14:	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    bc18:	vldr	s14, [pc, #700]	; bed8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bc1c:	add.w	r7, r6, r7, lsl #2
    bc20:	and.w	lr, r9, #2
    bc24:	vldr	s11, [pc, #692]	; bedc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>
    bc28:	vldr	s12, [pc, #692]	; bee0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x374>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bc2c:	add.w	r4, r5, r4, lsl #2
    bc30:	cmp.w	lr, #0
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bc34:	vldr	s8, [r1, #8]
    bc38:	vmov.f32	s10, #34	; 0x41100000  9.0
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    bc3c:	vldr	s13, [r7]
    bc40:	it	ne
    bc42:	vmovne.f32	s15, s14
    bc46:	vldr	s14, [r4]
    bc4a:	it	ne
    bc4c:	vmovne.f32	s12, s11
    bc50:	vldr	s9, [pc, #640]	; bed4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    bc54:	vmul.f32	s14, s13, s14

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bc58:	vldr	s13, [pc, #612]	; bec0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x354>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bc5c:	vfma.f32	s15, s8, s12
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    bc60:	vmul.f32	s6, s14, s9
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bc64:	vsub.f32	s15, s15, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bc68:	vcmpe.f32	s15, s13
    bc6c:	vmrs	APSR_nzcv, fpscr
    bc70:	bmi.n	bc88 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11c>
    bc72:	vldr	s14, [pc, #592]	; bec4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x358>
    bc76:	vcmpe.f32	s15, s14
    bc7a:	vmrs	APSR_nzcv, fpscr
    bc7e:	ble.w	c24a <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6de>
    bc82:	movs	r4, #0
    bc84:	movs	r7, #255	; 0xff
    bc86:	b.n	bc8c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x120>
    bc88:	movs	r4, #0
    bc8a:	mov	r7, r4

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    bc8c:	vldr	s12, [pc, #596]	; bee4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x378>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bc90:	add.w	r4, r5, r4, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    bc94:	vldr	s11, [r1, #12]
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bc98:	add.w	r7, r6, r7, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    bc9c:	vldr	s15, [pc, #572]	; bedc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>
  const float clock_f = NoteToFrequency(
      parameters.timbre * (128.0f - clock_lowest_note) + clock_lowest_note);
  const float q = 0.5f * SemitonesToRatio(parameters.morph * 120.0f);
    bca0:	vmov.f32	s13, #96	; 0x3f000000  0.5
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    bca4:	vldr	s18, [r4]
    bca8:	and.w	r9, r9, #1
    bcac:	vfma.f32	s15, s11, s12
    bcb0:	vldr	s14, [r7]
    bcb4:	vldr	s12, [pc, #540]	; bed4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    bcb8:	vmul.f32	s14, s14, s18
    bcbc:	vmul.f32	s18, s14, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    bcc0:	vcvt.s32.f32	s14, s15
  }

  void Render(bool sync, float frequency, float* out, size_t size) {
    CONSTRAIN(frequency, 0.0f, 1.0f);
    bcc4:	vcmpe.f32	s18, #0.0

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bcc8:	vcvt.f32.s32	s12, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bccc:	vmov	r4, s14
    bcd0:	add.w	r6, r6, r4, lsl #2
    bcd4:	vmrs	APSR_nzcv, fpscr
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bcd8:	vsub.f32	s15, s15, s12
    bcdc:	vldr	s4, [r6]
    bce0:	vcvt.s32.f32	s15, s15, #8
    bce4:	vmov	r4, s15
    bce8:	add.w	r5, r5, r4, lsl #2
    bcec:	vldr	s15, [r5]
    bcf0:	vmul.f32	s15, s15, s4
    bcf4:	vmul.f32	s4, s15, s13
    bcf8:	bmi.w	c2be <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x752>
    bcfc:	vmov.f32	s15, #112	; 0x3f800000  1.0
    bd00:	vcmpe.f32	s18, s15
    bd04:	vmrs	APSR_nzcv, fpscr
    bd08:	it	le
    bd0a:	vmovle.f32	s15, s18
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    bd0e:	vldr	s12, [r0, #28]
    increment_ = (new_value - *state) / static_cast<float>(size);
    bd12:	vmov	s14, ip
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);

    float next_sample = next_sample_;
    bd16:	vldr	s10, [r0, #24]
    bd1a:	vcvt.f32.u32	s7, s14
    float sample = sample_;
    bd1e:	vldr	s8, [r0, #20]
    bd22:	vsub.f32	s15, s15, s12
    bd26:	vdiv.f32	s17, s15, s7
    
    if (sync) {
    bd2a:	cmp.w	r9, #0
    bd2e:	beq.n	bd36 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1ca>
      phase_ = 1.0f;
    bd30:	mov.w	r4, #1065353216	; 0x3f800000
    bd34:	str	r4, [r0, #16]
    }

    while (size--) {
    bd36:	add.w	r5, ip, #4294967295
    bd3a:	cmp.w	ip, #0
    bd3e:	beq.n	be30 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>
    bd40:	ldr.w	r8, [pc, #428]	; bef0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    bd44:	vmov.f32	s16, #0	; 0x40000000  2.0
    bd48:	vmov.f32	s0, #240	; 0xbf800000 -1.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    bd4c:	mov	r7, r3
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
    bd4e:	vmov.f32	s1, #80	; 0x3e800000  0.250
    bd52:	ldr.w	r4, [r8]
    bd56:	vmov.f32	s2, #16	; 0x40800000  4.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    bd5a:	mov	r6, r5
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    bd5c:	vmov.f32	s9, #112	; 0x3f800000  1.0
    bd60:	ldr.w	sl, [pc, #400]	; bef4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    bd64:	vmov.f32	s20, #96	; 0x3f000000  0.5
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    bd68:	vldr	s3, [pc, #380]	; bee8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    bd6c:	vldr	s19, [pc, #360]	; bed8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    bd70:	b.n	bde6 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27a>
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    bd72:	vcmp.f32	s15, s9
    bd76:	vmrs	APSR_nzcv, fpscr
    bd7a:	it	gt
    bd7c:	vmovgt.f32	s15, s9
      
      phase_ += frequency;
    bd80:	vldr	s14, [r0, #16]
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    bd84:	vmov.f32	s11, #224	; 0xbf000000 -0.5
      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
    bd88:	vadd.f32	s14, s12, s14
      
      if (phase_ >= 1.0f) {
    bd8c:	vcmpe.f32	s14, s9
    bd90:	vmrs	APSR_nzcv, fpscr
    bd94:	blt.n	be1e <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b2>
        phase_ -= 1.0f;
    bd96:	vsub.f32	s14, s14, s9
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
    bd9a:	vsub.f32	s22, s13, s8
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
    bd9e:	vmov.f32	s8, s13
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
    bda2:	vdiv.f32	s21, s14, s12
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    bda6:	vstr	s14, [r0, #16]
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    bdaa:	vmul.f32	s14, s21, s20
    bdae:	vsub.f32	s23, s9, s21
    bdb2:	vmul.f32	s14, s14, s21
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    bdb6:	vmul.f32	s11, s23, s11
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    bdba:	vfma.f32	s10, s22, s14
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    bdbe:	vmul.f32	s11, s11, s23
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    bdc2:	vmov.f32	s14, s10
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    bdc6:	vmov.f32	s10, s19
    bdca:	vfma.f32	s10, s22, s11
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    bdce:	vsub.f32	s13, s13, s14
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    bdd2:	subs	r6, #1
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
    bdd4:	vadd.f32	s10, s10, s8
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    bdd8:	cmp.w	r6, #4294967295
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    bddc:	vfma.f32	s14, s13, s15
    bde0:	vstmia	r7!, {s14}
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    bde4:	beq.n	be2c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
  }

  inline float Next() {
    value_ += increment_;
    bde6:	vadd.f32	s12, s12, s17
    bdea:	mul.w	lr, sl, r4
    bdee:	ldr	r4, [pc, #252]	; (beec <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>)
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    bdf0:	vmov.f32	s13, s0
      float raw_amount = 4.0f * (frequency - 0.25f);
    bdf4:	vsub.f32	s15, s12, s1
    bdf8:	add	r4, lr
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    bdfa:	vmov	s14, r4
      float raw_amount = 4.0f * (frequency - 0.25f);
    bdfe:	vmul.f32	s15, s15, s2
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    be02:	vcvt.f32.u32	s14, s14
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    be06:	vcmpe.f32	s15, #0.0
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    be0a:	vmul.f32	s14, s14, s3
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    be0e:	vmrs	APSR_nzcv, fpscr
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    be12:	vfma.f32	s13, s14, s16
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    be16:	bpl.n	bd72 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x206>
    be18:	vldr	s15, [pc, #188]	; bed8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    be1c:	b.n	bd80 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x214>
      
      phase_ += frequency;
    be1e:	vstr	s14, [r0, #16]
    be22:	vmov.f32	s14, s10
      phase_ = 1.0f;
    }

    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    be26:	vldr	s10, [pc, #176]	; bed8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    be2a:	b.n	bdce <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x262>
    be2c:	str.w	r4, [r8]
  const bool sync = parameters.trigger & TRIGGER_RISING_EDGE;
  clocked_noise_[0].Render(sync, clock_f, aux, size);
  clocked_noise_[1].Render(sync, clock_f * f1 / f0, temp_buffer_, size);
    be30:	vmul.f32	s18, s6, s18
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    }
    next_sample_ = next_sample;
    be34:	vstr	s10, [r0, #24]
    sample_ = sample;
    be38:	vstr	s8, [r0, #20]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    be3c:	vstr	s12, [r0, #28]
    be40:	vdiv.f32	s15, s18, s5
    be44:	ldr	r7, [r0, #124]	; 0x7c
    next_sample_ = 0.0f;
    frequency_ = 0.001f;
  }

  void Render(bool sync, float frequency, float* out, size_t size) {
    CONSTRAIN(frequency, 0.0f, 1.0f);
    be46:	vcmpe.f32	s15, #0.0
    be4a:	vmrs	APSR_nzcv, fpscr
    be4e:	bmi.w	c2b8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x74c>
    be52:	vmov.f32	s14, #112	; 0x3f800000  1.0
    be56:	vcmp.f32	s15, s14
    be5a:	vmrs	APSR_nzcv, fpscr
    be5e:	it	gt
    be60:	vmovgt.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    be64:	vldr	s12, [r0, #44]	; 0x2c
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);

    float next_sample = next_sample_;
    be68:	vldr	s3, [r0, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    be6c:	vsub.f32	s15, s15, s12
    float sample = sample_;
    be70:	vldr	s2, [r0, #36]	; 0x24
    be74:	vdiv.f32	s18, s15, s7
    
    if (sync) {
    be78:	cmp.w	r9, #0
    be7c:	beq.n	be84 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x318>
      phase_ = 1.0f;
    be7e:	mov.w	r4, #1065353216	; 0x3f800000
    be82:	str	r4, [r0, #32]
    }

    while (size--) {
    be84:	cmp.w	ip, #0
    be88:	beq.w	bfb6 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44a>
    be8c:	ldr.w	r8, [pc, #96]	; bef0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    be90:	vmov.f32	s17, #0	; 0x40000000  2.0
    be94:	vmov.f32	s16, #240	; 0xbf800000 -1.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    be98:	mov	lr, r7
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
    be9a:	vmov.f32	s0, #80	; 0x3e800000  0.250
    be9e:	ldr.w	r4, [r8]
    bea2:	vmov.f32	s1, #16	; 0x40800000  4.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    bea6:	mov	r6, r5
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    bea8:	vmov.f32	s10, #112	; 0x3f800000  1.0
    beac:	ldr.w	sl, [pc, #68]	; bef4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    beb0:	vmov.f32	s20, #96	; 0x3f000000  0.5
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    beb4:	vldr	s8, [pc, #48]	; bee8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    beb8:	vldr	s19, [pc, #28]	; bed8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    bebc:	b.n	bf6c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x400>
    bebe:	nop
    bec0:	.word	0xc3000000
    bec4:	.word	0x42fe0000
    bec8:	.word	0x42400000
    becc:	.word	0x20000024
    bed0:	.word	0x20000428
    bed4:	.word	0x39969651
    bed8:	.word	0x00000000
    bedc:	.word	0x43000000
    bee0:	.word	0x43180000
    bee4:	.word	0x42f00000
    bee8:	.word	0x2f800000
    beec:	.word	0x3c6ef35f
    bef0:	.word	0x2001f96c
    bef4:	.word	0x0019660d
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    bef8:	vcmp.f32	s15, s10
    befc:	vmrs	APSR_nzcv, fpscr
    bf00:	it	gt
    bf02:	vmovgt.f32	s15, s10
      
      phase_ += frequency;
    bf06:	vldr	s14, [r0, #32]
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    bf0a:	vmov.f32	s11, #224	; 0xbf000000 -0.5
      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
    bf0e:	vadd.f32	s14, s12, s14
      
      if (phase_ >= 1.0f) {
    bf12:	vcmpe.f32	s14, s10
    bf16:	vmrs	APSR_nzcv, fpscr
    bf1a:	blt.n	bfa4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x438>
        phase_ -= 1.0f;
    bf1c:	vsub.f32	s14, s14, s10
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
    bf20:	vsub.f32	s21, s13, s2
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
    bf24:	vmov.f32	s2, s13
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
    bf28:	vdiv.f32	s9, s14, s12
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    bf2c:	vstr	s14, [r0, #32]
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    bf30:	vmul.f32	s14, s9, s20
    bf34:	vsub.f32	s22, s10, s9
    bf38:	vmul.f32	s14, s14, s9
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    bf3c:	vmul.f32	s11, s22, s11
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    bf40:	vfma.f32	s3, s21, s14
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    bf44:	vmul.f32	s11, s11, s22
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    bf48:	vmov.f32	s14, s3
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    bf4c:	vmov.f32	s3, s19
    bf50:	vfma.f32	s3, s21, s11
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    bf54:	vsub.f32	s13, s13, s14
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    bf58:	subs	r6, #1
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
    bf5a:	vadd.f32	s3, s3, s2
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    bf5e:	cmp.w	r6, #4294967295
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    bf62:	vfma.f32	s14, s13, s15
    bf66:	vstmia	lr!, {s14}
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    bf6a:	beq.n	bfb2 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x446>
  }

  inline float Next() {
    value_ += increment_;
    bf6c:	vadd.f32	s12, s12, s18
    bf70:	mul.w	r9, sl, r4
    bf74:	ldr	r4, [pc, #844]	; (c2c4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x758>)
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    bf76:	vmov.f32	s13, s16
      float raw_amount = 4.0f * (frequency - 0.25f);
    bf7a:	vsub.f32	s15, s12, s0
    bf7e:	add	r4, r9
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    bf80:	vmov	s14, r4
      float raw_amount = 4.0f * (frequency - 0.25f);
    bf84:	vmul.f32	s15, s15, s1
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    bf88:	vcvt.f32.u32	s14, s14
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    bf8c:	vcmpe.f32	s15, #0.0
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    bf90:	vmul.f32	s14, s14, s8
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    bf94:	vmrs	APSR_nzcv, fpscr
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    bf98:	vfma.f32	s13, s14, s17
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    bf9c:	bpl.n	bef8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x38c>
    bf9e:	vldr	s15, [pc, #808]	; c2c8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    bfa2:	b.n	bf06 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x39a>
      
      phase_ += frequency;
    bfa4:	vstr	s14, [r0, #32]
    bfa8:	vmov.f32	s14, s3
      phase_ = 1.0f;
    }

    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    bfac:	vldr	s3, [pc, #792]	; c2c8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    bfb0:	b.n	bf54 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
    bfb2:	str.w	r4, [r8]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    bfb6:	vstr	s12, [r0, #44]	; 0x2c
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    bfba:	vldr	s8, [r0, #120]	; 0x78
    increment_ = (new_value - *state) / static_cast<float>(size);
    bfbe:	vldr	s15, [r1, #16]
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    bfc2:	vldr	s11, [r0, #108]	; 0x6c
    bfc6:	vldr	s10, [r0, #112]	; 0x70
    increment_ = (new_value - *state) / static_cast<float>(size);
    bfca:	vsub.f32	s15, s15, s8
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    bfce:	vldr	s9, [r0, #116]	; 0x74
    increment_ = (new_value - *state) / static_cast<float>(size);
    bfd2:	vsub.f32	s5, s5, s11
    bfd6:	vsub.f32	s6, s6, s10
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    }
    next_sample_ = next_sample;
    bfda:	vstr	s3, [r0, #40]	; 0x28
    bfde:	vsub.f32	s4, s4, s9
    sample_ = sample;
    bfe2:	vstr	s2, [r0, #36]	; 0x24
    bfe6:	vdiv.f32	s17, s15, s7
    bfea:	vdiv.f32	s20, s5, s7
    bfee:	vdiv.f32	s19, s6, s7
    bff2:	vdiv.f32	s18, s4, s7
  ParameterInterpolator mode_modulation(
      &previous_mode_, parameters.harmonics, size);
  
  const float* in_1 = aux;
  const float* in_2 = temp_buffer_;
  while (size--) {
    bff6:	cmp.w	ip, #0
    bffa:	beq.w	c232 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c6>
    return sqrtf(x);
  }
#else
  inline float Sqrt(float x) {
    float result;
    __asm ("vsqrt.f32 %0, %1" : "=w" (result) : "w" (x) );
    bffe:	vldr	s16, [pc, #716]	; c2cc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x760>
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c002:	vldr	s0, [pc, #716]	; c2d0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x764>
    c006:	vldr	s1, [pc, #716]	; c2d4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x768>
    c00a:	vldr	s2, [pc, #716]	; c2d8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x76c>
    c00e:	vmov.f32	s3, #96	; 0x3f000000  0.5
    c012:	vldr	s4, [pc, #712]	; c2dc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x770>
    c016:	vldr	s5, [pc, #712]	; c2e0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x774>
    c01a:	vldr	s6, [pc, #712]	; c2e4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x778>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
    c01e:	vldr	s7, [pc, #680]	; c2c8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
  }

  inline float Next() {
    value_ += increment_;
    c022:	vadd.f32	s11, s11, s20
      const float* in,
      float* out,
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    c026:	vldr	s22, [r0, #60]	; 0x3c
    c02a:	vadd.f32	s10, s10, s19
    float state_2 = state_2_;
    c02e:	vldr	s25, [r0, #64]	; 0x40
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c032:	vmov.f32	s13, s1
    c036:	subs	r5, #1
      const float a = 3.333314036e-01 * M_PI_POW_3;
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
    c038:	vmul.f32	s21, s11, s11
    c03c:	vmul.f32	s12, s10, s10
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c040:	vmov.f32	s15, s1
    c044:	vfma.f32	s13, s21, s0
    c048:	vmov.f32	s23, s2
    c04c:	vfma.f32	s15, s12, s0
    c050:	vadd.f32	s9, s9, s18
    c054:	vmov.f32	s24, s4
    const float f0 = f0_modulation.Next();
    const float f1 = f1_modulation.Next();
    const float q = q_modulation.Next();
    const float gain = 1.0f / Sqrt((0.5f + q) * 40.0f * f0);
    c058:	vmov.f32	s14, #112	; 0x3f800000  1.0
    c05c:	vfma.f32	s23, s21, s13
    c060:	vmov.f32	s13, s2
    c064:	vmov.f32	s30, s6
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    c068:	vdiv.f32	s27, s14, s9
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c06c:	vfma.f32	s13, s12, s15
    c070:	vadd.f32	s15, s9, s3
    c074:	vfma.f32	s24, s21, s23
    c078:	vmov.f32	s23, s4
    c07c:	vmul.f32	s15, s15, s16
    c080:	vadd.f32	s8, s8, s17
    c084:	vfma.f32	s23, s12, s13
    c088:	vmul.f32	s15, s15, s11
    c08c:	vsqrt.f32	s15, s15
    c090:	vdiv.f32	s13, s14, s15
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    c094:	vstr	s27, [r0, #72]	; 0x48
    c098:	vstr	s27, [r0, #92]	; 0x5c
    c09c:	vstr	s27, [r0, #52]	; 0x34
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c0a0:	vmov.f32	s15, s5
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    c0a4:	vmov.f32	s28, #0	; 0x40000000  2.0
    c0a8:	vneg.f32	s29, s8
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c0ac:	vfma.f32	s15, s21, s24
    c0b0:	vmov.f32	s24, s5
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    float lp_gain = std::max(1.0f - mode * 2.0f, 0.0f);
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    c0b4:	vneg.f32	s26, s22
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c0b8:	vfma.f32	s24, s12, s23
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    c0bc:	vsub.f32	s23, s8, s3
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c0c0:	vfma.f32	s30, s21, s15
    c0c4:	vmov.f32	s21, s6
    c0c8:	vfma.f32	s21, s12, s24
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    c0cc:	vmov.f32	s24, s14
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c0d0:	vmul.f32	s15, s30, s11
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    c0d4:	vfma.f32	s24, s29, s28
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    c0d8:	vmov.f32	s29, s14

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    c0dc:	vstr	s15, [r0, #68]	; 0x44
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c0e0:	vmov.f32	s12, s21

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    c0e4:	vstr	s15, [r0, #48]	; 0x30
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    c0e8:	vabs.f32	s21, s23
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    c0ec:	vmul.f32	s12, s12, s10
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    c0f0:	vfms.f32	s29, s21, s28
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c0f4:	vmov.f32	s28, s14

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    c0f8:	vstr	s12, [r0, #88]	; 0x58
    c0fc:	vcmp.f32	s24, #0.0
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    float lp_gain = std::max(1.0f - mode * 2.0f, 0.0f);
    c100:	vmov.f32	s23, s24
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c104:	vfma.f32	s28, s12, s27
    c108:	vmrs	APSR_nzcv, fpscr
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    c10c:	vmov.f32	s21, s29
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c110:	vmov.f32	s29, s14
    c114:	it	gt
    c116:	vmovgt.f32	s24, s7
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    c11a:	it	mi
    c11c:	vmovmi.f32	s23, s7
  ParameterInterpolator mode_modulation(
      &previous_mode_, parameters.harmonics, size);
  
  const float* in_1 = aux;
  const float* in_2 = temp_buffer_;
  while (size--) {
    c120:	adds	r1, r5, #1
    c122:	vfma.f32	s29, s15, s27
    c126:	vfma.f32	s28, s12, s12
    c12a:	vfma.f32	s29, s15, s15
    c12e:	vmov.f32	s12, s28
    c132:	vdiv.f32	s28, s14, s29
    c136:	vdiv.f32	s29, s14, s12
    c13a:	vstr	s28, [r0, #76]	; 0x4c
    c13e:	vstr	s28, [r0, #56]	; 0x38
    c142:	vstr	s29, [r0, #96]	; 0x60
    const float gain = 1.0f / Sqrt((0.5f + q) * 40.0f * f0);
    lp_hp_filter_.set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[0].set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[1].set_f_q<FREQUENCY_ACCURATE>(f1, q);
    
    float input_1 = *in_1++ * gain;
    c146:	vldr	s14, [r3]
    float input_2 = *in_2++ * gain;
    c14a:	vldmia	r7!, {s12}
    const float gain = 1.0f / Sqrt((0.5f + q) * 40.0f * f0);
    lp_hp_filter_.set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[0].set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[1].set_f_q<FREQUENCY_ACCURATE>(f1, q);
    
    float input_1 = *in_1++ * gain;
    c14e:	vmul.f32	s14, s13, s14
    float input_2 = *in_2++ * gain;
    c152:	vmul.f32	s13, s13, s12
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    float lp_gain = std::max(1.0f - mode * 2.0f, 0.0f);
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    c156:	vmov.f32	s12, s14
    c15a:	vfma.f32	s12, s26, s27
    c15e:	vfma.f32	s12, s26, s15
    c162:	vsub.f32	s12, s12, s25
    c166:	vmul.f32	s12, s12, s28
      bp = g_ * hp + state_1;
    c16a:	vfma.f32	s22, s15, s12
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    c16e:	vfma.f32	s25, s15, s22
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
    c172:	vmul.f32	s21, s21, s22
      ++in;
      ++out;
    }
    state_1_ = state_1;
    c176:	vmov.f32	s26, s22
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
    c17a:	vfma.f32	s21, s24, s12
      ++in;
      ++out;
    }
    state_1_ = state_1;
    c17e:	vfma.f32	s26, s15, s12
    state_2_ = state_2;
    c182:	vmov.f32	s28, s25
    c186:	vfma.f32	s28, s15, s22
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
    c18a:	vmov.f32	s15, s21
    c18e:	vfma.f32	s15, s23, s25
    c192:	vstmia	r2!, {s15}
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c196:	vldr	s21, [r0, #80]	; 0x50
    c19a:	vldr	s22, [r0, #72]	; 0x48
    c19e:	vldr	s12, [r0, #100]	; 0x64
    c1a2:	vfms.f32	s14, s22, s21
    c1a6:	vldr	s15, [r0, #92]	; 0x5c
    c1aa:	vldr	s24, [r0, #68]	; 0x44
    c1ae:	vfms.f32	s13, s15, s12
    c1b2:	vldr	s25, [r0, #88]	; 0x58
    c1b6:	vldr	s23, [r0, #84]	; 0x54
    c1ba:	vldr	s22, [r0, #104]	; 0x68
    c1be:	vldr	s15, [r0, #76]	; 0x4c
    c1c2:	vfms.f32	s14, s21, s24
    c1c6:	vldr	s27, [r0, #96]	; 0x60
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
      ++in;
      ++out;
    }
    state_1_ = state_1;
    state_2_ = state_2;
    c1ca:	vstr	s28, [r0, #64]	; 0x40
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c1ce:	vfms.f32	s13, s12, s25
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
      ++in;
      ++out;
    }
    state_1_ = state_1;
    c1d2:	vstr	s26, [r0, #60]	; 0x3c
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c1d6:	vsub.f32	s14, s14, s23
    c1da:	vsub.f32	s13, s13, s22
    c1de:	vmul.f32	s15, s14, s15
    c1e2:	vmul.f32	s14, s13, s27
    bp = g_ * hp + state_1_;
    c1e6:	vfma.f32	s21, s24, s15
    c1ea:	vmov.f32	s13, s12
    c1ee:	vfma.f32	s13, s25, s14
    state_1_ = g_ * hp + bp;
    c1f2:	vmov.f32	s12, s21
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c1f6:	vfma.f32	s23, s24, s21
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c1fa:	vfma.f32	s12, s24, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c1fe:	vfma.f32	s22, s25, s13
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c202:	vmov.f32	s15, s13
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c206:	vfma.f32	s23, s24, s21
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c20a:	vfma.f32	s15, s25, s14
    c20e:	vstr	s12, [r0, #80]	; 0x50
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c212:	vfma.f32	s22, s25, s13
    c216:	vstr	s23, [r0, #84]	; 0x54
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c21a:	vmov.f32	s14, s15
    lp_hp_filter_.ProcessMultimodeLPtoHP(
        &input_1, out++, 1, mode_modulation.Next());
    *aux++ = bp_filter_[0].Process<FILTER_MODE_BAND_PASS>(input_1) + \
        bp_filter_[1].Process<FILTER_MODE_BAND_PASS>(input_2);
    c21e:	vadd.f32	s15, s13, s21
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c222:	vstr	s22, [r0, #104]	; 0x68
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c226:	vstr	s14, [r0, #100]	; 0x64
    c22a:	vstmia	r3!, {s15}
  ParameterInterpolator mode_modulation(
      &previous_mode_, parameters.harmonics, size);
  
  const float* in_1 = aux;
  const float* in_2 = temp_buffer_;
  while (size--) {
    c22e:	bne.w	c022 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b6>
    lp_hp_filter_.ProcessMultimodeLPtoHP(
        &input_1, out++, 1, mode_modulation.Next());
    *aux++ = bp_filter_[0].Process<FILTER_MODE_BAND_PASS>(input_1) + \
        bp_filter_[1].Process<FILTER_MODE_BAND_PASS>(input_2);
  }
}
    c232:	vpop	{d8-d15}
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    c236:	vstr	s8, [r0, #120]	; 0x78
    c23a:	vstr	s9, [r0, #116]	; 0x74
    c23e:	vstr	s10, [r0, #112]	; 0x70
    c242:	vstr	s11, [r0, #108]	; 0x6c
    c246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c24a:	vadd.f32	s15, s15, s11
    c24e:	vcvt.s32.f32	s14, s15
    c252:	vmov	r7, s14
    c256:	vcvt.f32.s32	s14, s14
    c25a:	vsub.f32	s15, s15, s14
    c25e:	vmov.f32	s14, s15
    c262:	vcvt.s32.f32	s14, s14, #8
    c266:	vmov	r4, s14
    c26a:	b.n	bc8c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x120>
    c26c:	vldr	s14, [pc, #120]	; c2e8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
    c270:	vadd.f32	s15, s15, s14
    c274:	vcvt.s32.f32	s14, s15
    c278:	vmov	r7, s14
    c27c:	vcvt.f32.s32	s14, s14
    c280:	vsub.f32	s15, s15, s14
    c284:	vmov.f32	s14, s15
    c288:	vcvt.s32.f32	s14, s14, #8
    c28c:	vmov	r4, s14
    c290:	b.n	bc10 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa4>
    c292:	vldr	s13, [pc, #84]	; c2e8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
    c296:	vadd.f32	s14, s14, s13
    c29a:	vcvt.s32.f32	s13, s14
    c29e:	vmov	r7, s13
    c2a2:	vcvt.f32.s32	s13, s13
    c2a6:	vsub.f32	s14, s14, s13
    c2aa:	vmov.f32	s13, s14
    c2ae:	vcvt.s32.f32	s13, s13, #8
    c2b2:	vmov	r4, s13
    c2b6:	b.n	bbac <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
    next_sample_ = 0.0f;
    frequency_ = 0.001f;
  }

  void Render(bool sync, float frequency, float* out, size_t size) {
    CONSTRAIN(frequency, 0.0f, 1.0f);
    c2b8:	vldr	s15, [pc, #12]	; c2c8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    c2bc:	b.n	be64 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f8>
    c2be:	vldr	s15, [pc, #8]	; c2c8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    c2c2:	b.n	bd0e <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1a2>
    c2c4:	.word	0x3c6ef35f
    c2c8:	.word	0x00000000
    c2cc:	.word	0x42200000
    c2d0:	.word	0x452efe23
    c2d4:	.word	0x42acec90
    c2d8:	.word	0x4321348f
    c2dc:	.word	0x42234866
    c2e0:	.word	0x41255da8
    c2e4:	.word	0x40490fdb
    c2e8:	.word	0x43000000

0000c2ec <plaits::WavetableEngine::Init(stmlib::BufferAllocator*)>:

using namespace std;
using namespace stmlib;

void WavetableEngine::Init(BufferAllocator* allocator) {
  phase_ = 0.0f;
    c2ec:	movs	r3, #0
  z_pre_lp_ = 0.0f;

  previous_x_ = 0.0f;
  previous_y_ = 0.0f;
  previous_z_ = 0.0f;
  previous_f0_ = a0;
    c2ee:	ldr	r2, [pc, #28]	; (c30c <plaits::WavetableEngine::Init(stmlib::BufferAllocator*)+0x20>)

using namespace std;
using namespace stmlib;

void WavetableEngine::Init(BufferAllocator* allocator) {
  phase_ = 0.0f;
    c2f0:	str	r3, [r0, #16]
  z_pre_lp_ = 0.0f;

  previous_x_ = 0.0f;
  previous_y_ = 0.0f;
  previous_z_ = 0.0f;
  previous_f0_ = a0;
    c2f2:	str	r2, [r0, #56]	; 0x38
using namespace stmlib;

void WavetableEngine::Init(BufferAllocator* allocator) {
  phase_ = 0.0f;

  x_lp_ = 0.0f;
    c2f4:	str	r3, [r0, #32]
  y_lp_ = 0.0f;
    c2f6:	str	r3, [r0, #36]	; 0x24
  z_lp_ = 0.0f;
    c2f8:	str	r3, [r0, #40]	; 0x28
  
  x_pre_lp_ = 0.0f;
    c2fa:	str	r3, [r0, #20]
  y_pre_lp_ = 0.0f;
    c2fc:	str	r3, [r0, #24]
  z_pre_lp_ = 0.0f;
    c2fe:	str	r3, [r0, #28]

  previous_x_ = 0.0f;
    c300:	str	r3, [r0, #44]	; 0x2c
  previous_y_ = 0.0f;
    c302:	str	r3, [r0, #48]	; 0x30
  previous_z_ = 0.0f;
    c304:	str	r3, [r0, #52]	; 0x34
 public:
  Differentiator() { }
  ~Differentiator() { }

  void Init() {
    previous_ = 0.0f;
    c306:	str	r3, [r0, #64]	; 0x40
    lp_ = 0.0f;
    c308:	str	r3, [r0, #60]	; 0x3c
    c30a:	bx	lr
    c30c:	.word	0x3a969651

0000c310 <plaits::WavetableEngine::Reset()>:
  previous_f0_ = a0;

  diff_out_.Init();
}

void WavetableEngine::Reset() {
    c310:	bx	lr
    c312:	nop

0000c314 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    c314:	vmov.f32	s13, #34	; 0x41100000  9.0
    c318:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    c31c:	vldr	s14, [pc, #484]	; c504 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f0>
void WavetableEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    c320:	mov	ip, r0
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    c322:	vsub.f32	s15, s15, s13
    c326:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    c32a:	vcmpe.f32	s15, s14
    c32e:	vpush	{d8-d15}
    c332:	vmrs	APSR_nzcv, fpscr
    c336:	sub	sp, #108	; 0x6c
    c338:	str	r2, [sp, #48]	; 0x30
    c33a:	str	r3, [sp, #52]	; 0x34
    c33c:	ldr	r2, [sp, #208]	; 0xd0
    c33e:	bmi.n	c356 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    c340:	vldr	s14, [pc, #452]	; c508 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f4>
    c344:	vcmpe.f32	s15, s14
    c348:	vmrs	APSR_nzcv, fpscr
    c34c:	ble.w	cca2 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x98e>
    c350:	movs	r3, #0
    c352:	movs	r4, #255	; 0xff
    c354:	b.n	c35a <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x46>
    c356:	movs	r3, #0
    c358:	mov	r4, r3
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    c35a:	vldr	s14, [ip, #28]
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    c35e:	vmov.f32	s10, #8	; 0x40400000  3.0
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    c362:	vldr	s15, [r1, #16]
    c366:	vmov.f32	s8, s14
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    c36a:	vldr	s12, [pc, #416]	; c50c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f8>
    c36e:	vldr	s11, [r1, #8]
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    c372:	vldr	s13, [ip, #24]
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    c376:	vfnms.f32	s8, s15, s12
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    c37a:	vldr	s15, [ip, #20]
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    c37e:	vmov.f32	s6, s13
    c382:	vldr	s7, [r1, #12]
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    c386:	vmov.f32	s9, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    c38a:	ldr	r0, [pc, #388]	; (c510 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1fc>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c38c:	ldr	r1, [pc, #388]	; (c514 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x200>)
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    c38e:	vfnms.f32	s6, s7, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    c392:	add.w	r0, r0, r4, lsl #2
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    c396:	vfnms.f32	s9, s11, s12
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c39a:	add.w	r3, r1, r3, lsl #2
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    c39e:	vmov.f32	s12, s6
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    c3a2:	vldr	s6, [pc, #392]	; c52c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    c3a6:	vmov.f32	s11, s9
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    c3aa:	vldr	s9, [pc, #364]	; c518 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x204>
    c3ae:	vfma.f32	s14, s8, s9
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    c3b2:	vldr	s9, [pc, #360]	; c51c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x208>
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    c3b6:	vldr	s8, [pc, #360]	; c520 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x20c>
    c3ba:	vfma.f32	s15, s11, s9
    c3be:	vldr	s11, [r0]
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    c3c2:	vfma.f32	s13, s12, s9
    c3c6:	vldr	s12, [r3]
    c3ca:	vmul.f32	s12, s11, s12
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    c3ce:	vsub.f32	s10, s14, s10
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    c3d2:	vstr	s14, [ip, #28]
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    c3d6:	vstr	s15, [ip, #20]
    c3da:	vmul.f32	s12, s12, s8
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    c3de:	vcmpe.f32	s10, s6
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    c3e2:	vstr	s13, [ip, #24]
    c3e6:	vmrs	APSR_nzcv, fpscr
    c3ea:	bmi.w	ccce <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9ba>
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    c3ee:	vmov.f32	s11, #112	; 0x3f800000  1.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    c3f2:	vcmpe.f32	s10, s11
    c3f6:	vmrs	APSR_nzcv, fpscr
    c3fa:	ble.w	ccca <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9b6>
    c3fe:	vmov.f32	s10, s11
    c402:	vmov.f32	s6, s11
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
    c406:	vadd.f32	s11, s12, s12
    c40a:	vldr	s9, [pc, #280]	; c524 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x210>
    c40e:	vmul.f32	s11, s11, s10
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    c412:	vcmpe.f32	s11, s9
    c416:	vmrs	APSR_nzcv, fpscr
    c41a:	bmi.n	c486 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x172>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    c41c:	vldr	s10, [pc, #264]	; c528 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x214>
    c420:	vcmpe.f32	s11, s10
    c424:	vmrs	APSR_nzcv, fpscr
    c428:	it	gt
    c42a:	vmovgt.f32	s11, s10
    c42e:	vstr	s11, [sp, #84]	; 0x54
  
  MAKE_INTEGRAL_FRACTIONAL(x);
    c432:	vcvt.s32.f32	s10, s15
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    c436:	vmov.f32	s8, #96	; 0x3f000000  0.5
  x *= amount;
    c43a:	vmov.f32	s11, #48	; 0x41800000  16.0
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
    c43e:	vcvt.f32.s32	s4, s10
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    c442:	vmov.f32	s9, #224	; 0xbf000000 -0.5
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
    c446:	vcvt.s32.f32	s5, s13
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
    c44a:	vsub.f32	s15, s15, s4
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
    c44e:	vcvt.s32.f32	s7, s14
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
    c452:	vcvt.f32.s32	s5, s5
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    c456:	vsub.f32	s10, s15, s8
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
    c45a:	vcvt.f32.s32	s7, s7
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
    c45e:	vsub.f32	s13, s13, s5
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
    c462:	vmul.f32	s11, s10, s11
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
    c466:	vsub.f32	s14, s14, s7
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    c46a:	vcmpe.f32	s11, s9
    c46e:	vmrs	APSR_nzcv, fpscr
    c472:	bmi.n	c48c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    c474:	vcmpe.f32	s11, s8
    c478:	vmrs	APSR_nzcv, fpscr
    c47c:	ble.w	cc9a <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x986>
    c480:	vmov.f32	s8, #112	; 0x3f800000  1.0
    c484:	b.n	c490 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x17c>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    c486:	vstr	s9, [sp, #84]	; 0x54
    c48a:	b.n	c432 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e>
    c48c:	vldr	s8, [pc, #156]	; c52c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    c490:	vmov.f32	s9, #96	; 0x3f000000  0.5
  x *= amount;
    c494:	vmov.f32	s11, #48	; 0x41800000  16.0
  CONSTRAIN(x, -0.5f, 0.5f);
    c498:	vmov.f32	s3, #224	; 0xbf000000 -0.5
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    c49c:	vsub.f32	s10, s13, s9
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
    c4a0:	vsub.f32	s8, s8, s15
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
    c4a4:	vmul.f32	s11, s10, s11
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
    c4a8:	vfma.f32	s15, s8, s6
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    c4ac:	vcmpe.f32	s11, s3
    c4b0:	vmrs	APSR_nzcv, fpscr
    c4b4:	bmi.n	c4c8 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b4>
    c4b6:	vcmpe.f32	s11, s9
    c4ba:	vmrs	APSR_nzcv, fpscr
    c4be:	ble.w	cc94 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x980>
    c4c2:	vmov.f32	s9, #112	; 0x3f800000  1.0
    c4c6:	b.n	c4cc <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    c4c8:	vldr	s9, [pc, #96]	; c52c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    c4cc:	vmov.f32	s8, #96	; 0x3f000000  0.5
  x *= amount;
    c4d0:	vmov.f32	s11, #48	; 0x41800000  16.0
  CONSTRAIN(x, -0.5f, 0.5f);
    c4d4:	vmov.f32	s3, #224	; 0xbf000000 -0.5
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    c4d8:	vsub.f32	s10, s14, s8
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
  y_fractional += quantization * (Clamp(y_fractional, 16.0f) - y_fractional);
    c4dc:	vsub.f32	s9, s9, s13
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
    c4e0:	vmul.f32	s11, s10, s11
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
  y_fractional += quantization * (Clamp(y_fractional, 16.0f) - y_fractional);
    c4e4:	vfma.f32	s13, s9, s6
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    c4e8:	vcmpe.f32	s11, s3
    c4ec:	vmrs	APSR_nzcv, fpscr
    c4f0:	bmi.n	c53c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x228>
    c4f2:	vcmpe.f32	s11, s8
    c4f6:	vmrs	APSR_nzcv, fpscr
    c4fa:	ble.w	cc8e <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x97a>
    c4fe:	vmov.f32	s11, #112	; 0x3f800000  1.0
    c502:	b.n	c540 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
    c504:	.word	0xc3000000
    c508:	.word	0x42fe0000
    c50c:	.word	0x40dfff2e
    c510:	.word	0x20000024
    c514:	.word	0x20000428
    c518:	.word	0x3d4ccccd
    c51c:	.word	0x3e4ccccd
    c520:	.word	0x39969651
    c524:	.word	0x3c23d70a
    c528:	.word	0x3dcccccd
    c52c:	.word	0x00000000
    c530:	.word	0x48000000
    c534:	.word	0x3f733333
    c538:	.word	0x43800000
    c53c:	vldr	s11, [pc, #-20]	; c52c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c540:	vldr	s10, [ip, #52]	; 0x34
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
  y_fractional += quantization * (Clamp(y_fractional, 16.0f) - y_fractional);
  z_fractional += quantization * (Clamp(z_fractional, 16.0f) - z_fractional);
    c544:	vsub.f32	s11, s11, s14
    c548:	vldr	s9, [ip, #48]	; 0x30
    increment_ = (new_value - *state) / static_cast<float>(size);
    c54c:	vadd.f32	s13, s5, s13
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c550:	vmov.f32	s8, s10
    c554:	vstr	s10, [sp, #36]	; 0x24
    increment_ = (new_value - *state) / static_cast<float>(size);
    c558:	vadd.f32	s10, s4, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c55c:	vldr	s15, [ip, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    c560:	vfma.f32	s14, s11, s6
    c564:	vmov	s11, r2
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c568:	vmov.f32	s5, s9
    c56c:	vstr	s9, [sp, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    c570:	vcvt.f32.u32	s9, s11
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c574:	vstr	s15, [sp, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    c578:	vsub.f32	s11, s10, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c57c:	vldr	s26, [ip, #56]	; 0x38
    increment_ = (new_value - *state) / static_cast<float>(size);
    c580:	vsub.f32	s13, s13, s5
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    c584:	subs	r3, r2, #1
    c586:	vsub.f32	s12, s12, s26
    c58a:	vdiv.f32	s15, s11, s9
    c58e:	str	r3, [sp, #32]
    c590:	vstr	s15, [sp, #68]	; 0x44
    c594:	vadd.f32	s15, s14, s7
    c598:	vdiv.f32	s14, s13, s9
    c59c:	vsub.f32	s15, s15, s8
    c5a0:	vstr	s14, [sp, #72]	; 0x48
    c5a4:	vdiv.f32	s14, s12, s9
    c5a8:	vstr	s14, [sp, #80]	; 0x50
    c5ac:	vdiv.f32	s14, s15, s9
    c5b0:	vstr	s14, [sp, #76]	; 0x4c
    c5b4:	cmp	r2, #0
    c5b6:	beq.w	cc68 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x954>
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    c5ba:	vmov.f32	s27, #96	; 0x3f000000  0.5
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    c5be:	mov	r8, ip
  }

  inline float Next() {
    value_ += increment_;
    c5c0:	vldr	s15, [sp, #80]	; 0x50
    c5c4:	vldr	s14, [sp, #68]	; 0x44
    c5c8:	vadd.f32	s26, s26, s15
    c5cc:	vldr	s15, [sp, #44]	; 0x2c
    c5d0:	vldr	s11, [sp, #36]	; 0x24
    c5d4:	vadd.f32	s15, s15, s14
    c5d8:	vldr	s14, [sp, #72]	; 0x48
    c5dc:	vldr	s10, [sp, #76]	; 0x4c
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    c5e0:	vldr	s7, [r8, #32]
    c5e4:	vmov.f32	s12, s15
    c5e8:	vstr	s15, [sp, #44]	; 0x2c
    c5ec:	vldr	s15, [sp, #40]	; 0x28
    c5f0:	vadd.f32	s11, s11, s10
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    c5f4:	vldr	s18, [r8, #36]	; 0x24
    c5f8:	vadd.f32	s15, s15, s14
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    c5fc:	vldr	s14, [r8, #40]	; 0x28
    c600:	vmov.f32	s8, s11
    c604:	vstr	s11, [sp, #36]	; 0x24
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    c608:	vsub.f32	s10, s12, s7
    c60c:	vmov.f32	s9, s15
    c610:	vstr	s15, [sp, #40]	; 0x28
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    c614:	vldr	s15, [pc, #-232]	; c530 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x21c>
    c618:	vmov.f32	s12, #112	; 0x3f800000  1.0
    c61c:	vmul.f32	s13, s26, s15

    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);

    phase_ += f0;
    c620:	vldr	s15, [r8, #16]
    c624:	vadd.f32	s15, s26, s15
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    c628:	vdiv.f32	s11, s12, s13
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    c62c:	vsub.f32	s13, s8, s14
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    c630:	vsub.f32	s12, s9, s18
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    c634:	vldr	s9, [sp, #84]	; 0x54
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    c638:	vfma.f32	s14, s13, s9
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    c63c:	vldr	s13, [pc, #-264]	; c538 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x224>
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    c640:	vfma.f32	s7, s10, s9
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    c644:	vmul.f32	s28, s26, s13
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    c648:	vldr	s13, [pc, #-280]	; c534 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x220>
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    c64c:	vfma.f32	s18, s12, s9
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    c650:	vsub.f32	s12, s13, s26
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);
    c654:	vcvt.s32.f32	s10, s14
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    c658:	vstr	s14, [r8, #40]	; 0x28
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    c65c:	vcvt.s32.f32	s13, s7
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    c660:	vstr	s7, [r8, #32]
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);
    c664:	vmov	r7, s10
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
    c668:	vmov.f32	s10, #112	; 0x3f800000  1.0
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    c66c:	vmov	sl, s13
    MAKE_INTEGRAL_FRACTIONAL(y);
    c670:	vcvt.s32.f32	s13, s18
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    c674:	vstr	s18, [r8, #36]	; 0x24
    c678:	vcmp.f32	s28, s10
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    c67c:	vmov	s10, sl
    MAKE_INTEGRAL_FRACTIONAL(y);
    c680:	vcvt.f32.s32	s9, s13
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    c684:	vcvt.f32.s32	s8, s10
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);
    c688:	vmov	s10, r7
    c68c:	vmrs	APSR_nzcv, fpscr
    c690:	vcvt.f32.s32	s10, s10
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    c694:	vsub.f32	s7, s7, s8
    MAKE_INTEGRAL_FRACTIONAL(y);
    c698:	vsub.f32	s18, s18, s9
    MAKE_INTEGRAL_FRACTIONAL(z);
    c69c:	vsub.f32	s14, s14, s10
    c6a0:	vstr	s14, [sp, #60]	; 0x3c
    c6a4:	vmov.f32	s14, #112	; 0x3f800000  1.0
    c6a8:	it	gt
    c6aa:	vmovgt.f32	s28, s14
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    c6ae:	vmul.f32	s14, s11, s12
    c6b2:	vstr	s14, [sp, #56]	; 0x38
    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);

    phase_ += f0;
    if (phase_ >= 1.0f) {
    c6b6:	vmov.f32	s14, #112	; 0x3f800000  1.0
    c6ba:	vcmpe.f32	s15, s14
    c6be:	vmrs	APSR_nzcv, fpscr
    c6c2:	blt.n	c6cc <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
      phase_ -= 1.0f;
    c6c4:	vmov.f32	s14, #112	; 0x3f800000  1.0
    c6c8:	vsub.f32	s15, s15, s14
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    c6cc:	vmov	r3, s13
      int x0 = x_integral;
      int x1 = x_integral + 1;
      int y0 = y_integral;
      int y1 = y_integral + 1;
      int z0 = z_integral;
      int z1 = z_integral + 1;
    c6d0:	adds	r2, r7, #1
      
      if (z0 >= 4) {
    c6d2:	cmp	r7, #3
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    
    {
      int x0 = x_integral;
      int x1 = x_integral + 1;
    c6d4:	add.w	lr, sl, #1
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    c6d8:	mov.w	r0, r3, lsl #3
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    c6dc:	ldr	r3, [sp, #32]
      int y1 = y_integral + 1;
      int z0 = z_integral;
      int z1 = z_integral + 1;
      
      if (z0 >= 4) {
        z0 = 7 - z0;
    c6de:	it	gt
    c6e0:	rsbgt	r7, r7, #7
      }
      if (z1 >= 4) {
    c6e4:	cmp	r2, #3
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    c6e6:	add.w	r3, r3, #4294967295
    phase_ += f0;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    c6ea:	vldr	s14, [pc, #-436]	; c538 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x224>
      
      if (z0 >= 4) {
        z0 = 7 - z0;
      }
      if (z1 >= 4) {
        z1 = 7 - z1;
    c6ee:	it	gt
    c6f0:	rsbgt	r2, r2, #7
      }
      
      int r0 = z0 == 3 ? 101 : 1;
    c6f4:	cmp	r7, #3
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    c6f6:	str	r3, [sp, #32]
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    c6f8:	add.w	r3, r0, #8
    c6fc:	mov.w	ip, r2, lsl #6
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);

    phase_ += f0;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    c700:	vstr	s15, [r8, #16]
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    c704:	add.w	r6, sl, r3
    c708:	mov.w	r7, r7, lsl #6
    c70c:	add	r3, lr
    phase_ += f0;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    c70e:	vmul.f32	s15, s15, s14
      }
      if (z1 >= 4) {
        z1 = 7 - z1;
      }
      
      int r0 = z0 == 3 ? 101 : 1;
    c712:	ite	ne
    c714:	movne	r1, #1
    c716:	moveq	r1, #101	; 0x65
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    c718:	add	sl, r0
      if (z1 >= 4) {
        z1 = 7 - z1;
      }
      
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;
    c71a:	cmp	r2, #3
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    c71c:	add	r0, lr
  return InterpolateWaveHermite(
    c71e:	add.w	r2, ip, r6
    c722:	add.w	r5, r6, r7
    c726:	add.w	r6, r3, r7
    c72a:	str	r2, [sp, #4]
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    c72c:	vcvt.s32.f32	s14, s15
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    c730:	add.w	r2, r0, r7
    c734:	add.w	lr, ip, r0
    c738:	mul.w	r0, r1, r6
      if (z1 >= 4) {
        z1 = 7 - z1;
      }
      
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;
    c73c:	ite	ne
    c73e:	movne.w	fp, #1
    c742:	moveq.w	fp, #101	; 0x65
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    c746:	add.w	r4, sl, r7
    c74a:	mul.w	r7, r1, r2
    c74e:	ldr	r2, [sp, #4]
    c750:	str	r0, [sp, #12]
    c752:	add	r3, ip
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    c754:	vstr	s14, [sp, #8]
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    c758:	add	sl, ip
    c75a:	mul.w	r5, r1, r5

inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
    c75e:	ldr	r0, [sp, #8]
    c760:	mul.w	r4, r1, r4
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    c764:	vcvt.f32.s32	s14, s14
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    c768:	mul.w	r1, fp, r2
    c76c:	ldr	r2, [sp, #12]
    c76e:	mov.w	r9, r0, lsl #1
    c772:	asrs	r0, r2, #31
    c774:	mul.w	r2, fp, r3
    c778:	ldr	r3, [sp, #12]
    c77a:	mov.w	ip, r5, asr #31
    c77e:	str	r2, [sp, #28]
  const float x0 = table[index_integral + 1];
    c780:	add.w	r6, r9, #2
    c784:	mul.w	r2, fp, sl
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    c788:	vsub.f32	s15, s15, s14
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    c78c:	str	r1, [sp, #24]
    c78e:	str	r2, [sp, #16]
    c790:	ldr	r2, [pc, #940]	; (cb40 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    c792:	mul.w	r1, fp, lr
    c796:	smull	lr, sl, r2, r5
    c79a:	mov	lr, r3
    c79c:	ldr	r3, [pc, #928]	; (cb40 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    c79e:	asrs	r2, r7, #31
    c7a0:	str	r1, [sp, #20]
    c7a2:	rsb	ip, ip, sl, asr #5
    c7a6:	smull	fp, lr, r3, lr
  const float x1 = table[index_integral + 2];
    c7aa:	add.w	r3, r9, #4
    c7ae:	asrs	r1, r4, #31
    c7b0:	str	r3, [sp, #4]
    c7b2:	rsb	r0, r0, lr, asr #5
    c7b6:	ldr	r3, [pc, #904]	; (cb40 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    c7b8:	add.w	ip, ip, ip, lsl #1
    c7bc:	add.w	r0, r0, r0, lsl #1
    c7c0:	smull	sl, lr, r3, r4
    c7c4:	ldr	r3, [sp, #24]
    c7c6:	str.w	ip, [sp, #64]	; 0x40
  const float x2 = table[index_integral + 3];
    c7ca:	add.w	ip, r9, #6
    c7ce:	rsb	lr, r1, lr, asr #5
    c7d2:	ldr	r1, [pc, #876]	; (cb40 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    c7d4:	smull	r9, r1, r1, r7
    c7d8:	add.w	lr, lr, lr, lsl #1
    c7dc:	rsb	r1, r2, r1, asr #5
    c7e0:	ldr	r2, [pc, #860]	; (cb40 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    c7e2:	sub.w	r4, r4, lr, lsl #6
    c7e6:	smull	sl, r9, r2, r3
    c7ea:	asrs	r2, r3, #31
    c7ec:	ldr	r3, [sp, #28]
    c7ee:	add.w	r1, r1, r1, lsl #1
    c7f2:	rsb	r2, r2, r9, asr #5
    c7f6:	mov	r9, r3
    c7f8:	ldr	r3, [pc, #836]	; (cb40 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    c7fa:	sub.w	r1, r7, r1, lsl #6
    c7fe:	ldr	r7, [sp, #16]
    c800:	smull	r9, fp, r3, r9
    c804:	ldr	r3, [sp, #16]
    c806:	asrs	r7, r7, #31
    c808:	mov	r9, r3
    c80a:	ldr	r3, [pc, #820]	; (cb40 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    c80c:	add.w	r2, r2, r2, lsl #1
    c810:	smull	r9, sl, r3, r9
    c814:	ldr	r3, [sp, #20]
    c816:	add.w	r4, r4, r4, lsl #6
    c81a:	mov	r9, r3
    c81c:	ldr	r3, [pc, #800]	; (cb40 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    c81e:	rsb	sl, r7, sl, asr #5
    c822:	ldr	r7, [sp, #20]
    c824:	smull	r3, r9, r3, r9
    c828:	ldr	r3, [sp, #64]	; 0x40
    c82a:	asrs	r7, r7, #31
    c82c:	sub.w	r5, r5, r3, lsl #6
    c830:	ldr	r3, [sp, #12]
    c832:	rsb	r9, r7, r9, asr #5
    c836:	ldr	r7, [pc, #780]	; (cb44 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x830>)
    c838:	sub.w	r0, r3, r0, lsl #6
    c83c:	ldr	r3, [sp, #28]
    c83e:	add.w	sl, sl, sl, lsl #1
    c842:	mov.w	lr, r3, asr #31
    c846:	ldr	r3, [sp, #24]
    c848:	add.w	r5, r5, r5, lsl #6
    c84c:	rsb	fp, lr, fp, asr #5
    c850:	sub.w	r2, r3, r2, lsl #6
    c854:	ldr	r3, [sp, #28]
    c856:	add.w	fp, fp, fp, lsl #1
    c85a:	add.w	r5, r7, r5, lsl #3
    c85e:	sub.w	fp, r3, fp, lsl #6
    c862:	ldr	r3, [sp, #16]
    c864:	add.w	r9, r9, r9, lsl #1
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c868:	ldrsh.w	lr, [r5, r6]
    c86c:	sub.w	sl, r3, sl, lsl #6
    c870:	ldr	r3, [sp, #20]
    c872:	vmov	s12, lr
    c876:	add.w	r0, r0, r0, lsl #6
    c87a:	sub.w	r9, r3, r9, lsl #6
  const float x1 = table[index_integral + 2];
    c87e:	ldr	r3, [sp, #4]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c880:	vcvt.f32.s32	s12, s12
    c884:	add.w	r1, r1, r1, lsl #6
  const float x1 = table[index_integral + 2];
    c888:	ldrsh.w	lr, [r5, r3]
    c88c:	add.w	r2, r2, r2, lsl #6
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c890:	ldr	r3, [sp, #8]
    c892:	add.w	fp, fp, fp, lsl #6
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c896:	vmov	s13, lr
    c89a:	add.w	r4, r7, r4, lsl #3
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c89e:	ldrsh.w	lr, [r5, r3, lsl #1]
    c8a2:	add.w	r0, r7, r0, lsl #3
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c8a6:	vcvt.f32.s32	s13, s13
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c8aa:	ldrsh.w	r5, [r5, ip]
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c8ae:	vmov	s16, lr
    c8b2:	add.w	r1, r7, r1, lsl #3
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c8b6:	vmov	s2, r5
    c8ba:	add.w	r2, r7, r2, lsl #3
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    c8be:	vsub.f32	s4, s12, s13
    c8c2:	add.w	fp, r7, fp, lsl #3
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c8c6:	vcvt.f32.s32	s16, s16
    c8ca:	ldr	r7, [pc, #632]	; (cb44 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x830>)
    c8cc:	add.w	sl, sl, sl, lsl #6
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c8d0:	vcvt.f32.s32	s2, s2
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    c8d4:	vmov.f32	s1, s4
    c8d8:	add.w	r9, r9, r9, lsl #6
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c8dc:	vsub.f32	s16, s13, s16
    c8e0:	add.w	sl, r7, sl, lsl #3
    c8e4:	add.w	r9, r7, r9, lsl #3
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c8e8:	ldrsh.w	lr, [r0, r6]
  const float x1 = table[index_integral + 2];
    c8ec:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c8ee:	vsub.f32	s2, s2, s12
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    c8f2:	vfma.f32	s1, s16, s27
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c8f6:	vmov	s31, lr
  const float x1 = table[index_integral + 2];
    c8fa:	ldrsh.w	lr, [r0, r7]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c8fe:	vcvt.f32.s32	s31, s31
  const float x1 = table[index_integral + 2];
    c902:	ldr	r7, [sp, #4]
    c904:	vmov	s8, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c908:	ldrsh.w	lr, [r0, r3, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c90c:	ldrsh.w	r0, [r0, ip]
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c910:	vmov	s5, lr
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c914:	vcvt.f32.s32	s8, s8
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c918:	vadd.f32	s4, s4, s1
    c91c:	vmov	s3, r0
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c920:	vcvt.f32.s32	s5, s5
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c924:	ldrsh.w	lr, [r4, r6]
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c928:	vcvt.f32.s32	s3, s3
    c92c:	vfma.f32	s4, s2, s27
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c930:	vmov	s14, lr
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c934:	vsub.f32	s5, s8, s5
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c938:	ldrsh.w	lr, [r4, r7]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    c93c:	vsub.f32	s8, s31, s8
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c940:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c942:	vsub.f32	s3, s3, s31
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c946:	vmov	s9, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c94a:	ldrsh.w	lr, [r4, r3, lsl #1]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c94e:	vcvt.f32.s32	s14, s14
  const float x1 = table[index_integral + 2];
    c952:	vcvt.f32.s32	s9, s9
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    c956:	vadd.f32	s1, s1, s4
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c95a:	vmov	s25, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c95e:	ldrsh.w	lr, [r1, r6]
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c962:	vcvt.f32.s32	s25, s25
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    c966:	vfnms.f32	s1, s15, s4
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c96a:	vmov	s19, lr
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    c96e:	vmov.f32	s4, s8
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c972:	ldrsh.w	lr, [r1, r7]
    c976:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c978:	vsub.f32	s25, s9, s25
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c97c:	vmov	s10, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c980:	ldrsh.w	lr, [r1, r3, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
    c984:	vfma.f32	s4, s5, s27
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c988:	vmov	s24, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c98c:	ldrsh.w	lr, [r2, r6]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    c990:	vmul.f32	s1, s1, s15
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c994:	vmov	s6, lr
  const float x1 = table[index_integral + 2];
    c998:	ldrsh.w	lr, [r2, r7]
    c99c:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    c99e:	vsub.f32	s9, s14, s9
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c9a2:	vmov	s17, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c9a6:	ldrsh.w	lr, [r2, r3, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c9aa:	vadd.f32	s8, s8, s4
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c9ae:	vmov	s30, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c9b2:	ldrsh.w	lr, [fp, r6]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    c9b6:	vfma.f32	s1, s16, s27
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    c9ba:	vfma.f32	s8, s3, s27
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c9be:	vmov	s21, lr
  const float x1 = table[index_integral + 2];
    c9c2:	ldrsh.w	lr, [fp, r7]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    c9c6:	vmov.f32	s16, s9
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c9ca:	ldr	r7, [sp, #4]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c9cc:	vcvt.f32.s32	s19, s19
  const float x1 = table[index_integral + 2];
    c9d0:	vmov	s0, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c9d4:	ldrsh.w	lr, [fp, r3, lsl #1]
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    c9d8:	ldrsh.w	r3, [r9, r7]
    c9dc:	vcvt.f32.s32	s10, s10
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c9e0:	vmov	s29, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c9e4:	ldrsh.w	lr, [sl, r6]

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    c9e8:	vadd.f32	s4, s4, s8
  const float x1 = table[index_integral + 2];
    c9ec:	vmov	s2, r3
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    c9f0:	vfma.f32	s12, s15, s1
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    c9f4:	vmov	s13, lr
    c9f8:	ldrsh.w	lr, [r9, r6]
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    c9fc:	vcvt.f32.s32	s24, s24
    ca00:	vfnms.f32	s4, s15, s8
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    ca04:	vmov	s20, lr
  const float x1 = table[index_integral + 2];
    ca08:	ldrsh.w	lr, [sl, r7]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    ca0c:	ldr	r7, [sp, #8]
  const float v = x0 - x1;
  const float w = c + v;
    ca0e:	vfma.f32	s16, s25, s27
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    ca12:	vsub.f32	s24, s10, s24
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    ca16:	vmov	s11, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    ca1a:	ldrsh.w	r6, [sl, r7, lsl #1]
  const float v = x0 - x1;
    ca1e:	vsub.f32	s10, s19, s10
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    ca22:	vcvt.f32.s32	s21, s21
    ca26:	vmov.f32	s8, s4
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    ca2a:	vmov	s23, r6
    ca2e:	ldrsh.w	r6, [r9, r7, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
    ca32:	vmov.f32	s1, s10
  const float a = w + v + (x2 - x0) * 0.5f;
    ca36:	ldrsh.w	r0, [r4, ip]
    ca3a:	vadd.f32	s9, s9, s16
    ca3e:	vmul.f32	s8, s8, s15
    ca42:	ldrsh.w	r1, [r1, ip]
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    ca46:	vfma.f32	s1, s24, s27
  const float a = w + v + (x2 - x0) * 0.5f;
    ca4a:	ldrsh.w	r4, [fp, ip]
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    ca4e:	vcvt.f32.s32	s0, s0
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    ca52:	vmov	s22, r6
    ca56:	vfma.f32	s8, s5, s27
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    ca5a:	ldrsh.w	r5, [sl, ip]
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    ca5e:	vcvt.f32.s32	s29, s29
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    ca62:	ldrsh.w	r2, [r2, ip]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    ca66:	vcvt.f32.s32	s13, s13
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    ca6a:	ldrsh.w	r6, [r9, ip]
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    ca6e:	vcvt.f32.s32	s11, s11
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    ca72:	ldr	r3, [sp, #32]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    ca74:	vadd.f32	s10, s10, s1
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    ca78:	vsub.f32	s29, s0, s29
    ca7c:	adds	r3, #1

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    ca7e:	vfma.f32	s31, s15, s8
  const float v = x0 - x1;
    ca82:	vsub.f32	s0, s21, s0
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    ca86:	vcvt.f32.s32	s23, s23
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    ca8a:	vcvt.f32.s32	s6, s6
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    ca8e:	vmov.f32	s4, s0
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    ca92:	vsub.f32	s23, s11, s23
    ca96:	vsub.f32	s31, s31, s12
  const float v = x0 - x1;
  const float w = c + v;
    ca9a:	vfma.f32	s4, s29, s27
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    ca9e:	vsub.f32	s11, s13, s11
    caa2:	vfma.f32	s12, s7, s31
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    caa6:	vmov	s31, r0
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    caaa:	vcvt.f32.s32	s20, s20
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    caae:	vcvt.f32.s32	s31, s31
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    cab2:	vmov.f32	s5, s11
  const float a = w + v + (x2 - x0) * 0.5f;
    cab6:	vadd.f32	s0, s0, s4
    caba:	vsub.f32	s31, s31, s14
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    cabe:	vcvt.f32.s32	s17, s17
    cac2:	vcvt.f32.s32	s2, s2
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    cac6:	vfma.f32	s9, s31, s27
    caca:	vmov	s31, r1
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    cace:	vcvt.f32.s32	s30, s30
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    cad2:	vcvt.f32.s32	s31, s31
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    cad6:	vcvt.f32.s32	s22, s22
  const float v = x0 - x1;
  const float w = c + v;
    cada:	vfma.f32	s5, s23, s27
  const float a = w + v + (x2 - x0) * 0.5f;
    cade:	vsub.f32	s31, s31, s19
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    cae2:	vsub.f32	s30, s17, s30
    cae6:	vsub.f32	s22, s2, s22
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    caea:	vfma.f32	s10, s31, s27
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    caee:	vsub.f32	s17, s6, s17
    caf2:	vsub.f32	s2, s20, s2
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    caf6:	vadd.f32	s11, s11, s5
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    cafa:	vmov.f32	s3, s17
    cafe:	vmov.f32	s8, s2
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    cb02:	vadd.f32	s1, s1, s10
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    cb06:	vadd.f32	s16, s16, s9
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    cb0a:	vfma.f32	s3, s30, s27
    cb0e:	vfnms.f32	s1, s15, s10
  const float a = w + v + (x2 - x0) * 0.5f;
    cb12:	vmov	s10, r4
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    cb16:	vfma.f32	s8, s22, s27
  const float a = w + v + (x2 - x0) * 0.5f;
    cb1a:	vcvt.f32.s32	s10, s10
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    cb1e:	vfnms.f32	s16, s15, s9
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    cb22:	vmov	s9, r2
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
    cb26:	ldr	r2, [sp, #48]	; 0x30
    cb28:	vsub.f32	s10, s10, s21
    cb2c:	vcvt.f32.s32	s9, s9
    cb30:	vadd.f32	s17, s17, s3
    cb34:	vfma.f32	s0, s10, s27
    cb38:	vmov	s10, r5
    cb3c:	b.n	cb54 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x840>
    cb3e:	nop
    cb40:	.word	0x2aaaaaab
    cb44:	.word	0x20003ff0
    cb48:	.word	0x42000000
    cb4c:	.word	0x3d000000
    cb50:	.word	0x43000000
    cb54:	vadd.f32	s2, s2, s8
    cb58:	vcvt.f32.s32	s10, s10
    cb5c:	vsub.f32	s9, s9, s6
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    cb60:	vmul.f32	s16, s16, s15
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    cb64:	vsub.f32	s10, s10, s13
    cb68:	vfma.f32	s17, s9, s27
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    cb6c:	vadd.f32	s4, s4, s0
    cb70:	vfma.f32	s11, s10, s27
    cb74:	vmov	s10, r6
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    cb78:	vmul.f32	s1, s1, s15
    cb7c:	vcvt.f32.s32	s10, s10
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    cb80:	vfnms.f32	s4, s15, s0
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    cb84:	vadd.f32	s3, s3, s17
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    cb88:	vsub.f32	s10, s10, s20
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    cb8c:	vadd.f32	s5, s5, s11
    cb90:	vfnms.f32	s3, s15, s17
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    cb94:	vfma.f32	s2, s10, s27
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    cb98:	vldr	s10, [r8, #64]	; 0x40
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    cb9c:	vfnms.f32	s5, s15, s11
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    cba0:	vldr	s11, [r8, #60]	; 0x3c
    cba4:	vmul.f32	s4, s4, s15
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    cba8:	vfma.f32	s16, s25, s27
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    cbac:	vfma.f32	s1, s24, s27
    cbb0:	vmul.f32	s3, s3, s15

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    cbb4:	vadd.f32	s8, s8, s2
    cbb8:	vmul.f32	s5, s5, s15
    cbbc:	vfma.f32	s3, s30, s27
    cbc0:	vfnms.f32	s8, s15, s2
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    cbc4:	vfma.f32	s4, s29, s27
    cbc8:	vfma.f32	s5, s23, s27
    cbcc:	vfma.f32	s14, s15, s16
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    cbd0:	vfma.f32	s19, s15, s1
    cbd4:	vfma.f32	s6, s15, s3

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    cbd8:	vmul.f32	s8, s8, s15
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    cbdc:	vfma.f32	s21, s15, s4
    cbe0:	vfma.f32	s13, s15, s5

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    cbe4:	vfma.f32	s8, s22, s27
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    cbe8:	vsub.f32	s19, s19, s14
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    cbec:	vsub.f32	s21, s21, s6
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    cbf0:	vfma.f32	s14, s7, s19

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    cbf4:	vfma.f32	s20, s15, s8
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    cbf8:	vldr	s15, [sp, #60]	; 0x3c
    cbfc:	vfma.f32	s6, s7, s21

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    cc00:	vsub.f32	s12, s12, s14

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    cc04:	vsub.f32	s20, s20, s13

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    cc08:	vfma.f32	s14, s18, s12

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    cc0c:	vfma.f32	s13, s7, s20
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    cc10:	vsub.f32	s6, s6, s13
    cc14:	vfma.f32	s13, s18, s6
    cc18:	vsub.f32	s13, s13, s14
    cc1c:	vfma.f32	s14, s15, s13
      mix = diff_out_.Process(cutoff, mix) * gain;
    cc20:	vldr	s15, [sp, #56]	; 0x38
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    cc24:	vsub.f32	s10, s14, s10
    previous_ = s;
    cc28:	vstr	s14, [r8, #64]	; 0x40
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    cc2c:	vsub.f32	s10, s10, s11
    cc30:	vfma.f32	s11, s28, s10
    cc34:	vmul.f32	s14, s15, s11
      *out++ = mix;
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    cc38:	vldr	s15, [pc, #-244]	; cb48 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x834>
    cc3c:	vstr	s11, [r8, #60]	; 0x3c
    cc40:	vmul.f32	s15, s14, s15
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
    cc44:	vstmia	r2!, {s14}
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    cc48:	vldr	s14, [pc, #-256]	; cb4c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x838>
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
    cc4c:	str	r2, [sp, #48]	; 0x30
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    cc4e:	vcvt.s32.f32	s15, s15
    cc52:	ldr	r2, [sp, #52]	; 0x34
    cc54:	vcvt.f32.s32	s15, s15
    cc58:	vmul.f32	s15, s15, s14
    cc5c:	vstmia	r2!, {s15}
    cc60:	str	r2, [sp, #52]	; 0x34
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    cc62:	bne.w	c5c0 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    cc66:	mov	ip, r8
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    cc68:	vldr	s15, [sp, #36]	; 0x24
    cc6c:	vstr	s26, [ip, #56]	; 0x38
    cc70:	vstr	s15, [ip, #52]	; 0x34
    cc74:	vldr	s15, [sp, #40]	; 0x28
    cc78:	vstr	s15, [ip, #48]	; 0x30
    cc7c:	vldr	s15, [sp, #44]	; 0x2c
    cc80:	vstr	s15, [ip, #44]	; 0x2c
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    }
  }
}
    cc84:	add	sp, #108	; 0x6c
    cc86:	vpop	{d8-d15}
    cc8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc8e:	vadd.f32	s11, s11, s8
    cc92:	b.n	c540 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
    cc94:	vadd.f32	s9, s11, s9
    cc98:	b.n	c4cc <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    cc9a:	vadd.f32	s8, s11, s8
    cc9e:	b.w	c490 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x17c>
    cca2:	vldr	s14, [pc, #-340]	; cb50 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83c>
    cca6:	vadd.f32	s15, s15, s14
    ccaa:	vcvt.s32.f32	s14, s15
    ccae:	vmov	r4, s14
    ccb2:	vcvt.f32.s32	s14, s14
    ccb6:	vsub.f32	s15, s15, s14
    ccba:	vmov.f32	s14, s15
    ccbe:	vcvt.s32.f32	s14, s14, #8
    ccc2:	vmov	r3, s14
    ccc6:	b.w	c35a <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x46>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    ccca:	vmov.f32	s6, s10
    ccce:	vmov.f32	s10, #8	; 0x40400000  3.0
    ccd2:	vmov.f32	s11, #16	; 0x40800000  4.0
    ccd6:	vfms.f32	s11, s6, s10
    ccda:	vmov.f32	s10, s11
    ccde:	b.w	c406 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2>
    cce2:	nop

0000cce4 <plaits::StringVoice::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void StringVoice::Init(BufferAllocator* allocator) {
    cce4:	push	{r4, r5, r6, lr}
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    cce6:	movs	r3, #0
    cce8:	mov	r4, r0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ccea:	ldr	r2, [pc, #28]	; (cd08 <plaits::StringVoice::Init(stmlib::BufferAllocator*)+0x24>)
  excitation_filter_.Init();
  string_.Init(allocator);
    ccec:	adds	r0, #20

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ccee:	ldr	r6, [pc, #28]	; (cd0c <plaits::StringVoice::Init(stmlib::BufferAllocator*)+0x28>)
    r_ = 1.0f / resonance;
    ccf0:	ldr	r5, [pc, #28]	; (cd10 <plaits::StringVoice::Init(stmlib::BufferAllocator*)+0x2c>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    ccf2:	str	r3, [r4, #16]
    ccf4:	str	r3, [r4, #12]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ccf6:	str	r6, [r4, #0]
    r_ = 1.0f / resonance;
    ccf8:	str	r5, [r4, #4]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ccfa:	str	r2, [r4, #8]
    ccfc:	bl	d0f8 <plaits::String::Init(stmlib::BufferAllocator*)>
  remaining_noise_samples_ = 0;
    cd00:	movs	r3, #0
    cd02:	str	r3, [r4, #92]	; 0x5c
    cd04:	pop	{r4, r5, r6, pc}
    cd06:	nop
    cd08:	.word	0x3f7faaca
    cd0c:	.word	0x3d00ba22
    cd10:	.word	0x3c23d70a

0000cd14 <plaits::StringVoice::Reset()>:
}

void StringVoice::Reset() {
  string_.Reset();
    cd14:	adds	r0, #20
    cd16:	b.w	d094 <plaits::String::Reset()>
    cd1a:	nop

0000cd1c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>:
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;

  brightness += 0.25f * accent * (1.0f - brightness);
    cd1c:	vmov.f32	s14, #112	; 0x3f800000  1.0
    cd20:	vmov.f32	s15, #80	; 0x3e800000  0.250
    cd24:	vmov.f32	s9, s3
    cd28:	vsub.f32	s13, s14, s3
    cd2c:	vmul.f32	s15, s0, s15
  damping += 0.25f * accent * (1.0f - damping);
    cd30:	vsub.f32	s14, s14, s4
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    cd34:	vmov.f32	s10, s1
  const float density = brightness * brightness;

  brightness += 0.25f * accent * (1.0f - brightness);
    cd38:	vfma.f32	s9, s15, s13
  damping += 0.25f * accent * (1.0f - damping);
    cd3c:	vfma.f32	s4, s14, s15
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    cd40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cd44:	ldr	r6, [sp, #32]
    cd46:	mov	r5, r1
    cd48:	ldr	r4, [sp, #36]	; 0x24
    cd4a:	mov	r1, r3
    cd4c:	ldr	r3, [sp, #40]	; 0x28

  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  // Synthesize excitation signal.
  if (trigger || sustain) {
    cd4e:	cmp	r2, #0
    cd50:	bne.w	ce8e <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x172>
    cd54:	cmp	r5, #0
    cd56:	bne.w	ce8e <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x172>
    cd5a:	ldr	r2, [r0, #92]	; 0x5c
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    }
  } else if (remaining_noise_samples_) {
    cd5c:	cmp	r2, #0
    cd5e:	beq.w	d002 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e6>
    cd62:	cmp	r3, r2
    cd64:	mov	r7, r3
    cd66:	it	cs
    cd68:	movcs	r7, r2
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    cd6a:	subs	r2, r2, r7
    size_t tail = size - noise_samples;
    cd6c:	rsb	r9, r7, r3
    float* start = temp;
    while (noise_samples--) {
    cd70:	subs	r5, r7, #1
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    }
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    cd72:	str	r2, [r0, #92]	; 0x5c
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    cd74:	cmp	r7, #0
    cd76:	beq.w	d03e <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x322>
    cd7a:	ldr.w	ip, [pc, #784]	; d08c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x370>
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    cd7e:	vmov.f32	s12, #0	; 0x40000000  2.0
    cd82:	vmov.f32	s13, #240	; 0xbf800000 -1.0
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    cd86:	mov	lr, r1
    cd88:	ldr.w	r2, [ip]
    cd8c:	ldr.w	sl, [pc, #768]	; d090 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x374>
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    cd90:	vldr	s14, [pc, #688]	; d044 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x328>
    cd94:	mul.w	r8, sl, r2
    cd98:	ldr	r2, [pc, #684]	; (d048 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x32c>)
    cd9a:	vmov.f32	s11, s13
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    cd9e:	subs	r5, #1
    cda0:	add	r2, r8
    cda2:	cmp.w	r5, #4294967295
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    cda6:	vmov	s15, r2
    cdaa:	vcvt.f32.u32	s15, s15
    cdae:	vmul.f32	s15, s15, s14
    cdb2:	vfma.f32	s11, s15, s12
    cdb6:	vstmia	lr!, {s11}
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    cdba:	bne.n	cd94 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x78>
    cdbc:	add.w	r5, r1, r7, lsl #2
    cdc0:	str.w	r2, [ip]
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    }
    while (tail--) {
    cdc4:	add.w	r2, r9, #4294967295
    cdc8:	cmp.w	r9, #0
    cdcc:	beq.n	cddc <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xc0>
      *start++ = 0.0f;
    cdce:	movs	r7, #0
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    }
    while (tail--) {
    cdd0:	subs	r2, #1
      *start++ = 0.0f;
    cdd2:	str.w	r7, [r5], #4
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    }
    while (tail--) {
    cdd6:	cmp.w	r2, #4294967295
    cdda:	bne.n	cdd0 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xb4>
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    cddc:	vldr	s12, [r0, #12]
    float state_2 = state_2_;
    
    while (size--) {
    cde0:	subs	r2, r3, #1
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    cde2:	vldr	s14, [r0, #16]
    
    while (size--) {
    cde6:	cbz	r3, ce4a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x12e>
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    cde8:	mov	r5, r1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    cdea:	vldr	s11, [r0, #4]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    cdee:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    cdf0:	vldr	s15, [r5]
    cdf4:	vldr	s13, [r0]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    cdf8:	adds	r7, r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    cdfa:	vfms.f32	s15, s11, s12
    cdfe:	vldr	s11, [r0, #8]
    ce02:	vfms.f32	s15, s13, s12
    ce06:	vsub.f32	s15, s15, s14
    ce0a:	vmul.f32	s15, s15, s11
      bp = g_ * hp + state_1;
    ce0e:	vfma.f32	s12, s13, s15
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    ce12:	vfma.f32	s14, s13, s12
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
    ce16:	vmov.f32	s11, s12
      state_1 = g_ * hp + bp;
    ce1a:	vfma.f32	s12, s13, s15
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    ce1e:	vstmia	r5!, {s14}
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    ce22:	vfma.f32	s14, s13, s11
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    ce26:	bne.n	cdea <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xce>
    ce28:	mov	r5, r1
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    state_2_ = state_2;
    ce2a:	movs	r2, #0
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    ce2c:	vstr	s12, [r0, #12]
    state_2_ = state_2;
    ce30:	vstr	s14, [r0, #16]
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] += temp[i];
    ce34:	vldmia	r5!, {s14}
  } else {
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    ce38:	adds	r2, #1
    aux[i] += temp[i];
    ce3a:	vldr	s15, [r4]
  } else {
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    ce3e:	cmp	r3, r2
    aux[i] += temp[i];
    ce40:	vadd.f32	s15, s15, s14
    ce44:	vstmia	r4!, {s15}
  } else {
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    ce48:	bhi.n	ce34 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x118>
    aux[i] += temp[i];
  }
  
  float non_linearity = structure < 0.24f
      ? (structure - 0.24f) * 4.166f
      : (structure > 0.26f ? (structure - 0.26f) * 1.35135f : 0.0f);
    ce4a:	vldr	s15, [pc, #512]	; d04c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x330>
    ce4e:	vcmpe.f32	s2, s15
    ce52:	vmrs	APSR_nzcv, fpscr
    ce56:	bmi.w	d02a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x30e>
    ce5a:	vldr	s14, [pc, #500]	; d050 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x334>
    ce5e:	vcmpe.f32	s2, s14
    ce62:	vmrs	APSR_nzcv, fpscr
    ce66:	ble.w	d038 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x31c>
    ce6a:	vsub.f32	s14, s2, s14
    ce6e:	vldr	s1, [pc, #484]	; d054 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x338>
    ce72:	vmul.f32	s1, s14, s1
  string_.Process(f0, non_linearity, brightness, damping, temp, out, size);
    ce76:	mov	r2, r6
    ce78:	vmov.f32	s3, s4
    ce7c:	vmov.f32	s2, s9
    ce80:	adds	r0, #20
    ce82:	vmov.f32	s0, s10
}
    ce86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  }
  
  float non_linearity = structure < 0.24f
      ? (structure - 0.24f) * 4.166f
      : (structure > 0.26f ? (structure - 0.26f) * 1.35135f : 0.0f);
  string_.Process(f0, non_linearity, brightness, damping, temp, out, size);
    ce8a:	b.w	da8c <plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ce8e:	vmov.f32	s13, #0	; 0x40000000  2.0
    ce92:	vldr	s8, [pc, #452]	; d058 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x33c>
    ce96:	vmov.f32	s15, #224	; 0xbf000000 -0.5
    ce9a:	vldr	s14, [pc, #448]	; d05c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x340>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ce9e:	ldr	r7, [pc, #448]	; (d060 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x344>)
  // Synthesize excitation signal.
  if (trigger || sustain) {
    const float range = 72.0f;
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
    cea0:	vmov.f32	s12, #16	; 0x40800000  4.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    cea4:	vsub.f32	s13, s13, s9
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cea8:	ldr	r2, [pc, #440]	; (d064 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x348>)
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    ceaa:	vldr	s11, [pc, #444]	; d068 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x34c>
    ceae:	vmul.f32	s12, s10, s12

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ceb2:	vfma.f32	s15, s9, s13
    ceb6:	vfma.f32	s14, s15, s8
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    ceba:	vcvt.s32.f32	s15, s14

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cebe:	vcvt.f32.s32	s13, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cec2:	vmov	lr, s15
    cec6:	add.w	r7, r7, lr, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ceca:	vsub.f32	s14, s14, s13
    cece:	vldr	s15, [r7]
    ced2:	vcvt.s32.f32	s14, s14, #8
    ced6:	vmov	r7, s14
    ceda:	add.w	r2, r2, r7, lsl #2
    cede:	vldr	s13, [r2]
    cee2:	vmul.f32	s15, s13, s15
    cee6:	vmul.f32	s14, s15, s12
    ceea:	vcmpe.f32	s14, s11
    ceee:	vmrs	APSR_nzcv, fpscr
    cef2:	ble.n	cf38 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x21c>
    cef4:	vldr	s8, [pc, #372]	; d06c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x350>
    cef8:	vldr	s15, [pc, #372]	; d070 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x354>
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    cefc:	cbnz	r5, cf54 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x238>
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    cefe:	vmov.f32	s13, #112	; 0x3f800000  1.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    cf02:	vstr	s15, [r0]
    r_ = 1.0f / resonance;
    cf06:	vmov.f32	s12, #0	; 0x40000000  2.0
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    cf0a:	vmov.f32	s11, s13
    cf0e:	vdiv.f32	s14, s13, s10
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    cf12:	vstr	s12, [r0, #4]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    cf16:	vfma.f32	s11, s15, s12
    cf1a:	vadd.f32	s15, s11, s8
    cf1e:	vdiv.f32	s12, s13, s15
    cf22:	vcvt.u32.f32	s15, s14
    cf26:	vmov	r2, s15
    cf2a:	vstr	s15, [r0, #92]	; 0x5c
    cf2e:	vstr	s12, [r0, #8]
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    }
  } else if (remaining_noise_samples_) {
    cf32:	cmp	r2, #0
    cf34:	beq.n	d002 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e6>
    cf36:	b.n	cd62 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x46>
    cf38:	vldr	s13, [pc, #312]	; d074 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x358>
    cf3c:	vldr	s15, [pc, #312]	; d078 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x35c>
    cf40:	vmul.f32	s13, s14, s13
    cf44:	vfma.f32	s15, s14, s13
    cf48:	vmul.f32	s15, s15, s14
    cf4c:	vmul.f32	s8, s15, s15
    const float range = 72.0f;
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    cf50:	cmp	r5, #0
    cf52:	beq.n	cefe <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1e2>
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    cf54:	vmov.f32	s14, #112	; 0x3f800000  1.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    cf58:	vstr	s15, [r0]
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
    cf5c:	vmul.f32	s3, s3, s3
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    cf60:	vldr	s11, [pc, #280]	; d07c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x360>
    cf64:	vldr	s13, [pc, #280]	; d080 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x364>
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    cf68:	vadd.f32	s15, s15, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    cf6c:	vstr	s14, [r0, #4]
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    cf70:	vdiv.f32	s12, s14, s10
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    cf74:	vadd.f32	s15, s15, s8
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    cf78:	vmul.f32	s11, s3, s11
    cf7c:	vdiv.f32	s8, s14, s15
    cf80:	vfma.f32	s13, s3, s11
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    cf84:	vcvt.u32.f32	s12, s12
    cf88:	vstr	s12, [r0, #92]	; 0x5c
    cf8c:	vstr	s8, [r0, #8]
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
    cf90:	cmp	r3, #0
    cf92:	beq.w	ce4a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x12e>
    cf96:	vdiv.f32	s8, s14, s13
    cf9a:	ldr.w	ip, [pc, #240]	; d08c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x370>
    cf9e:	mov	r5, r1
    cfa0:	add.w	r8, r1, r3, lsl #2
    cfa4:	ldr.w	r2, [ip]
    cfa8:	ldr.w	lr, [pc, #228]	; d090 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x374>
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    cfac:	vldr	s11, [pc, #148]	; d044 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x328>
    cfb0:	vmov.f32	s15, #24	; 0x40c00000  6.0
    cfb4:	vmov.f32	s12, #32	; 0x41000000  8.0
    cfb8:	vfms.f32	s12, s13, s15
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    cfbc:	mul.w	r7, lr, r2
    cfc0:	ldr	r2, [pc, #132]	; (d048 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x32c>)
  float inv_frequency = 1.0f / frequency;
  float u = stmlib::Random::GetFloat();
  if (u < frequency) {
    return u * inv_frequency;
  } else {
    return 0.0f;
    cfc2:	vldr	s15, [pc, #192]	; d084 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x368>
    cfc6:	add	r2, r7
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    cfc8:	vmov	s14, r2
    cfcc:	vcvt.f32.u32	s14, s14
    cfd0:	vmul.f32	s14, s14, s11
namespace plaits {

inline float Dust(float frequency) {
  float inv_frequency = 1.0f / frequency;
  float u = stmlib::Random::GetFloat();
  if (u < frequency) {
    cfd4:	vcmpe.f32	s13, s14
    cfd8:	vmrs	APSR_nzcv, fpscr
    return u * inv_frequency;
    cfdc:	it	gt
    cfde:	vmulgt.f32	s15, s14, s8
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    cfe2:	vmul.f32	s15, s15, s12
    cfe6:	vmul.f32	s15, s15, s0
    cfea:	vstmia	r5!, {s15}
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
    cfee:	cmp	r5, r8
    cff0:	bne.n	cfbc <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2a0>
    cff2:	str.w	r2, [ip]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    cff6:	subs	r2, r3, #1
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    cff8:	vldr	s12, [r0, #12]
    float state_2 = state_2_;
    cffc:	vldr	s14, [r0, #16]
    d000:	b.n	cde8 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xcc>
    }
    while (tail--) {
      *start++ = 0.0f;
    }
  } else {
    fill(&temp[0], &temp[size], 0.0f);
    d002:	add.w	r5, r1, r3, lsl #2
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    d006:	cmp	r1, r5
    d008:	beq.w	cddc <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xc0>
    d00c:	mov	r2, r1
	*__first = __tmp;
    d00e:	movs	r7, #0
    d010:	str.w	r7, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    d014:	cmp	r5, r2
    d016:	bne.n	d010 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f4>
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    d018:	vldr	s12, [r0, #12]
    float state_2 = state_2_;
    
    while (size--) {
    d01c:	subs	r2, r3, #1
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    d01e:	vldr	s14, [r0, #16]
    
    while (size--) {
    d022:	cmp	r3, #0
    d024:	bne.w	cde8 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xcc>
    d028:	b.n	ce4a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x12e>
    aux[i] += temp[i];
  }
  
  float non_linearity = structure < 0.24f
      ? (structure - 0.24f) * 4.166f
      : (structure > 0.26f ? (structure - 0.26f) * 1.35135f : 0.0f);
    d02a:	vsub.f32	s15, s2, s15
    d02e:	vldr	s1, [pc, #88]	; d088 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x36c>
    d032:	vmul.f32	s1, s15, s1
    d036:	b.n	ce76 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x15a>
    d038:	vldr	s1, [pc, #72]	; d084 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x368>
    d03c:	b.n	ce76 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x15a>
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    d03e:	mov	r5, r1
    d040:	b.n	cdc4 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xa8>
    d042:	nop
    d044:	.word	0x2f800000
    d048:	.word	0x3c6ef35f
    d04c:	.word	0x3e75c28f
    d050:	.word	0x3e851eb8
    d054:	.word	0x3facf909
    d058:	.word	0x42900000
    d05c:	.word	0x43000000
    d060:	.word	0x20000024
    d064:	.word	0x20000428
    d068:	.word	0x3eff7cee
    d06c:	.word	0x4110abad
    d070:	.word	0x40407251
    d074:	.word	0x413957d7
    d078:	.word	0x40490fdb
    d07c:	.word	0x3f7ffcb9
    d080:	.word	0x3851b717
    d084:	.word	0x00000000
    d088:	.word	0x40854fdf
    d08c:	.word	0x2001f96c
    d090:	.word	0x0019660d

0000d094 <plaits::String::Reset()>:
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    d094:	ldr	r3, [r0, #4]
	*__first = __tmp;
    d096:	movs	r1, #0
    d098:	add.w	r2, r3, #4096	; 0x1000
    d09c:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    d0a0:	cmp	r2, r3
    d0a2:	bne.n	d09c <plaits::String::Reset()+0x8>
    d0a4:	ldr	r3, [r0, #12]
    write_ptr_ = 0;
    d0a6:	movs	r2, #0
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
  Reset();
}

void String::Reset() {
    d0a8:	push	{r4, r5, r6}
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    d0aa:	add.w	r1, r3, #1024	; 0x400
	*__first = __tmp;
    d0ae:	movs	r4, #0
    write_ptr_ = 0;
    d0b0:	str	r2, [r0, #0]
    d0b2:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    d0b6:	cmp	r1, r3
	*__first = __tmp;
    d0b8:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    d0bc:	bne.n	d0b2 <plaits::String::Reset()+0x1e>
    d0be:	movs	r6, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    d0c0:	ldr	r5, [pc, #36]	; (d0e8 <plaits::String::Reset()+0x54>)
    r_ = 1.0f / resonance;
    d0c2:	ldr	r4, [pc, #40]	; (d0ec <plaits::String::Reset()+0x58>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d0c4:	ldr	r1, [pc, #40]	; (d0f0 <plaits::String::Reset()+0x5c>)
  ~DCBlocker() { }
  
  void Init(float pole) {
    x_ = 0.0f;
    y_ = 0.0f;
    pole_ = pole;
    d0c6:	ldr	r3, [pc, #44]	; (d0f4 <plaits::String::Reset()+0x60>)
    d0c8:	str	r6, [r0, #8]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    d0ca:	str	r5, [r0, #16]
    r_ = 1.0f / resonance;
    d0cc:	str	r4, [r0, #20]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    d0ce:	str	r2, [r0, #32]
    d0d0:	str	r2, [r0, #28]
 public:
  DCBlocker() { }
  ~DCBlocker() { }
  
  void Init(float pole) {
    x_ = 0.0f;
    d0d2:	str	r2, [r0, #40]	; 0x28
    y_ = 0.0f;
    d0d4:	str	r2, [r0, #44]	; 0x2c
  string_.Reset();
  stretch_.Reset();
  iir_damping_filter_.Init();
  dc_blocker_.Init(1.0f - 20.0f / kSampleRate);
  dispersion_noise_ = 0.0f;
    d0d6:	str	r2, [r0, #52]	; 0x34
  curved_bridge_ = 0.0f;
    d0d8:	str	r2, [r0, #56]	; 0x38
  out_sample_[0] = out_sample_[1] = 0.0f;
    d0da:	str	r2, [r0, #68]	; 0x44
    d0dc:	str	r2, [r0, #64]	; 0x40
  src_phase_ = 0.0f;
    d0de:	str	r2, [r0, #60]	; 0x3c
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d0e0:	str	r1, [r0, #24]
  ~DCBlocker() { }
  
  void Init(float pole) {
    x_ = 0.0f;
    y_ = 0.0f;
    pole_ = pole;
    d0e2:	str	r3, [r0, #36]	; 0x24
}
    d0e4:	pop	{r4, r5, r6}
    d0e6:	bx	lr
    d0e8:	.word	0x3d00ba22
    d0ec:	.word	0x3c23d70a
    d0f0:	.word	0x3f7faaca
    d0f4:	.word	0x3f7fe4b1

0000d0f8 <plaits::String::Init(stmlib::BufferAllocator*)>:
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    d0f8:	ldr	r2, [r1, #8]
    d0fa:	cmp.w	r2, #4096	; 0x1000
namespace plaits {
  
using namespace std;
using namespace stmlib;

void String::Init(BufferAllocator* allocator) {
    d0fe:	push	{r4}
    d100:	mov	r4, r0
    d102:	bcc.n	d162 <plaits::String::Init(stmlib::BufferAllocator*)+0x6a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    d104:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    d106:	sub.w	r2, r2, #4096	; 0x1000
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    d10a:	add.w	r0, r3, #4096	; 0x1000
      free_ -= size_bytes;
    d10e:	str	r2, [r1, #8]
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    d110:	mov	r2, r0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    d112:	str	r0, [r1, #0]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    d114:	str	r3, [r4, #4]
	*__first = __tmp;
    d116:	movs	r0, #0
    d118:	str.w	r0, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    d11c:	cmp	r3, r2
    d11e:	bne.n	d118 <plaits::String::Init(stmlib::BufferAllocator*)+0x20>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    d120:	movs	r3, #0
    d122:	str	r3, [r4, #0]
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    d124:	ldr	r2, [r1, #8]
    d126:	cmp.w	r2, #1024	; 0x400
    d12a:	bcc.n	d15a <plaits::String::Init(stmlib::BufferAllocator*)+0x62>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    d12c:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    d12e:	sub.w	r2, r2, #1024	; 0x400
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    d132:	add.w	r0, r3, #1024	; 0x400
      free_ -= size_bytes;
    d136:	str	r2, [r1, #8]
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    d138:	mov	r2, r0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    d13a:	str	r0, [r1, #0]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    d13c:	str	r3, [r4, #12]
	*__first = __tmp;
    d13e:	movs	r1, #0
    d140:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    d144:	cmp	r3, r2
    d146:	bne.n	d140 <plaits::String::Init(stmlib::BufferAllocator*)+0x48>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    d148:	movs	r2, #0
  string_.Init(allocator->Allocate<float>(kDelayLineSize));
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
    d14a:	ldr	r3, [pc, #32]	; (d16c <plaits::String::Init(stmlib::BufferAllocator*)+0x74>)
  Reset();
    d14c:	mov	r0, r4
    d14e:	str	r2, [r4, #8]
using namespace stmlib;

void String::Init(BufferAllocator* allocator) {
  string_.Init(allocator->Allocate<float>(kDelayLineSize));
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
    d150:	str	r3, [r4, #48]	; 0x30
  Reset();
}
    d152:	ldr.w	r4, [sp], #4

void String::Init(BufferAllocator* allocator) {
  string_.Init(allocator->Allocate<float>(kDelayLineSize));
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
  Reset();
    d156:	b.w	d094 <plaits::String::Reset()>
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    d15a:	str	r3, [r4, #12]
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    d15c:	mov.w	r2, #1024	; 0x400
    d160:	b.n	d13e <plaits::String::Init(stmlib::BufferAllocator*)+0x46>
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    d162:	movs	r3, #0
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    d164:	mov.w	r2, #4096	; 0x1000
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    d168:	str	r3, [r0, #4]
    d16a:	b.n	d116 <plaits::String::Init(stmlib::BufferAllocator*)+0x1e>
    d16c:	.word	0x42c80000

0000d170 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)>:
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    d170:	vmov.f32	s14, #112	; 0x3f800000  1.0
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    d174:	vmov.f32	s15, #16	; 0x40800000  4.0
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    d178:	vdiv.f32	s13, s14, s0
        f0, non_linearity_amount, brightness, damping, in, out, size);
  }
}

template<StringNonLinearity non_linearity>
void String::ProcessInternal(
    d17c:	push	{r4, r5, r6, r7, lr}
    d17e:	vpush	{d8}
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    d182:	vcmpe.f32	s13, s15
    d186:	vmrs	APSR_nzcv, fpscr
    d18a:	bmi.w	d4e6 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x376>
    d18e:	vldr	s15, [pc, #860]	; d4ec <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x37c>
    d192:	vcmp.f32	s13, s15
    d196:	vmrs	APSR_nzcv, fpscr
    d19a:	it	gt
    d19c:	vmovgt.f32	s13, s15
  
  // If there is not enough delay time in the delay line, we play at the
  // lowest possible note and we upsample on the fly with a shitty linear
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
    d1a0:	vmul.f32	s8, s13, s0
  if (src_ratio >= 0.9999f) {
    d1a4:	vldr	s15, [pc, #840]	; d4f0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x380>
    d1a8:	vcmpe.f32	s8, s15
    d1ac:	vmrs	APSR_nzcv, fpscr
    d1b0:	blt.n	d1be <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x4e>
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    d1b2:	vmov.f32	s15, #112	; 0x3f800000  1.0
    src_ratio = 1.0f;
    d1b6:	vmov.f32	s8, s15
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
  if (src_ratio >= 0.9999f) {
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    d1ba:	vstr	s15, [r0, #60]	; 0x3c
    src_ratio = 1.0f;
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
    d1be:	vmul.f32	s10, s3, s3
    d1c2:	vldr	s11, [pc, #816]	; d4f4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x384>
    d1c6:	vmov.f32	s14, #40	; 0x41400000  12.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    d1ca:	vldr	s15, [pc, #812]	; d4f8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x388>
    d1ce:	vmov.f32	s12, #56	; 0x41c00000  24.0
    d1d2:	vfma.f32	s14, s10, s11
    d1d6:	vfma.f32	s14, s2, s12
    d1da:	vcmpe.f32	s14, s15
    d1de:	vmrs	APSR_nzcv, fpscr
    d1e2:	bgt.w	d4dc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x36c>
    d1e6:	vldr	s15, [pc, #788]	; d4fc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x38c>
    d1ea:	vadd.f32	s15, s14, s15
    d1ee:	vcvt.s32.f32	s12, s15
    d1f2:	vmov	r6, s12
    d1f6:	vcvt.f32.s32	s12, s12
    d1fa:	vsub.f32	s15, s15, s12
    d1fe:	vmov.f32	s12, s15
    d202:	vcvt.s32.f32	s12, s12, #8
    d206:	vmov	r4, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d20a:	ldr	r7, [pc, #756]	; (d500 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x390>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d20c:	ldr	r5, [pc, #756]	; (d504 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x394>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d20e:	add.w	r6, r7, r6, lsl #2
    d212:	vldr	s12, [pc, #756]	; d508 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x398>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d216:	add.w	r4, r5, r4, lsl #2
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    d21a:	vldr	s11, [pc, #752]	; d50c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x39c>
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
    d21e:	vldr	s15, [r6]
    d222:	vldr	s10, [r4]
    d226:	vmul.f32	s15, s15, s10
    d22a:	vmul.f32	s0, s15, s0
	return __b;
    d22e:	vcmp.f32	s0, s12
    d232:	vmrs	APSR_nzcv, fpscr
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    d236:	vcmpe.f32	s3, s11
    d23a:	it	gt
    d23c:	vmovgt.f32	s0, s12
    d240:	vmrs	APSR_nzcv, fpscr
    d244:	blt.n	d26a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0xfa>
    float to_infinite = 20.0f * (damping - 0.95f);
    d246:	vsub.f32	s3, s3, s11
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    d24a:	vldr	s12, [pc, #708]	; d510 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3a0>
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    d24e:	vmov.f32	s11, #52	; 0x41a00000  20.0
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    d252:	vldr	s15, [pc, #680]	; d4fc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x38c>
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    d256:	vsub.f32	s12, s12, s0
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    d25a:	vsub.f32	s15, s15, s14
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    d25e:	vmul.f32	s3, s3, s11
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    d262:	vfma.f32	s0, s3, s12
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    d266:	vfma.f32	s14, s3, s15
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    d26a:	vmul.f32	s5, s0, s0
      return f * (M_PI_F + f2 * (a + b * f2));
    d26e:	vldr	s11, [pc, #676]	; d514 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3a4>
    d272:	vldr	s7, [pc, #676]	; d518 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3a8>
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d276:	vmov.f32	s12, #112	; 0x3f800000  1.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    d27a:	vldr	s15, [pc, #672]	; d51c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3ac>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    d27e:	vmov.f32	s6, #0	; 0x40000000  2.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    d282:	vfma.f32	s7, s5, s11
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    d286:	ldr	r5, [pc, #664]	; (d520 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3b0>)
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    d288:	vcvt.s32.f32	s10, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d28c:	vldr	s11, [r0, #48]	; 0x30
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    d290:	vstr	s6, [r0, #20]
    increment_ = (new_value - *state) / static_cast<float>(size);
    d294:	vmov	s9, r3
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
    d298:	vmul.f32	s1, s1, s1
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d29c:	subs	r6, r3, #1
  float a = table[index_integral];
    d29e:	vmov	r4, s10
    d2a2:	vcvt.f32.s32	s10, s10
    d2a6:	vcvt.f32.u32	s4, s9
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
    d2aa:	vldr	s9, [pc, #632]	; d524 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3b4>
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    d2ae:	vfma.f32	s15, s5, s7
    d2b2:	lsls	r4, r4, #2
    d2b4:	vsub.f32	s14, s14, s10
    d2b8:	adds	r7, r4, r5
    d2ba:	vmul.f32	s1, s1, s9
    d2be:	vmul.f32	s0, s15, s0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d2c2:	vmov.f32	s15, s12

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    d2c6:	vstr	s0, [r0, #16]
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d2ca:	vfma.f32	s15, s0, s6
    d2ce:	vfma.f32	s15, s0, s0
    d2d2:	vdiv.f32	s10, s12, s15
    d2d6:	vstr	s10, [r0, #24]
    d2da:	vldr	s15, [r7]
    d2de:	vldr	s10, [r7, #4]
    d2e2:	vsub.f32	s10, s10, s15
    d2e6:	vfma.f32	s15, s14, s10
    d2ea:	vmov.f32	s14, s11
    d2ee:	vfnms.f32	s14, s13, s15
    d2f2:	vdiv.f32	s7, s14, s4
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d2f6:	cmp	r3, #0
    d2f8:	beq.w	d4d2 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x362>
      } else {
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
    d2fc:	vldr	s3, [pc, #552]	; d528 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3b8>
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    d300:	vneg.f32	s9, s1
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    d304:	vmov.f32	s10, #96	; 0x3f000000  0.5
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
        float sign = s > 0.0f ? 1.0f : -1.5f;
    d308:	vmov.f32	s4, #248	; 0xbfc00000 -1.5
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
      CONSTRAIN(s, -20.0f, +20.0f);
    d30c:	vmov.f32	s5, #180	; 0xc1a00000 -20.0
    d310:	vmov.f32	s6, #52	; 0x41a00000  20.0
    d314:	b.n	d3d0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x260>
    d316:	vcmp.f32	s15, s6
    d31a:	vmrs	APSR_nzcv, fpscr
    d31e:	it	gt
    d320:	vmovgt.f32	s15, s6
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    d324:	vmov.f32	s1, s15
    d328:	vldr	s13, [r0, #44]	; 0x2c
    d32c:	vldr	s14, [r0, #36]	; 0x24
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    d330:	add.w	r5, r5, r4, lsl #2
    d334:	vldr	s17, [r0, #40]	; 0x28
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    d338:	addw	r4, r4, #1023	; 0x3ff
    d33c:	vfma.f32	s1, s13, s14
    }
    x_ = x;
    d340:	vstr	s15, [r0, #40]	; 0x28
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d344:	vldr	s13, [r0, #28]
    d348:	ubfx	r4, r4, #0, #10
    d34c:	vldr	s16, [r0, #20]
    d350:	vldr	s2, [r0, #16]
    d354:	vldr	s14, [r0, #32]
    d358:	vldr	s0, [r0, #24]
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    d35c:	vsub.f32	s1, s1, s17
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d360:	vmov.f32	s15, s1
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    }
    x_ = x;
    y_ = y;
    d364:	vstr	s1, [r0, #44]	; 0x2c
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d368:	vfms.f32	s15, s16, s13
    d36c:	vfms.f32	s15, s13, s2
    d370:	vsub.f32	s15, s15, s14
    d374:	vmul.f32	s15, s15, s0
    bp = g_ * hp + state_1_;
    d378:	vfma.f32	s13, s2, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    d37c:	vfma.f32	s14, s2, s13
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d380:	vmov.f32	s1, s13
    d384:	vfma.f32	s1, s2, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d388:	vmov.f32	s15, s14
    d38c:	vfma.f32	s15, s2, s13
    d390:	vmov.f32	s2, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d394:	vstr	s1, [r0, #28]
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d398:	vstr	s15, [r0, #32]
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    d39c:	vstr	s14, [r5]
      
      dc_blocker_.Process(&s, 1);
      s = iir_damping_filter_.Process<FILTER_MODE_LOW_PASS>(s);
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
    d3a0:	vldr	s13, [r0, #64]	; 0x40
    d3a4:	vldr	s15, [r0, #60]	; 0x3c
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    d3a8:	str	r4, [r0, #0]
    d3aa:	vstr	s13, [r0, #68]	; 0x44
      out_sample_[0] = s;
    d3ae:	vstr	s14, [r0, #64]	; 0x40
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    d3b2:	vsub.f32	s2, s2, s13
    d3b6:	vldmia	r2!, {s14}
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d3ba:	subs	r6, #1

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
    d3bc:	adds	r1, #4
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    d3be:	vfma.f32	s13, s2, s15
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d3c2:	adds	r3, r6, #1
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    d3c4:	vadd.f32	s13, s14, s13
    d3c8:	vstr	s13, [r2, #-4]
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d3cc:	beq.w	d4d2 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x362>
    src_phase_ += src_ratio;
    d3d0:	vldr	s15, [r0, #60]	; 0x3c
    d3d4:	vadd.f32	s15, s8, s15
    if (src_phase_ > 1.0f) {
    d3d8:	vcmpe.f32	s15, s12
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    d3dc:	vstr	s15, [r0, #60]	; 0x3c
    if (src_phase_ > 1.0f) {
    d3e0:	vmrs	APSR_nzcv, fpscr
    d3e4:	ble.n	d4c8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x358>
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    d3e6:	vmov.f32	s13, s12
    d3ea:	vldr	s14, [r0, #56]	; 0x38
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
      src_phase_ -= 1.0f;
    d3ee:	vsub.f32	s15, s15, s12
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    d3f2:	ldr	r4, [r0, #0]
  }

  inline float Next() {
    value_ += increment_;
    d3f4:	vadd.f32	s11, s11, s7
    const T xm1 = line_[(t - 1) % max_delay];
    d3f8:	ldr	r5, [r0, #4]
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    d3fa:	vfma.f32	s13, s9, s14
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    d3fe:	add.w	r3, r4, #1024	; 0x400
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
      src_phase_ -= 1.0f;
    d402:	vstr	s15, [r0, #60]	; 0x3c
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    d406:	vmul.f32	s15, s13, s11
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    d40a:	vcvt.s32.f32	s13, s15
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    d40e:	vmov	r7, s13
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    d412:	vcvt.f32.s32	s13, s13
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    d416:	add	r3, r7
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    d418:	vsub.f32	s13, s15, s13
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    d41c:	add.w	lr, r3, #1
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    d420:	ubfx	ip, r3, #0, #10
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    d424:	subs	r7, r3, #1
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    d426:	adds	r3, #2
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    d428:	ubfx	lr, lr, #0, #10
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    d42c:	add.w	ip, r5, ip, lsl #2
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    d430:	ubfx	r7, r7, #0, #10
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    d434:	ubfx	r3, r3, #0, #10
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    d438:	add.w	lr, r5, lr, lsl #2
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    d43c:	vldr	s15, [ip]
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    d440:	add.w	r7, r5, r7, lsl #2
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    d444:	vldr	s14, [lr]
    const T x2 = line_[(t + 2) % max_delay];
    d448:	add.w	r3, r5, r3, lsl #2
    const T c = (x1 - xm1) * 0.5f;
    d44c:	vldr	s1, [r7]
    const T v = x0 - x1;
    d450:	vsub.f32	s2, s15, s14
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    d454:	vldr	s0, [r3]
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    d458:	vsub.f32	s1, s14, s1
    const T v = x0 - x1;
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    d45c:	vsub.f32	s0, s0, s15
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    d460:	vmov.f32	s14, s2
    d464:	vfma.f32	s14, s1, s10
    const T a = w + v + (x2 - x0) * 0.5f;
    d468:	vadd.f32	s2, s2, s14
    d46c:	vfma.f32	s2, s0, s10
    const T b_neg = w + a;
    const T f = delay_fractional;
    return (((a * f) - b_neg) * f + c) * f + x0;
    d470:	vadd.f32	s14, s14, s2
    d474:	vfnms.f32	s14, s13, s2
    d478:	vmul.f32	s14, s14, s13
    d47c:	vfma.f32	s14, s1, s10
    d480:	vfma.f32	s15, s13, s14
      } else {
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
    d484:	vabs.f32	s14, s15
        float sign = s > 0.0f ? 1.0f : -1.5f;
    d488:	vcmpe.f32	s15, #0.0
      } else {
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
    d48c:	vsub.f32	s14, s14, s3
        float sign = s > 0.0f ? 1.0f : -1.5f;
    d490:	vmrs	APSR_nzcv, fpscr
        curved_bridge_ = (fabsf(value) + value) * sign;
    d494:	vabs.f32	s13, s14
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
        float sign = s > 0.0f ? 1.0f : -1.5f;
    d498:	ite	le
    d49a:	vmovle.f32	s2, s4
    d49e:	vmovgt.f32	s2, s12
        curved_bridge_ = (fabsf(value) + value) * sign;
    d4a2:	vadd.f32	s14, s13, s14
    d4a6:	vmul.f32	s14, s14, s2
    d4aa:	vstr	s14, [r0, #56]	; 0x38
      }
    
      s += *in;
    d4ae:	vldr	s14, [r1]
    d4b2:	vadd.f32	s15, s15, s14
      CONSTRAIN(s, -20.0f, +20.0f);
    d4b6:	vcmpe.f32	s15, s5
    d4ba:	vmrs	APSR_nzcv, fpscr
    d4be:	bpl.w	d316 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x1a6>
    d4c2:	vmov.f32	s15, #180	; 0xc1a00000 -20.0
    d4c6:	b.n	d324 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x1b4>
    d4c8:	vldr	s13, [r0, #68]	; 0x44
    d4cc:	vldr	s2, [r0, #64]	; 0x40
    d4d0:	b.n	d3b2 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x242>
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
  }
}
    d4d2:	vpop	{d8}
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    d4d6:	vstr	s11, [r0, #48]	; 0x30
    d4da:	pop	{r4, r5, r6, r7, pc}
    d4dc:	vmov.f32	s14, s15
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    d4e0:	movs	r4, #0
    d4e2:	movs	r6, #212	; 0xd4
    d4e4:	b.n	d20a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x9a>
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    d4e6:	vmov.f32	s13, s15
    d4ea:	b.n	d1a0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x30>
    d4ec:	.word	0x447f0000
    d4f0:	.word	0x3f7ff972
    d4f4:	.word	0x42700000
    d4f8:	.word	0x42a80000
    d4fc:	.word	0x43000000
    d500:	.word	0x20000024
    d504:	.word	0x20000428
    d508:	.word	0x3eff7cee
    d50c:	.word	0x3f733333
    d510:	.word	0x3efff2e5
    d514:	.word	0x425f2649
    d518:	.word	0x4121ba8f
    d51c:	.word	0x40490fdb
    d520:	.word	0x20001b54
    d524:	.word	0x3c23d70a
    d528:	.word	0x3ccccccd

0000d52c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)>:
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    d52c:	vmov.f32	s14, #112	; 0x3f800000  1.0
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    d530:	vmov.f32	s15, #16	; 0x40800000  4.0
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    d534:	vdiv.f32	s13, s14, s0
        f0, non_linearity_amount, brightness, damping, in, out, size);
  }
}

template<StringNonLinearity non_linearity>
void String::ProcessInternal(
    d538:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d53c:	vpush	{d8-d11}
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    d540:	vcmpe.f32	s13, s15
    d544:	vmrs	APSR_nzcv, fpscr
    d548:	bmi.n	d564 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x38>
    d54a:	vldr	s15, [pc, #552]	; d774 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x248>
    d54e:	vcmpe.f32	s13, s15
    d552:	vmrs	APSR_nzcv, fpscr
    d556:	ble.w	da6e <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x542>
    d55a:	vmov.f32	s13, s15
    d55e:	vldr	s5, [pc, #536]	; d778 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x24c>
    d562:	b.n	d56c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x40>
    d564:	vmov.f32	s13, s15
    d568:	vldr	s5, [pc, #528]	; d77c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x250>
  
  // If there is not enough delay time in the delay line, we play at the
  // lowest possible note and we upsample on the fly with a shitty linear
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
    d56c:	vmul.f32	s8, s13, s0
  if (src_ratio >= 0.9999f) {
    d570:	vldr	s15, [pc, #524]	; d780 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x254>
    d574:	vcmpe.f32	s8, s15
    d578:	vmrs	APSR_nzcv, fpscr
    d57c:	blt.n	d58a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x5e>
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    d57e:	vmov.f32	s15, #112	; 0x3f800000  1.0
    src_ratio = 1.0f;
    d582:	vmov.f32	s8, s15
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
  if (src_ratio >= 0.9999f) {
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    d586:	vstr	s15, [r0, #60]	; 0x3c
    src_ratio = 1.0f;
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
    d58a:	vmul.f32	s10, s3, s3
    d58e:	vldr	s11, [pc, #500]	; d784 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x258>
    d592:	vmov.f32	s14, #40	; 0x41400000  12.0
    d596:	vldr	s15, [pc, #496]	; d788 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x25c>
    d59a:	vmov.f32	s12, #56	; 0x41c00000  24.0
    d59e:	vfma.f32	s14, s10, s11
    d5a2:	vfma.f32	s14, s2, s12
    d5a6:	vcmpe.f32	s14, s15
    d5aa:	vmrs	APSR_nzcv, fpscr
    d5ae:	bgt.w	da64 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x538>
    d5b2:	vldr	s15, [pc, #472]	; d78c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x260>
    d5b6:	vadd.f32	s15, s14, s15
    d5ba:	vcvt.s32.f32	s12, s15
    d5be:	vmov	r6, s12
    d5c2:	vcvt.f32.s32	s12, s12
    d5c6:	vsub.f32	s15, s15, s12
    d5ca:	vmov.f32	s12, s15
    d5ce:	vcvt.s32.f32	s12, s12, #8
    d5d2:	vmov	r4, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d5d6:	ldr	r7, [pc, #440]	; (d790 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x264>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d5d8:	ldr	r5, [pc, #440]	; (d794 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x268>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d5da:	add.w	r6, r7, r6, lsl #2
    d5de:	vldr	s12, [pc, #440]	; d798 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x26c>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d5e2:	add.w	r4, r5, r4, lsl #2
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    d5e6:	vldr	s11, [pc, #436]	; d79c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x270>
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
    d5ea:	vldr	s15, [r6]
    d5ee:	vldr	s10, [r4]
    d5f2:	vmul.f32	s15, s15, s10
    d5f6:	vmul.f32	s0, s15, s0
	return __b;
    d5fa:	vcmp.f32	s0, s12
    d5fe:	vmrs	APSR_nzcv, fpscr
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    d602:	vcmpe.f32	s3, s11
    d606:	it	gt
    d608:	vmovgt.f32	s0, s12
    d60c:	vmrs	APSR_nzcv, fpscr
    d610:	blt.n	d642 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x116>
    float to_infinite = 20.0f * (damping - 0.95f);
    d612:	vsub.f32	s3, s3, s11
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    d616:	vldr	s15, [pc, #372]	; d78c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x260>
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    d61a:	vmov.f32	s10, #52	; 0x41a00000  20.0
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    d61e:	vldr	s11, [pc, #384]	; d7a0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x274>
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    d622:	vmov.f32	s12, #112	; 0x3f800000  1.0
    damping_f += to_infinite * (0.4999f - damping_f);
    d626:	vsub.f32	s11, s11, s0
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    d62a:	vmul.f32	s3, s3, s10
    brightness += to_infinite * (1.0f - brightness);
    d62e:	vsub.f32	s12, s12, s2
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    d632:	vsub.f32	s15, s15, s14
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    d636:	vfma.f32	s0, s3, s11
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    d63a:	vfma.f32	s2, s3, s12
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    d63e:	vfma.f32	s14, s3, s15
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    d642:	vmul.f32	s4, s0, s0
      return f * (M_PI_F + f2 * (a + b * f2));
    d646:	vldr	s12, [pc, #348]	; d7a4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x278>
    d64a:	vldr	s7, [pc, #348]	; d7a8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x27c>
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d64e:	vmov.f32	s6, #112	; 0x3f800000  1.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    d652:	vldr	s15, [pc, #344]	; d7ac <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x280>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    d656:	vmov.f32	s9, #0	; 0x40000000  2.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    d65a:	vfma.f32	s7, s4, s12
    d65e:	ldr	r5, [pc, #336]	; (d7b0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x284>)
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    d660:	vcvt.s32.f32	s12, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d664:	vldr	s11, [r0, #48]	; 0x30
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    d668:	vstr	s9, [r0, #20]
  
  // Linearly interpolate delay time.
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
    d66c:	vsub.f32	s10, s9, s1
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    d670:	vcmpe.f32	s5, s6
  
  // Linearly interpolate delay time.
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
    d674:	vldr	s3, [pc, #316]	; d7b4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x288>
  float a = table[index_integral];
    d678:	vmov	r4, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    d67c:	vcvt.f32.s32	s12, s12
    d680:	vmul.f32	s10, s10, s1
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    d684:	vfma.f32	s15, s4, s7
    d688:	lsls	r4, r4, #2
    d68a:	vsub.f32	s14, s14, s12
    d68e:	adds	r6, r4, r5
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    d690:	vmrs	APSR_nzcv, fpscr
  
  // Linearly interpolate delay time.
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
    d694:	vmul.f32	s10, s10, s3
    d698:	vmul.f32	s0, s15, s0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d69c:	vmov.f32	s15, s6

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    d6a0:	vstr	s0, [r0, #16]
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d6a4:	vfma.f32	s15, s0, s9
    d6a8:	vfma.f32	s15, s0, s0
    d6ac:	vdiv.f32	s12, s6, s15
    d6b0:	vstr	s12, [r0, #24]
    d6b4:	vldr	s15, [r6]
    d6b8:	vldr	s12, [r6, #4]
    d6bc:	vsub.f32	s12, s12, s15
    d6c0:	vfma.f32	s15, s14, s12
    d6c4:	vmov.f32	s14, s11
    d6c8:	vfnms.f32	s14, s13, s15
    d6cc:	vmov	s15, r3
    d6d0:	vcvt.f32.u32	s15, s15
    d6d4:	vdiv.f32	s4, s14, s15
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    d6d8:	bmi.w	da78 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x54c>
    d6dc:	vldr	s15, [pc, #216]	; d7b8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x28c>
    d6e0:	vcmp.f32	s5, s15
    d6e4:	vmrs	APSR_nzcv, fpscr
    d6e8:	it	gt
    d6ea:	vmovgt.f32	s5, s15
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
    d6ee:	vmov.f32	s15, #104	; 0x3f400000  0.750
    d6f2:	vcmpe.f32	s1, s15
    d6f6:	vmrs	APSR_nzcv, fpscr
    d6fa:	ble.w	da5e <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x532>
    d6fe:	vsub.f32	s15, s1, s15
    d702:	vldr	s9, [pc, #184]	; d7bc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x290>
    d706:	vmov.f32	s14, #16	; 0x40800000  4.0
    d70a:	vmul.f32	s15, s15, s14
    d70e:	vmul.f32	s15, s15, s15
    d712:	vmul.f32	s9, s15, s9
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    d716:	vabs.f32	s14, s1
    d71a:	vldr	s12, [pc, #164]	; d7c0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x294>
    d71e:	vldr	s13, [pc, #164]	; d7c4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x298>
  
  while (size--) {
    d722:	add.w	ip, r3, #4294967295
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    d726:	vldr	s15, [pc, #160]	; d7c8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x29c>
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    d72a:	vadd.f32	s14, s14, s12
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    d72e:	vldr	s6, [pc, #156]	; d7cc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2a0>
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    d732:	vmul.f32	s1, s1, s13
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    d736:	vmul.f32	s15, s2, s15
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    d73a:	vdiv.f32	s0, s1, s14
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    d73e:	vfma.f32	s6, s2, s15
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d742:	cmp	r3, #0
    d744:	beq.w	da52 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x526>
    d748:	ldr.w	r9, [pc, #144]	; d7dc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2b0>
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
    d74c:	vmov.f32	s12, #112	; 0x3f800000  1.0
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    d750:	vmov.f32	s1, #224	; 0xbf000000 -0.5
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d754:	movs	r4, #0
      }
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float ap_delay = delay * stretch_point;
        float main_delay = delay - ap_delay * (0.408f - stretch_point * 0.308f) * stretch_correction;
        if (ap_delay >= 4.0f && main_delay >= 4.0f) {
    d756:	vmov.f32	s7, #16	; 0x40800000  4.0
    d75a:	ldr.w	r7, [r9]
        float sign = s > 0.0f ? 1.0f : -1.5f;
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
      CONSTRAIN(s, -20.0f, +20.0f);
    d75e:	vmov.f32	s2, #180	; 0xc1a00000 -20.0
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    d762:	ldr.w	r8, [pc, #124]	; d7e0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2b4>
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    d766:	vldr	s3, [pc, #104]	; d7d0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2a4>
        delay *= 1.0f - curved_bridge_ * bridge_curving;
      }
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float ap_delay = delay * stretch_point;
        float main_delay = delay - ap_delay * (0.408f - stretch_point * 0.308f) * stretch_correction;
    d76a:	vldr	s17, [pc, #104]	; d7d4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2a8>
    d76e:	vldr	s16, [pc, #104]	; d7d8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2ac>
    d772:	b.n	d94a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x41e>
    d774:	.word	0x447f0000
    d778:	.word	0x4059999a
    d77c:	.word	0x3c5a740e
    d780:	.word	0x3f7ff972
    d784:	.word	0x42700000
    d788:	.word	0x42a80000
    d78c:	.word	0x43000000
    d790:	.word	0x20000024
    d794:	.word	0x20000428
    d798:	.word	0x3eff7cee
    d79c:	.word	0x3f733333
    d7a0:	.word	0x3efff2e5
    d7a4:	.word	0x425f2649
    d7a8:	.word	0x4121ba8f
    d7ac:	.word	0x40490fdb
    d7b0:	.word	0x20001b54
    d7b4:	.word	0x3e666666
    d7b8:	.word	0x40066666
    d7bc:	.word	0x3dcccccd
    d7c0:	.word	0x3e19999a
    d7c4:	.word	0xbf1e353f
    d7c8:	.word	0x3f70a3d7
    d7cc:	.word	0x3d75c28f
    d7d0:	.word	0x2f800000
    d7d4:	.word	0x3e9db22d
    d7d8:	.word	0x3ed0e560
    d7dc:	.word	0x2001f96c
    d7e0:	.word	0x0019660d
    d7e4:	vmov.f32	s13, s16
    d7e8:	vmov.f32	s18, s15
    d7ec:	vfms.f32	s13, s10, s17
    d7f0:	vmul.f32	s13, s13, s14
    d7f4:	vfms.f32	s18, s5, s13
        if (ap_delay >= 4.0f && main_delay >= 4.0f) {
    d7f8:	vcmpe.f32	s18, s7
    d7fc:	vmrs	APSR_nzcv, fpscr
    d800:	blt.w	d9b0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x484>
    Write(sample);
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    d804:	vcvt.s32.f32	s15, s18
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    d808:	ldr	r6, [r0, #8]
    d80a:	vcvt.u32.f32	s14, s14
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    d80e:	ldmia.w	r0, {r5, lr}
    d812:	vmov	sl, s15
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    T write = sample + coefficient * read;
    d816:	vcvt.f32.s32	s15, s15
          s = string_.Read(main_delay);
          s = stretch_.Allpass(s, ap_delay, ap_gain);
    d81a:	mov	r3, r5
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    d81c:	vmov	r4, s14
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    d820:	add	r5, sl
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    T write = sample + coefficient * read;
    d822:	vsub.f32	s13, s18, s15
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    d826:	add	r4, r6
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    d828:	add.w	sl, r5, #1
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    d82c:	ubfx	r5, r5, #0, #10
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    d830:	uxtb	r4, r4
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    d832:	ubfx	sl, sl, #0, #10
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    d836:	add.w	r5, lr, r5, lsl #2
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    d83a:	add.w	sl, lr, sl, lsl #2
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    d83e:	vldr	s14, [r5]
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    d842:	ldr	r5, [r0, #12]
    T write = sample + coefficient * read;
    d844:	vldr	s18, [sl]
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    d848:	add.w	sl, r6, #255	; 0xff
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    d84c:	add.w	r4, r5, r4, lsl #2
    T write = sample + coefficient * read;
    d850:	vsub.f32	s18, s18, s14
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    d854:	add.w	r6, r5, r6, lsl #2
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    d858:	vldr	s15, [r4]
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    d85c:	uxtb.w	r4, sl
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    T write = sample + coefficient * read;
    d860:	vfma.f32	s14, s13, s18
    d864:	vfma.f32	s14, s0, s15
    Write(write);
    return -write * coefficient + read;
    d868:	vfms.f32	s15, s14, s0
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    d86c:	vstr	s14, [r6]
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    d870:	str	r4, [r0, #8]
        float value = fabsf(s) - 0.025f;
        float sign = s > 0.0f ? 1.0f : -1.5f;
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
    d872:	vldr	s14, [r1]
    d876:	vadd.f32	s15, s15, s14
      CONSTRAIN(s, -20.0f, +20.0f);
    d87a:	vcmpe.f32	s15, s2
    d87e:	vmrs	APSR_nzcv, fpscr
    d882:	bmi.w	da3c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x510>
    d886:	vmov.f32	s14, #52	; 0x41a00000  20.0
    d88a:	vcmp.f32	s15, s14
    d88e:	vmrs	APSR_nzcv, fpscr
    d892:	it	gt
    d894:	vmovgt.f32	s15, s14
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    d898:	vmov.f32	s19, s15
    d89c:	vldr	s13, [r0, #44]	; 0x2c
    d8a0:	vldr	s14, [r0, #36]	; 0x24
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    d8a4:	add.w	lr, lr, r3, lsl #2
    d8a8:	vldr	s22, [r0, #40]	; 0x28
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    d8ac:	addw	r3, r3, #1023	; 0x3ff
    d8b0:	vfma.f32	s19, s13, s14
    }
    x_ = x;
    d8b4:	vstr	s15, [r0, #40]	; 0x28
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d8b8:	vldr	s13, [r0, #28]
    d8bc:	ubfx	r3, r3, #0, #10
    d8c0:	vldr	s21, [r0, #20]
    d8c4:	movs	r4, #1
    d8c6:	vldr	s18, [r0, #16]
    d8ca:	vldr	s14, [r0, #32]
    d8ce:	vldr	s20, [r0, #24]
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    d8d2:	vsub.f32	s19, s19, s22
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d8d6:	vmov.f32	s15, s19
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    }
    x_ = x;
    y_ = y;
    d8da:	vstr	s19, [r0, #44]	; 0x2c
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d8de:	vfms.f32	s15, s21, s13
    d8e2:	vfms.f32	s15, s13, s18
    d8e6:	vsub.f32	s15, s15, s14
    d8ea:	vmul.f32	s15, s15, s20
    bp = g_ * hp + state_1_;
    d8ee:	vfma.f32	s13, s18, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    d8f2:	vfma.f32	s14, s18, s13
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d8f6:	vmov.f32	s19, s13
    d8fa:	vfma.f32	s19, s18, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d8fe:	vmov.f32	s15, s14
    d902:	vfma.f32	s15, s18, s13
    d906:	vmov.f32	s18, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d90a:	vstr	s19, [r0, #28]
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d90e:	vstr	s15, [r0, #32]
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    d912:	vstr	s14, [lr]
      
      dc_blocker_.Process(&s, 1);
      s = iir_damping_filter_.Process<FILTER_MODE_LOW_PASS>(s);
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
    d916:	vldr	s13, [r0, #64]	; 0x40
    d91a:	vldr	s15, [r0, #60]	; 0x3c
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    d91e:	str	r3, [r0, #0]
    d920:	vstr	s13, [r0, #68]	; 0x44
      out_sample_[0] = s;
    d924:	vstr	s14, [r0, #64]	; 0x40
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    d928:	vsub.f32	s18, s18, s13
    d92c:	vldmia	r2!, {s14}
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d930:	add.w	ip, ip, #4294967295

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
    d934:	adds	r1, #4
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    d936:	vfma.f32	s13, s18, s15
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d93a:	cmp.w	ip, #4294967295
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    d93e:	vadd.f32	s13, s14, s13
    d942:	vstr	s13, [r2, #-4]
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    d946:	beq.w	da4c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x520>
    src_phase_ += src_ratio;
    d94a:	vldr	s15, [r0, #60]	; 0x3c
    d94e:	vadd.f32	s15, s8, s15
    if (src_phase_ > 1.0f) {
    d952:	vcmpe.f32	s15, s12
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    d956:	vstr	s15, [r0, #60]	; 0x3c
    if (src_phase_ > 1.0f) {
    d95a:	vmrs	APSR_nzcv, fpscr
    d95e:	ble.n	da42 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x516>
    d960:	mul.w	r3, r8, r7
    d964:	ldr	r7, [pc, #280]	; (da80 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x554>)
      src_phase_ -= 1.0f;
    d966:	vsub.f32	s15, s15, s12
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    d96a:	vldr	s14, [r0, #52]	; 0x34
    d96e:	add	r7, r3
  }

  inline float Next() {
    value_ += increment_;
    d970:	vadd.f32	s11, s11, s4
    d974:	vmov	s13, r7
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
      src_phase_ -= 1.0f;
    d978:	vstr	s15, [r0, #60]	; 0x3c
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    d97c:	vmov.f32	s15, s1
    d980:	vcvt.f32.u32	s13, s13
    d984:	vfma.f32	s15, s13, s3
    d988:	vsub.f32	s15, s15, s14
    d98c:	vfma.f32	s14, s6, s15
        delay *= 1.0f + dispersion_noise_ * noise_amount;
    d990:	vmov.f32	s15, s12
    d994:	vfma.f32	s15, s14, s9
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    d998:	vstr	s14, [r0, #52]	; 0x34
        delay *= 1.0f + dispersion_noise_ * noise_amount;
    d99c:	vmul.f32	s15, s15, s11
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
      }
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float ap_delay = delay * stretch_point;
    d9a0:	vmul.f32	s14, s10, s15
        float main_delay = delay - ap_delay * (0.408f - stretch_point * 0.308f) * stretch_correction;
        if (ap_delay >= 4.0f && main_delay >= 4.0f) {
    d9a4:	vcmpe.f32	s14, s7
    d9a8:	vmrs	APSR_nzcv, fpscr
    d9ac:	bge.w	d7e4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2b8>
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    d9b0:	vcvt.s32.f32	s13, s15
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    d9b4:	ldr	r3, [r0, #0]
    const T xm1 = line_[(t - 1) % max_delay];
    d9b6:	ldr	r6, [r0, #4]
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    d9b8:	vmov.f32	s20, #96	; 0x3f000000  0.5
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    d9bc:	add.w	r5, r3, #1024	; 0x400
    d9c0:	vmov	r4, s13
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    d9c4:	vcvt.f32.s32	s14, s13
    const T v = x0 - x1;
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    const T b_neg = w + a;
    const T f = delay_fractional;
    return (((a * f) - b_neg) * f + c) * f + x0;
    d9c8:	mov	lr, r6
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    d9ca:	add	r5, r4
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    d9cc:	vsub.f32	s14, s15, s14
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    d9d0:	add.w	fp, r5, #1
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    d9d4:	ubfx	r4, r5, #0, #10
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    d9d8:	add.w	sl, r5, #4294967295
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    d9dc:	adds	r5, #2
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    d9de:	ubfx	fp, fp, #0, #10
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    d9e2:	add.w	r4, r6, r4, lsl #2
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    d9e6:	ubfx	sl, sl, #0, #10
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    d9ea:	ubfx	r5, r5, #0, #10
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    d9ee:	add.w	fp, r6, fp, lsl #2
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    d9f2:	vldr	s15, [r4]
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    d9f6:	add.w	sl, r6, sl, lsl #2
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    d9fa:	vldr	s13, [fp]
    const T x2 = line_[(t + 2) % max_delay];
    d9fe:	add.w	r4, r6, r5, lsl #2
    const T c = (x1 - xm1) * 0.5f;
    da02:	vldr	s19, [sl]
    const T v = x0 - x1;
    da06:	vsub.f32	s18, s15, s13
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    da0a:	vldr	s21, [r4]
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    da0e:	vsub.f32	s19, s13, s19
    const T v = x0 - x1;
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    da12:	vsub.f32	s21, s21, s15
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    da16:	vmov.f32	s13, s18
    da1a:	vfma.f32	s13, s19, s20
    const T a = w + v + (x2 - x0) * 0.5f;
    da1e:	vadd.f32	s18, s18, s13
    da22:	vfma.f32	s18, s21, s20
    const T b_neg = w + a;
    const T f = delay_fractional;
    return (((a * f) - b_neg) * f + c) * f + x0;
    da26:	vadd.f32	s13, s13, s18
    da2a:	vfnms.f32	s13, s14, s18
    da2e:	vmul.f32	s13, s13, s14
    da32:	vfma.f32	s13, s19, s20
    da36:	vfma.f32	s15, s14, s13
    da3a:	b.n	d872 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x346>
        float sign = s > 0.0f ? 1.0f : -1.5f;
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
      CONSTRAIN(s, -20.0f, +20.0f);
    da3c:	vmov.f32	s15, #180	; 0xc1a00000 -20.0
    da40:	b.n	d898 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x36c>
    da42:	vldr	s13, [r0, #68]	; 0x44
    da46:	vldr	s18, [r0, #64]	; 0x40
    da4a:	b.n	d928 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x3fc>
    da4c:	cbz	r4, da52 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x526>
    da4e:	str.w	r7, [r9]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    da52:	vstr	s11, [r0, #48]	; 0x30
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
  }
}
    da56:	vpop	{d8-d11}
    da5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da5e:	vldr	s9, [pc, #36]	; da84 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x558>
    da62:	b.n	d716 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x1ea>
    da64:	vmov.f32	s14, s15
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    da68:	movs	r4, #0
    da6a:	movs	r6, #212	; 0xd4
    da6c:	b.n	d5d6 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0xaa>
    da6e:	vldr	s5, [pc, #24]	; da88 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x55c>
    da72:	vmul.f32	s5, s13, s5
    da76:	b.n	d56c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x40>
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    da78:	vmov.f32	s5, s6
    da7c:	b.n	d6ee <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x1c2>
    da7e:	nop
    da80:	.word	0x3c6ef35f
    da84:	.word	0x00000000
    da88:	.word	0x3b5a740e

0000da8c <plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)>:
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  if (non_linearity_amount <= 0.0f) {
    da8c:	vcmpe.f32	s1, #0.0
    float non_linearity_amount,
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
    da90:	push	{r3, lr}
  if (non_linearity_amount <= 0.0f) {
    da92:	vmrs	APSR_nzcv, fpscr
    da96:	bls.n	da9e <plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)+0x12>
    ProcessInternal<STRING_NON_LINEARITY_CURVED_BRIDGE>(
        f0, -non_linearity_amount, brightness, damping, in, out, size);
  } else {
    ProcessInternal<STRING_NON_LINEARITY_DISPERSION>(
        f0, non_linearity_amount, brightness, damping, in, out, size);
    da98:	bl	d52c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)>
    da9c:	pop	{r3, pc}
    const float* in,
    float* out,
    size_t size) {
  if (non_linearity_amount <= 0.0f) {
    ProcessInternal<STRING_NON_LINEARITY_CURVED_BRIDGE>(
        f0, -non_linearity_amount, brightness, damping, in, out, size);
    da9e:	vneg.f32	s1, s1
    daa2:	bl	d170 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)>
    daa6:	pop	{r3, pc}

0000daa8 <plaits::Resonator::Init(float, int)>:
    Start();
  }
  
  inline void InitApproximate(float frequency) {
    float sign = 16.0f;
    frequency -= 0.25f;
    daa8:	vmov.f32	s15, #80	; 0x3e800000  0.250

using namespace std;
using namespace stmlib;

void Resonator::Init(float position, int resolution) {
  resolution_ = min(resolution, kMaxNumModes);
    daac:	cmp	r1, #24
    daae:	mov	r3, r1
    dab0:	it	ge
    dab2:	movge	r3, #24
    dab4:	vsub.f32	s0, s0, s15
    dab8:	str	r3, [r0, #0]
    if (frequency < 0.0f) {
    daba:	vcmpe.f32	s0, #0.0
    dabe:	vmrs	APSR_nzcv, fpscr
    dac2:	bmi.n	db4e <plaits::Resonator::Init(float, int)+0xa6>
      frequency = -frequency;
    } else {
      if (frequency > 0.5f) {
    dac4:	vmov.f32	s15, #96	; 0x3f000000  0.5
    dac8:	vcmpe.f32	s0, s15
    dacc:	vmrs	APSR_nzcv, fpscr
    dad0:	bgt.n	db44 <plaits::Resonator::Init(float, int)+0x9c>
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
    dad2:	vmov.f32	s15, #176	; 0xc1800000 -16.0
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    dad6:	vmov.f32	s14, #0	; 0x40000000  2.0
  
  CosineOscillator amplitudes;
  amplitudes.Init<COSINE_OSCILLATOR_APPROXIMATE>(position);
  
  for (int i = 0; i < resolution; ++i) {
    dada:	cmp	r1, #0
    dadc:	vmov.f32	s11, #112	; 0x3f800000  1.0
    dae0:	vmul.f32	s15, s0, s15
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    dae4:	vmov.f32	s10, #80	; 0x3e800000  0.250
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    dae8:	vfms.f32	s11, s0, s14
    daec:	vmul.f32	s11, s11, s15
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    daf0:	vmul.f32	s13, s11, s10
    daf4:	ble.n	db26 <plaits::Resonator::Init(float, int)+0x7e>
    daf6:	vmov.f32	s15, #96	; 0x3f000000  0.5
    dafa:	adds	r2, r1, #1
    dafc:	adds	r3, r0, #4
    dafe:	add.w	r2, r0, r2, lsl #2
    mode_amplitude_[i] = amplitudes.Next() * 0.25f;
    db02:	vmov.f32	s9, s15
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    y0_ = iir_coefficient_ * y0_ - y1_;
    db06:	vfnms.f32	s13, s15, s11
    db0a:	vadd.f32	s14, s15, s9
    db0e:	vmov.f32	s12, s13
    db12:	vmov.f32	s13, s15
    db16:	vmul.f32	s15, s14, s10
    db1a:	vstmia	r3!, {s15}
  resolution_ = min(resolution, kMaxNumModes);
  
  CosineOscillator amplitudes;
  amplitudes.Init<COSINE_OSCILLATOR_APPROXIMATE>(position);
  
  for (int i = 0; i < resolution; ++i) {
    db1e:	cmp	r2, r3
    db20:	vmov.f32	s15, s12
    db24:	bne.n	db06 <plaits::Resonator::Init(float, int)+0x5e>
  ResonatorSvf() { }
  ~ResonatorSvf() { }
  
  void Init() {
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_2_[i] = 0.0f;
    db26:	movs	r3, #0
    db28:	add.w	r2, r0, #192	; 0xc0
    db2c:	str	r3, [r0, #116]	; 0x74
    db2e:	adds	r0, #32
    db30:	str	r3, [r0, #68]	; 0x44
    db32:	str	r3, [r0, #88]	; 0x58
    db34:	str	r3, [r0, #72]	; 0x48
    db36:	str	r3, [r0, #92]	; 0x5c
    db38:	str	r3, [r0, #76]	; 0x4c
    db3a:	str	r3, [r0, #96]	; 0x60
    db3c:	str	r3, [r0, #80]	; 0x50
    mode_amplitude_[i] = amplitudes.Next() * 0.25f;
  }
  
  for (int i = 0; i < kMaxNumModes / kModeBatchSize; ++i) {
    db3e:	cmp	r2, r0
    db40:	bne.n	db2c <plaits::Resonator::Init(float, int)+0x84>
    mode_filters_[i].Init();
  }
}
    db42:	bx	lr
    frequency -= 0.25f;
    if (frequency < 0.0f) {
      frequency = -frequency;
    } else {
      if (frequency > 0.5f) {
        frequency -= 0.5f;
    db44:	vsub.f32	s0, s0, s15
    }
    Start();
  }
  
  inline void InitApproximate(float frequency) {
    float sign = 16.0f;
    db48:	vmov.f32	s15, #48	; 0x41800000  16.0
    db4c:	b.n	dad6 <plaits::Resonator::Init(float, int)+0x2e>
    frequency -= 0.25f;
    if (frequency < 0.0f) {
      frequency = -frequency;
    db4e:	vneg.f32	s0, s0
    }
    Start();
  }
  
  inline void InitApproximate(float frequency) {
    float sign = 16.0f;
    db52:	vmov.f32	s15, #48	; 0x41800000  16.0
    db56:	b.n	dad6 <plaits::Resonator::Init(float, int)+0x2e>

0000db58 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)>:
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    db58:	vldr	s15, [pc, #764]	; de58 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x300>

inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    db5c:	vmov.f32	s14, #112	; 0x3f800000  1.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    db60:	vldr	s12, [pc, #760]	; de5c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x304>
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    db64:	vmov.f32	s6, #112	; 0x3f800000  1.0
    db68:	vmul.f32	s15, s1, s15
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    db6c:	vldr	s10, [pc, #752]	; de60 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x308>
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    db70:	vldr	s8, [pc, #752]	; de64 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x30c>
    db74:	vldr	s9, [pc, #752]	; de68 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x310>
  MAKE_INTEGRAL_FRACTIONAL(index)
    db78:	vcvt.s32.f32	s13, s15
  f0 *= NthHarmonicCompensation(3, stiffness);
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
    db7c:	vldr	s5, [pc, #748]	; de6c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x314>
    float structure,
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
    db80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db84:	vpush	{d8-d9}
    db88:	sub	sp, #180	; 0xb4
  float a = table[index_integral];
    db8a:	ldr	r4, [pc, #740]	; (de70 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x318>)
    db8c:	str	r3, [sp, #20]
    db8e:	vmov	r3, s13
    db92:	str	r2, [sp, #28]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    db94:	vcvt.f32.s32	s13, s13
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    db98:	lsls	r3, r3, #2
    db9a:	str	r1, [sp, #24]
  float mode_q[kModeBatchSize];
  float mode_f[kModeBatchSize];
  float mode_a[kModeBatchSize];
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
    db9c:	add.w	r1, r0, #100	; 0x64
    dba0:	adds	r2, r3, r4
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    dba2:	vsub.f32	s15, s15, s13
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    dba6:	ldr	r3, [pc, #716]	; (de74 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x31c>)
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    dba8:	vldr	s7, [r2]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    dbac:	vldr	s11, [r2, #4]
    dbb0:	str	r1, [sp, #4]
    dbb2:	vsub.f32	s11, s11, s7
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    dbb6:	ldr	r2, [pc, #704]	; (de78 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x320>)
    dbb8:	vfma.f32	s7, s15, s11

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    dbbc:	vldr	s15, [pc, #700]	; de7c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x324>
    dbc0:	vfma.f32	s15, s3, s12
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    dbc4:	vmov.f32	s12, s6

inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
    dbc8:	vcmpe.f32	s7, #0.0
}

inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    dbcc:	vadd.f32	s14, s7, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    dbd0:	vcvt.s32.f32	s11, s15
    if (stiffness < 0.0f) {
    dbd4:	vmrs	APSR_nzcv, fpscr
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    dbd8:	vfms.f32	s12, s1, s10

  return lut_pitch_ratio_high[pitch_integral] * \
    dbdc:	vmov	r1, s11
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      stiffness *= 0.93f;
    } else {
      stiffness *= 0.98f;
    dbe0:	ite	pl
    dbe2:	vldrpl	s13, [pc, #668]	; de80 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x328>
inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      stiffness *= 0.93f;
    dbe6:	vldrmi	s13, [pc, #668]	; de84 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x32c>
    dbea:	add.w	r3, r3, r1, lsl #2
    dbee:	vmul.f32	s13, s7, s13
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    dbf2:	vmul.f32	s12, s12, s2
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    dbf6:	vadd.f32	s13, s14, s13
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    dbfa:	vmov.f32	s14, #0	; 0x40000000  2.0
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    dbfe:	vdiv.f32	s4, s6, s13
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
    dc02:	vmov.f32	s13, s6
    dc06:	vfms.f32	s13, s3, s10
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    dc0a:	vcvt.f32.s32	s10, s11
    dc0e:	vldr	s11, [r3]
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    dc12:	ldr	r3, [r0, #0]
    dc14:	vsub.f32	s15, s15, s10
    dc18:	cmp	r3, #0
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
    dc1a:	vmul.f32	s13, s13, s12
    dc1e:	vcvt.s32.f32	s15, s15, #8
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    dc22:	vmul.f32	s3, s4, s0
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    dc26:	vsub.f32	s14, s14, s13
    dc2a:	vmov	r1, s15
    dc2e:	add.w	r2, r2, r1, lsl #2
    dc32:	vmul.f32	s15, s14, s13
    dc36:	vldr	s14, [r2]
    dc3a:	vfma.f32	s9, s15, s8
    dc3e:	vmul.f32	s14, s14, s11
  f0 *= NthHarmonicCompensation(3, stiffness);
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
    dc42:	vmul.f32	s5, s14, s5
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    dc46:	vmov.f32	s2, s9
  f0 *= NthHarmonicCompensation(3, stiffness);
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
    dc4a:	vmul.f32	s5, s5, s14
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    dc4e:	ble.n	dcfe <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1a6>
    dc50:	adds	r3, #1
    dc52:	add.w	fp, r0, #4
    dc56:	vmov.f32	s4, s3
    float mode_frequency = harmonic * stretch_factor;
    if (mode_frequency >= 0.499f) {
    dc5a:	vldr	s1, [pc, #556]	; de88 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x330>
    dc5e:	add.w	r3, r0, r3, lsl #2
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    dc62:	vldr	s18, [pc, #552]	; de8c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x334>
    dc66:	vldr	s17, [pc, #552]	; de90 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x338>
    dc6a:	str	r3, [sp, #0]
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    dc6c:	movs	r3, #0
    dc6e:	vldr	s16, [pc, #548]	; de94 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x33c>
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    dc72:	vldr	s0, [pc, #524]	; de80 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x328>
    dc76:	b.n	dcd0 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x178>
    dc78:	vmov.f32	s14, #0	; 0x40000000  2.0
    dc7c:	vmov.f32	s15, #112	; 0x3f800000  1.0
    dc80:	vfms.f32	s15, s13, s14
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    dc84:	vmov.f32	s12, #112	; 0x3f800000  1.0
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    dc88:	vldmia	fp!, {s14}
    if (mode_frequency >= 0.499f) {
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    dc8c:	add	r2, sp, #176	; 0xb0
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    dc8e:	vmul.f32	s15, s14, s15
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    dc92:	vmov.f32	s14, s12
    if (mode_frequency >= 0.499f) {
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    dc96:	add.w	r2, r2, r3, lsl #2
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    dc9a:	adds	r3, #1
    if (mode_frequency >= 0.499f) {
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    dc9c:	vstr	s13, [r2, #-128]	; 0xffffff80
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    dca0:	vfma.f32	s14, s13, s5
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
    dca4:	cmp	r3, #4
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    dca6:	vstr	s15, [r2, #-112]	; 0xffffff90
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    dcaa:	vstr	s14, [r2, #-144]	; 0xffffff70
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
    dcae:	beq.n	dd08 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1b0>
          size);
      ++batch_processor;
    }
    
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
    dcb0:	vcmpe.f32	s7, #0.0
          out,
          size);
      ++batch_processor;
    }
    
    stretch_factor += stiffness;
    dcb4:	vadd.f32	s6, s6, s7
    if (stiffness < 0.0f) {
    dcb8:	vmrs	APSR_nzcv, fpscr
    dcbc:	bmi.n	dce8 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x190>
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    dcbe:	ldr	r2, [sp, #0]
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    dcc0:	vmul.f32	s7, s7, s0
    }
    harmonic += f0;
    dcc4:	vadd.f32	s4, s4, s3
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    dcc8:	cmp	r2, fp
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    }
    harmonic += f0;
    q *= q_loss;
    dcca:	vmul.f32	s5, s5, s2
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    dcce:	beq.n	dcfe <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1a6>
    float mode_frequency = harmonic * stretch_factor;
    dcd0:	vmul.f32	s13, s6, s4
    if (mode_frequency >= 0.499f) {
    dcd4:	vcmpe.f32	s13, s1
    dcd8:	vmrs	APSR_nzcv, fpscr
    dcdc:	blt.n	dc78 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x120>
    dcde:	vldr	s15, [pc, #440]	; de98 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x340>
      mode_frequency = 0.499f;
    dce2:	vldr	s13, [pc, #420]	; de88 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x330>
    dce6:	b.n	dc84 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x12c>
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    dce8:	ldr	r2, [sp, #0]
      stiffness *= 0.93f;
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    }
    harmonic += f0;
    dcea:	vadd.f32	s4, s4, s3
    }
    
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    dcee:	vldr	s15, [pc, #404]	; de84 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x32c>
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    }
    harmonic += f0;
    q *= q_loss;
    dcf2:	vmul.f32	s5, s5, s2
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    dcf6:	cmp	r2, fp
    }
    
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    dcf8:	vmul.f32	s7, s7, s15
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    dcfc:	bne.n	dcd0 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x178>
      stiffness *= 0.98f;
    }
    harmonic += f0;
    q *= q_loss;
  }
}
    dcfe:	add	sp, #180	; 0xb4
    dd00:	vpop	{d8-d9}
    dd04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd08:	add	r3, sp, #112	; 0x70
    dd0a:	add	r1, sp, #128	; 0x80
    dd0c:	ldr	r4, [sp, #4]
    dd0e:	add	r2, sp, #144	; 0x90
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
    dd10:	str.w	fp, [sp, #12]
    dd14:	add.w	sl, sp, #80	; 0x50
    dd18:	mov	r9, r3
    dd1a:	add.w	r8, sp, #96	; 0x60
    dd1e:	add.w	ip, sp, #160	; 0xa0
    dd22:	add.w	lr, sp, #48	; 0x30
    dd26:	add	r7, sp, #32
    dd28:	mov	r0, r4
    dd2a:	add	r6, sp, #64	; 0x40
    dd2c:	movs	r5, #0
    dd2e:	mov	fp, r1
    dd30:	str	r2, [sp, #8]
    dd32:	str	r2, [sp, #16]
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
    dd34:	vldmia	r7!, {s11}
    float r_plus_g[batch_size];
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
    dd38:	adds	r5, #1
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
    dd3a:	vldmia	lr!, {s15}
    dd3e:	adds	r4, #4
      r[i] = 1.0f / q[i];
    dd40:	vdiv.f32	s13, s12, s11
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    dd44:	vldr	s11, [r4, #12]
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
    dd48:	vldr	s10, [r4, #-4]
    float r_plus_g[batch_size];
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
    dd4c:	cmp	r5, #4
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    dd4e:	vstmia	r2!, {s11}
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
    dd52:	vstmia	fp!, {s10}
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    dd56:	vldmia	r6!, {s10}
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    dd5a:	vmul.f32	s14, s15, s15
      return f * (M_PI_F + f2 * (a + b * f2));
    dd5e:	vmov.f32	s11, s17
    dd62:	vstmia	ip!, {s10}
    dd66:	vmov.f32	s10, s16
    dd6a:	vfma.f32	s11, s14, s18
    dd6e:	vfma.f32	s10, s14, s11
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    dd72:	vmov.f32	s14, s12
    dd76:	vmul.f32	s15, s10, s15
    dd7a:	vfma.f32	s14, s15, s13
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
    dd7e:	vstmia	sl!, {s15}
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
    dd82:	vadd.f32	s13, s15, s13
    dd86:	vstmia	r8!, {s13}
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    dd8a:	vfma.f32	s14, s15, s15
    dd8e:	vmov.f32	s15, s14
    dd92:	vdiv.f32	s14, s12, s15
    dd96:	vstmia	r9!, {s14}
    float r_plus_g[batch_size];
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
    dd9a:	bne.n	dd34 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1dc>
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    dd9c:	ldr	r5, [sp, #20]
    dd9e:	ldr.w	fp, [sp, #12]
    dda2:	ldr	r2, [sp, #16]
    dda4:	add.w	r8, r5, #4294967295
    dda8:	cmp	r5, #0
    ddaa:	beq.n	de36 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x2de>
    ddac:	ldr.w	r9, [sp, #28]
    ddb0:	ldr.w	sl, [sp, #24]
      float s_in = *in++;
    ddb4:	vldmia	sl!, {s8}
    ddb8:	add.w	ip, sp, #160	; 0xa0
    ddbc:	mov	r6, r2
    ddbe:	mov	r5, r1
    ddc0:	add.w	lr, sp, #80	; 0x50
    ddc4:	mov	r7, r3
    ddc6:	add	r4, sp, #96	; 0x60
      float s_out = 0.0f;
    ddc8:	vldr	s10, [pc, #208]	; de9c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x344>
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    ddcc:	vmov.f32	s14, s8
    ddd0:	vldr	s13, [r5]
    ddd4:	vldmia	r4!, {s15}
    ddd8:	vldr	s12, [r6]
    dddc:	vfms.f32	s14, s15, s13
        const float bp = g[i] * hp + state_1[i];
    dde0:	vldmia	lr!, {s11}
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
    dde4:	vldmia	ip!, {s9}
    }
    
    while (size--) {
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
    dde8:	cmp	r4, r3
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    ddea:	vmov.f32	s15, s14
    ddee:	vldmia	r7!, {s14}
    ddf2:	vsub.f32	s15, s15, s12
    ddf6:	vmul.f32	s15, s15, s14
        const float bp = g[i] * hp + state_1[i];
    ddfa:	vmov.f32	s14, s13
    ddfe:	vfma.f32	s14, s15, s11
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    de02:	vfma.f32	s12, s11, s14
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    de06:	vmov.f32	s13, s14
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
    de0a:	vfma.f32	s10, s14, s9
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    de0e:	vfma.f32	s13, s15, s11
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    de12:	vfma.f32	s12, s11, s14
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    de16:	vstmia	r5!, {s13}
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    de1a:	vstmia	r6!, {s12}
    }
    
    while (size--) {
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
    de1e:	bne.n	ddcc <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x274>
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
    de20:	vldmia	r9!, {s15}
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    de24:	add.w	r8, r8, #4294967295
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
    de28:	vadd.f32	s10, s15, s10
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    de2c:	cmp.w	r8, #4294967295
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
    de30:	vstr	s10, [r9, #-4]
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    de34:	bne.n	ddb4 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x25c>
    de36:	ldr	r3, [sp, #4]
    de38:	add.w	r5, r3, #16
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_1[i];
    de3c:	ldr.w	r4, [r1], #4
      state_2_[i] = state_2[i];
    de40:	ldr.w	r3, [r2], #4
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_1[i];
    de44:	str.w	r4, [r0], #4
        *out++ += s_out;
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
    de48:	cmp	r5, r0
      state_1_[i] = state_1[i];
      state_2_[i] = state_2[i];
    de4a:	str	r3, [r0, #12]
        *out++ += s_out;
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
    de4c:	bne.n	de3c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x2e4>
          mode_q,
          mode_a,
          in,
          out,
          size);
      ++batch_processor;
    de4e:	ldr	r3, [sp, #4]
    de50:	adds	r3, #32
    de52:	str	r3, [sp, #4]
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
      batch_counter = 0;
    de54:	movs	r3, #0
    de56:	b.n	dcb0 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x158>
    de58:	.word	0x42800000
    de5c:	.word	0x429f6666
    de60:	.word	0x3e99999a
    de64:	.word	0x3f59999a
    de68:	.word	0x3e19999a
    de6c:	.word	0x43fa0000
    de70:	.word	0x2000082c
    de74:	.word	0x20000024
    de78:	.word	0x20000428
    de7c:	.word	0x43000000
    de80:	.word	0x3f7ae148
    de84:	.word	0x3f6e147b
    de88:	.word	0x3eff7cee
    de8c:	.word	0x425f2649
    de90:	.word	0x4121ba8f
    de94:	.word	0x40490fdb
    de98:	.word	0x3b031200
    de9c:	.word	0x00000000

0000dea0 <plaits::ModalVoice::Init()>:
  ResonatorSvf() { }
  ~ResonatorSvf() { }
  
  void Init() {
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_2_[i] = 0.0f;
    dea0:	movs	r2, #0
    dea2:	mov	r3, r0
using namespace std;
using namespace stmlib;

void ModalVoice::Init() {
  excitation_filter_.Init();
  resonator_.Init(0.015f, kMaxNumModes);
    dea4:	movs	r1, #24
    dea6:	vldr	s0, [pc, #16]	; deb8 <plaits::ModalVoice::Init()+0x18>
    deaa:	str	r2, [r0, #4]
    deac:	str.w	r2, [r3], #8
    deb0:	mov	r0, r3
    deb2:	b.w	daa8 <plaits::Resonator::Init(float, int)>
    deb6:	nop
    deb8:	.word	0x3c75c28f

0000debc <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>:
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    debc:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    dec0:	mov	ip, r2
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    dec2:	vmov.f32	s15, #80	; 0x3e800000  0.250
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    dec6:	vmov.f32	s7, s1
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    deca:	vsub.f32	s13, s14, s3
    dece:	vmul.f32	s15, s0, s15
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    ded2:	vmov.f32	s1, s2
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
    ded6:	vsub.f32	s14, s14, s4
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    deda:	vmov.f32	s2, s3
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    dede:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dee2:	ldr	r2, [sp, #28]
    dee4:	mov	r6, r3
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    dee6:	vfma.f32	s2, s15, s13
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    deea:	ldr	r4, [sp, #32]
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
    deec:	vfma.f32	s4, s14, s15
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    def0:	ldr	r3, [sp, #36]	; 0x24
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
    def2:	cmp	r1, #0
    def4:	beq.w	e16e <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2b2>
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
    def8:	vmov.f32	s13, #16	; 0x40800000  4.0
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
    defc:	vldr	s10, [pc, #632]	; e178 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2bc>
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
    df00:	vmul.f32	s13, s7, s13

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    df04:	vmov.f32	s12, #0	; 0x40000000  2.0
    df08:	vldr	s15, [pc, #624]	; e17c <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c0>
    df0c:	vmov.f32	s14, #224	; 0xbf000000 -0.5
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    df10:	ldr.w	r9, [pc, #688]	; e1c4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x308>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    df14:	ldr.w	r8, [pc, #688]	; e1c8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x30c>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    df18:	vsub.f32	s12, s12, s2
    df1c:	vldr	s11, [pc, #608]	; e180 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c4>
    df20:	vfma.f32	s14, s2, s12
    df24:	vfma.f32	s15, s14, s10
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    df28:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    df2c:	vcvt.f32.s32	s10, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    df30:	vmov	r5, s14
    df34:	add.w	r5, r9, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    df38:	vsub.f32	s15, s15, s10
  const float cutoff = min(
      f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
    df3c:	vldr	s12, [r5]
    df40:	vcvt.s32.f32	s15, s15, #8
    df44:	vmov	r5, s15
    df48:	add.w	r5, r8, r5, lsl #2
    df4c:	vldr	s14, [r5]
    df50:	vmul.f32	s15, s14, s12
    df54:	vmul.f32	s15, s15, s13
    df58:	vcmpe.f32	s15, s11
    df5c:	vmrs	APSR_nzcv, fpscr
    df60:	bgt.w	e0ae <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1f2>
    df64:	vmul.f32	s14, s15, s15
    df68:	vldr	s10, [pc, #536]	; e184 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c8>
    df6c:	vldr	s12, [pc, #536]	; e188 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2cc>
	return __b;
      return __a;
    df70:	vmov.f32	s11, s15
    df74:	vldr	s13, [pc, #532]	; e18c <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2d0>
    df78:	vfma.f32	s12, s14, s10
    df7c:	vfma.f32	s13, s14, s12
    df80:	vmul.f32	s13, s13, s15
    df84:	vmul.f32	s8, s13, s13
      0.499f);
  const float q = sustain ? 0.7f : 1.5f;
    df88:	cmp	r1, #0
    df8a:	beq.w	e0c0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x204>
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
    df8e:	vmul.f32	s3, s3, s3
      0.499f);
  const float q = sustain ? 0.7f : 1.5f;
  
  // Synthesize excitation signal.
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    df92:	vldr	s15, [pc, #508]	; e190 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2d4>
    df96:	vldr	s12, [pc, #508]	; e194 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2d8>
    df9a:	vmul.f32	s15, s3, s15
    df9e:	vfma.f32	s12, s3, s15
    for (size_t i = 0; i < size; ++i) {
    dfa2:	cmp	r3, #0
    dfa4:	beq.n	e09a <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1de>
    dfa6:	vmov.f32	s15, #112	; 0x3f800000  1.0
    dfaa:	ldr.w	r9, [pc, #544]	; e1cc <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x310>
    dfae:	vmov.f32	s14, #8	; 0x40400000  3.0
    dfb2:	lsls	r7, r3, #2
    dfb4:	vmov.f32	s11, #16	; 0x40800000  4.0
    dfb8:	ldr.w	r1, [r9]
    dfbc:	vdiv.f32	s9, s15, s12
    dfc0:	add.w	r8, r6, r7
    dfc4:	mov	r5, r6
    dfc6:	ldr.w	ip, [pc, #520]	; e1d0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x314>
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    dfca:	vldr	s10, [pc, #460]	; e198 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2dc>
    dfce:	vfms.f32	s11, s12, s14
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    dfd2:	mul.w	lr, ip, r1
    dfd6:	ldr	r1, [pc, #452]	; (e19c <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e0>)
  } else {
    return 0.0f;
    dfd8:	vldr	s15, [pc, #452]	; e1a0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e4>
    dfdc:	add	r1, lr
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    dfde:	vmov	s14, r1
    dfe2:	vcvt.f32.u32	s14, s14
    dfe6:	vmul.f32	s14, s14, s10
namespace plaits {

inline float Dust(float frequency) {
  float inv_frequency = 1.0f / frequency;
  float u = stmlib::Random::GetFloat();
  if (u < frequency) {
    dfea:	vcmpe.f32	s12, s14
    dfee:	vmrs	APSR_nzcv, fpscr
    return u * inv_frequency;
    dff2:	it	gt
    dff4:	vmulgt.f32	s15, s14, s9
      temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
    dff8:	vmul.f32	s15, s15, s11
    dffc:	vmul.f32	s15, s15, s0
    e000:	vstmia	r5!, {s15}
  const float q = sustain ? 0.7f : 1.5f;
  
  // Synthesize excitation signal.
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
    e004:	cmp	r8, r5
    e006:	bne.n	dfd2 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x116>
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    e008:	vmov.f32	s12, #112	; 0x3f800000  1.0
    e00c:	vldr	s15, [pc, #404]	; e1a4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e8>
    e010:	str.w	r1, [r9]
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    e014:	subs	r1, r3, #1
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
    e016:	vadd.f32	s10, s13, s15
      state_1[i] = state_1_[i];
    e01a:	vldr	s11, [r0]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    e01e:	vmov.f32	s14, s12
    e022:	vfma.f32	s14, s13, s15
    e026:	vmov.f32	s15, s14
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    e02a:	vldr	s14, [r0, #4]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    e02e:	vadd.f32	s15, s15, s8
    e032:	vdiv.f32	s9, s12, s15
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    e036:	mov	r5, r6
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
      } else {
        *out++ = s_out;
    e038:	vldr	s8, [pc, #356]	; e1a0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e4>
    e03c:	vneg.f32	s10, s10
    
    while (size--) {
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    e040:	vldr	s15, [r5]
        const float bp = g[i] * hp + state_1[i];
    e044:	vmov.f32	s12, s11
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    e048:	subs	r1, #1
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    e04a:	vfma.f32	s15, s10, s11
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    e04e:	cmp.w	r1, #4294967295
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    e052:	vsub.f32	s15, s15, s14
    e056:	vmul.f32	s15, s15, s9
        const float bp = g[i] * hp + state_1[i];
    e05a:	vfma.f32	s12, s15, s13
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
    e05e:	vfma.f32	s14, s12, s13
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    e062:	vmov.f32	s11, s12
    e066:	vfma.f32	s11, s15, s13
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
      } else {
        *out++ = s_out;
    e06a:	vadd.f32	s15, s14, s8
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    e06e:	vfma.f32	s14, s12, s13
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
      } else {
        *out++ = s_out;
    e072:	vstmia	r5!, {s15}
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    e076:	bne.n	e040 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x184>
    e078:	mov	r1, r4
    e07a:	mov	r4, r6
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_1[i];
    e07c:	vstr	s11, [r0]
    e080:	adds	r5, r1, r7
      state_2_[i] = state_2[i];
    e082:	vstr	s14, [r0, #4]
  }
  const float one = 1.0f;
  excitation_filter_.Process<FILTER_MODE_LOW_PASS, false>(
      &cutoff, &q, &one, temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] += temp[i];
    e086:	vldmia	r4!, {s14}
    e08a:	vldr	s15, [r1]
    e08e:	vadd.f32	s15, s15, s14
    e092:	vstmia	r1!, {s15}
    }
  }
  const float one = 1.0f;
  excitation_filter_.Process<FILTER_MODE_LOW_PASS, false>(
      &cutoff, &q, &one, temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    e096:	cmp	r1, r5
    e098:	bne.n	e086 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1ca>
    aux[i] += temp[i];
  }
  
  resonator_.Process(f0, structure, brightness, damping, temp, out, size);
    e09a:	mov	r1, r6
    e09c:	vmov.f32	s3, s4
    e0a0:	vmov.f32	s0, s7
    e0a4:	adds	r0, #8
}
    e0a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      &cutoff, &q, &one, temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] += temp[i];
  }
  
  resonator_.Process(f0, structure, brightness, damping, temp, out, size);
    e0aa:	b.w	db58 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    e0ae:	vldr	s8, [pc, #248]	; e1a8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2ec>
    e0b2:	vldr	s13, [pc, #248]	; e1ac <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f0>
    e0b6:	vldr	s14, [pc, #248]	; e1b0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f4>
  const float range = sustain ? 36.0f : 60.0f;
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
  const float cutoff = min(
      f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
      0.499f);
  const float q = sustain ? 0.7f : 1.5f;
    e0ba:	cmp	r1, #0
    e0bc:	bne.w	df8e <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xd2>
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
    }
  } else {
    fill(&temp[0], &temp[size], 0.0f);
    e0c0:	lsls	r7, r3, #2
    e0c2:	adds	r5, r6, r7
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    e0c4:	cmp	r6, r5
    e0c6:	beq.n	e0d6 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x21a>
    e0c8:	mov	r1, r6
	*__first = __tmp;
    e0ca:	mov.w	lr, #0
    e0ce:	str.w	lr, [r1], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    e0d2:	cmp	r5, r1
    e0d4:	bne.n	e0ce <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x212>
    if (trigger) {
    e0d6:	cmp.w	ip, #0
    e0da:	beq.n	e140 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x284>
      const float attenuation = 1.0f - damping * 0.5f;
      const float amplitude = (0.12f + 0.08f * accent) * attenuation;
      temp[0] = amplitude * SemitonesToRatio(cutoff * cutoff * 24.0f) / cutoff;
    e0dc:	vmov.f32	s12, #112	; 0x3f800000  1.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    e0e0:	vldr	s15, [pc, #152]	; e17c <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c0>
    e0e4:	vmov.f32	s5, #56	; 0x41c00000  24.0
    e0e8:	vldr	s6, [pc, #200]	; e1b4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f8>
    e0ec:	vmov.f32	s10, #96	; 0x3f000000  0.5
    e0f0:	vldr	s9, [pc, #196]	; e1b8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2fc>
    e0f4:	vfma.f32	s15, s14, s5
    e0f8:	vmov.f32	s14, s12
    e0fc:	vfma.f32	s9, s0, s6
    e100:	vfms.f32	s14, s4, s10
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    e104:	vcvt.s32.f32	s10, s15

  return lut_pitch_ratio_high[pitch_integral] * \
    e108:	vmov	r1, s10
    e10c:	vmul.f32	s12, s14, s9
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    e110:	vcvt.f32.s32	s14, s10

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    e114:	add.w	r9, r9, r1, lsl #2
    e118:	vldr	s10, [r9]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    e11c:	vsub.f32	s15, s15, s14
    e120:	vcvt.s32.f32	s15, s15, #8
    e124:	vmov	r1, s15
    e128:	add.w	r8, r8, r1, lsl #2
    e12c:	vldr	s14, [r8]
    e130:	vmul.f32	s15, s14, s10
    e134:	vmul.f32	s15, s15, s12
    e138:	vdiv.f32	s14, s15, s11
    e13c:	vstr	s14, [r6]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    e140:	vmov.f32	s12, #112	; 0x3f800000  1.0
    e144:	vldr	s15, [pc, #116]	; e1bc <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x300>
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
    e148:	vldr	s11, [r0]
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    e14c:	subs	r1, r3, #1
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
    e14e:	vadd.f32	s10, s13, s15
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    e152:	vldr	s14, [r0, #4]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    e156:	vmov.f32	s9, s12
    e15a:	vfma.f32	s9, s13, s15
    e15e:	vadd.f32	s15, s9, s8
    e162:	vdiv.f32	s9, s12, s15
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    e166:	cmp	r3, #0
    e168:	bne.w	e036 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x17a>
    e16c:	b.n	e09a <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1de>
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
    e16e:	vadd.f32	s13, s7, s7
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
    e172:	vldr	s10, [pc, #76]	; e1c0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x304>
    e176:	b.n	df04 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x48>
    e178:	.word	0x42100000
    e17c:	.word	0x43000000
    e180:	.word	0x3eff7cee
    e184:	.word	0x425f2649
    e188:	.word	0x4121ba8f
    e18c:	.word	0x40490fdb
    e190:	.word	0x3f7ffcb9
    e194:	.word	0x3851b717
    e198:	.word	0x2f800000
    e19c:	.word	0x3c6ef35f
    e1a0:	.word	0x00000000
    e1a4:	.word	0x3fb6db6e
    e1a8:	.word	0x41a59707
    e1ac:	.word	0x40919638
    e1b0:	.word	0x3e7efa1f
    e1b4:	.word	0x3da3d70a
    e1b8:	.word	0x3df5c28f
    e1bc:	.word	0x3f2aaaab
    e1c0:	.word	0x42700000
    e1c4:	.word	0x20000024
    e1c8:	.word	0x20000428
    e1cc:	.word	0x2001f96c
    e1d0:	.word	0x0019660d

0000e1d4 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    e1d4:	movs	r0, #0
    e1d6:	bx	lr

0000e1d8 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    e1d8:	ldrb.w	r2, [r0, #59]	; 0x3b
    e1dc:	ldrb.w	r0, [r0, #58]	; 0x3a
	}
    e1e0:	subs	r0, r2, r0
    e1e2:	bx	lr

0000e1e4 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    e1e4:	ldrb.w	r3, [r0, #58]	; 0x3a
    e1e8:	ldrb.w	r2, [r0, #59]	; 0x3b
    e1ec:	cmp	r2, r3
    e1ee:	bls.n	e1fc <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    e1f0:	adds	r2, r3, #1
    e1f2:	add	r3, r0
    e1f4:	strb.w	r2, [r0, #58]	; 0x3a
    e1f8:	ldrb	r0, [r3, #26]
    e1fa:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    e1fc:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    e200:	bx	lr
    e202:	nop

0000e204 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    e204:	ldrb.w	r3, [r0, #58]	; 0x3a
    e208:	ldrb.w	r2, [r0, #59]	; 0x3b
    e20c:	cmp	r2, r3
    e20e:	bls.n	e216 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    e210:	add	r3, r0
    e212:	ldrb	r0, [r3, #26]
    e214:	bx	lr
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    e216:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    e21a:	bx	lr

0000e21c <TwoWire::flush()>:
	virtual void flush(void) {
    e21c:	bx	lr
    e21e:	nop

0000e220 <TwoWire::write(unsigned char)>:
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    e220:	ldrh.w	r3, [r0, #96]	; 0x60
    e224:	cbz	r3, e24c <TwoWire::write(unsigned char)+0x2c>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    e226:	ldrb.w	r3, [r0, #95]	; 0x5f
    e22a:	cmp	r3, #32
    e22c:	bhi.n	e246 <TwoWire::write(unsigned char)+0x26>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    e22e:	adds	r2, r0, r3
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
    e230:	push	{r4}
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    e232:	adds	r4, r3, #1
		return 1;
    e234:	movs	r3, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    e236:	strb.w	r4, [r0, #95]	; 0x5f
		return 1;
	}
	return 0;
}
    e23a:	mov	r0, r3
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    e23c:	strb.w	r1, [r2, #61]	; 0x3d
		return 1;
	}
	return 0;
}
    e240:	ldr.w	r4, [sp], #4
    e244:	bx	lr
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    e246:	movs	r2, #1
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    e248:	movs	r3, #0
    e24a:	strb	r2, [r0, #4]
		}
		txBuffer[txBufferLength++] = data;
		return 1;
	}
	return 0;
}
    e24c:	mov	r0, r3
    e24e:	bx	lr

0000e250 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    e250:	push	{r3, r4, r5, lr}
    e252:	mov	r5, r0
	if (transmitting || slave_mode) {
    e254:	ldrh.w	r0, [r0, #96]	; 0x60
    e258:	cbz	r0, e280 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    e25a:	ldrb.w	r3, [r5, #95]	; 0x5f
    e25e:	mov	r4, r2
    e260:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    e264:	cmp	r4, r2
    e266:	bhi.n	e282 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    e268:	add.w	r0, r5, #61	; 0x3d
    e26c:	mov	r2, r4
    e26e:	add	r0, r3
    e270:	bl	fd78 <memcpy>
		txBufferLength += quantity;
    e274:	ldrb.w	r3, [r5, #95]	; 0x5f
    e278:	mov	r0, r4
    e27a:	add	r4, r3
    e27c:	strb.w	r4, [r5, #95]	; 0x5f
		return quantity;
	}
	return 0;
}
    e280:	pop	{r3, r4, r5, pc}
    e282:	mov	r4, r2
    e284:	movs	r2, #1
    e286:	strb	r2, [r5, #4]
    e288:	b.n	e268 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    e28a:	nop

0000e28c <TwoWire::begin()>:
//#include "debug/printf.h"

#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
    e28c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    e290:	ldr	r7, [pc, #188]	; (e350 <TwoWire::begin()+0xc4>)
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    e292:	movs	r5, #0

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    e294:	ldr	r2, [r0, #20]
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    e296:	movs	r4, #1
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    e298:	ldr	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    e29a:	mov.w	lr, #2

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    e29e:	ldr	r6, [r2, #0]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    e2a0:	mov.w	r8, #180224	; 0x2c000
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    e2a4:	bic.w	r1, r1, #16515072	; 0xfc0000
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    e2a8:	ldr	r3, [r0, #16]
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    e2aa:	ldr.w	ip, [pc, #176]	; e35c <TwoWire::begin()+0xd0>
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    e2ae:	orr.w	r1, r1, #262144	; 0x40000
    e2b2:	str	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    e2b4:	ldr	r1, [r6, #0]
    e2b6:	ldr	r7, [r2, #4]
    e2b8:	orrs	r1, r7
    e2ba:	str	r1, [r6, #0]
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    e2bc:	mov.w	r1, #65537	; 0x10001
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    e2c0:	ldr	r6, [pc, #144]	; (e354 <TwoWire::begin()+0xc8>)
void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    e2c2:	str.w	lr, [r3, #16]
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    e2c6:	str	r5, [r3, #16]
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    e2c8:	str.w	ip, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    e2cc:	str	r4, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    e2ce:	str	r6, [r3, #40]	; 0x28
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    e2d0:	movw	r6, #63585	; 0xf861
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    e2d4:	str.w	r8, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    e2d8:	ldr	r7, [r3, #72]	; 0x48
    e2da:	str	r7, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    e2dc:	str	r5, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    e2de:	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    e2e0:	str	r4, [r3, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    e2e2:	ldrb	r1, [r0, #24]
    e2e4:	ldr	r3, [pc, #112]	; (e358 <TwoWire::begin()+0xcc>)
    e2e6:	add.w	r1, r2, r1, lsl #4
    e2ea:	ldrb	r1, [r1, #8]
    e2ec:	add.w	r1, r3, r1, lsl #4
    e2f0:	ldr	r1, [r1, #8]
    e2f2:	str	r6, [r1, #0]
	*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    e2f4:	ldrb	r1, [r0, #24]
    e2f6:	add.w	r1, r2, r1, lsl #4
    e2fa:	ldrb	r4, [r1, #8]
    e2fc:	ldr	r5, [r1, #12]
    e2fe:	add.w	r1, r3, r4, lsl #4
    e302:	ldr	r1, [r1, #4]
    e304:	str	r5, [r1, #0]
    e306:	ldrb	r1, [r0, #24]
    e308:	add.w	r1, r2, r1, lsl #4
	if (hardware.sda_pins[sda_pin_index_].select_input_register) {
    e30c:	ldr	r4, [r1, #16]
    e30e:	cbz	r4, e314 <TwoWire::begin()+0x88>
		*(hardware.sda_pins[sda_pin_index_].select_input_register) =  hardware.sda_pins[sda_pin_index_].select_val;
    e310:	ldr	r1, [r1, #20]
    e312:	str	r1, [r4, #0]
	}

	// setup SCL register
	*(portControlRegister(hardware.scl_pins[scl_pin_index_].pin)) = PINCONFIG;
    e314:	ldrb	r1, [r0, #25]
    e316:	movw	r4, #63585	; 0xf861
    e31a:	add.w	r1, r2, r1, lsl #4
    e31e:	ldrb.w	r1, [r1, #40]	; 0x28
    e322:	add.w	r1, r3, r1, lsl #4
    e326:	ldr	r1, [r1, #8]
    e328:	str	r4, [r1, #0]
	*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    e32a:	ldrb	r1, [r0, #25]
    e32c:	add.w	r1, r2, r1, lsl #4
    e330:	ldrb.w	r4, [r1, #40]	; 0x28
    e334:	ldr	r1, [r1, #44]	; 0x2c
    e336:	add.w	r3, r3, r4, lsl #4
    e33a:	ldr	r3, [r3, #4]
    e33c:	str	r1, [r3, #0]
    e33e:	ldrb	r3, [r0, #25]
    e340:	add.w	r2, r2, r3, lsl #4
	if (hardware.scl_pins[scl_pin_index_].select_input_register) {
    e344:	ldr	r3, [r2, #48]	; 0x30
    e346:	cbz	r3, e34c <TwoWire::begin()+0xc0>
		*(hardware.scl_pins[scl_pin_index_].select_input_register) =  hardware.scl_pins[scl_pin_index_].select_val;
    e348:	ldr	r2, [r2, #52]	; 0x34
    e34a:	str	r2, [r3, #0]
    e34c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e350:	.word	0x400fc000
    e354:	.word	0x05050bb8
    e358:	.word	0x2001f630
    e35c:	.word	0x1928373b

0000e360 <TwoWire::force_clock()>:
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    e360:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e364:	mov	fp, r0
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    e366:	ldr	r0, [pc, #256]	; (e468 <TwoWire::force_clock()+0x108>)
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    e368:	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    e36a:	movs	r5, #21
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e36c:	ldr.w	sl, [fp, #20]
    e370:	ldrb.w	r6, [fp, #24]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    e374:	ldrb.w	r3, [fp, #25]
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e378:	add.w	r6, sl, r6, lsl #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    e37c:	ldr	r1, [pc, #236]	; (e46c <TwoWire::force_clock()+0x10c>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    e37e:	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e382:	ldr.w	lr, [pc, #236]	; e470 <TwoWire::force_clock()+0x110>
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    e386:	ldrb	r6, [r6, #8]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    e388:	mov	r4, r1
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    e38a:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    e38e:	lsls	r6, r6, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e390:	ldr.w	r9, [pc, #224]	; e474 <TwoWire::force_clock()+0x114>
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    e394:	lsls	r3, r3, #4
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    e396:	adds	r7, r0, r6
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
    e398:	ldr.w	r8, [r0, r6]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    e39c:	add.w	ip, r0, r3
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
    e3a0:	ldr	r6, [r0, r3]
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    e3a2:	ldr	r0, [r7, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    e3a4:	ldr	r3, [r7, #4]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    e3a6:	ldr.w	r7, [ip, #12]
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    e3aa:	str	r3, [sp, #0]
    e3ac:	str	r5, [r3, #0]
	*portSetRegister(sda_pin) = sda_mask;
    e3ae:	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    e3b2:	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    e3b6:	ldr.w	r2, [ip, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    e3ba:	orrs	r3, r0
	*portConfigRegister(scl_pin) = 5 | 0x10;
    e3bc:	str	r2, [sp, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    e3be:	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    e3c2:	str	r5, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    e3c4:	str.w	r7, [r6, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    e3c8:	ldr	r3, [r6, #4]
    e3ca:	orrs	r3, r7
    e3cc:	str	r3, [r6, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    e3ce:	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e3d0:	ldr.w	r3, [lr]
    e3d4:	umull	r3, r2, r9, r3
    e3d8:	lsrs	r2, r2, #18
    e3da:	add.w	r2, r2, r2, lsl #2
    e3de:	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    e3e0:	ldr	r3, [r4, #0]
    e3e2:	subs	r3, r3, r1
    e3e4:	cmp	r2, r3
    e3e6:	bhi.n	e3e0 <TwoWire::force_clock()+0x80>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    e3e8:	ldr	r2, [pc, #128]	; (e46c <TwoWire::force_clock()+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    e3ea:	movs	r5, #9

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e3ec:	ldr.w	ip, [pc, #132]	; e474 <TwoWire::force_clock()+0x114>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    e3f0:	mov	r9, r2
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
    e3f2:	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    e3f6:	tst	r0, r3
    e3f8:	beq.n	e400 <TwoWire::force_clock()+0xa0>
    e3fa:	ldr	r3, [r6, #8]
    e3fc:	tst	r7, r3
    e3fe:	bne.n	e464 <TwoWire::force_clock()+0x104>
			// success, both pins are high
			ret = true;
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
    e400:	str.w	r7, [r6, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    e404:	ldr	r4, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e406:	ldr.w	r1, [lr]
    e40a:	umull	r3, r1, ip, r1
    e40e:	lsrs	r1, r1, #18
    e410:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    e414:	ldr	r3, [r2, #0]
    e416:	subs	r3, r3, r4
    e418:	cmp	r1, r3
    e41a:	bhi.n	e414 <TwoWire::force_clock()+0xb4>
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
    e41c:	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    e420:	ldr.w	r4, [r9]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    e424:	ldr.w	r1, [lr]
    e428:	umull	r3, r1, ip, r1
    e42c:	lsrs	r1, r1, #18
    e42e:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    e432:	ldr	r3, [r2, #0]
    e434:	subs	r3, r3, r4
    e436:	cmp	r1, r3
    e438:	bhi.n	e432 <TwoWire::force_clock()+0xd2>
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
	*portModeRegister(scl_pin) |= scl_mask;
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
    e43a:	subs	r5, #1
    e43c:	bne.n	e3f2 <TwoWire::force_clock()+0x92>
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
	bool ret = false;
    e43e:	mov	r0, r5
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    e440:	ldrb.w	r3, [fp, #24]
    e444:	ldr	r2, [sp, #0]
    e446:	add.w	r3, sl, r3, lsl #4
    e44a:	ldr	r3, [r3, #12]
    e44c:	str	r3, [r2, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    e44e:	ldrb.w	r3, [fp, #25]
    e452:	ldr	r2, [sp, #4]
    e454:	add.w	sl, sl, r3, lsl #4
    e458:	ldr.w	r3, [sl, #44]	; 0x2c
    e45c:	str	r3, [r2, #0]
	return ret;
}
    e45e:	add	sp, #12
    e460:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
		  && (*portInputRegister(scl_pin) & scl_mask)) {
			// success, both pins are high
			ret = true;
    e464:	movs	r0, #1
    e466:	b.n	e440 <TwoWire::force_clock()+0xe0>
    e468:	.word	0x2001f630
    e46c:	.word	0xe0001004
    e470:	.word	0x2001fd90
    e474:	.word	0x431bde83

0000e478 <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    e478:	ldr	r1, [pc, #52]	; (e4b0 <TwoWire::wait_idle()+0x38>)
    e47a:	ldr	r2, [r0, #16]
//   01   EPF = End Packet Flag
//      2 RDF = Receive Data Flag
//      1 TDF = Transmit Data Flag

bool TwoWire::wait_idle()
{
    e47c:	push	{r4, lr}
    e47e:	ldr	r4, [r1, #0]
    e480:	b.n	e48e <TwoWire::wait_idle()+0x16>
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    e482:	lsls	r3, r3, #7
    e484:	bmi.n	e496 <TwoWire::wait_idle()+0x1e>
    e486:	ldr	r3, [r1, #0]
		if (timeout > 16) {
    e488:	subs	r3, r3, r4
    e48a:	cmp	r3, #16
    e48c:	bhi.n	e4a0 <TwoWire::wait_idle()+0x28>

bool TwoWire::wait_idle()
{
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
    e48e:	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    e490:	tst.w	r3, #33554432	; 0x2000000
    e494:	bne.n	e482 <TwoWire::wait_idle()+0xa>
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    e496:	mov.w	r3, #32512	; 0x7f00
	return true;
    e49a:	movs	r0, #1
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    e49c:	str	r3, [r2, #20]
	return true;
}
    e49e:	pop	{r4, pc}
    e4a0:	mov	r4, r0
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
		if (timeout > 16) {
			//Serial.printf("timeout waiting for idle, MSR = %x\n", status);
			if (force_clock()) break;
    e4a2:	bl	e360 <TwoWire::force_clock()>
    e4a6:	cmp	r0, #0
    e4a8:	beq.n	e49e <TwoWire::wait_idle()+0x26>
    e4aa:	ldr	r2, [r4, #16]
    e4ac:	b.n	e496 <TwoWire::wait_idle()+0x1e>
    e4ae:	nop
    e4b0:	.word	0x20025ee8

0000e4b4 <TwoWire::endTransmission(unsigned char)>:
	return true;
}


uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    e4b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    e4b8:	ldrb.w	sl, [r0, #95]	; 0x5f
	if (!tx_len) return 4; // no address for transmit
    e4bc:	cmp.w	sl, #0
    e4c0:	bne.n	e4c8 <TwoWire::endTransmission(unsigned char)+0x14>
    e4c2:	movs	r0, #4
    e4c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4c8:	mov	r5, r0
    e4ca:	mov	r6, r1
	if (!wait_idle()) return 4;
    e4cc:	bl	e478 <TwoWire::wait_idle()>
    e4d0:	cmp	r0, #0
    e4d2:	beq.n	e4c2 <TwoWire::endTransmission(unsigned char)+0xe>
    e4d4:	ldr	r7, [pc, #184]	; (e590 <TwoWire::endTransmission(unsigned char)+0xdc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    e4d6:	movs	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    e4d8:	mov.w	r9, #512	; 0x200
    e4dc:	ldr.w	r8, [r7]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    e4e0:	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    e4e2:	ldr	r1, [r5, #16]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    e4e4:	bhi.n	e51c <TwoWire::endTransmission(unsigned char)+0x68>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    e4e6:	ldr	r3, [r1, #92]	; 0x5c
    e4e8:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    e4ec:	cmp	r3, #3
    e4ee:	bls.n	e504 <TwoWire::endTransmission(unsigned char)+0x50>
    e4f0:	b.n	e51c <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    e4f2:	ldrb.w	r2, [r5, #61]	; 0x3d
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    e4f6:	adds	r3, #1
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
    e4f8:	movs	r4, #1
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    e4fa:	orr.w	r2, r2, #1024	; 0x400
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    e4fe:	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    e500:	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    e502:	beq.n	e51c <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    e504:	adds	r2, r5, r4
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
    e506:	cmp	r4, #0
    e508:	beq.n	e4f2 <TwoWire::endTransmission(unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
    e50a:	cmp	sl, r4
    e50c:	bls.n	e55e <TwoWire::endTransmission(unsigned char)+0xaa>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    e50e:	adds	r3, #1
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    e510:	ldrb.w	r2, [r2, #61]	; 0x3d
    e514:	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    e516:	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    e518:	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    e51a:	bne.n	e504 <TwoWire::endTransmission(unsigned char)+0x50>
				}
				fifo_used++;
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
    e51c:	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    e51e:	lsls	r0, r3, #20
    e520:	bmi.n	e568 <TwoWire::endTransmission(unsigned char)+0xb4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
    e522:	lsls	r2, r3, #21
    e524:	bmi.n	e576 <TwoWire::endTransmission(unsigned char)+0xc2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    e526:	lsls	r0, r3, #18
    e528:	bmi.n	e534 <TwoWire::endTransmission(unsigned char)+0x80>
    e52a:	ldr	r2, [r7, #0]
    e52c:	rsb	r2, r8, r2
    e530:	cmp	r2, #50	; 0x32
    e532:	bls.n	e548 <TwoWire::endTransmission(unsigned char)+0x94>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    e534:	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    e536:	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    e53a:	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    e53c:	orr.w	r3, r3, #768	; 0x300
    e540:	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    e542:	str	r2, [r1, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    e544:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
    e548:	cmp	r4, sl
    e54a:	bls.n	e558 <TwoWire::endTransmission(unsigned char)+0xa4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    e54c:	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    e54e:	lsls	r2, r2, #29
    e550:	bne.n	e558 <TwoWire::endTransmission(unsigned char)+0xa4>
    e552:	lsls	r3, r3, #22
    e554:	bmi.n	e58a <TwoWire::endTransmission(unsigned char)+0xd6>
    e556:	cbz	r6, e58a <TwoWire::endTransmission(unsigned char)+0xd6>
				return 0;
			}
		}
		yield();
    e558:	bl	11344 <yield>
	uint32_t tx_len = txBufferLength;
	if (!tx_len) return 4; // no address for transmit
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
    e55c:	b.n	e4e0 <TwoWire::endTransmission(unsigned char)+0x2c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    e55e:	cbz	r6, e564 <TwoWire::endTransmission(unsigned char)+0xb0>
    e560:	str.w	r9, [r1, #96]	; 0x60
					tx_index++;
    e564:	adds	r4, #1
					break;
    e566:	b.n	e51c <TwoWire::endTransmission(unsigned char)+0x68>
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    e568:	ldr	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    e56a:	movs	r0, #4
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    e56c:	orr.w	r3, r3, #768	; 0x300
    e570:	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    e572:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    e576:	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    e578:	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    e57c:	movs	r0, #2
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    e57e:	orr.w	r3, r3, #768	; 0x300
    e582:	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    e584:	str	r2, [r1, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    e586:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
				return 0;
    e58a:	movs	r0, #0
    e58c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e590:	.word	0x20025ee8

0000e594 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    e594:	push	{r4, lr}
    e596:	mov	r4, r0
		release();
    e598:	bl	114d4 <DMAChannel::release()>
	}
    e59c:	mov	r0, r4
    e59e:	pop	{r4, pc}

0000e5a0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    e5a0:	ldr	r2, [pc, #8]	; (e5ac <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    e5a2:	ldr	r1, [pc, #12]	; (e5b0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    e5a4:	ldr	r0, [pc, #12]	; (e5b4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    e5a6:	b.w	12308 <__aeabi_atexit>
    e5aa:	nop
    e5ac:	.word	0x2001f960
    e5b0:	.word	0x0000e595
    e5b4:	.word	0x200258b8

0000e5b8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    e5b8:	ldr	r2, [pc, #8]	; (e5c4 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    e5ba:	ldr	r1, [pc, #12]	; (e5c8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    e5bc:	ldr	r0, [pc, #12]	; (e5cc <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    e5be:	b.w	12308 <__aeabi_atexit>
    e5c2:	nop
    e5c4:	.word	0x2001f960
    e5c8:	.word	0x0000e595
    e5cc:	.word	0x200258c0

0000e5d0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    e5d0:	ldr	r2, [pc, #8]	; (e5dc <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    e5d2:	ldr	r1, [pc, #12]	; (e5e0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    e5d4:	ldr	r0, [pc, #12]	; (e5e4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    e5d6:	b.w	12308 <__aeabi_atexit>
    e5da:	nop
    e5dc:	.word	0x2001f960
    e5e0:	.word	0x0000e595
    e5e4:	.word	0x200258c8

0000e5e8 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    e5e8:	ldr	r2, [pc, #8]	; (e5f4 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    e5ea:	ldr	r1, [pc, #12]	; (e5f8 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    e5ec:	ldr	r0, [pc, #12]	; (e5fc <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    e5ee:	b.w	12308 <__aeabi_atexit>
    e5f2:	nop
    e5f4:	.word	0x2001f960
    e5f8:	.word	0x0000e595
    e5fc:	.word	0x200258d0

0000e600 <AudioControlSGTL5000::disable()>:
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
    e600:	movs	r0, #0
    e602:	bx	lr

0000e604 <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
    e604:	movs	r0, #0
    e606:	bx	lr

0000e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    e608:	push	{r3, r4, r5, r6, r7, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    e60a:	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    e60c:	ldrb	r3, [r0, #8]
    e60e:	ldr	r4, [pc, #80]	; (e660 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x58>)
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    e610:	cmp	r1, #36	; 0x24
    e612:	lsl.w	r3, r3, r5
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    e616:	mov	r6, r1
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    e618:	it	eq
    e61a:	strheq	r2, [r0, #6]
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    e61c:	mov	r7, r2
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    e61e:	ubfx	r1, r1, #8, #8
    e622:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    e624:	strb.w	r3, [r4, #61]	; 0x3d
		transmitting = 1;
    e628:	strb.w	r5, [r4, #96]	; 0x60
		txBufferLength = 1;
    e62c:	strb.w	r5, [r4, #95]	; 0x5f
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    e630:	bl	e220 <TwoWire::write(unsigned char)>
    e634:	uxtb	r1, r6
    e636:	mov	r0, r4
    e638:	bl	e220 <TwoWire::write(unsigned char)>
    e63c:	ubfx	r1, r7, #8, #8
    e640:	mov	r0, r4
    e642:	bl	e220 <TwoWire::write(unsigned char)>
    e646:	mov	r0, r4
    e648:	uxtb	r1, r7
    e64a:	bl	e220 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    e64e:	mov	r1, r5
    e650:	mov	r0, r4
    e652:	bl	e4b4 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    e656:	clz	r0, r0
    e65a:	lsrs	r0, r0, #5
    e65c:	pop	{r3, r4, r5, r6, r7, pc}
    e65e:	nop
    e660:	.word	0x2001fcc8

0000e664 <AudioControlSGTL5000::enable()>:
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
    e664:	push	{r4, r5, r6, lr}
    e666:	mov	r4, r0
	muted = true;
    e668:	movs	r6, #1
	Wire.begin();
    e66a:	ldr	r0, [pc, #212]	; (e740 <AudioControlSGTL5000::enable()+0xdc>)
	}
}

bool AudioControlSGTL5000::enable(void)
{
	muted = true;
    e66c:	strb	r6, [r4, #4]
	Wire.begin();
    e66e:	bl	e28c <TwoWire::begin()>
	delay(5);
    e672:	movs	r0, #5
    e674:	bl	105f8 <delay>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    e678:	mov	r0, r4
    e67a:	movw	r2, #16480	; 0x4060
    e67e:	movs	r1, #48	; 0x30
    e680:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    e684:	mov	r5, r0
    e686:	cmp	r0, #0
    e688:	beq.n	e73a <AudioControlSGTL5000::enable()+0xd6>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    e68a:	movs	r2, #108	; 0x6c
    e68c:	movs	r1, #38	; 0x26
    e68e:	mov	r0, r4
    e690:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    e694:	mov.w	r2, #498	; 0x1f2
    e698:	movs	r1, #40	; 0x28
    e69a:	mov	r0, r4
    e69c:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    e6a0:	movw	r2, #3874	; 0xf22
    e6a4:	movs	r1, #44	; 0x2c
    e6a6:	mov	r0, r4
    e6a8:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    e6ac:	movw	r2, #17478	; 0x4446
    e6b0:	movs	r1, #60	; 0x3c
    e6b2:	mov	r0, r4
    e6b4:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    e6b8:	movw	r2, #311	; 0x137
    e6bc:	movs	r1, #36	; 0x24
    e6be:	mov	r0, r4
    e6c0:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    e6c4:	movw	r2, #16639	; 0x40ff
    e6c8:	movs	r1, #48	; 0x30
    e6ca:	mov	r0, r4
    e6cc:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    e6d0:	movs	r2, #115	; 0x73
    e6d2:	movs	r1, #2
    e6d4:	mov	r0, r4
    e6d6:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    e6da:	mov.w	r0, #400	; 0x190
    e6de:	bl	105f8 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    e6e2:	movw	r2, #7453	; 0x1d1d
    e6e6:	movs	r1, #46	; 0x2e
    e6e8:	mov	r0, r4
    e6ea:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    e6ee:	movs	r2, #4
    e6f0:	mov	r0, r4
    e6f2:	mov	r1, r2
    e6f4:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    e6f8:	movs	r2, #48	; 0x30
    e6fa:	movs	r1, #6
    e6fc:	mov	r0, r4
    e6fe:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    e702:	movs	r2, #16
    e704:	movs	r1, #10
    e706:	mov	r0, r4
    e708:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    e70c:	movs	r2, #0
    e70e:	movs	r1, #14
    e710:	mov	r0, r4
    e712:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    e716:	movw	r2, #15420	; 0x3c3c
    e71a:	movs	r1, #16
    e71c:	mov	r0, r4
    e71e:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    e722:	movw	r2, #32639	; 0x7f7f
    e726:	movs	r1, #34	; 0x22
    e728:	mov	r0, r4
    e72a:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    e72e:	movs	r2, #54	; 0x36
    e730:	movs	r1, #36	; 0x24
    e732:	mov	r0, r4
    e734:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	//mute = false;
	semi_automated = true;
    e738:	strb	r6, [r4, #9]
	return true;
}
    e73a:	mov	r0, r5
    e73c:	pop	{r4, r5, r6, pc}
    e73e:	nop
    e740:	.word	0x2001fcc8

0000e744 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    e744:	push	{r4, lr}
    e746:	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    e748:	cbz	r1, e752 <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    e74a:	cmp	r1, #1
    e74c:	beq.n	e772 <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    e74e:	movs	r0, #0
    e750:	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    e752:	movs	r2, #85	; 0x55
    e754:	movs	r1, #32
    e756:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    e75a:	cmp	r0, #0
    e75c:	beq.n	e74e <AudioControlSGTL5000::inputSelect(int)+0xa>
    e75e:	ldrh	r2, [r4, #6]
    e760:	mov	r0, r4
    e762:	movs	r1, #36	; 0x24
    e764:	orr.w	r2, r2, #4
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    e768:	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    e76c:	uxth	r2, r2
    e76e:	b.w	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    e772:	movw	r2, #371	; 0x173
    e776:	movs	r1, #42	; 0x2a
    e778:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    e77c:	cmp	r0, #0
    e77e:	beq.n	e74e <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    e780:	movs	r2, #136	; 0x88
    e782:	movs	r1, #32
    e784:	mov	r0, r4
    e786:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    e78a:	cmp	r0, #0
    e78c:	beq.n	e74e <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    e78e:	ldrh	r2, [r4, #6]
    e790:	mov	r0, r4
    e792:	movs	r1, #36	; 0x24
    e794:	bic.w	r2, r2, #4
		} else {
			return false;
		}
	}
    e798:	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    e79c:	b.w	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

0000e7a0 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    e7a0:	push	{r3, r4, r5, lr}
    e7a2:	mov	r5, r0
	if (n == 0) {
    e7a4:	cbz	r1, e7ec <AudioControlSGTL5000::volumeInteger(unsigned int)+0x4c>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    e7a6:	cmp	r1, #128	; 0x80
    e7a8:	bls.n	e7be <AudioControlSGTL5000::volumeInteger(unsigned int)+0x1e>
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    e7aa:	ldrb	r3, [r5, #4]
    e7ac:	movs	r4, #0
    e7ae:	cbnz	r3, e7cc <AudioControlSGTL5000::volumeInteger(unsigned int)+0x2c>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    e7b0:	mov	r2, r4
    e7b2:	mov	r0, r5
    e7b4:	movs	r1, #34	; 0x22
}
    e7b6:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    e7ba:	b.w	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    e7be:	rsb	r4, r1, #128	; 0x80
	}
	if (muted) {
    e7c2:	ldrb	r3, [r5, #4]
    e7c4:	orr.w	r4, r4, r4, lsl #8
    e7c8:	cmp	r3, #0
    e7ca:	beq.n	e7b0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x10>
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    e7cc:	ldrh	r2, [r5, #6]
		muted = false;
    e7ce:	movs	r3, #0
    e7d0:	movs	r1, #36	; 0x24
    e7d2:	mov	r0, r5
    e7d4:	bic.w	r2, r2, #16
    e7d8:	strb	r3, [r5, #4]
    e7da:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    e7de:	mov	r2, r4
    e7e0:	mov	r0, r5
    e7e2:	movs	r1, #34	; 0x22
}
    e7e4:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    e7e8:	b.w	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    e7ec:	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    e7ee:	movw	r2, #32639	; 0x7f7f
    e7f2:	movs	r1, #34	; 0x22
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    e7f4:	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    e7f6:	bl	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    e7fa:	ldrh	r2, [r5, #6]
    e7fc:	mov	r0, r5
    e7fe:	movs	r1, #36	; 0x24
    e800:	orr.w	r2, r2, #16
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    e804:	ldmia.w	sp!, {r3, r4, r5, lr}
    e808:	uxth	r2, r2
    e80a:	b.w	e608 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    e80e:	nop

0000e810 <AudioControlSGTL5000::volume(float)>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
    e810:	vldr	s15, [pc, #36]	; e838 <AudioControlSGTL5000::volume(float)+0x28>
    e814:	vmul.f32	s0, s0, s15
    e818:	vldr	d7, [pc, #20]	; e830 <AudioControlSGTL5000::volume(float)+0x20>
    e81c:	vcvt.f64.f32	d0, s0
    e820:	vadd.f64	d0, d0, d7
    e824:	vcvt.u32.f64	s15, d0
    e828:	vmov	r1, s15
    e82c:	b.w	e7a0 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    e830:	.word	0xb22d0e56
    e834:	.word	0x3fdfef9d
    e838:	.word	0x43010000

0000e83c <AudioOutputI2S::isr()>:
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    e83c:	ldr	r3, [pc, #292]	; (e964 <AudioOutputI2S::isr()+0x128>)
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    e83e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    e842:	ldr	r2, [r3, #0]
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    e844:	sub	sp, #12
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    e846:	ldr	r4, [pc, #288]	; (e968 <AudioOutputI2S::isr()+0x12c>)
    e848:	ldrb	r1, [r3, #4]
    e84a:	add.w	r5, r4, #256	; 0x100
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    e84e:	ldr	r3, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    e850:	ldr	r2, [pc, #280]	; (e96c <AudioOutputI2S::isr()+0x130>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    e852:	cmp	r3, r5
    e854:	strb	r1, [r2, #31]
    e856:	bcs.n	e86c <AudioOutputI2S::isr()+0x30>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    e858:	ldr	r3, [pc, #276]	; (e970 <AudioOutputI2S::isr()+0x134>)
    e85a:	ldrb	r3, [r3, #0]
    e85c:	cmp	r3, #0
    e85e:	beq.n	e8fa <AudioOutputI2S::isr()+0xbe>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    e860:	ldr	r3, [pc, #272]	; (e974 <AudioOutputI2S::isr()+0x138>)
    e862:	movs	r2, #64	; 0x40
    e864:	mov	r4, r5
    e866:	add.w	r5, r5, #256	; 0x100
    e86a:	str	r2, [r3, #0]
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    e86c:	ldr	r3, [pc, #264]	; (e978 <AudioOutputI2S::isr()+0x13c>)
	blockR = AudioOutputI2S::block_right_1st;
    e86e:	ldr.w	fp, [pc, #280]	; e988 <AudioOutputI2S::isr()+0x14c>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    e872:	ldr.w	r8, [r3]
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
    e876:	ldr.w	sl, [pc, #276]	; e98c <AudioOutputI2S::isr()+0x150>
	offsetR = AudioOutputI2S::block_right_offset;
    e87a:	ldr.w	r9, [pc, #276]	; e990 <AudioOutputI2S::isr()+0x154>
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
	blockR = AudioOutputI2S::block_right_1st;
    e87e:	ldr.w	r3, [fp]
	offsetL = AudioOutputI2S::block_left_offset;
    e882:	ldrh.w	r6, [sl]
	offsetR = AudioOutputI2S::block_right_offset;
    e886:	ldrh.w	r7, [r9]

	if (blockL && blockR) {
    e88a:	cmp.w	r8, #0
    e88e:	beq.n	e892 <AudioOutputI2S::isr()+0x56>
    e890:	cbnz	r3, e8dc <AudioOutputI2S::isr()+0xa0>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
    e892:	cmp.w	r8, #0
    e896:	beq.n	e902 <AudioOutputI2S::isr()+0xc6>
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    e898:	add.w	r1, r8, #4
    e89c:	mov	r0, r4
    e89e:	str	r3, [sp, #4]
    e8a0:	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    e8a4:	adds	r6, #64	; 0x40
	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    e8a6:	bl	fcbe <memcpy_tointerleaveL>
    e8aa:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e8ac:	bic.w	r4, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    e8b0:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    e8b4:	ldr	r2, [pc, #196]	; (e97c <AudioOutputI2S::isr()+0x140>)
    e8b6:	str	r4, [r2, #0]
		location += 32;
    e8b8:	adds	r4, #32
	} while (location < end_addr);
    e8ba:	cmp	r4, r5
    e8bc:	bcc.n	e8b6 <AudioOutputI2S::isr()+0x7a>
	asm("dsb");
    e8be:	dsb	sy
	asm("isb");
    e8c2:	isb	sy
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    e8c6:	cmp	r6, #127	; 0x7f
    e8c8:	bhi.n	e934 <AudioOutputI2S::isr()+0xf8>
		AudioOutputI2S::block_left_offset = offsetL;
    e8ca:	strh.w	r6, [sl]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    e8ce:	cmp	r7, #127	; 0x7f
    e8d0:	bhi.n	e918 <AudioOutputI2S::isr()+0xdc>
		AudioOutputI2S::block_right_offset = offsetR;
    e8d2:	strh.w	r7, [r9]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    e8d6:	add	sp, #12
    e8d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    e8dc:	adds	r2, r3, #4
    e8de:	add.w	r1, r8, #4
    e8e2:	mov	r0, r4
    e8e4:	str	r3, [sp, #4]
    e8e6:	add.w	r2, r2, r7, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    e8ea:	adds	r7, #64	; 0x40
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    e8ec:	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    e8f0:	adds	r6, #64	; 0x40
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    e8f2:	bl	fc80 <memcpy_tointerleaveLR>
    e8f6:	ldr	r3, [sp, #4]
    e8f8:	b.n	e8ac <AudioOutputI2S::isr()+0x70>
    e8fa:	mov	r4, r5
    e8fc:	add.w	r5, r5, #256	; 0x100
    e900:	b.n	e86c <AudioOutputI2S::isr()+0x30>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
    e902:	cbz	r3, e950 <AudioOutputI2S::isr()+0x114>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    e904:	adds	r1, r3, #4
    e906:	mov	r0, r4
    e908:	str	r3, [sp, #4]
    e90a:	add.w	r1, r1, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    e90e:	adds	r7, #64	; 0x40
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    e910:	bl	fcfe <memcpy_tointerleaveR>
    e914:	ldr	r3, [sp, #4]
    e916:	b.n	e8ac <AudioOutputI2S::isr()+0x70>
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    e918:	movs	r4, #0
		AudioStream::release(blockR);
    e91a:	mov	r0, r3
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    e91c:	strh.w	r4, [r9]
		AudioStream::release(blockR);
    e920:	bl	11780 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    e924:	ldr	r3, [pc, #88]	; (e980 <AudioOutputI2S::isr()+0x144>)
    e926:	ldr	r2, [r3, #0]
		AudioOutputI2S::block_right_2nd = NULL;
    e928:	str	r4, [r3, #0]
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
		AudioStream::release(blockR);
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    e92a:	str.w	r2, [fp]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    e92e:	add	sp, #12
    e930:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    e934:	movs	r4, #0
		AudioStream::release(blockL);
    e936:	mov	r0, r8
    e938:	str	r3, [sp, #4]
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    e93a:	strh.w	r4, [sl]
		AudioStream::release(blockL);
    e93e:	bl	11780 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    e942:	ldr	r2, [pc, #64]	; (e984 <AudioOutputI2S::isr()+0x148>)
    e944:	ldr	r3, [pc, #48]	; (e978 <AudioOutputI2S::isr()+0x13c>)
    e946:	ldr	r1, [r2, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    e948:	str	r4, [r2, #0]
	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    e94a:	str	r1, [r3, #0]
    e94c:	ldr	r3, [sp, #4]
    e94e:	b.n	e8ce <AudioOutputI2S::isr()+0x92>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    e950:	mov	r1, r3
    e952:	mov.w	r2, #256	; 0x100
    e956:	mov	r0, r4
    e958:	str	r3, [sp, #4]
    e95a:	bl	128fc <memset>
    e95e:	ldr	r3, [sp, #4]
    e960:	b.n	e8ac <AudioOutputI2S::isr()+0x70>
    e962:	nop
    e964:	.word	0x200258dc
    e968:	.word	0x20200520
    e96c:	.word	0x400e8000
    e970:	.word	0x200258f4
    e974:	.word	0xe000e208
    e978:	.word	0x200258ec
    e97c:	.word	0xe000ef70
    e980:	.word	0x200258f0
    e984:	.word	0x200258f8
    e988:	.word	0x200258e4
    e98c:	.word	0x200258d8
    e990:	.word	0x200258e8

0000e994 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    e994:	push	{r3, r4, r5, r6, r7, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    e996:	movs	r1, #0




void AudioOutputI2S::update(void)
{
    e998:	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    e99a:	bl	11808 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    e99e:	cbz	r0, e9c2 <AudioOutputI2S::update()+0x2e>
		__disable_irq();
    e9a0:	cpsid	i
		if (block_left_1st == NULL) {
    e9a2:	ldr	r2, [pc, #112]	; (ea14 <AudioOutputI2S::update()+0x80>)
    e9a4:	ldr	r3, [r2, #0]
    e9a6:	cmp	r3, #0
    e9a8:	beq.n	e9fe <AudioOutputI2S::update()+0x6a>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    e9aa:	ldr	r1, [pc, #108]	; (ea18 <AudioOutputI2S::update()+0x84>)
    e9ac:	ldr	r5, [r1, #0]
    e9ae:	cbz	r5, e9f2 <AudioOutputI2S::update()+0x5e>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
			block_left_offset = 0;
    e9b0:	ldr	r6, [pc, #104]	; (ea1c <AudioOutputI2S::update()+0x88>)
    e9b2:	movs	r7, #0
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    e9b4:	str	r5, [r2, #0]
			block_left_2nd = block;
    e9b6:	str	r0, [r1, #0]
			block_left_offset = 0;
    e9b8:	strh	r7, [r6, #0]
			__enable_irq();
    e9ba:	cpsie	i
			release(tmp);
    e9bc:	mov	r0, r3
    e9be:	bl	11780 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    e9c2:	mov	r0, r4
    e9c4:	movs	r1, #1
    e9c6:	bl	11808 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    e9ca:	cbz	r0, e9f0 <AudioOutputI2S::update()+0x5c>
		__disable_irq();
    e9cc:	cpsid	i
		if (block_right_1st == NULL) {
    e9ce:	ldr	r2, [pc, #80]	; (ea20 <AudioOutputI2S::update()+0x8c>)
    e9d0:	ldr	r3, [r2, #0]
    e9d2:	cbz	r3, ea08 <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    e9d4:	ldr	r1, [pc, #76]	; (ea24 <AudioOutputI2S::update()+0x90>)
    e9d6:	ldr	r4, [r1, #0]
    e9d8:	cbz	r4, e9f8 <AudioOutputI2S::update()+0x64>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
    e9da:	ldr	r5, [pc, #76]	; (ea28 <AudioOutputI2S::update()+0x94>)
    e9dc:	movs	r6, #0
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    e9de:	str	r4, [r2, #0]
			block_right_2nd = block;
    e9e0:	str	r0, [r1, #0]
			block_right_offset = 0;
    e9e2:	strh	r6, [r5, #0]
			__enable_irq();
    e9e4:	cpsie	i
			release(tmp);
    e9e6:	mov	r0, r3
		}
	}
}
    e9e8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
			__enable_irq();
			release(tmp);
    e9ec:	b.w	11780 <AudioStream::release(audio_block_struct*)>
    e9f0:	pop	{r3, r4, r5, r6, r7, pc}
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
    e9f2:	str	r0, [r1, #0]
			__enable_irq();
    e9f4:	cpsie	i
    e9f6:	b.n	e9c2 <AudioOutputI2S::update()+0x2e>
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
    e9f8:	str	r0, [r1, #0]
			__enable_irq();
    e9fa:	cpsie	i
    e9fc:	pop	{r3, r4, r5, r6, r7, pc}
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
    e9fe:	ldr	r1, [pc, #28]	; (ea1c <AudioOutputI2S::update()+0x88>)
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
    ea00:	str	r0, [r2, #0]
			block_left_offset = 0;
    ea02:	strh	r3, [r1, #0]
			__enable_irq();
    ea04:	cpsie	i
    ea06:	b.n	e9c2 <AudioOutputI2S::update()+0x2e>
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
    ea08:	ldr	r1, [pc, #28]	; (ea28 <AudioOutputI2S::update()+0x94>)
	}
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
    ea0a:	str	r0, [r2, #0]
			block_right_offset = 0;
    ea0c:	strh	r3, [r1, #0]
			__enable_irq();
    ea0e:	cpsie	i
    ea10:	pop	{r3, r4, r5, r6, r7, pc}
    ea12:	nop
    ea14:	.word	0x200258ec
    ea18:	.word	0x200258f8
    ea1c:	.word	0x200258d8
    ea20:	.word	0x200258e4
    ea24:	.word	0x200258f0
    ea28:	.word	0x200258e8

0000ea2c <AudioOutputI2S::config_i2s()>:
#endif
#endif


void AudioOutputI2S::config_i2s(void)
{
    ea2c:	push	{r3, r4, r5, r6, r7, lr}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    ea2e:	ldr	r5, [pc, #160]	; (ead0 <AudioOutputI2S::config_i2s()+0xa4>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
    ea30:	ldr	r4, [pc, #160]	; (ead4 <AudioOutputI2S::config_i2s()+0xa8>)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    ea32:	ldr	r3, [r5, #124]	; 0x7c
    ea34:	orr.w	r3, r3, #786432	; 0xc0000
    ea38:	str	r3, [r5, #124]	; 0x7c

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
    ea3a:	ldr	r3, [r4, #8]
    ea3c:	cmp	r3, #0
    ea3e:	blt.n	eacc <AudioOutputI2S::config_i2s()+0xa0>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
    ea40:	ldr.w	r3, [r4, #136]	; 0x88
    ea44:	cmp	r3, #0
    ea46:	blt.n	eacc <AudioOutputI2S::config_i2s()+0xa0>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
    ea48:	movs	r3, #0
    ea4a:	movw	r2, #10000	; 0x2710
    ea4e:	mov.w	r1, #2240	; 0x8c0
    ea52:	movs	r0, #28
    ea54:	bl	12cd8 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    ea58:	ldr	r1, [r5, #28]
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    ea5a:	ldr	r2, [pc, #124]	; (ead8 <AudioOutputI2S::config_i2s()+0xac>)
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    ea5c:	movs	r6, #3
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    ea5e:	bic.w	r1, r1, #3072	; 0xc00
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    ea62:	ldr.w	lr, [pc, #144]	; eaf4 <AudioOutputI2S::config_i2s()+0xc8>
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    ea66:	ldr	r3, [pc, #116]	; (eadc <AudioOutputI2S::config_i2s()+0xb0>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    ea68:	movs	r7, #0
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    ea6a:	orr.w	r1, r1, #2048	; 0x800
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    ea6e:	ldr	r0, [pc, #112]	; (eae0 <AudioOutputI2S::config_i2s()+0xb4>)
	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    ea70:	mov.w	ip, #1
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    ea74:	str	r1, [r5, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    ea76:	ldr	r1, [r5, #40]	; 0x28
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    ea78:	ands	r2, r1
	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
    ea7a:	mov.w	r1, #65536	; 0x10000
	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    ea7e:	orr.w	r2, r2, #206	; 0xce
    ea82:	str	r2, [r5, #40]	; 0x28

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    ea84:	ldr.w	r2, [lr, #4]

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
    ea88:	ldr	r5, [pc, #88]	; (eae4 <AudioOutputI2S::config_i2s()+0xb8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    ea8a:	ands	r3, r2
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
    ea8c:	ldr	r2, [pc, #88]	; (eae8 <AudioOutputI2S::config_i2s()+0xbc>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    ea8e:	orr.w	r3, r3, #524288	; 0x80000
    ea92:	str.w	r3, [lr, #4]

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    ea96:	str.w	r6, [r0, #288]	; 0x120
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    ea9a:	ldr	r3, [pc, #80]	; (eaec <AudioOutputI2S::config_i2s()+0xc0>)
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    ea9c:	str.w	r6, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
    eaa0:	str.w	r6, [r0, #292]	; 0x124

	I2S1_RMR = 0;
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    eaa4:	ldr	r0, [pc, #72]	; (eaf0 <AudioOutputI2S::config_i2s()+0xc4>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    eaa6:	str	r7, [r4, #96]	; 0x60
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    eaa8:	str.w	ip, [r4, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
    eaac:	str	r5, [r4, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
    eaae:	str	r1, [r4, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
    eab0:	str	r2, [r4, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    eab2:	str	r3, [r4, #28]

	I2S1_RMR = 0;
    eab4:	str.w	r7, [r4, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
    eab8:	str.w	ip, [r4, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    eabc:	str.w	r0, [r4, #144]	; 0x90
	I2S1_RCR3 = I2S_RCR3_RCE;
    eac0:	str.w	r1, [r4, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    eac4:	str.w	r2, [r4, #152]	; 0x98
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
    eac8:	str.w	r3, [r4, #156]	; 0x9c
    eacc:	pop	{r3, r4, r5, r6, r7, pc}
    eace:	nop
    ead0:	.word	0x400fc000
    ead4:	.word	0x40384000
    ead8:	.word	0xfffffe00
    eadc:	.word	0xfff7fff8
    eae0:	.word	0x401f8000
    eae4:	.word	0x47000001
    eae8:	.word	0x00011f1b
    eaec:	.word	0x1f1f1f00
    eaf0:	.word	0x07000001
    eaf4:	.word	0x400ac000

0000eaf8 <AudioOutputI2S::begin()>:
#if defined(__IMXRT1062__)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
    eaf8:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    eafa:	ldr	r4, [pc, #156]	; (eb98 <AudioOutputI2S::begin()+0xa0>)
    eafc:	movs	r1, #1

	block_left_1st = NULL;
    eafe:	movs	r5, #0
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
    eb00:	ldr	r6, [pc, #152]	; (eb9c <AudioOutputI2S::begin()+0xa4>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    eb02:	mov	r0, r4
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    eb04:	ldr	r7, [pc, #152]	; (eba0 <AudioOutputI2S::begin()+0xa8>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    eb06:	bl	11434 <DMAChannel::begin(bool)>

	block_left_1st = NULL;
    eb0a:	ldr	r2, [pc, #152]	; (eba4 <AudioOutputI2S::begin()+0xac>)
	block_right_1st = NULL;
    eb0c:	ldr	r3, [pc, #152]	; (eba8 <AudioOutputI2S::begin()+0xb0>)

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_left_1st = NULL;
    eb0e:	str	r5, [r2, #0]
	block_right_1st = NULL;
    eb10:	str	r5, [r3, #0]

	config_i2s();
    eb12:	bl	ea2c <AudioOutputI2S::config_i2s()>

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    eb16:	ldr	r3, [pc, #148]	; (ebac <AudioOutputI2S::begin()+0xb4>)
    eb18:	movs	r2, #3
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
    eb1a:	movs	r0, #2
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    eb1c:	movw	r1, #257	; 0x101

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    eb20:	str.w	r2, [r3, #384]	; 0x180
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    eb24:	mov.w	r2, #256	; 0x100
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
    eb28:	ldr	r3, [r4, #0]
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    eb2a:	mov.w	lr, #6
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
    eb2e:	str	r6, [r3, #0]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    eb30:	ldr	r6, [pc, #124]	; (ebb0 <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    eb32:	strh	r2, [r3, #22]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
    eb34:	strh	r0, [r3, #4]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    eb36:	strh	r2, [r3, #30]

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    eb38:	strh	r1, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    eb3a:	str	r6, [r3, #12]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    eb3c:	ldrb	r1, [r4, #4]
    eb3e:	ldr	r2, [pc, #116]	; (ebb4 <AudioOutputI2S::begin()+0xbc>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    eb40:	ldr	r6, [pc, #116]	; (ebb8 <AudioOutputI2S::begin()+0xc0>)
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    eb42:	strh.w	lr, [r3, #28]
#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    eb46:	str	r0, [r3, #8]
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    eb48:	str	r7, [r3, #16]
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
    eb4a:	strh	r5, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
    eb4c:	str	r5, [r3, #24]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    eb4e:	ldr	r0, [pc, #108]	; (ebbc <AudioOutputI2S::begin()+0xc4>)

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    eb50:	str.w	r5, [r2, r1, lsl #2]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    eb54:	ldr	r3, [pc, #104]	; (ebc0 <AudioOutputI2S::begin()+0xc8>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    eb56:	str.w	r6, [r2, r1, lsl #2]
    eb5a:	ldrb	r2, [r4, #4]
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    eb5c:	ldr	r1, [pc, #100]	; (ebc4 <AudioOutputI2S::begin()+0xcc>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    eb5e:	strb	r2, [r0, #27]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    eb60:	ldr.w	r2, [r3, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
#endif
	update_responsibility = update_setup();
    eb64:	ldr	r7, [pc, #96]	; (ebc8 <AudioOutputI2S::begin()+0xd0>)
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    eb66:	orr.w	r2, r2, #2415919104	; 0x90000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    eb6a:	ldr	r6, [pc, #96]	; (ebcc <AudioOutputI2S::begin()+0xd4>)
    eb6c:	str.w	r2, [r3, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    eb70:	str	r1, [r3, #8]
#endif
	update_responsibility = update_setup();
    eb72:	bl	11948 <AudioStream::update_setup()>
    eb76:	ldrb	r3, [r4, #4]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    eb78:	movs	r2, #1

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    eb7a:	ldr	r4, [pc, #84]	; (ebd0 <AudioOutputI2S::begin()+0xd8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    eb7c:	and.w	r1, r3, #31

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    eb80:	add.w	r5, r3, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    eb84:	asrs	r3, r3, #5
    eb86:	strb	r0, [r7, #0]
    eb88:	lsls	r2, r1
    eb8a:	ldr	r1, [pc, #72]	; (ebd4 <AudioOutputI2S::begin()+0xdc>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    eb8c:	str.w	r6, [r4, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    eb90:	str.w	r2, [r1, r3, lsl #2]
    eb94:	pop	{r3, r4, r5, r6, r7, pc}
    eb96:	nop
    eb98:	.word	0x200258dc
    eb9c:	.word	0x20200520
    eba0:	.word	0x40384022
    eba4:	.word	0x200258ec
    eba8:	.word	0x200258e4
    ebac:	.word	0x401f8000
    ebb0:	.word	0xfffffe00
    ebb4:	.word	0x400ec000
    ebb8:	.word	0x80000014
    ebbc:	.word	0x400e8000
    ebc0:	.word	0x40384000
    ebc4:	.word	0x90000001
    ebc8:	.word	0x200258f4
    ebcc:	.word	0x0000e83d
    ebd0:	.word	0x20026400
    ebd4:	.word	0xe000e100

0000ebd8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    ebd8:	ldr	r2, [pc, #8]	; (ebe4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    ebda:	ldr	r1, [pc, #12]	; (ebe8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    ebdc:	ldr	r0, [pc, #12]	; (ebec <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    ebde:	b.w	12308 <__aeabi_atexit>
    ebe2:	nop
    ebe4:	.word	0x2001f960
    ebe8:	.word	0x0000e595
    ebec:	.word	0x200258dc

0000ebf0 <AudioMixer4::update()>:
}

#endif

void AudioMixer4::update(void)
{
    ebf0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    ebf4:	mov.w	r8, #0
}

#endif

void AudioMixer4::update(void)
{
    ebf8:	mov	r6, r0
    ebfa:	add.w	r5, r0, #24
	audio_block_t *in, *out=NULL;
    ebfe:	mov	r7, r8
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
    ec00:	mov	r1, r8
    ec02:	mov	r0, r6
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
    ec04:	cmp	r7, #0
    ec06:	beq.n	eca4 <AudioMixer4::update()+0xb4>
			if (out) {
				int32_t mult = multiplier[channel];
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
    ec08:	bl	11808 <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
    ec0c:	cbz	r0, ec4a <AudioMixer4::update()+0x5a>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    ec0e:	ldr	r4, [r5, #0]
    ec10:	adds	r1, r7, #4
    ec12:	add.w	lr, r0, #4

static void applyGainThenAdd(int16_t *data, const int16_t *in, int32_t mult)
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    ec16:	add.w	ip, r7, #260	; 0x104

	if (mult == MULTI_UNITYGAIN) {
    ec1a:	cmp.w	r4, #65536	; 0x10000
    ec1e:	beq.n	ec6e <AudioMixer4::update()+0x7e>
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
	} else {
		do {
			uint32_t tmp32 = *src++; // read 2 samples from *data
    ec20:	ldr.w	r2, [lr], #4
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ec24:	smulwb	r3, r4, r2
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ec28:	smulwt	r9, r4, r2
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    ec2c:	ssat	r2, #16, r3
    ec30:	ssat	r3, #16, r9
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    ec34:	pkhbt	r3, r2, r3, lsl #16
			int32_t val1 = signed_multiply_32x16b(mult, tmp32);
			int32_t val2 = signed_multiply_32x16t(mult, tmp32);
			val1 = signed_saturate_rshift(val1, 16, 0);
			val2 = signed_saturate_rshift(val2, 16, 0);
			tmp32 = pack_16b_16b(val2, val1);
			uint32_t tmp32b = *dst;
    ec38:	ldr	r2, [r1, #0]
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ec3a:	qadd16	r3, r3, r2
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
    ec3e:	str.w	r3, [r1], #4
		} while (dst < end);
    ec42:	cmp	ip, r1
    ec44:	bhi.n	ec20 <AudioMixer4::update()+0x30>
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
    ec46:	bl	11780 <AudioStream::release(audio_block_struct*)>
void AudioMixer4::update(void)
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    ec4a:	add.w	r8, r8, #1
    ec4e:	adds	r5, #4
    ec50:	cmp.w	r8, #4
    ec54:	bne.n	ec00 <AudioMixer4::update()+0x10>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
			}
		}
	}
	if (out) {
    ec56:	cmp	r7, #0
    ec58:	beq.n	ecdc <AudioMixer4::update()+0xec>
		transmit(out);
    ec5a:	mov	r0, r6
    ec5c:	mov	r1, r7
    ec5e:	movs	r2, #0
    ec60:	bl	117d4 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
    ec64:	mov	r0, r7
	}
}
    ec66:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			}
		}
	}
	if (out) {
		transmit(out);
		release(out);
    ec6a:	b.w	11780 <AudioStream::release(audio_block_struct*)>
    ec6e:	add.w	r1, r7, #12
    ec72:	add.w	r4, r0, #12
    ec76:	ldr.w	r3, [r1, #-8]
    ec7a:	ldr.w	r2, [r4, #-8]
    ec7e:	qadd16	r3, r3, r2
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    ec82:	str.w	r3, [r1, #-8]
    ec86:	ldr.w	r3, [r1, #-4]
    ec8a:	ldr.w	r2, [r4, #-4]
    ec8e:	qadd16	r3, r3, r2
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
    ec92:	cmp	ip, r1
	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    ec94:	str.w	r3, [r1, #-4]
    ec98:	add.w	r4, r4, #8
		} while (dst < end);
    ec9c:	add.w	r1, r1, #8
    eca0:	bhi.n	ec76 <AudioMixer4::update()+0x86>
    eca2:	b.n	ec46 <AudioMixer4::update()+0x56>
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
    eca4:	bl	11820 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
    eca8:	mov	r7, r0
    ecaa:	cmp	r0, #0
    ecac:	beq.n	ec4a <AudioMixer4::update()+0x5a>
				int32_t mult = multiplier[channel];
    ecae:	ldr	r0, [r5, #0]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
    ecb0:	cmp.w	r0, #65536	; 0x10000
    ecb4:	beq.n	ec4a <AudioMixer4::update()+0x5a>
    ecb6:	adds	r1, r7, #4
#define MULTI_UNITYGAIN 65536

static void applyGain(int16_t *data, int32_t mult)
{
	uint32_t *p = (uint32_t *)data;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    ecb8:	add.w	r4, r7, #260	; 0x104

	do {
		uint32_t tmp32 = *p; // read 2 samples from *data
    ecbc:	ldr	r3, [r1, #0]
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ecbe:	smulwb	r2, r0, r3
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ecc2:	smulwt	r3, r0, r3
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    ecc6:	ssat	r2, #16, r2
    ecca:	ssat	r3, #16, r3
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    ecce:	pkhbt	r3, r2, r3, lsl #16
		int32_t val1 = signed_multiply_32x16b(mult, tmp32);
		int32_t val2 = signed_multiply_32x16t(mult, tmp32);
		val1 = signed_saturate_rshift(val1, 16, 0);
		val2 = signed_saturate_rshift(val2, 16, 0);
		*p++ = pack_16b_16b(val2, val1);
    ecd2:	str.w	r3, [r1], #4
	} while (p < end);
    ecd6:	cmp	r4, r1
    ecd8:	bhi.n	ecbc <AudioMixer4::update()+0xcc>
    ecda:	b.n	ec4a <AudioMixer4::update()+0x5a>
    ecdc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ece0 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    ece0:	ldr	r2, [pc, #8]	; (ecec <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    ece2:	ldr	r1, [pc, #12]	; (ecf0 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    ece4:	ldr	r0, [pc, #12]	; (ecf4 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    ece6:	b.w	12308 <__aeabi_atexit>
    ecea:	nop
    ecec:	.word	0x2001f960
    ecf0:	.word	0x0000e595
    ecf4:	.word	0x200258fc

0000ecf8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    ecf8:	ldr	r2, [pc, #8]	; (ed04 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    ecfa:	ldr	r1, [pc, #12]	; (ed08 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    ecfc:	ldr	r0, [pc, #12]	; (ed0c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    ecfe:	b.w	12308 <__aeabi_atexit>
    ed02:	nop
    ed04:	.word	0x2001f960
    ed08:	.word	0x0000e595
    ed0c:	.word	0x20025904

0000ed10 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    ed10:	ldr	r2, [pc, #8]	; (ed1c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    ed12:	ldr	r1, [pc, #12]	; (ed20 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    ed14:	ldr	r0, [pc, #12]	; (ed24 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    ed16:	b.w	12308 <__aeabi_atexit>
    ed1a:	nop
    ed1c:	.word	0x2001f960
    ed20:	.word	0x0000e595
    ed24:	.word	0x2002590c

0000ed28 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:

extern "C" void xbar_connect(unsigned int input, unsigned int output);

#define FILTERLEN 15

DMAChannel AudioInputAnalog::dma(false);
    ed28:	ldr	r2, [pc, #8]	; (ed34 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    ed2a:	ldr	r1, [pc, #12]	; (ed38 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    ed2c:	ldr	r0, [pc, #12]	; (ed3c <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    ed2e:	b.w	12308 <__aeabi_atexit>
    ed32:	nop
    ed34:	.word	0x2001f960
    ed38:	.word	0x0000e595
    ed3c:	.word	0x20025914

0000ed40 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    ed40:	ldr	r2, [pc, #8]	; (ed4c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    ed42:	ldr	r1, [pc, #12]	; (ed50 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    ed44:	ldr	r0, [pc, #12]	; (ed54 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    ed46:	b.w	12308 <__aeabi_atexit>
    ed4a:	nop
    ed4c:	.word	0x2001f960
    ed50:	.word	0x0000e595
    ed54:	.word	0x2002591c

0000ed58 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    ed58:	ldr	r2, [pc, #8]	; (ed64 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    ed5a:	ldr	r1, [pc, #12]	; (ed68 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    ed5c:	ldr	r0, [pc, #12]	; (ed6c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    ed5e:	b.w	12308 <__aeabi_atexit>
    ed62:	nop
    ed64:	.word	0x2001f960
    ed68:	.word	0x0000e595
    ed6c:	.word	0x20025924

0000ed70 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    ed70:	ldr	r2, [pc, #8]	; (ed7c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    ed72:	ldr	r1, [pc, #12]	; (ed80 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    ed74:	ldr	r0, [pc, #12]	; (ed84 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    ed76:	b.w	12308 <__aeabi_atexit>
    ed7a:	nop
    ed7c:	.word	0x2001f960
    ed80:	.word	0x0000e595
    ed84:	.word	0x2002592c

0000ed88 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    ed88:	ldr	r2, [pc, #8]	; (ed94 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    ed8a:	ldr	r1, [pc, #12]	; (ed98 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    ed8c:	ldr	r0, [pc, #12]	; (ed9c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    ed8e:	b.w	12308 <__aeabi_atexit>
    ed92:	nop
    ed94:	.word	0x2001f960
    ed98:	.word	0x0000e595
    ed9c:	.word	0x20025934

0000eda0 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    eda0:	ldr	r2, [pc, #8]	; (edac <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    eda2:	ldr	r1, [pc, #12]	; (edb0 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    eda4:	ldr	r0, [pc, #12]	; (edb4 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    eda6:	b.w	12308 <__aeabi_atexit>
    edaa:	nop
    edac:	.word	0x2001f960
    edb0:	.word	0x0000e595
    edb4:	.word	0x2002593c

0000edb8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    edb8:	ldr	r2, [pc, #8]	; (edc4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    edba:	ldr	r1, [pc, #12]	; (edc8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    edbc:	ldr	r0, [pc, #12]	; (edcc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    edbe:	b.w	12308 <__aeabi_atexit>
    edc2:	nop
    edc4:	.word	0x2001f960
    edc8:	.word	0x0000e595
    edcc:	.word	0x20025944

0000edd0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    edd0:	ldr	r2, [pc, #8]	; (eddc <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    edd2:	ldr	r1, [pc, #12]	; (ede0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    edd4:	ldr	r0, [pc, #12]	; (ede4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    edd6:	b.w	12308 <__aeabi_atexit>
    edda:	nop
    eddc:	.word	0x2001f960
    ede0:	.word	0x0000e595
    ede4:	.word	0x2002594c

0000ede8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    ede8:	ldr	r2, [pc, #8]	; (edf4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    edea:	ldr	r1, [pc, #12]	; (edf8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    edec:	ldr	r0, [pc, #12]	; (edfc <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    edee:	b.w	12308 <__aeabi_atexit>
    edf2:	nop
    edf4:	.word	0x2001f960
    edf8:	.word	0x0000e595
    edfc:	.word	0x20025954

0000ee00 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    ee00:	ldr	r2, [pc, #8]	; (ee0c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    ee02:	ldr	r1, [pc, #12]	; (ee10 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    ee04:	ldr	r0, [pc, #12]	; (ee14 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    ee06:	b.w	12308 <__aeabi_atexit>
    ee0a:	nop
    ee0c:	.word	0x2001f960
    ee10:	.word	0x0000e595
    ee14:	.word	0x2002595c

0000ee18 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    ee18:	ldr	r2, [pc, #8]	; (ee24 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    ee1a:	ldr	r1, [pc, #12]	; (ee28 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    ee1c:	ldr	r0, [pc, #12]	; (ee2c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    ee1e:	b.w	12308 <__aeabi_atexit>
    ee22:	nop
    ee24:	.word	0x2001f960
    ee28:	.word	0x0000e595
    ee2c:	.word	0x20025964

0000ee30 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE>:
volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

volatile bool AsyncAudioInputSPDIF3::lockChanged=false;
volatile bool AsyncAudioInputSPDIF3::locked=false;
DMAChannel AsyncAudioInputSPDIF3::dma(false);
    ee30:	ldr	r2, [pc, #8]	; (ee3c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0xc>)
    ee32:	ldr	r1, [pc, #12]	; (ee40 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x10>)
    ee34:	ldr	r0, [pc, #12]	; (ee44 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x14>)
    ee36:	b.w	12308 <__aeabi_atexit>
    ee3a:	nop
    ee3c:	.word	0x2001f960
    ee40:	.word	0x0000e595
    ee44:	.word	0x2002596c

0000ee48 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    ee48:	ldr	r2, [pc, #8]	; (ee54 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    ee4a:	ldr	r1, [pc, #12]	; (ee58 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    ee4c:	ldr	r0, [pc, #12]	; (ee5c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    ee4e:	b.w	12308 <__aeabi_atexit>
    ee52:	nop
    ee54:	.word	0x2001f960
    ee58:	.word	0x0000e595
    ee5c:	.word	0x20025974

0000ee60 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    ee60:	ldr	r2, [pc, #8]	; (ee6c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    ee62:	ldr	r1, [pc, #12]	; (ee70 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    ee64:	ldr	r0, [pc, #12]	; (ee74 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    ee66:	b.w	12308 <__aeabi_atexit>
    ee6a:	nop
    ee6c:	.word	0x2001f960
    ee70:	.word	0x0000e595
    ee74:	.word	0x2002597c

0000ee78 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    ee78:	ldr	r2, [pc, #8]	; (ee84 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    ee7a:	ldr	r1, [pc, #12]	; (ee88 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    ee7c:	ldr	r0, [pc, #12]	; (ee8c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    ee7e:	b.w	12308 <__aeabi_atexit>
    ee82:	nop
    ee84:	.word	0x2001f960
    ee88:	.word	0x0000e595
    ee8c:	.word	0x20025984

0000ee90 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    ee90:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    ee92:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    ee94:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    ee96:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    ee98:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    ee9a:	beq.n	eea4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    ee9c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    eea0:	b.w	11508 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    eea4:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    eea6:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    eeaa:	bx	r3

0000eeac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    eeac:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    eeae:	movw	r5, #513	; 0x201
    eeb2:	ldr	r4, [r0, #0]
    eeb4:	str	r5, [r4, #16]

	while (count > 0) {
    eeb6:	cbz	r3, ef00 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    eeb8:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    eeba:	cbz	r1, eefa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    eebc:	ldrb	r5, [r1, #0]
    eebe:	adds	r1, #1
		count--; // how many bytes left to output.
    eec0:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    eec2:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    eec4:	ldr	r5, [r4, #112]	; 0x70
    eec6:	lsls	r5, r5, #30
    eec8:	bmi.n	eed8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    eeca:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    eecc:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    eece:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    eed0:	cbz	r2, eed8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    eed2:	strb	r5, [r2, #0]
    eed4:	adds	r2, #1
    eed6:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    eed8:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    eeda:	lsls	r5, r5, #31
    eedc:	bpl.n	eec4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    eede:	cmp	r3, #0
    eee0:	bne.n	eeba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    eee2:	cbz	r6, ef00 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    eee4:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    eee6:	ldr	r3, [r1, #112]	; 0x70
    eee8:	lsls	r3, r3, #30
    eeea:	bmi.n	eee6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    eeec:	ldr	r3, [r1, #116]	; 0x74
    eeee:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    eef0:	cbz	r2, eef6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    eef2:	strb	r3, [r2, #0]
    eef4:	adds	r2, #1
			count_read--;
    eef6:	subs	r6, #1
    eef8:	b.n	eee2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    eefa:	ldrb.w	r5, [r0, #60]	; 0x3c
    eefe:	b.n	eec0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    ef00:	pop	{r4, r5, r6}
    ef02:	bx	lr

0000ef04 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    ef04:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    ef06:	ldr	r4, [pc, #192]	; (efc8 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    ef08:	ldr	r3, [pc, #192]	; (efcc <_spi_dma_rxISR0()+0xc8>)
    ef0a:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    ef0c:	ldr	r5, [r4, #68]	; 0x44
    ef0e:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    ef10:	ldr	r2, [r4, #64]	; 0x40
    ef12:	strb	r1, [r3, #31]
    ef14:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    ef16:	strb	r1, [r3, #28]
    ef18:	ldrb	r1, [r0, #4]
    ef1a:	strb	r1, [r3, #28]
    ef1c:	cbz	r2, ef5e <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    ef1e:	cmp.w	r2, #32768	; 0x8000
    ef22:	bcs.n	ef56 <_spi_dma_rxISR0()+0x52>
    ef24:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    ef26:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    ef28:	ldrh	r1, [r3, #30]
    ef2a:	lsls	r6, r1, #16
    ef2c:	bmi.n	efa6 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    ef2e:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    ef30:	ldrh	r1, [r3, #30]
    ef32:	uxth	r1, r1
    ef34:	strh	r1, [r3, #22]
    ef36:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    ef38:	ldrh	r1, [r3, #30]
    ef3a:	lsls	r1, r1, #16
    ef3c:	bmi.n	ef98 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    ef3e:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    ef40:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    ef42:	ldrh	r2, [r3, #30]
    ef44:	uxth	r2, r2
    ef46:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    ef48:	str	r1, [r4, #64]	; 0x40
    ef4a:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    ef4c:	ldr	r3, [pc, #124]	; (efcc <_spi_dma_rxISR0()+0xc8>)
    ef4e:	strb	r2, [r3, #27]
    ef50:	ldrb	r2, [r5, #4]
    ef52:	strb	r2, [r3, #27]
    ef54:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    ef56:	ldr	r3, [pc, #120]	; (efd0 <_spi_dma_rxISR0()+0xcc>)
    ef58:	add	r3, r2
    ef5a:	str	r3, [r4, #64]	; 0x40
    ef5c:	b.n	ef4a <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    ef5e:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    ef60:	movs	r5, #15
    ef62:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    ef64:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    ef68:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    ef6a:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    ef6e:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    ef70:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    ef72:	ldr	r5, [r1, #0]
    ef74:	ldr	r1, [pc, #92]	; (efd4 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    ef76:	str	r2, [r3, #28]
    ef78:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    ef7a:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    ef7e:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    ef80:	strb.w	r6, [r4, #61]	; 0x3d
    ef84:	bne.n	efb6 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    ef86:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    ef88:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    ef8a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    ef8c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    ef8e:	beq.n	efc0 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    ef90:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    ef94:	b.w	11508 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    ef98:	ldrh	r1, [r3, #30]
    ef9a:	ubfx	r2, r2, #0, #9
    ef9e:	and.w	r1, r1, #65024	; 0xfe00
    efa2:	orrs	r2, r1
    efa4:	b.n	ef3e <_spi_dma_rxISR0()+0x3a>
    efa6:	ldrh	r1, [r3, #30]
    efa8:	ubfx	r6, r2, #0, #9
    efac:	and.w	r1, r1, #65024	; 0xfe00
    efb0:	orrs	r1, r6
    efb2:	strh	r1, [r3, #30]
    efb4:	b.n	ef30 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    efb6:	mov	r3, r5
    efb8:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    efba:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    efbe:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    efc0:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    efc2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    efc6:	bx	r3
    efc8:	.word	0x2001fd38
    efcc:	.word	0x400e8000
    efd0:	.word	0xffff8001
    efd4:	.word	0x0000ee91

0000efd8 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    efd8:	cbz	r3, efde <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    efda:	b.w	eeac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    efde:	bx	lr

0000efe0 <Print::flush()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
    efe0:	bx	lr
    efe2:	nop

0000efe4 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    efe4:	ldr	r3, [pc, #24]	; (f000 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
    efe6:	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    efe8:	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    efea:	ldr	r1, [pc, #24]	; (f004 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    efec:	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    efee:	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    eff0:	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    eff2:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    eff6:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    effa:	strb.w	r2, [r3, #50]	; 0x32
    effe:	bx	lr
    f000:	.word	0x2002598c
    f004:	.word	0x2001f620

0000f008 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    f008:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    f00a:	ldr	r4, [pc, #104]	; (f074 <SdVolume::cacheFlush()+0x6c>)
    f00c:	ldrb	r3, [r4, #0]
    f00e:	cbnz	r3, f014 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    f010:	movs	r0, #1
}
    f012:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    f014:	ldr	r5, [pc, #96]	; (f078 <SdVolume::cacheFlush()+0x70>)
    f016:	ldr	r3, [pc, #100]	; (f07c <SdVolume::cacheFlush()+0x74>)
    f018:	ldr	r0, [r5, #0]
    f01a:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    f01c:	ldrb	r3, [r0, #0]
    f01e:	cmp	r3, #254	; 0xfe
    f020:	beq.n	f052 <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    f022:	ldr	r2, [pc, #92]	; (f080 <SdVolume::cacheFlush()+0x78>)
    f024:	bl	fbd4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    f028:	cbz	r0, f04e <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    f02a:	ldr	r6, [pc, #88]	; (f084 <SdVolume::cacheFlush()+0x7c>)
    f02c:	ldr	r1, [r6, #0]
    f02e:	cbnz	r1, f038 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    f030:	movs	r3, #0
  }
  return true;
    f032:	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    f034:	strb	r3, [r4, #0]
    f036:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    f038:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    f03a:	ldrb	r3, [r0, #0]
    f03c:	cmp	r3, #254	; 0xfe
    f03e:	beq.n	f060 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    f040:	ldr	r2, [pc, #60]	; (f080 <SdVolume::cacheFlush()+0x78>)
    f042:	bl	fbd4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    f046:	cbz	r0, f04e <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    f048:	movs	r3, #0
    f04a:	str	r3, [r6, #0]
    f04c:	b.n	f030 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    f04e:	movs	r0, #0
    f050:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    f052:	ldr	r0, [pc, #44]	; (f080 <SdVolume::cacheFlush()+0x78>)
    f054:	bl	f498 <SDHC_CardWriteBlock(void const*, unsigned long)>
    f058:	clz	r0, r0
    f05c:	lsrs	r0, r0, #5
    f05e:	b.n	f028 <SdVolume::cacheFlush()+0x20>
    f060:	ldr	r0, [pc, #28]	; (f080 <SdVolume::cacheFlush()+0x78>)
    f062:	bl	f498 <SDHC_CardWriteBlock(void const*, unsigned long)>
    f066:	clz	r0, r0
    f06a:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    f06c:	cmp	r0, #0
    f06e:	bne.n	f048 <SdVolume::cacheFlush()+0x40>
    f070:	b.n	f04e <SdVolume::cacheFlush()+0x46>
    f072:	nop
    f074:	.word	0x20025be8
    f078:	.word	0x200259e4
    f07c:	.word	0x2001fd88
    f080:	.word	0x200259e8
    f084:	.word	0x200259e0

0000f088 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    f088:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    f08a:	ldr	r5, [pc, #72]	; (f0d4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    f08c:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    f08e:	ldr	r3, [r5, #0]
    f090:	cmp	r3, r0
    f092:	beq.n	f0b8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    f094:	mov	r4, r0
    if (!cacheFlush()) return false;
    f096:	bl	f008 <SdVolume::cacheFlush()>
    f09a:	cbnz	r0, f0a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    f09c:	movs	r0, #0
    f09e:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    f0a0:	ldr	r3, [pc, #52]	; (f0d8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    f0a2:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    f0a4:	ldrb	r3, [r0, #0]
    f0a6:	cmp	r3, #254	; 0xfe
    f0a8:	beq.n	f0c4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    f0aa:	ldr	r2, [pc, #48]	; (f0dc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    f0ac:	mov	r1, r4
    f0ae:	bl	fae4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    f0b2:	cmp	r0, #0
    f0b4:	beq.n	f09c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    f0b6:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    f0b8:	ldr	r3, [pc, #36]	; (f0e0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
    f0ba:	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    f0bc:	ldrb	r1, [r3, #0]
    f0be:	orrs	r1, r6
    f0c0:	strb	r1, [r3, #0]
  return true;
}
    f0c2:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    f0c4:	mov	r1, r4
    f0c6:	ldr	r0, [pc, #20]	; (f0dc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    f0c8:	bl	f3a0 <SDHC_CardReadBlock(void*, unsigned long)>
    f0cc:	clz	r0, r0
    f0d0:	lsrs	r0, r0, #5
    f0d2:	b.n	f0b2 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    f0d4:	.word	0x2001fd88
    f0d8:	.word	0x200259e4
    f0dc:	.word	0x200259e8
    f0e0:	.word	0x20025be8

0000f0e4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    f0e4:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f0e6:	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    f0ea:	mov	r5, r0
    f0ec:	mov	r6, r1
    f0ee:	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f0f0:	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    f0f2:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    f0f4:	ldr	r3, [pc, #96]	; (f158 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f0f6:	beq.n	f128 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    f0f8:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    f0fc:	ldr	r3, [r3, #0]
    f0fe:	cmp	r4, r3
    f100:	bne.n	f132 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    f102:	and.w	r1, r6, #127	; 0x7f
    f106:	ldr	r2, [pc, #84]	; (f15c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    f108:	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    f10c:	ldr	r1, [pc, #80]	; (f160 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    f10e:	ldrb	r0, [r5, #24]
    f110:	ldrb	r2, [r1, #0]
    f112:	cmp	r0, #1
    f114:	orr.w	r2, r2, #1
    f118:	strb	r2, [r1, #0]
    f11a:	bls.n	f150 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
    f11c:	ldr	r1, [r5, #8]
  return true;
    f11e:	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    f120:	ldr	r2, [pc, #64]	; (f164 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    f122:	add	r3, r1
    f124:	str	r3, [r2, #0]
    f126:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f128:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    f12c:	ldr	r3, [r3, #0]
    f12e:	cmp	r4, r3
    f130:	beq.n	f144 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    f132:	movs	r1, #0
    f134:	mov	r0, r4
    f136:	bl	f088 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    f13a:	cbz	r0, f152 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
    f13c:	ldrb.w	r3, [r5, #32]
    f140:	cmp	r3, #16
    f142:	bne.n	f154 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    f144:	uxtb	r1, r6
    f146:	ldr	r2, [pc, #20]	; (f15c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    f148:	mov	r3, r4
    f14a:	strh.w	r7, [r2, r1, lsl #1]
    f14e:	b.n	f10c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    f150:	movs	r0, #1
}
    f152:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    f154:	mov	r3, r4
    f156:	b.n	f102 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    f158:	.word	0x2001fd88
    f15c:	.word	0x200259e8
    f160:	.word	0x20025be8
    f164:	.word	0x200259e0

0000f168 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    f168:	ldr	r3, [r0, #12]
    f16a:	adds	r3, #1
    f16c:	cmp	r3, r1
    f16e:	bcc.n	f1a2 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    f170:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f172:	ldrb.w	r3, [r0, #32]
    f176:	mov	r4, r0
    f178:	mov	r6, r2
    f17a:	mov	r5, r1
    f17c:	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    f17e:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    f180:	ldr	r3, [pc, #80]	; (f1d4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f182:	beq.n	f1a6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    f184:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    f188:	ldr	r3, [r3, #0]
    f18a:	cmp	r0, r3
    f18c:	bne.n	f1b0 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    f18e:	and.w	r1, r5, #127	; 0x7f
    f192:	ldr	r3, [pc, #68]	; (f1d8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    f194:	movs	r0, #1
    f196:	ldr.w	r3, [r3, r1, lsl #2]
    f19a:	bic.w	r3, r3, #4026531840	; 0xf0000000
    f19e:	str	r3, [r6, #0]
  }
  return true;
}
    f1a0:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    f1a2:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    f1a4:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f1a6:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    f1aa:	ldr	r3, [r3, #0]
    f1ac:	cmp	r0, r3
    f1ae:	beq.n	f1c0 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    f1b0:	movs	r1, #0
    f1b2:	bl	f088 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    f1b6:	cbz	r0, f1ce <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
    f1b8:	ldrb.w	r3, [r4, #32]
    f1bc:	cmp	r3, #16
    f1be:	bne.n	f18e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    f1c0:	uxtb	r1, r5
    f1c2:	ldr	r3, [pc, #20]	; (f1d8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    f1c4:	movs	r0, #1
    f1c6:	ldrh.w	r3, [r3, r1, lsl #1]
    f1ca:	str	r3, [r6, #0]
    f1cc:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    f1ce:	movs	r0, #0
    f1d0:	pop	{r4, r5, r6, pc}
    f1d2:	nop
    f1d4:	.word	0x2001fd88
    f1d8:	.word	0x200259e8

0000f1dc <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    f1dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    f1e0:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    f1e2:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    f1e4:	cbz	r7, f240 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    f1e6:	adds	r7, #1

    // don't save new start location
    setStart = false;
    f1e8:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    f1ec:	ldr	r3, [r0, #12]
    f1ee:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    f1f2:	cbz	r3, f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    f1f4:	mov	fp, r1
    f1f6:	mov	r6, r0
    f1f8:	mov	r9, r2
    f1fa:	mov	r4, r7
    f1fc:	movs	r5, #0
    f1fe:	b.n	f20c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    f200:	mov	r4, r3
    f202:	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    f204:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    f206:	ldr	r3, [r6, #12]
    f208:	cmp	r3, r5
    f20a:	bls.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    f20c:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    f20e:	add	r2, sp, #4
    f210:	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    f212:	bcs.n	f218 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
    f214:	movs	r4, #2
    f216:	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    f218:	mov	r1, r4
    f21a:	bl	f168 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    f21e:	adds	r3, r4, #1
    f220:	cbz	r0, f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
    f222:	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    f224:	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    f226:	cmp	r2, #0
    f228:	bne.n	f200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    f22a:	cmp	fp, r1
    f22c:	beq.n	f250 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
    f22e:	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    f230:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    f232:	ldr	r3, [r6, #12]
    f234:	cmp	r3, r5
    f236:	bhi.n	f20c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    f238:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    f23a:	add	sp, #12
    f23c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    f240:	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    f244:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    f246:	clz	sl, sl
    f24a:	mov.w	sl, sl, lsr #5
    f24e:	b.n	f1ec <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    f250:	cmp	r4, #1
    f252:	bls.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    f254:	ldr	r3, [r6, #12]
    f256:	adds	r3, #1
    f258:	cmp	r4, r3
    f25a:	bhi.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    f25c:	mvn.w	r2, #4026531840	; 0xf0000000
    f260:	mov	r1, r4
    f262:	mov	r0, r6
    f264:	bl	f0e4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    f268:	cmp	r0, #0
    f26a:	beq.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    f26c:	cmp	r7, r4
    f26e:	bcs.n	f29a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    f270:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    f272:	cmp	r4, #1
    f274:	bls.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    f276:	ldr	r3, [r6, #12]
    f278:	adds	r3, #1
    f27a:	cmp	r4, r3
    f27c:	bhi.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    f27e:	adds	r2, r4, #1
    f280:	mov	r1, r4
    f282:	mov	r0, r6
    f284:	bl	f0e4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    f288:	cmp	r0, #0
    f28a:	beq.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    f28c:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    f28e:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    f292:	beq.n	f29a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    f294:	cmp	r4, #1
    f296:	bne.n	f276 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    f298:	b.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    f29a:	ldr.w	r1, [r9]
    f29e:	cbz	r1, f2b8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    f2a0:	cmp	r1, #1
    f2a2:	bls.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    f2a4:	ldr	r3, [r6, #12]
    f2a6:	adds	r3, #1
    f2a8:	cmp	r1, r3
    f2aa:	bhi.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    f2ac:	mov	r2, r7
    f2ae:	mov	r0, r6
    f2b0:	bl	f0e4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    f2b4:	cmp	r0, #0
    f2b6:	beq.n	f238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    f2b8:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    f2bc:	cmp.w	sl, #0
    f2c0:	beq.n	f2ca <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    f2c2:	adds	r7, #1

  return true;
    f2c4:	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    f2c6:	str	r7, [r6, #0]
    f2c8:	b.n	f23a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    f2ca:	movs	r0, #1
    f2cc:	b.n	f23a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    f2ce:	nop

0000f2d0 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    f2d0:	ldr	r3, [pc, #128]	; (f354 <SDHC_CMD_Do(unsigned long)+0x84>)
    f2d2:	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    f2d4:	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    f2d6:	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    f2d8:	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    f2dc:	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    f2de:	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    f2e0:	ldr	r2, [r1, #36]	; 0x24
    f2e2:	ldr	r3, [pc, #112]	; (f354 <SDHC_CMD_Do(unsigned long)+0x84>)
    f2e4:	lsls	r2, r2, #31
    f2e6:	bmi.n	f2e0 <SDHC_CMD_Do(unsigned long)+0x10>
    f2e8:	ldr	r2, [r4, #36]	; 0x24
    f2ea:	lsls	r2, r2, #30
    f2ec:	bmi.n	f2e0 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    f2ee:	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    f2f0:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    f2f4:	mov	r0, r3
    f2f6:	b.n	f2fa <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    f2f8:	cbz	r2, f326 <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    f2fa:	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    f2fc:	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    f2fe:	ldr	r3, [pc, #88]	; (f358 <SDHC_CMD_Do(unsigned long)+0x88>)
    f300:	ldr	r4, [pc, #80]	; (f354 <SDHC_CMD_Do(unsigned long)+0x84>)
    f302:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    f304:	cmp	r3, #0
    f306:	beq.n	f2f8 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    f308:	cbz	r2, f326 <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    f30a:	cmp	r3, #1
    f30c:	bne.n	f326 <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    f30e:	ldr	r3, [r4, #48]	; 0x30
    f310:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    f314:	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    f316:	beq.n	f338 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    f318:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    f31c:	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    f31e:	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    f320:	ldr.w	r4, [sp], #4
    f324:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    f326:	ldr	r2, [pc, #44]	; (f354 <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    f328:	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    f32a:	ldr	r3, [pc, #48]	; (f35c <SDHC_CMD_Do(unsigned long)+0x8c>)
    f32c:	ldr	r1, [r2, #48]	; 0x30
    f32e:	orrs	r3, r1
    f330:	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    f332:	ldr.w	r4, [sp], #4
    f336:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    f338:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    f33c:	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    f33e:	beq.n	f34a <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    f340:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    f344:	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    f346:	str	r3, [r4, #48]	; 0x30
    f348:	b.n	f332 <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    f34a:	orr.w	r3, r3, #1
    f34e:	str	r3, [r4, #48]	; 0x30
    f350:	b.n	f332 <SDHC_CMD_Do(unsigned long)+0x62>
    f352:	nop
    f354:	.word	0x402c0000
    f358:	.word	0x000e0001
    f35c:	.word	0x000f0001

0000f360 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    f360:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    f362:	ldr	r5, [pc, #52]	; (f398 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    f364:	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    f366:	ldr	r0, [pc, #52]	; (f39c <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    f368:	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    f36c:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    f36e:	bl	f2d0 <SDHC_CMD_Do(unsigned long)>
    f372:	mov	r3, r0
    f374:	b.n	f384 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    f376:	cbnz	r3, f38c <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    f378:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    f37a:	bl	f2d0 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    f37e:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    f380:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    f382:	beq.n	f390 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    f384:	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    f386:	ldr	r0, [pc, #20]	; (f39c <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    f388:	lsls	r2, r2, #29
    f38a:	bmi.n	f376 <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    f38c:	mov	r0, r3
    f38e:	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    f390:	cmp	r0, #0
    f392:	it	eq
    f394:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    f396:	pop	{r4, r5, r6, pc}
    f398:	.word	0x402c0000
    f39c:	.word	0x0cdb0000

0000f3a0 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    f3a0:	ldr	r3, [pc, #224]	; (f484 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    f3a2:	ldrb	r2, [r3, #0]
    f3a4:	cbz	r2, f3aa <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    f3a6:	movs	r0, #3
    f3a8:	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    f3aa:	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    f3ac:	ldrb	r3, [r3, #1]
    f3ae:	mov	r6, r0
    f3b0:	cbnz	r3, f3b4 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    f3b2:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    f3b4:	ldr	r5, [pc, #208]	; (f488 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    f3b6:	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    f3ba:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    f3be:	ldr	r0, [pc, #204]	; (f48c <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    f3c0:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    f3c2:	ldr	r3, [r5, #72]	; 0x48
    f3c4:	orr.w	r3, r3, #16
    f3c8:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    f3ca:	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    f3cc:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    f3ce:	bl	f2d0 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    f3d2:	cmp	r0, #0
    f3d4:	bne.n	f472 <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    f3d6:	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    f3d8:	ldr	r3, [r5, #16]
    f3da:	add.w	r2, r6, #64	; 0x40
    f3de:	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    f3e2:	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    f3e4:	ldr	r3, [r4, #48]	; 0x30
    f3e6:	ldr	r6, [pc, #160]	; (f488 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    f3e8:	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    f3ec:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    f3f0:	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    f3f2:	bne.n	f474 <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    f3f4:	ldr	r3, [r4, #36]	; 0x24
    f3f6:	lsls	r5, r3, #20
    f3f8:	bpl.n	f3f4 <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    f3fa:	ldr	r3, [r1, #32]
    f3fc:	adds	r2, #64	; 0x40
    f3fe:	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    f402:	ldr	r3, [r1, #32]
    f404:	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    f408:	ldr	r3, [r1, #32]
    f40a:	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    f40e:	ldr	r3, [r1, #32]
    f410:	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    f414:	ldr	r3, [r1, #32]
    f416:	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    f41a:	ldr	r3, [r1, #32]
    f41c:	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    f420:	ldr	r3, [r1, #32]
    f422:	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    f426:	ldr	r3, [r1, #32]
    f428:	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    f42c:	ldr	r3, [r1, #32]
    f42e:	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    f432:	ldr	r3, [r1, #32]
    f434:	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    f438:	ldr	r3, [r1, #32]
    f43a:	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    f43e:	ldr	r3, [r1, #32]
    f440:	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    f444:	ldr	r3, [r1, #32]
    f446:	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    f44a:	ldr	r3, [r1, #32]
    f44c:	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    f450:	ldr	r3, [r1, #32]
    f452:	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    f456:	ldr	r3, [r1, #32]
    f458:	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    f45c:	cmp	r2, r0
    f45e:	bne.n	f3e4 <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    f460:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    f462:	ldr	r1, [pc, #36]	; (f488 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    f464:	ldr	r3, [r1, #48]	; 0x30
    f466:	ldr	r2, [pc, #32]	; (f488 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    f468:	lsls	r3, r3, #30
    f46a:	bpl.n	f464 <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    f46c:	ldr	r3, [pc, #32]	; (f490 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    f46e:	str	r3, [r2, #48]	; 0x30

  return result;
    f470:	pop	{r4, r5, r6, pc}
}
    f472:	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    f474:	ldr	r2, [pc, #28]	; (f494 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    f476:	orrs	r2, r3
    f478:	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    f47a:	bl	f360 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    f47e:	movs	r0, #1
    f480:	b.n	f462 <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    f482:	nop
    f484:	.word	0x20025bec
    f488:	.word	0x402c0000
    f48c:	.word	0x113a0010
    f490:	.word	0x01000022
    f494:	.word	0x00700020

0000f498 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    f498:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    f49a:	ldr	r3, [pc, #160]	; (f53c <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    f49c:	ldrb	r2, [r3, #0]
    f49e:	cbz	r2, f4a4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    f4a0:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    f4a2:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    f4a4:	ldrb	r3, [r3, #1]
    f4a6:	mov	r4, r0
    f4a8:	cbnz	r3, f4ac <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    f4aa:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    f4ac:	ldr	r5, [pc, #144]	; (f540 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    f4ae:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    f4b2:	ldr	r0, [pc, #144]	; (f544 <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    f4b4:	ldr	r3, [r5, #48]	; 0x30
    f4b6:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    f4b8:	ldr	r3, [r5, #72]	; 0x48
    f4ba:	bic.w	r3, r3, #16
    f4be:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    f4c0:	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    f4c2:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    f4c4:	bl	f2d0 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    f4c8:	cmp	r0, #0
    f4ca:	bne.n	f4a2 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    f4cc:	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    f4ce:	ldr	r3, [r5, #16]
    f4d0:	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    f4d4:	mov	r6, r5
    f4d6:	ldr	r3, [r2, #48]	; 0x30
    f4d8:	ldr	r1, [pc, #100]	; (f540 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    f4da:	lsls	r0, r3, #27
    f4dc:	bpl.n	f4d6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    f4de:	ldr	r3, [r6, #48]	; 0x30
    f4e0:	tst.w	r3, #7340032	; 0x700000
    f4e4:	bne.n	f51a <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    f4e6:	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    f4ea:	ldr.w	r3, [r4], #4
    f4ee:	ldr	r5, [pc, #80]	; (f540 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    f4f0:	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    f4f2:	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    f4f4:	bne.n	f4ea <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    f4f6:	ldr	r3, [r6, #48]	; 0x30
    f4f8:	orr.w	r3, r3, #16
    f4fc:	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    f4fe:	ldr	r3, [r6, #48]	; 0x30
    f500:	ands.w	r0, r3, #7340032	; 0x700000
    f504:	bne.n	f52a <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    f506:	cmp	r7, r1
    f508:	bne.n	f4d6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    f50a:	ldr	r1, [pc, #52]	; (f540 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    f50c:	ldr	r3, [r1, #48]	; 0x30
    f50e:	ldr	r2, [pc, #48]	; (f540 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    f510:	lsls	r3, r3, #30
    f512:	bpl.n	f50c <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    f514:	ldr	r3, [pc, #48]	; (f548 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    f516:	str	r3, [r2, #48]	; 0x30

  return result;
    f518:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    f51a:	ldr	r2, [r1, #48]	; 0x30
    f51c:	ldr	r3, [pc, #44]	; (f54c <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    f51e:	orrs	r3, r2
    f520:	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    f522:	bl	f360 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    f526:	movs	r0, #1
    f528:	b.n	f50a <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    f52a:	ldr	r2, [r5, #48]	; 0x30
    f52c:	ldr	r3, [pc, #28]	; (f54c <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    f52e:	orrs	r3, r2
    f530:	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    f532:	bl	f360 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    f536:	movs	r0, #1
    f538:	b.n	f50a <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    f53a:	nop
    f53c:	.word	0x20025bec
    f540:	.word	0x402c0000
    f544:	.word	0x183a0000
    f548:	.word	0x01000012
    f54c:	.word	0x00700010

0000f550 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    f550:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    f552:	ldrsb.w	r3, [r0, #5]
    f556:	cmp	r3, #0
    f558:	blt.n	f562 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    f55a:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    f55e:	b.w	f008 <SdVolume::cacheFlush()>
    f562:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    f564:	movs	r1, #1
    f566:	ldr	r0, [r0, #16]
    f568:	bl	f088 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    f56c:	cbz	r0, f5b0 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    f56e:	ldrb	r5, [r4, #20]
    f570:	ldr	r3, [pc, #64]	; (f5b4 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    f572:	adds.w	r5, r3, r5, lsl #5
    f576:	beq.n	f5b0 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    f578:	ldrb	r3, [r4, #6]
    f57a:	cmp	r3, #1
    f57c:	bls.n	f5aa <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    f57e:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    f580:	ldr	r1, [pc, #52]	; (f5b8 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    f582:	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    f584:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    f586:	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    f588:	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    f58a:	cbz	r3, f59a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    f58c:	add.w	r1, r5, #22
    f590:	add.w	r0, r5, #24
    f594:	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    f596:	ldrh	r3, [r5, #24]
    f598:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    f59a:	ldrb	r3, [r4, #5]
    f59c:	and.w	r3, r3, #127	; 0x7f
    f5a0:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    f5a2:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    f5a6:	b.w	f008 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    f5aa:	ldr	r3, [r4, #24]
    f5ac:	str	r3, [r5, #28]
    f5ae:	b.n	f57e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    f5b0:	movs	r0, #0
    f5b2:	pop	{r3, r4, r5, pc}
    f5b4:	.word	0x200259e8
    f5b8:	.word	0x20025bfc

0000f5bc <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    f5bc:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    f5be:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    f5c2:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    f5c4:	movs	r1, #1
    f5c6:	ldr	r0, [r0, #32]
    f5c8:	bl	f1dc <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    f5cc:	cbz	r0, f5e4 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    f5ce:	ldr	r3, [r4, #28]
    f5d0:	cbnz	r3, f5e2 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    f5d2:	ldrb	r3, [r4, #5]
    f5d4:	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    f5d6:	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    f5d8:	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    f5dc:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    f5de:	strb	r3, [r4, #5]
    f5e0:	pop	{r4, pc}
  }
  return true;
    f5e2:	movs	r0, #1
}
    f5e4:	pop	{r4, pc}
    f5e6:	nop

0000f5e8 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    f5e8:	push	{r3, r4, r5, r6, r7, lr}
    f5ea:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    f5ec:	cbz	r3, f5f4 <SdFile::seekSet(unsigned long)+0xc>
    f5ee:	ldr	r2, [r0, #24]
    f5f0:	cmp	r2, r1
    f5f2:	bcs.n	f5f8 <SdFile::seekSet(unsigned long)+0x10>
    f5f4:	movs	r0, #0
    f5f6:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    f5f8:	cmp	r3, #2
    f5fa:	mov	r7, r1
    f5fc:	mov	r5, r0
    f5fe:	beq.n	f63a <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    f600:	cbz	r7, f640 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    f602:	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    f604:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    f606:	ldr	r1, [r5, #12]
    f608:	ldrb	r3, [r3, #16]
    f60a:	subs	r2, r1, #1
    f60c:	adds	r3, #9
    f60e:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    f610:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    f612:	cmp	r2, r4
    f614:	bhi.n	f61c <SdFile::seekSet(unsigned long)+0x34>
    f616:	cbz	r1, f61c <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    f618:	subs	r4, r4, r2
    f61a:	b.n	f620 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    f61c:	ldr	r3, [r5, #28]
    f61e:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    f620:	add.w	r6, r5, #8
    f624:	b.n	f634 <SdFile::seekSet(unsigned long)+0x4c>
    f626:	ldr	r1, [r5, #8]
    f628:	subs	r4, #1
    f62a:	ldr	r0, [r5, #32]
    f62c:	bl	f168 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    f630:	cmp	r0, #0
    f632:	beq.n	f5f4 <SdFile::seekSet(unsigned long)+0xc>
    f634:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    f636:	cmp	r4, #0
    f638:	bne.n	f626 <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    f63a:	str	r7, [r5, #12]
    return true;
    f63c:	movs	r0, #1
    f63e:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    f640:	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    f642:	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    f644:	str	r7, [r5, #12]
    return true;
    f646:	pop	{r3, r4, r5, r6, r7, pc}

0000f648 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    f648:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f64c:	sub	sp, #20
    f64e:	mov	r7, r0
    f650:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    f652:	ldrb	r2, [r0, #6]
    f654:	cmp	r2, #1
    f656:	beq.n	f664 <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    f658:	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    f65a:	movs	r0, #0
    f65c:	strb	r3, [r7, #4]
}
    f65e:	add	sp, #20
    f660:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    f664:	ldrb	r2, [r0, #5]
    f666:	lsls	r4, r2, #30
    f668:	bpl.n	f658 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    f66a:	lsls	r3, r2, #29
    f66c:	mov	fp, r1
    f66e:	bpl.n	f682 <SdFile::write(void const*, unsigned int)+0x3a>
    f670:	ldr	r1, [r7, #24]
    f672:	ldr	r3, [r7, #12]
    f674:	cmp	r3, r1
    f676:	beq.w	f7fa <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    f67a:	bl	f5e8 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    f67e:	cmp	r0, #0
    f680:	beq.n	f658 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    f682:	ldr	r3, [sp, #4]
    f684:	ldr	r1, [r7, #12]
    f686:	cmp	r3, #0
    f688:	beq.w	f816 <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    f68c:	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    f690:	ldr.w	r9, [pc, #412]	; f830 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    f694:	ldr.w	sl, [pc, #412]	; f834 <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    f698:	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    f69a:	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    f69e:	ldrb	r2, [r0, #4]
    f6a0:	subs	r2, #1
    f6a2:	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    f6a6:	ands.w	r5, r5, #255	; 0xff
    f6aa:	bne.n	f754 <SdFile::write(void const*, unsigned int)+0x10c>
    f6ac:	cmp	r6, #0
    f6ae:	bne.n	f754 <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    f6b0:	ldr	r1, [r7, #8]
    f6b2:	cmp	r1, #0
    f6b4:	bne.n	f7aa <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    f6b6:	ldr	r2, [r7, #28]
    f6b8:	cmp	r2, #0
    f6ba:	beq.w	f7d0 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    f6be:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    f6c0:	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    f6c4:	subs	r2, #2
    f6c6:	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    f6ca:	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    f6cc:	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    f6ce:	cmp	r4, r8
    f6d0:	bls.n	f758 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    f6d2:	lsl.w	r2, r2, lr
    f6d6:	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    f6d8:	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    f6dc:	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    f6de:	cbnz	r6, f6e8 <SdFile::write(void const*, unsigned int)+0xa0>
    f6e0:	ldr	r0, [r7, #12]
    f6e2:	ldr	r2, [r7, #24]
    f6e4:	cmp	r0, r2
    f6e6:	bcs.n	f790 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    f6e8:	mov	r0, r5
    f6ea:	movs	r1, #1
    f6ec:	bl	f088 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    f6f0:	cmp	r0, #0
    f6f2:	beq.n	f658 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    f6f4:	add	r6, r9
      uint8_t* end = dst + n;
    f6f6:	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    f6fa:	cmp	r6, lr
    f6fc:	beq.n	f71a <SdFile::write(void const*, unsigned int)+0xd2>
    f6fe:	add.w	r1, fp, #4294967295
    f702:	subs	r2, r6, #1
    f704:	add.w	r5, lr, #4294967295
    f708:	ldrb.w	r0, [r1, #1]!
    f70c:	strb.w	r0, [r2, #1]!
    f710:	cmp	r5, r2
    f712:	bne.n	f708 <SdFile::write(void const*, unsigned int)+0xc0>
    f714:	rsb	r6, r6, lr
    f718:	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    f71a:	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    f71c:	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    f720:	add.w	r1, r4, r5
    f724:	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    f726:	bne.n	f698 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    f728:	ldr	r3, [r7, #24]
    f72a:	cmp	r1, r3
    f72c:	bls.n	f804 <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    f72e:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    f730:	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    f732:	orr.w	r2, r2, #128	; 0x80
    f736:	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    f738:	lsls	r2, r2, #28
    f73a:	bpl.n	f74c <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    f73c:	ldrb	r3, [r7, #6]
    f73e:	cmp	r3, #0
    f740:	beq.n	f658 <SdFile::write(void const*, unsigned int)+0x10>
    f742:	mov	r0, r7
    f744:	bl	f550 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    f748:	cmp	r0, #0
    f74a:	beq.n	f658 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    f74c:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    f74e:	add	sp, #20
    f750:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f754:	ldr	r2, [r7, #8]
    f756:	b.n	f6c0 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    f758:	lsl.w	r2, r2, lr
    f75c:	add	r5, r1
    if (n == 512) {
    f75e:	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    f762:	add	r5, r2
    if (n == 512) {
    f764:	bne.n	f6de <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    f766:	ldr.w	r2, [sl]
    f76a:	cmp	r5, r2
    f76c:	beq.n	f7e2 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    f76e:	ldr	r2, [pc, #176]	; (f820 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    f770:	mov	r1, r5
    f772:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    f774:	ldrb	r2, [r0, #0]
    f776:	cmp	r2, #254	; 0xfe
    f778:	beq.n	f7ec <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    f77a:	mov	r2, fp
    f77c:	bl	fbd4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    f780:	cmp	r0, #0
    f782:	beq.w	f658 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    f786:	add.w	fp, fp, #512	; 0x200
    f78a:	mov.w	r4, #512	; 0x200
    f78e:	b.n	f71a <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    f790:	bl	f008 <SdVolume::cacheFlush()>
    f794:	cmp	r0, #0
    f796:	beq.w	f658 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    f79a:	ldr	r1, [pc, #136]	; (f824 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    f79c:	str.w	r5, [sl]
    f7a0:	ldrb	r2, [r1, #0]
    f7a2:	orr.w	r2, r2, #1
    f7a6:	strb	r2, [r1, #0]
    f7a8:	b.n	f6f4 <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    f7aa:	add	r2, sp, #12
    f7ac:	bl	f168 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    f7b0:	cmp	r0, #0
    f7b2:	beq.w	f65e <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    f7b6:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    f7b8:	movw	r1, #65528	; 0xfff8
    f7bc:	ldr	r3, [pc, #104]	; (f828 <SdFile::write(void const*, unsigned int)+0x1e0>)
    f7be:	ldrb.w	r4, [r0, #32]
    f7c2:	ldr	r2, [sp, #12]
    f7c4:	cmp	r4, #16
    f7c6:	it	ne
    f7c8:	movne	r1, r3
    f7ca:	cmp	r2, r1
    f7cc:	bcc.w	f6be <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    f7d0:	mov	r0, r7
    f7d2:	bl	f5bc <SdFile::addCluster()>
    f7d6:	cmp	r0, #0
    f7d8:	beq.w	f658 <SdFile::write(void const*, unsigned int)+0x10>
    f7dc:	ldr	r0, [r7, #32]
    f7de:	ldr	r2, [r7, #8]
    f7e0:	b.n	f6c0 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    f7e2:	mov.w	r2, #4294967295
    f7e6:	str.w	r2, [sl]
    f7ea:	b.n	f76e <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    f7ec:	mov	r0, fp
    f7ee:	bl	f498 <SDHC_CardWriteBlock(void const*, unsigned long)>
    f7f2:	clz	r0, r0
    f7f6:	lsrs	r0, r0, #5
    f7f8:	b.n	f780 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    f7fa:	ldr	r3, [sp, #4]
    f7fc:	cmp	r3, #0
    f7fe:	bne.w	f68c <SdFile::write(void const*, unsigned int)+0x44>
    f802:	b.n	f738 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    f804:	ldr	r3, [pc, #36]	; (f82c <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    f806:	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    f808:	ldr	r3, [r3, #0]
    f80a:	cmp	r3, #0
    f80c:	beq.n	f738 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    f80e:	orr.w	r2, r2, #128	; 0x80
    f812:	strb	r2, [r7, #5]
    f814:	b.n	f738 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    f816:	ldr	r3, [r7, #24]
    f818:	cmp	r3, r1
    f81a:	bcc.n	f72e <SdFile::write(void const*, unsigned int)+0xe6>
    f81c:	ldrb	r2, [r7, #5]
    f81e:	b.n	f738 <SdFile::write(void const*, unsigned int)+0xf0>
    f820:	.word	0x200259e4
    f824:	.word	0x20025be8
    f828:	.word	0x0ffffff8
    f82c:	.word	0x20025bfc
    f830:	.word	0x200259e8
    f834:	.word	0x2001fd88

0000f838 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    f838:	push	{lr}
    f83a:	sub	sp, #12
  return write(&b, 1);
    f83c:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    f83e:	add	r3, sp, #8
    f840:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    f844:	mov	r1, r3
    f846:	bl	f648 <SdFile::write(void const*, unsigned int)>
}
    f84a:	add	sp, #12
    f84c:	ldr.w	pc, [sp], #4

0000f850 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    f850:	push	{r4, r5, r6, r7, lr}
    f852:	ldr	r6, [pc, #156]	; (f8f0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    f854:	movs	r7, #255	; 0xff
    f856:	ldr	r5, [pc, #156]	; (f8f4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    f858:	ldr.w	lr, [r6]
    f85c:	ldr	r3, [r5, #0]
    f85e:	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    f860:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    f862:	tst.w	r4, #2031616	; 0x1f0000
    f866:	beq.n	f860 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    f868:	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    f86a:	uxtb	r4, r4
    f86c:	cmp	r4, #255	; 0xff
    f86e:	beq.n	f87c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    f870:	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    f872:	rsb	r4, lr, r4
    f876:	cmp.w	r4, #300	; 0x12c
    f87a:	bcc.n	f85e <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    f87c:	orr.w	r4, r1, #64	; 0x40
    f880:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    f882:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    f884:	tst.w	r4, #2031616	; 0x1f0000
    f888:	beq.n	f882 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    f88a:	ldr	r4, [r3, #116]	; 0x74
    f88c:	movs	r6, #24
    f88e:	lsr.w	r4, r2, r6
    f892:	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    f894:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    f896:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    f898:	tst.w	r4, #2031616	; 0x1f0000
    f89c:	beq.n	f896 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    f89e:	subs	r6, #8
    f8a0:	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    f8a2:	cmn.w	r6, #8
    f8a6:	bne.n	f88e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    f8a8:	cbz	r1, f8ea <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    f8aa:	cmp	r1, #8
    f8ac:	ite	eq
    f8ae:	moveq	r2, #135	; 0x87
    f8b0:	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    f8b2:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    f8b4:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    f8b6:	tst.w	r2, #2031616	; 0x1f0000
    f8ba:	beq.n	f8b4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    f8bc:	ldr	r2, [r3, #116]	; 0x74
    f8be:	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    f8c0:	movs	r4, #255	; 0xff
    f8c2:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    f8c4:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    f8c6:	tst.w	r2, #2031616	; 0x1f0000
    f8ca:	beq.n	f8c4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    f8cc:	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    f8ce:	uxtb	r3, r1
    f8d0:	adds	r1, #1
    f8d2:	subs	r3, #255	; 0xff
    f8d4:	uxtb	r2, r2
    f8d6:	it	ne
    f8d8:	movne	r3, #1
    f8da:	strb	r2, [r0, #1]
    f8dc:	ands.w	r3, r3, r2, lsr #7
    f8e0:	beq.n	f8e6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    f8e2:	ldr	r3, [r5, #0]
    f8e4:	b.n	f8c2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    f8e6:	mov	r0, r2
    f8e8:	pop	{r4, r5, r6, r7, pc}
    f8ea:	movs	r2, #149	; 0x95
    f8ec:	b.n	f8b2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    f8ee:	nop
    f8f0:	.word	0x20025ee8
    f8f4:	.word	0x2001fd38

0000f8f8 <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    f8f8:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    f8fa:	movs	r1, #1
    f8fc:	ldrb	r0, [r0, #0]
    f8fe:	bl	10814 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    f902:	ldr	r1, [pc, #76]	; (f950 <Sd2Card::chipSelectHigh()+0x58>)
    f904:	ldrb	r3, [r1, #0]
    f906:	cbz	r3, f944 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    f908:	ldr	r2, [pc, #72]	; (f954 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    f90a:	movs	r0, #0
    f90c:	ldrb	r3, [r2, #19]
    f90e:	strb	r0, [r1, #0]
    f910:	mov	r1, r3
    f912:	cbz	r3, f944 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    f914:	lsls	r0, r3, #31
    f916:	bpl.n	f91e <Sd2Card::chipSelectHigh()+0x26>
    f918:	ldr	r4, [r2, #40]	; 0x28
    f91a:	ldr	r0, [pc, #60]	; (f958 <Sd2Card::chipSelectHigh()+0x60>)
    f91c:	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    f91e:	lsls	r3, r3, #30
    f920:	bpl.n	f92a <Sd2Card::chipSelectHigh()+0x32>
    f922:	ldr	r0, [r2, #44]	; 0x2c
    f924:	ldr	r3, [pc, #52]	; (f95c <Sd2Card::chipSelectHigh()+0x64>)
    f926:	ldrb	r1, [r2, #19]
    f928:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    f92a:	lsls	r4, r1, #29
    f92c:	bpl.n	f936 <Sd2Card::chipSelectHigh()+0x3e>
    f92e:	ldr	r0, [r2, #48]	; 0x30
    f930:	ldr	r3, [pc, #44]	; (f960 <Sd2Card::chipSelectHigh()+0x68>)
    f932:	ldrb	r1, [r2, #19]
    f934:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    f936:	lsls	r0, r1, #28
    f938:	bmi.n	f946 <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    f93a:	lsls	r3, r1, #27
    f93c:	bpl.n	f944 <Sd2Card::chipSelectHigh()+0x4c>
    f93e:	ldr	r2, [r2, #56]	; 0x38
    f940:	ldr	r3, [pc, #32]	; (f964 <Sd2Card::chipSelectHigh()+0x6c>)
    f942:	str	r2, [r3, #0]
    f944:	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    f946:	ldr	r0, [r2, #52]	; 0x34
    f948:	ldr	r3, [pc, #28]	; (f968 <Sd2Card::chipSelectHigh()+0x70>)
    f94a:	ldrb	r1, [r2, #19]
    f94c:	str	r0, [r3, #0]
    f94e:	b.n	f93a <Sd2Card::chipSelectHigh()+0x42>
    f950:	.word	0x20025c08
    f954:	.word	0x2001fd38
    f958:	.word	0xe000e100
    f95c:	.word	0xe000e104
    f960:	.word	0xe000e108
    f964:	.word	0xe000e110
    f968:	.word	0xe000e10c

0000f96c <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    f96c:	ldr	r2, [pc, #256]	; (fa70 <Sd2Card::chipSelectLow()+0x104>)
    f96e:	ldrb	r3, [r2, #0]
    f970:	cbz	r3, f97a <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    f972:	ldrb	r0, [r0, #0]
    f974:	movs	r1, #0
    f976:	b.w	10814 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    f97a:	ldr	r3, [pc, #248]	; (fa74 <Sd2Card::chipSelectLow()+0x108>)
    f97c:	ldr	r1, [pc, #248]	; (fa78 <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    f97e:	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    f980:	movs	r4, #1
    f982:	ldrb	r6, [r3, #19]
    f984:	ldr	r5, [r1, #0]
    f986:	strb	r4, [r2, #0]
    f988:	ldr	r4, [r1, #4]
    f98a:	cmp	r6, #0
    f98c:	beq.n	f9f2 <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
    f98e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    f990:	ldrb	r1, [r3, #19]
    f992:	lsls	r6, r1, #31
    f994:	mov	r2, r1
    f996:	bpl.n	f9aa <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    f998:	ldr.w	lr, [pc, #252]	; fa98 <Sd2Card::chipSelectLow()+0x12c>
    f99c:	ldr	r7, [r3, #20]
    f99e:	ldr.w	r6, [lr]
    f9a2:	ands	r6, r7
    f9a4:	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    f9a6:	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    f9aa:	lsls	r7, r1, #30
    f9ac:	bpl.n	f9bc <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    f9ae:	ldr	r6, [pc, #204]	; (fa7c <Sd2Card::chipSelectLow()+0x110>)
    f9b0:	ldr	r1, [r3, #24]
    f9b2:	ldr	r7, [r6, #0]
    f9b4:	ldrb	r2, [r3, #19]
    f9b6:	ands	r1, r7
    f9b8:	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    f9ba:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    f9bc:	lsls	r6, r2, #29
    f9be:	bpl.n	f9ce <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    f9c0:	ldr	r6, [pc, #188]	; (fa80 <Sd2Card::chipSelectLow()+0x114>)
    f9c2:	ldr	r1, [r3, #28]
    f9c4:	ldr	r7, [r6, #0]
    f9c6:	ldrb	r2, [r3, #19]
    f9c8:	ands	r1, r7
    f9ca:	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    f9cc:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    f9ce:	lsls	r1, r2, #28
    f9d0:	bpl.n	f9e0 <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    f9d2:	ldr	r6, [pc, #176]	; (fa84 <Sd2Card::chipSelectLow()+0x118>)
    f9d4:	ldr	r1, [r3, #32]
    f9d6:	ldr	r7, [r6, #0]
    f9d8:	ldrb	r2, [r3, #19]
    f9da:	ands	r1, r7
    f9dc:	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    f9de:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    f9e0:	lsls	r2, r2, #27
    f9e2:	bpl.n	f9f0 <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    f9e4:	ldr	r1, [pc, #160]	; (fa88 <Sd2Card::chipSelectLow()+0x11c>)
    f9e6:	ldr	r2, [r3, #36]	; 0x24
    f9e8:	ldr	r6, [r1, #0]
    f9ea:	ands	r2, r6
    f9ec:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    f9ee:	str	r2, [r1, #0]
			}
			__enable_irq();
    f9f0:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    f9f2:	ldr	r2, [r3, #8]
    f9f4:	ldr	r1, [pc, #124]	; (fa74 <Sd2Card::chipSelectLow()+0x108>)
    f9f6:	cmp	r2, r5
    f9f8:	beq.n	fa52 <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    f9fa:	ldr	r2, [pc, #144]	; (fa8c <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    f9fc:	ldr	r6, [pc, #144]	; (fa90 <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    f9fe:	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    fa00:	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    fa02:	ubfx	r1, r2, #4, #2
    fa06:	ubfx	r2, r2, #26, #3
    fa0a:	ldr.w	r1, [r6, r1, lsl #2]
    fa0e:	adds	r2, #1
    fa10:	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    fa14:	cbz	r5, fa4e <Sd2Card::chipSelectLow()+0xe2>
    fa16:	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
    fa1a:	cbz	r2, fa2e <Sd2Card::chipSelectLow()+0xc2>
    fa1c:	udiv	r1, r1, r2
    fa20:	cmp	r1, r5
    fa22:	it	hi
    fa24:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    fa26:	cmp.w	r2, #258	; 0x102
    fa2a:	bcc.n	fa56 <Sd2Card::chipSelectLow()+0xea>
    fa2c:	ldr	r2, [pc, #100]	; (fa94 <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    fa2e:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    fa30:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    fa32:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    fa34:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    fa36:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    fa38:	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    fa3a:	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
    fa3c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    fa3e:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    fa40:	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    fa42:	movs	r1, #0
    fa44:	ldrb	r0, [r0, #0]
}
    fa46:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    fa4a:	b.w	10814 <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    fa4e:	mov	r2, r1
    fa50:	b.n	fa1a <Sd2Card::chipSelectLow()+0xae>
    fa52:	ldr	r2, [r1, #12]
    fa54:	b.n	fa30 <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    fa56:	cmp	r2, #2
    fa58:	it	ls
    fa5a:	movls	r2, #0
    fa5c:	bls.n	fa2e <Sd2Card::chipSelectLow()+0xc2>
    fa5e:	subs	r2, #2
    fa60:	lsrs	r5, r2, #1
    fa62:	lsls	r1, r5, #16
    fa64:	orr.w	r2, r2, r5, lsl #8
    fa68:	and.w	r1, r1, #16711680	; 0xff0000
    fa6c:	orrs	r2, r1
    fa6e:	b.n	fa2e <Sd2Card::chipSelectLow()+0xc2>
    fa70:	.word	0x20025c08
    fa74:	.word	0x2001fd38
    fa78:	.word	0x20025c00
    fa7c:	.word	0xe000e184
    fa80:	.word	0xe000e188
    fa84:	.word	0xe000e18c
    fa88:	.word	0xe000e190
    fa8c:	.word	0x400fc000
    fa90:	.word	0x2001f5b8
    fa94:	.word	0x007f7fff
    fa98:	.word	0xe000e180

0000fa9c <Sd2Card::waitStartBlock()>:
    fa9c:	ldr	r1, [pc, #60]	; (fadc <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    fa9e:	push	{r4, r5, r6}
    faa0:	ldr	r5, [pc, #60]	; (fae0 <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    faa2:	movs	r4, #255	; 0xff
    faa4:	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    faa6:	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    faa8:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    faaa:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    faac:	tst.w	r3, #2031616	; 0x1f0000
    fab0:	beq.n	faaa <Sd2Card::waitStartBlock()+0xe>
    fab2:	ldr	r3, [r2, #116]	; 0x74
    fab4:	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    fab6:	cmp	r3, #255	; 0xff
    fab8:	strb	r3, [r0, #1]
    faba:	bne.n	facc <Sd2Card::waitStartBlock()+0x30>
    fabc:	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    fabe:	subs	r3, r3, r6
    fac0:	cmp.w	r3, #300	; 0x12c
    fac4:	bls.n	faa6 <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    fac6:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    fac8:	pop	{r4, r5, r6}
    faca:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    facc:	sub.w	r0, r3, #254	; 0xfe
    fad0:	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    fad4:	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    fad6:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    fad8:	bx	lr
    fada:	nop
    fadc:	.word	0x20025ee8
    fae0:	.word	0x2001fd38

0000fae4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    fae4:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    fae6:	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    fae8:	mov	r5, r1
    faea:	mov	r4, r0
    faec:	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    faee:	cmp	r3, #3
    faf0:	it	ne
    faf2:	lslne	r5, r1, #9
  chipSelectLow();
    faf4:	bl	f96c <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    faf8:	movs	r1, #17
    fafa:	mov	r2, r5
    fafc:	mov	r0, r4
    fafe:	bl	f850 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    fb02:	cbnz	r0, fb0c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    fb04:	mov	r0, r4
    fb06:	bl	fa9c <Sd2Card::waitStartBlock()>
    fb0a:	cbnz	r0, fb16 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    fb0c:	mov	r0, r4
    fb0e:	bl	f8f8 <Sd2Card::chipSelectHigh()>
  return false;
    fb12:	movs	r0, #0
}
    fb14:	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    fb16:	ldr	r5, [pc, #68]	; (fb5c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
    fb18:	mov.w	r2, #512	; 0x200
    fb1c:	movs	r1, #255	; 0xff
    fb1e:	mov	r0, r6
    fb20:	bl	128fc <memset>
    fb24:	mov.w	r3, #512	; 0x200
    fb28:	mov	r2, r6
    fb2a:	mov	r0, r5
    fb2c:	mov	r1, r6
    fb2e:	bl	efd8 <SPIClass::transfer(void const*, void*, unsigned int)>
    fb32:	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fb34:	movs	r2, #255	; 0xff
    fb36:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    fb38:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    fb3a:	tst.w	r2, #2031616	; 0x1f0000
    fb3e:	beq.n	fb38 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fb40:	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    fb42:	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fb44:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    fb46:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    fb48:	tst.w	r2, #2031616	; 0x1f0000
    fb4c:	beq.n	fb46 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    fb4e:	mov	r0, r4
    fb50:	ldr	r3, [r3, #116]	; 0x74
    fb52:	bl	f8f8 <Sd2Card::chipSelectHigh()>
  return true;
    fb56:	movs	r0, #1
    fb58:	pop	{r4, r5, r6, pc}
    fb5a:	nop
    fb5c:	.word	0x2001fd38

0000fb60 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    fb60:	ldr	r3, [pc, #108]	; (fbd0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
    fb62:	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    fb64:	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fb66:	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    fb68:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    fb6a:	tst.w	r3, #2031616	; 0x1f0000
    fb6e:	beq.n	fb68 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
    fb70:	subs	r1, r2, #1
    fb72:	ldr	r3, [r4, #116]	; 0x74
    fb74:	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fb78:	ldrb.w	r3, [r1, #1]!
    fb7c:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    fb7e:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    fb80:	tst.w	r3, #2031616	; 0x1f0000
    fb84:	beq.n	fb7e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    fb86:	cmp	r1, r2
    fb88:	ldr	r3, [r4, #116]	; 0x74
    fb8a:	bne.n	fb78 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fb8c:	movs	r3, #255	; 0xff
    fb8e:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    fb90:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    fb92:	tst.w	r3, #2031616	; 0x1f0000
    fb96:	beq.n	fb90 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fb98:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    fb9a:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fb9c:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    fb9e:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    fba0:	tst.w	r3, #2031616	; 0x1f0000
    fba4:	beq.n	fb9e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fba6:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    fba8:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fbaa:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    fbac:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    fbae:	tst.w	r3, #2031616	; 0x1f0000
    fbb2:	beq.n	fbac <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
    fbb4:	ldr	r3, [r4, #116]	; 0x74
    fbb6:	uxtb	r3, r3
    fbb8:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    fbbc:	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    fbbe:	ldr.w	r4, [sp], #4
    fbc2:	sub.w	r0, r2, #5
    fbc6:	clz	r0, r0
    fbca:	lsrs	r0, r0, #5
    fbcc:	bx	lr
    fbce:	nop
    fbd0:	.word	0x2001fd38

0000fbd4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    fbd4:	push	{r3, r4, r5, r6, r7, lr}
    fbd6:	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    fbd8:	cbz	r1, fbf6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    fbda:	ldrb	r3, [r0, #2]
    fbdc:	mov	r4, r1
    fbde:	mov	r6, r2
    fbe0:	cmp	r3, #3
    fbe2:	it	ne
    fbe4:	lslne	r4, r1, #9
  chipSelectLow();
    fbe6:	bl	f96c <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    fbea:	movs	r1, #24
    fbec:	mov	r2, r4
    fbee:	mov	r0, r5
    fbf0:	bl	f850 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    fbf4:	cbz	r0, fc00 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    fbf6:	mov	r0, r5
    fbf8:	bl	f8f8 <Sd2Card::chipSelectHigh()>
  return false;
    fbfc:	movs	r0, #0
}
    fbfe:	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    fc00:	mov	r2, r6
    fc02:	movs	r1, #254	; 0xfe
    fc04:	mov	r0, r5
    fc06:	bl	fb60 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    fc0a:	cmp	r0, #0
    fc0c:	beq.n	fbf6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    fc0e:	ldr	r1, [pc, #84]	; (fc64 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fc10:	movs	r0, #255	; 0xff
    fc12:	ldr	r6, [pc, #84]	; (fc68 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
    fc14:	ldr	r7, [r1, #0]
    fc16:	ldr	r2, [r6, #0]
    fc18:	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    fc1a:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    fc1c:	tst.w	r3, #2031616	; 0x1f0000
    fc20:	beq.n	fc1a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
    fc22:	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    fc24:	uxtb	r4, r4
    fc26:	cmp	r4, #255	; 0xff
    fc28:	beq.n	fc36 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
    fc2a:	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    fc2c:	subs	r3, r3, r7
    fc2e:	cmp.w	r3, #600	; 0x258
    fc32:	bcc.n	fc18 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
    fc34:	b.n	fbf6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    fc36:	movs	r2, #0
    fc38:	movs	r1, #13
    fc3a:	mov	r0, r5
    fc3c:	bl	f850 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    fc40:	cmp	r0, #0
    fc42:	bne.n	fbf6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    fc44:	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    fc46:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    fc48:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    fc4a:	tst.w	r3, #2031616	; 0x1f0000
    fc4e:	beq.n	fc48 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
    fc50:	ldr	r3, [r2, #116]	; 0x74
    fc52:	tst.w	r3, #255	; 0xff
    fc56:	bne.n	fbf6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    fc58:	mov	r0, r5
    fc5a:	bl	f8f8 <Sd2Card::chipSelectHigh()>
  return true;
    fc5e:	movs	r0, #1
    fc60:	pop	{r3, r4, r5, r6, r7, pc}
    fc62:	nop
    fc64:	.word	0x20025ee8
    fc68:	.word	0x2001fd38

0000fc6c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    fc6c:	ldr	r3, [pc, #8]	; (fc78 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    fc6e:	movs	r2, #7
    fc70:	ldr	r1, [pc, #8]	; (fc7c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    fc72:	stmia.w	r3, {r1, r2}
    fc76:	bx	lr
    fc78:	.word	0x20025c00
    fc7c:	.word	0x003d0900

0000fc80 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    fc80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    fc84:	add.w	lr, r0, #256	; 0x100

0000fc88 <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    fc88:	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    fc8c:	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    fc90:	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    fc94:	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    fc98:	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    fc9c:	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    fca0:	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    fca4:	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    fca8:	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    fcac:	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    fcb0:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    fcb4:	cmp	lr, r0
	bne .loopLR
    fcb6:	bne.n	fc88 <.loopLR>

	pop	{r4-r11,r14}	
    fcb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
    fcbc:	bx	lr

0000fcbe <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    fcbe:	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    fcc2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    fcc6:	add.w	ip, r0, #256	; 0x100
    fcca:	nop

0000fccc <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    fccc:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    fcd0:	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    fcd4:	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    fcd8:	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    fcdc:	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    fce0:	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    fce4:	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    fce8:	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    fcec:	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    fcf0:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    fcf4:	cmp	ip, r0
	bne .loopL
    fcf6:	bne.n	fccc <.loopL>

	pop	{r4-r11}
    fcf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    fcfc:	bx	lr

0000fcfe <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    fcfe:	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    fd02:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    fd06:	add.w	ip, r0, #256	; 0x100
    fd0a:	nop

0000fd0c <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    fd0c:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    fd10:	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    fd14:	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    fd18:	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    fd1c:	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    fd20:	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    fd24:	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    fd28:	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    fd2c:	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    fd30:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    fd34:	cmp	ip, r0
	bne .loopR
    fd36:	bne.n	fd0c <.loopR>

	pop	{r4-r11}
    fd38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    fd3c:	bx	lr

0000fd3e <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    fd3e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    fd42:	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    fd44:	add.w	fp, r0, #512	; 0x200

0000fd48 <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    fd48:	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    fd4c:	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    fd50:	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    fd54:	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    fd58:	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    fd5c:	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    fd60:	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    fd64:	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    fd68:	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    fd6c:	cmp	fp, r0
	bne .loopQuad
    fd6e:	bne.n	fd48 <.loopQuad>

	pop	{r4-r11}
    fd70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    fd74:	bx	lr
    fd76:	nop

0000fd78 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    fd78:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    fd7a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    fd7e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    fd82:	bne.n	fe60 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    fd84:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    fd86:	bcc.n	fe0c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    fd88:	ldr.w	r3, [r1], #4
    fd8c:	str.w	r3, [r0], #4
    fd90:	ldr.w	r3, [r1], #4
    fd94:	str.w	r3, [r0], #4
    fd98:	ldr.w	r3, [r1], #4
    fd9c:	str.w	r3, [r0], #4
    fda0:	ldr.w	r3, [r1], #4
    fda4:	str.w	r3, [r0], #4
    fda8:	ldr.w	r3, [r1], #4
    fdac:	str.w	r3, [r0], #4
    fdb0:	ldr.w	r3, [r1], #4
    fdb4:	str.w	r3, [r0], #4
    fdb8:	ldr.w	r3, [r1], #4
    fdbc:	str.w	r3, [r0], #4
    fdc0:	ldr.w	r3, [r1], #4
    fdc4:	str.w	r3, [r0], #4
    fdc8:	ldr.w	r3, [r1], #4
    fdcc:	str.w	r3, [r0], #4
    fdd0:	ldr.w	r3, [r1], #4
    fdd4:	str.w	r3, [r0], #4
    fdd8:	ldr.w	r3, [r1], #4
    fddc:	str.w	r3, [r0], #4
    fde0:	ldr.w	r3, [r1], #4
    fde4:	str.w	r3, [r0], #4
    fde8:	ldr.w	r3, [r1], #4
    fdec:	str.w	r3, [r0], #4
    fdf0:	ldr.w	r3, [r1], #4
    fdf4:	str.w	r3, [r0], #4
    fdf8:	ldr.w	r3, [r1], #4
    fdfc:	str.w	r3, [r0], #4
    fe00:	ldr.w	r3, [r1], #4
    fe04:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    fe08:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    fe0a:	bcs.n	fd88 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    fe0c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    fe0e:	bcc.n	fe34 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    fe10:	ldr.w	r3, [r1], #4
    fe14:	str.w	r3, [r0], #4
    fe18:	ldr.w	r3, [r1], #4
    fe1c:	str.w	r3, [r0], #4
    fe20:	ldr.w	r3, [r1], #4
    fe24:	str.w	r3, [r0], #4
    fe28:	ldr.w	r3, [r1], #4
    fe2c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    fe30:	subs	r2, #16
	bhs	.Lmid_block_loop
    fe32:	bcs.n	fe10 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    fe34:	adds	r2, #12
	blo	.Lcopy_less_than_4
    fe36:	bcc.n	fe44 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    fe38:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    fe3c:	str.w	r3, [r0], #4
	subs	r2, #4
    fe40:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    fe42:	bcs.n	fe38 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    fe44:	adds	r2, #4
	beq	.Ldone
    fe46:	beq.n	fe5a <memcpy+0xe2>

	lsls	r2, r2, #31
    fe48:	lsls	r2, r2, #31
	itt ne
    fe4a:	itt	ne
	ldrbne  r3, [r1], #1
    fe4c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    fe50:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    fe54:	bcc.n	fe5a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    fe56:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    fe58:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    fe5a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    fe5c:	bx	lr
    fe5e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    fe60:	cmp	r2, #8
	blo	.Lbyte_copy
    fe62:	bcc.n	fe8c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    fe64:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    fe66:	beq.n	fd84 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    fe68:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    fe6c:	beq.n	fd84 <memcpy+0xc>

	rsb	r3, #4
    fe6e:	rsb	r3, r3, #4
	subs	r2, r3
    fe72:	subs	r2, r2, r3

	lsls    r3, r3, #31
    fe74:	lsls	r3, r3, #31
	itt ne
    fe76:	itt	ne
	ldrbne  r3, [r1], #1
    fe78:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    fe7c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    fe80:	bcc.n	fd84 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    fe82:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    fe86:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    fe8a:	b.n	fd84 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    fe8c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    fe8e:	bcc.n	fe44 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    fe90:	subs	r2, #1
	ldrb    r3, [r1], #1
    fe92:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    fe96:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    fe9a:	bcs.n	fe90 <memcpy+0x118>

	ldrb	r3, [r1]
    fe9c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    fe9e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    fea0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    fea2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    fea4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    fea6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    fea8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    feaa:	bx	lr

0000feac <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    feac:	ldr	r2, [pc, #600]	; (10108 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    feae:	ldr	r3, [pc, #604]	; (1010c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    feb0:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    feb2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    feb6:	ldr	r4, [pc, #600]	; (10110 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    feb8:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    febc:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    febe:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    fec0:	bls.n	fefc <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    fec2:	ldr	r3, [pc, #592]	; (10114 <set_arm_clock+0x268>)
    fec4:	cmp	r0, r3
    fec6:	bls.w	100f4 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    feca:	ldr	r3, [pc, #588]	; (10118 <set_arm_clock+0x26c>)
    fecc:	movw	r5, #1575	; 0x627
    fed0:	ldr	r7, [pc, #584]	; (1011c <set_arm_clock+0x270>)
    fed2:	add	r3, r0
    fed4:	ldr	r4, [pc, #584]	; (10120 <set_arm_clock+0x274>)
    fed6:	lsrs	r2, r3, #8
    fed8:	umull	r3, r2, r7, r2
    fedc:	lsrs	r3, r2, #7
    fede:	add.w	r3, r3, r3, lsl #2
    fee2:	add.w	r2, r3, r3, lsl #2
    fee6:	addw	r3, r2, #1250	; 0x4e2
    feea:	cmp	r3, r5
    feec:	it	cs
    feee:	movcs	r3, r5
    fef0:	sub.w	r3, r3, #800	; 0x320
    fef4:	umull	r3, r5, r4, r3
    fef8:	lsrs	r5, r5, #3
    fefa:	b.n	ff06 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    fefc:	ldr	r5, [pc, #548]	; (10124 <set_arm_clock+0x278>)
    fefe:	cmp	r0, r5
    ff00:	ite	ls
    ff02:	movls	r5, #6
    ff04:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ff06:	ldr	r2, [pc, #516]	; (1010c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ff08:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ff0c:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ff10:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ff12:	orr.w	r3, r3, #192	; 0xc0
    ff16:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ff1a:	bcs.n	ff32 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ff1c:	ldr	r3, [pc, #496]	; (10110 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ff1e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ff22:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ff24:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    ff26:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ff28:	ldr	r3, [r2, #0]
    ff2a:	cmp	r3, #0
    ff2c:	bge.n	ff28 <set_arm_clock+0x7c>
    ff2e:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    ff32:	ands.w	r3, lr, #33554432	; 0x2000000
    ff36:	bne.n	ff9c <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    ff38:	ldr	r4, [pc, #492]	; (10128 <set_arm_clock+0x27c>)
    ff3a:	ldr	r2, [pc, #496]	; (1012c <set_arm_clock+0x280>)
    ff3c:	ldr.w	ip, [r4, #16]
    ff40:	mov	r4, r2
    ff42:	and.w	r2, ip, r2
    ff46:	cmp	r2, r4
    ff48:	itet	eq
    ff4a:	moveq.w	r3, #402653184	; 0x18000000
    ff4e:	movne.w	r2, #4096	; 0x1000
    ff52:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    ff54:	eor.w	r4, lr, r3
    ff58:	tst.w	r4, #939524096	; 0x38000000
    ff5c:	beq.n	ff70 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    ff5e:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    ff62:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    ff66:	ldr	r4, [pc, #420]	; (1010c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    ff68:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    ff6c:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    ff70:	eor.w	r3, r1, r2
    ff74:	tst.w	r3, #12288	; 0x3000
    ff78:	beq.n	ff8c <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    ff7a:	ldr	r3, [pc, #400]	; (1010c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    ff7c:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    ff80:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    ff82:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    ff84:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    ff86:	ldr	r3, [r2, #72]	; 0x48
    ff88:	lsls	r4, r3, #28
    ff8a:	bmi.n	ff86 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    ff8c:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    ff90:	ldr	r2, [pc, #376]	; (1010c <set_arm_clock+0x260>)
    ff92:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ff96:	ldr	r3, [r2, #72]	; 0x48
    ff98:	lsls	r1, r3, #26
    ff9a:	bmi.n	ff96 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    ff9c:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ff9e:	ldr	r4, [pc, #400]	; (10130 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    ffa0:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    ffa2:	mul.w	r3, r1, r2
    ffa6:	mul.w	r3, r0, r3
    ffaa:	cmp	r3, r4
    ffac:	bhi.n	ffc2 <set_arm_clock+0x116>
		if (div_arm < 8) {
    ffae:	cmp	r2, #7
    ffb0:	bhi.w	100de <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    ffb4:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    ffb6:	mul.w	r3, r1, r2
    ffba:	mul.w	r3, r0, r3
    ffbe:	cmp	r3, r4
    ffc0:	bls.n	ffae <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ffc2:	ldr	r0, [pc, #368]	; (10134 <set_arm_clock+0x288>)
    ffc4:	ldr	r4, [pc, #368]	; (10138 <set_arm_clock+0x28c>)
    ffc6:	add	r0, r3
    ffc8:	umull	r0, r3, r4, r0
    ffcc:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    ffce:	cmp	r3, #108	; 0x6c
    ffd0:	bhi.w	100ea <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    ffd4:	cmp	r3, #53	; 0x35
    ffd6:	bhi.w	100f8 <set_arm_clock+0x24c>
    ffda:	ldr.w	r8, [pc, #392]	; 10164 <set_arm_clock+0x2b8>
    ffde:	movs	r3, #54	; 0x36
    ffe0:	ldr	r0, [pc, #344]	; (1013c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ffe2:	ldr.w	ip, [pc, #324]	; 10128 <set_arm_clock+0x27c>
    ffe6:	ldr	r4, [pc, #344]	; (10140 <set_arm_clock+0x294>)
    ffe8:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    ffec:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    fff0:	and.w	r4, r9, r4
    fff4:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    fff6:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    fffa:	beq.n	10014 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    fffc:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   10000:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   10004:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   10006:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   1000a:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   1000e:	ldr	r3, [r4, #0]
   10010:	cmp	r3, #0
   10012:	bge.n	1000e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   10014:	ldr.w	ip, [pc, #244]	; 1010c <set_arm_clock+0x260>
   10018:	subs	r2, #1
   1001a:	ldr.w	r3, [ip, #16]
   1001e:	and.w	r3, r3, #7
   10022:	cmp	r3, r2
   10024:	beq.n	10036 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   10026:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   1002a:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   1002c:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   10030:	ldr	r3, [r4, #72]	; 0x48
   10032:	lsls	r3, r3, #15
   10034:	bmi.n	10030 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   10036:	subs	r1, #1
   10038:	lsls	r1, r1, #10
   1003a:	eor.w	r3, lr, r1
   1003e:	tst.w	r3, #7168	; 0x1c00
   10042:	beq.n	1005e <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
   10044:	ldr	r3, [pc, #196]	; (1010c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   10046:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   1004a:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   1004e:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   10050:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
   10054:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   10058:	ldr	r3, [r2, #72]	; 0x48
   1005a:	lsls	r1, r3, #30
   1005c:	bmi.n	10058 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   1005e:	ldr	r3, [pc, #228]	; (10144 <set_arm_clock+0x298>)
   10060:	ldr	r1, [pc, #228]	; (10148 <set_arm_clock+0x29c>)
   10062:	add	r3, r0
   10064:	lsrs	r3, r3, #7
   10066:	umull	r3, r1, r1, r3
   1006a:	lsrs	r1, r1, #12
   1006c:	cmp	r1, #4
   1006e:	it	cs
   10070:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   10072:	subs	r3, r1, #1
   10074:	lsls	r3, r3, #8
   10076:	eor.w	r2, lr, r3
   1007a:	tst.w	r2, #768	; 0x300
   1007e:	beq.n	10090 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   10080:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   10084:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
   10088:	ldr	r2, [pc, #128]	; (1010c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   1008a:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
   1008e:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   10090:	ldr	r3, [pc, #120]	; (1010c <set_arm_clock+0x260>)
   10092:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   10094:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   10096:	bic.w	r4, r4, #33554432	; 0x2000000
   1009a:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   1009c:	ldr	r3, [r2, #72]	; 0x48
   1009e:	lsls	r3, r3, #26
   100a0:	bmi.n	1009c <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   100a2:	ldr	r3, [pc, #168]	; (1014c <set_arm_clock+0x2a0>)
   100a4:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
   100a8:	ldr	r4, [pc, #164]	; (10150 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   100aa:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   100ac:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
   100b0:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   100b2:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
   100b6:	ldr	r4, [pc, #156]	; (10154 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   100b8:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
   100bc:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   100c0:	ldr	r2, [pc, #148]	; (10158 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
   100c2:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   100c4:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   100c6:	bcs.n	100da <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   100c8:	ldr	r3, [pc, #68]	; (10110 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   100ca:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   100ce:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   100d0:	orrs	r6, r5
		DCDC_REG3 = dcdc;
   100d2:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   100d4:	ldr	r3, [r2, #0]
   100d6:	cmp	r3, #0
   100d8:	bge.n	100d4 <set_arm_clock+0x228>
	}

	return frequency;
}
   100da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
   100de:	cmp	r1, #4
   100e0:	bhi.w	ffc2 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
   100e4:	adds	r1, #1
				div_arm = 1;
   100e6:	movs	r2, #1
   100e8:	b.n	ffa2 <set_arm_clock+0xf6>
   100ea:	ldr.w	r8, [pc, #124]	; 10168 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
   100ee:	movs	r3, #108	; 0x6c
   100f0:	ldr	r0, [pc, #104]	; (1015c <set_arm_clock+0x2b0>)
   100f2:	b.n	ffe2 <set_arm_clock+0x136>
   100f4:	movs	r5, #18
   100f6:	b.n	ff06 <set_arm_clock+0x5a>
   100f8:	ldr	r0, [pc, #100]	; (10160 <set_arm_clock+0x2b4>)
   100fa:	ldr.w	r8, [pc, #112]	; 1016c <set_arm_clock+0x2c0>
   100fe:	mul.w	r0, r0, r3
   10102:	orr.w	r8, r3, r8
   10106:	b.n	ffe2 <set_arm_clock+0x136>
   10108:	.word	0x1f78a400
   1010c:	.word	0x400fc000
   10110:	.word	0x40080000
   10114:	.word	0x23c34600
   10118:	.word	0xdc3cba00
   1011c:	.word	0x004cb223
   10120:	.word	0x51eb851f
   10124:	.word	0x016e3600
   10128:	.word	0x400d8000
   1012c:	.word	0x80003040
   10130:	.word	0x269fb1ff
   10134:	.word	0x005b8d80
   10138:	.word	0x165e9f81
   1013c:	.word	0x269fb200
   10140:	.word	0x8001307f
   10144:	.word	0x08f0d17f
   10148:	.word	0x00e5109f
   1014c:	.word	0x431bde83
   10150:	.word	0x2001fd90
   10154:	.word	0x2001fd8c
   10158:	.word	0x20025ee4
   1015c:	.word	0x4d3f6400
   10160:	.word	0x00b71b00
   10164:	.word	0x80002036
   10168:	.word	0x8000206c
   1016c:	.word	0x80002000

00010170 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   10170:	push	{r4, r5, r6, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
   10172:	lsls	r1, r0, #5
   10174:	ldr	r4, [pc, #72]	; (101c0 <rx_queue_transfer+0x50>)
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   10176:	ldr	r5, [pc, #76]	; (101c4 <rx_queue_transfer+0x54>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   10178:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
   1017a:	add	r4, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1017c:	mov.w	r6, #131072	; 0x20000
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   10180:	add	r5, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   10182:	ldr	r0, [pc, #68]	; (101c8 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   10184:	mov	r1, r4
   10186:	movs	r2, #32
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   10188:	str	r6, [r0, #0]
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   1018a:	mov	r0, r5
   1018c:	bl	121e0 <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   10190:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   10194:	add.w	r1, r4, #32
	asm volatile("": : :"memory");
	asm("dsb");
   10198:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
   1019c:	ldr	r2, [pc, #44]	; (101cc <rx_queue_transfer+0x5c>)
   1019e:	str	r3, [r2, #0]
		location += 32;
   101a0:	adds	r3, #32
	} while (location < end_addr);
   101a2:	cmp	r1, r3
   101a4:	bhi.n	1019e <rx_queue_transfer+0x2e>
	asm("dsb");
   101a6:	dsb	sy
	asm("isb");
   101aa:	isb	sy
	arm_dcache_delete(buffer, SEREMU_RX_SIZE);
	usb_receive(SEREMU_RX_ENDPOINT, rx_transfer + i);
   101ae:	movs	r0, #2
   101b0:	mov	r1, r5
   101b2:	bl	12238 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   101b6:	ldr	r3, [pc, #24]	; (101d0 <rx_queue_transfer+0x60>)
   101b8:	mov.w	r2, #131072	; 0x20000
   101bc:	str	r2, [r3, #0]
   101be:	pop	{r4, r5, r6, pc}
   101c0:	.word	0x20200720
   101c4:	.word	0x20025c20
   101c8:	.word	0xe000e18c
   101cc:	.word	0xe000ef5c
   101d0:	.word	0xe000e10c

000101d4 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
   101d4:	ldr	r3, [r0, #4]
	int i = t->callback_param;
   101d6:	ldr	r0, [r0, #28]
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
   101d8:	ubfx	r3, r3, #16, #15
   101dc:	cbz	r3, 101e2 <rx_event+0xe>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
   101de:	b.w	10170 <rx_queue_transfer>
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
   101e2:	ldr	r1, [pc, #52]	; (10218 <rx_event+0x44>)
   101e4:	lsls	r2, r0, #5
   101e6:	ldrb	r2, [r1, r2]
   101e8:	cmp	r2, #0
   101ea:	beq.n	101de <rx_event+0xa>
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
   101ec:	ldr	r1, [pc, #44]	; (1021c <rx_event+0x48>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
   101ee:	push	{r4}
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
   101f0:	ldr	r4, [pc, #44]	; (10220 <rx_event+0x4c>)
		rx_index[i] = 0;
   101f2:	strh.w	r3, [r1, r0, lsl #1]
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
   101f6:	ldrb	r2, [r4, #0]
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
   101f8:	ldr	r1, [pc, #40]	; (10224 <rx_event+0x50>)
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   101fa:	adds	r2, #1
   101fc:	cmp	r2, #8
   101fe:	ite	ls
   10200:	uxtbls	r3, r2
   10202:	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
   10204:	strb	r3, [r4, #0]
		rx_available += len;
   10206:	ldr	r3, [r1, #0]
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   10208:	ldr	r4, [pc, #28]	; (10228 <rx_event+0x54>)
		rx_head = head;
		rx_available += len;
   1020a:	adds	r3, #32
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   1020c:	strb	r0, [r4, r2]
		rx_head = head;
		rx_available += len;
   1020e:	str	r3, [r1, #0]
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
	}
}
   10210:	ldr.w	r4, [sp], #4
   10214:	bx	lr
   10216:	nop
   10218:	.word	0x20200720
   1021c:	.word	0x20025d20
   10220:	.word	0x20025d40
   10224:	.word	0x20025d3c
   10228:	.word	0x20025d30

0001022c <usb_seremu_configure>:


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
   1022c:	movs	r1, #0
   1022e:	mov.w	r2, #384	; 0x180
   10232:	ldr	r0, [pc, #124]	; (102b0 <usb_seremu_configure+0x84>)
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_seremu_configure(void)
{
   10234:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
   10236:	mov	r5, r1
   10238:	ldr	r4, [pc, #120]	; (102b4 <usb_seremu_configure+0x88>)


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
   1023a:	bl	128fc <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   1023e:	ldr	r6, [pc, #120]	; (102b8 <usb_seremu_configure+0x8c>)
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
   10240:	ldr	r3, [pc, #120]	; (102bc <usb_seremu_configure+0x90>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   10242:	mov	r1, r5
   10244:	mov.w	r2, #256	; 0x100
   10248:	ldr	r0, [pc, #116]	; (102c0 <usb_seremu_configure+0x94>)

void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
   1024a:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   1024c:	mov	r4, r5
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
   1024e:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   10250:	bl	128fc <memset>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   10254:	strb	r5, [r6, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   10256:	mov	r2, r5
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
   10258:	ldr	r6, [pc, #104]	; (102c4 <usb_seremu_configure+0x98>)
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   1025a:	movs	r1, #32
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
   1025c:	ldr	r3, [pc, #104]	; (102c8 <usb_seremu_configure+0x9c>)
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   1025e:	movs	r0, #2
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   10260:	ldr	r7, [pc, #104]	; (102cc <usb_seremu_configure+0xa0>)
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
   10262:	strb	r5, [r3, #0]
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
   10264:	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   10266:	ldr	r3, [pc, #104]	; (102d0 <usb_seremu_configure+0xa4>)
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
   10268:	str	r5, [r6, #4]
   1026a:	str	r5, [r6, #8]
   1026c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   1026e:	str	r5, [r7, #0]
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   10270:	bl	12114 <usb_config_rx>
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
   10274:	mov	r3, r5
   10276:	mov	r2, r5
   10278:	movs	r1, #64	; 0x40
   1027a:	movs	r0, #2
   1027c:	bl	12178 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   10280:	mov	r0, r4
   10282:	adds	r4, #1
   10284:	bl	10170 <rx_queue_transfer>
   10288:	cmp	r4, #8
   1028a:	bne.n	10280 <usb_seremu_configure+0x54>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
   1028c:	ldr	r3, [pc, #68]	; (102d4 <usb_seremu_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
   1028e:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
   10290:	ldr	r0, [pc, #68]	; (102d8 <usb_seremu_configure+0xac>)
	USB1_GPTIMER0CTRL = 0;
   10292:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
   10294:	ldr	r4, [pc, #68]	; (102dc <usb_seremu_configure+0xb0>)
   10296:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
   10298:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   1029c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   102a0:	ldr.w	r2, [r3, #328]	; 0x148
   102a4:	orr.w	r2, r2, #16777216	; 0x1000000
   102a8:	str.w	r2, [r3, #328]	; 0x148
   102ac:	pop	{r3, r4, r5, r6, r7, pc}
   102ae:	nop
   102b0:	.word	0x20025d60
   102b4:	.word	0x20025c0b
   102b8:	.word	0x20025d40
   102bc:	.word	0x20025d3a
   102c0:	.word	0x20025c20
   102c4:	.word	0x20025d20
   102c8:	.word	0x20025c09
   102cc:	.word	0x20025d3c
   102d0:	.word	0x000101d5
   102d4:	.word	0x402e0000
   102d8:	.word	0x200261ac
   102dc:	.word	0x0001043d

000102e0 <usb_seremu_getchar>:
	}
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
   102e0:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
   102e2:	ldr	r5, [pc, #80]	; (10334 <usb_seremu_getchar+0x54>)

	if (tail == rx_head) return -1;
   102e4:	ldr	r2, [pc, #80]	; (10338 <usb_seremu_getchar+0x58>)
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
   102e6:	ldrb	r3, [r5, #0]

	if (tail == rx_head) return -1;
   102e8:	ldrb	r2, [r2, #0]
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
   102ea:	uxtb	r3, r3

	if (tail == rx_head) return -1;
   102ec:	cmp	r3, r2
   102ee:	beq.n	1032c <usb_seremu_getchar+0x4c>
	if (++tail > RX_NUM) tail = 0;
   102f0:	adds	r3, #1
	uint32_t i = rx_list[tail];
   102f2:	ldr	r2, [pc, #72]	; (1033c <usb_seremu_getchar+0x5c>)
	uint32_t index = rx_index[i];
   102f4:	ldr	r6, [pc, #72]	; (10340 <usb_seremu_getchar+0x60>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   102f6:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
   102f8:	ldr	r4, [pc, #72]	; (10344 <usb_seremu_getchar+0x64>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   102fa:	it	cs
   102fc:	movcs	r3, #0
	uint32_t i = rx_list[tail];
   102fe:	ldrb	r0, [r2, r3]
	uint32_t index = rx_index[i];
   10300:	ldrh.w	r2, [r6, r0, lsl #1]
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
   10304:	add.w	r1, r2, r0, lsl #5
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
   10308:	adds	r2, #1
   1030a:	cmp	r2, #31

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
   1030c:	add.w	r7, r4, r1
	int c = *p;
   10310:	ldrb	r4, [r4, r1]
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
   10312:	bhi.n	10320 <usb_seremu_getchar+0x40>
   10314:	ldrb	r1, [r7, #1]
   10316:	cbz	r1, 10320 <usb_seremu_getchar+0x40>
		rx_tail = tail;
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
   10318:	strh.w	r2, [r6, r0, lsl #1]
	}
	return c;
   1031c:	mov	r0, r4
   1031e:	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
   10320:	uxtb	r3, r3
   10322:	strb	r3, [r5, #0]
		rx_queue_transfer(i);
   10324:	bl	10170 <rx_queue_transfer>
	} else {
		rx_index[i] = index;
	}
	return c;
   10328:	mov	r0, r4
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
		rx_queue_transfer(i);
   1032a:	pop	{r3, r4, r5, r6, r7, pc}
// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
   1032c:	mov.w	r0, #4294967295
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
	}
	return c;
}
   10330:	pop	{r3, r4, r5, r6, r7, pc}
   10332:	nop
   10334:	.word	0x20025c09
   10338:	.word	0x20025d40
   1033c:	.word	0x20025d30
   10340:	.word	0x20025d20
   10344:	.word	0x20200720

00010348 <usb_seremu_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
   10348:	ldr	r3, [pc, #44]	; (10378 <usb_seremu_peekchar+0x30>)
	if (tail == rx_head) return -1;
   1034a:	ldr	r2, [pc, #48]	; (1037c <usb_seremu_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
   1034c:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
   1034e:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
   10350:	uxtb	r3, r3
	if (tail == rx_head) return -1;
   10352:	cmp	r3, r2
   10354:	beq.n	10372 <usb_seremu_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   10356:	adds	r3, #1
	uint32_t i = rx_list[tail];
   10358:	ldr	r2, [pc, #36]	; (10380 <usb_seremu_peekchar+0x38>)
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
   1035a:	ldr	r0, [pc, #40]	; (10384 <usb_seremu_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   1035c:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
   1035e:	ldr	r1, [pc, #40]	; (10388 <usb_seremu_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   10360:	it	cs
   10362:	movcs	r3, #0
	uint32_t i = rx_list[tail];
   10364:	ldrb	r2, [r2, r3]
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
   10366:	ldrh.w	r3, [r0, r2, lsl #1]
   1036a:	add.w	r3, r3, r2, lsl #5
   1036e:	ldrb	r0, [r1, r3]
   10370:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
   10372:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
}
   10376:	bx	lr
   10378:	.word	0x20025c09
   1037c:	.word	0x20025d40
   10380:	.word	0x20025d30
   10384:	.word	0x20025d20
   10388:	.word	0x20200720

0001038c <usb_seremu_available>:

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
   1038c:	ldr	r2, [pc, #12]	; (1039c <usb_seremu_available+0x10>)
	if (tail == rx_head) return 0;
   1038e:	ldr	r3, [pc, #16]	; (103a0 <usb_seremu_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
   10390:	ldrb	r0, [r2, #0]
	if (tail == rx_head) return 0;
   10392:	ldrb	r3, [r3, #0]
	// TODO: how much is actually available?
	return 1;
}
   10394:	subs	r0, r0, r3
   10396:	it	ne
   10398:	movne	r0, #1
   1039a:	bx	lr
   1039c:	.word	0x20025c09
   103a0:	.word	0x20025d40

000103a4 <tx_zero_pad>:
	USB1_GPTIMER0CTRL = 0;
}


void tx_zero_pad(void)
{
   103a4:	push	{r3, r4, r5, lr}
	if (!tx_available) return;
   103a6:	ldr	r4, [pc, #32]	; (103c8 <tx_zero_pad+0x24>)
   103a8:	ldrh	r2, [r4, #0]
   103aa:	cbz	r2, 103c6 <tx_zero_pad+0x22>
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   103ac:	ldr	r1, [pc, #28]	; (103cc <tx_zero_pad+0x28>)
	memset(txdata, 0, tx_available);
   103ae:	rsb	r3, r2, #64	; 0x40
   103b2:	ldr	r0, [pc, #28]	; (103d0 <tx_zero_pad+0x2c>)


void tx_zero_pad(void)
{
	if (!tx_available) return;
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   103b4:	ldrb	r5, [r1, #0]
	memset(txdata, 0, tx_available);
   103b6:	movs	r1, #0
   103b8:	add.w	r3, r3, r5, lsl #6
   103bc:	add	r0, r3
   103be:	bl	128fc <memset>
	tx_available = 0;
   103c2:	movs	r3, #0
   103c4:	strh	r3, [r4, #0]
   103c6:	pop	{r3, r4, r5, pc}
   103c8:	.word	0x20025d3a
   103cc:	.word	0x20025c0b
   103d0:	.word	0x20200820

000103d4 <tx_queue_transfer>:
}

void tx_queue_transfer(void)
{
   103d4:	push	{r4, r5, r6, lr}
	transfer_t *xfer = tx_transfer + tx_head;
   103d6:	ldr	r6, [pc, #84]	; (1042c <tx_queue_transfer+0x58>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
   103d8:	movs	r3, #0
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
   103da:	ldr	r5, [pc, #84]	; (10430 <tx_queue_transfer+0x5c>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
   103dc:	movs	r2, #64	; 0x40
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
   103de:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
   103e0:	ldr	r4, [pc, #80]	; (10434 <tx_queue_transfer+0x60>)
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
   103e2:	add.w	r5, r5, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
   103e6:	add.w	r4, r4, r1, lsl #6
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
   103ea:	mov	r0, r5
   103ec:	mov	r1, r4
   103ee:	bl	121e0 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   103f2:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   103f6:	add.w	r1, r4, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
   103fa:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   103fe:	ldr	r2, [pc, #56]	; (10438 <tx_queue_transfer+0x64>)
   10400:	str	r3, [r2, #0]
		location += 32;
   10402:	adds	r3, #32
	} while (location < end_addr);
   10404:	cmp	r1, r3
   10406:	bhi.n	10400 <tx_queue_transfer+0x2c>
	asm("dsb");
   10408:	dsb	sy
	asm("isb");
   1040c:	isb	sy
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
   10410:	movs	r0, #2
   10412:	mov	r1, r5
   10414:	bl	12210 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   10418:	ldrb	r3, [r6, #0]
   1041a:	ldr	r2, [pc, #16]	; (1042c <tx_queue_transfer+0x58>)
   1041c:	adds	r3, #1
   1041e:	uxtb	r3, r3
   10420:	cmp	r3, #11
   10422:	it	hi
   10424:	movhi	r3, #0
   10426:	strb	r3, [r2, #0]
   10428:	pop	{r4, r5, r6, pc}
   1042a:	nop
   1042c:	.word	0x20025c0b
   10430:	.word	0x20025d60
   10434:	.word	0x20200820
   10438:	.word	0xe000ef70

0001043c <usb_seremu_flush_callback>:
	tx_queue_transfer();
	tx_noautoflush = 0;
}

static void usb_seremu_flush_callback(void)
{
   1043c:	push	{r3, lr}
	if (tx_noautoflush) return;
   1043e:	ldr	r3, [pc, #20]	; (10454 <usb_seremu_flush_callback+0x18>)
   10440:	ldrb	r3, [r3, #0]
   10442:	cbz	r3, 10446 <usb_seremu_flush_callback+0xa>
   10444:	pop	{r3, pc}
	tx_zero_pad();
   10446:	bl	103a4 <tx_zero_pad>
	tx_queue_transfer();
}
   1044a:	ldmia.w	sp!, {r3, lr}

static void usb_seremu_flush_callback(void)
{
	if (tx_noautoflush) return;
	tx_zero_pad();
	tx_queue_transfer();
   1044e:	b.w	103d4 <tx_queue_transfer>
   10452:	nop
   10454:	.word	0x20025c0a

00010458 <usb_seremu_write.part.0>:
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
   10458:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1045c:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   1045e:	mov	fp, r1
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
   10460:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   10462:	cmp	r1, #0
   10464:	beq.n	1055a <usb_seremu_write.part.0+0x102>
   10466:	movs	r3, #0
   10468:	ldr	r7, [pc, #244]	; (10560 <usb_seremu_write.part.0+0x108>)
   1046a:	ldr.w	r9, [pc, #260]	; 10570 <usb_seremu_write.part.0+0x118>
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
   1046e:	ldr	r6, [pc, #244]	; (10564 <usb_seremu_write.part.0+0x10c>)
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
   10470:	ldr.w	sl, [pc, #264]	; 1057c <usb_seremu_write.part.0+0x124>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   10474:	str	r3, [sp, #4]
		transfer_t *xfer = tx_transfer + tx_head;
   10476:	ldr	r3, [pc, #240]	; (10568 <usb_seremu_write.part.0+0x110>)
   10478:	ldr	r1, [pc, #240]	; (1056c <usb_seremu_write.part.0+0x114>)
   1047a:	ldrb	r2, [r3, #0]
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
   1047c:	ldrh	r3, [r7, #0]
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
   1047e:	add.w	r8, r1, r2, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
   10482:	cmp	r3, #0
   10484:	bne.n	10514 <usb_seremu_write.part.0+0xbc>
   10486:	mov	r5, r3
   10488:	mov	r4, r3
   1048a:	b.n	104b0 <usb_seremu_write.part.0+0x58>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
   1048c:	ldrb.w	r3, [r9]
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
   10490:	cbnz	r4, 10494 <usb_seremu_write.part.0+0x3c>
				wait_begin_at = systick_millis_count;
   10492:	ldr	r5, [r6, #0]
   10494:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
   10496:	cmp	r3, #0
   10498:	bne.n	10508 <usb_seremu_write.part.0+0xb0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   1049a:	ldr	r3, [r6, #0]
   1049c:	subs	r3, r3, r5
   1049e:	cmp	r3, #50	; 0x32
   104a0:	bhi.n	1054e <usb_seremu_write.part.0+0xf6>
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
   104a2:	ldrb.w	r3, [sl]
   104a6:	cbz	r3, 10508 <usb_seremu_write.part.0+0xb0>
			yield();
   104a8:	bl	11344 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
   104ac:	ldrh	r3, [r7, #0]
   104ae:	cbnz	r3, 10510 <usb_seremu_write.part.0+0xb8>
			uint32_t status = usb_transfer_status(xfer);
   104b0:	mov	r0, r8
   104b2:	bl	1225c <usb_transfer_status>
			if (!(status & 0x80)) {
   104b6:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
   104ba:	ldr	r2, [pc, #180]	; (10570 <usb_seremu_write.part.0+0x118>)
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
   104bc:	bne.n	1048c <usb_seremu_write.part.0+0x34>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
   104be:	movs	r3, #64	; 0x40
   104c0:	ldr	r2, [pc, #164]	; (10568 <usb_seremu_write.part.0+0x110>)
				transmit_previous_timeout = 0;
   104c2:	strb.w	r0, [r9]
   104c6:	ldrb	r2, [r2, #0]
   104c8:	mov	r4, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
   104ca:	strh	r3, [r7, #0]
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   104cc:	add.w	r0, r0, r2, lsl #6
		if (size >= tx_available) {
   104d0:	cmp	fp, r4
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   104d2:	ldr	r2, [pc, #160]	; (10574 <usb_seremu_write.part.0+0x11c>)
   104d4:	add	r0, r2
		if (size >= tx_available) {
   104d6:	bcc.n	10526 <usb_seremu_write.part.0+0xce>
			memcpy(txdata, data, tx_available);
   104d8:	ldr.w	r8, [sp, #8]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
   104dc:	movs	r5, #0
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
   104de:	mov	r2, r4
			size -= tx_available;
   104e0:	rsb	fp, r4, fp
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
   104e4:	mov	r1, r8
   104e6:	bl	fd78 <memcpy>
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
   104ea:	strh	r5, [r7, #0]
			tx_queue_transfer();
   104ec:	bl	103d4 <tx_queue_transfer>
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
   104f0:	ldr	r2, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
   104f2:	ldr	r3, [pc, #132]	; (10578 <usb_seremu_write.part.0+0x120>)
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
   104f4:	add	r2, r4
   104f6:	str	r2, [sp, #4]
			data += tx_available;
   104f8:	mov	r2, r8
   104fa:	add	r2, r4
   104fc:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
   104fe:	str.w	r5, [r3, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   10502:	cmp.w	fp, #0
   10506:	bne.n	10476 <usb_seremu_write.part.0+0x1e>
   10508:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   1050a:	add	sp, #20
   1050c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10510:	ldr	r2, [pc, #84]	; (10568 <usb_seremu_write.part.0+0x110>)
   10512:	ldrb	r2, [r2, #0]
   10514:	mov	r4, r3
   10516:	rsb	r0, r3, #64	; 0x40
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
   1051a:	cmp	fp, r4
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   1051c:	add.w	r0, r0, r2, lsl #6
   10520:	ldr	r2, [pc, #80]	; (10574 <usb_seremu_write.part.0+0x11c>)
   10522:	add	r0, r2
		if (size >= tx_available) {
   10524:	bcs.n	104d8 <usb_seremu_write.part.0+0x80>
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
   10526:	ldr	r1, [sp, #8]
   10528:	mov	r2, fp
   1052a:	str	r3, [sp, #12]
   1052c:	bl	fd78 <memcpy>
			tx_available -= size;
   10530:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   10532:	mov.w	r1, #3221225472	; 0xc0000000
   10536:	ldr	r2, [pc, #64]	; (10578 <usb_seremu_write.part.0+0x120>)
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
   10538:	rsb	r3, fp, r3
   1053c:	strh	r3, [r7, #0]
   1053e:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   10540:	str.w	r1, [r2, #132]	; 0x84
   10544:	add	r3, fp
   10546:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   10548:	add	sp, #20
   1054a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
   1054e:	movs	r3, #1
				return sent;
   10550:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
   10552:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   10554:	add	sp, #20
   10556:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   1055a:	mov	r0, r1
   1055c:	b.n	1050a <usb_seremu_write.part.0+0xb2>
   1055e:	nop
   10560:	.word	0x20025d3a
   10564:	.word	0x20025ee8
   10568:	.word	0x20025c0b
   1056c:	.word	0x20025d60
   10570:	.word	0x20025d41
   10574:	.word	0x20200820
   10578:	.word	0x402e0000
   1057c:	.word	0x200261e0

00010580 <usb_seremu_putchar>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   10580:	ldr	r3, [pc, #36]	; (105a8 <usb_seremu_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
   10582:	push	{lr}
   10584:	sub	sp, #12
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   10586:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
   10588:	strb.w	r0, [sp, #7]
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   1058c:	cbnz	r3, 10598 <usb_seremu_putchar+0x18>
   1058e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
	return usb_seremu_write(&c, 1);
}
   10592:	add	sp, #12
   10594:	ldr.w	pc, [sp], #4
   10598:	movs	r1, #1
   1059a:	add.w	r0, sp, #7
   1059e:	bl	10458 <usb_seremu_write.part.0>
   105a2:	add	sp, #12
   105a4:	ldr.w	pc, [sp], #4
   105a8:	.word	0x200261e0

000105ac <usb_seremu_write>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   105ac:	ldr	r3, [pc, #16]	; (105c0 <usb_seremu_write+0x14>)
   105ae:	ldrb	r3, [r3, #0]
   105b0:	and.w	r2, r3, #255	; 0xff
   105b4:	cbz	r3, 105ba <usb_seremu_write+0xe>
   105b6:	b.w	10458 <usb_seremu_write.part.0>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   105ba:	mov	r0, r2
   105bc:	bx	lr
   105be:	nop
   105c0:	.word	0x200261e0

000105c4 <usb_seremu_write_buffer_free>:

int usb_seremu_write_buffer_free(void)
{
	return 1;
}
   105c4:	movs	r0, #1
   105c6:	bx	lr

000105c8 <usb_seremu_flush_output>:

void usb_seremu_flush_output(void)
{
	if (!usb_configuration) return;
   105c8:	ldr	r3, [pc, #32]	; (105ec <usb_seremu_flush_output+0x24>)
   105ca:	ldrb	r3, [r3, #0]
   105cc:	cbz	r3, 105d4 <usb_seremu_flush_output+0xc>
	if (tx_available == 0) return;
   105ce:	ldr	r3, [pc, #32]	; (105f0 <usb_seremu_flush_output+0x28>)
   105d0:	ldrh	r3, [r3, #0]
   105d2:	cbnz	r3, 105d6 <usb_seremu_flush_output+0xe>
   105d4:	bx	lr
{
	return 1;
}

void usb_seremu_flush_output(void)
{
   105d6:	push	{r4, lr}
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
   105d8:	movs	r3, #1
   105da:	ldr	r4, [pc, #24]	; (105f4 <usb_seremu_flush_output+0x2c>)
   105dc:	strb	r3, [r4, #0]
	tx_zero_pad();
   105de:	bl	103a4 <tx_zero_pad>
	tx_queue_transfer();
   105e2:	bl	103d4 <tx_queue_transfer>
	tx_noautoflush = 0;
   105e6:	movs	r3, #0
   105e8:	strb	r3, [r4, #0]
   105ea:	pop	{r4, pc}
   105ec:	.word	0x200261e0
   105f0:	.word	0x20025d3a
   105f4:	.word	0x20025c0a

000105f8 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
   105f8:	cmp	r0, #0
   105fa:	beq.n	106ac <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   105fc:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
   105fe:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10602:	sub	sp, #20
   10604:	mov	fp, r0
   10606:	ldr	r4, [pc, #168]	; (106b0 <delay+0xb8>)
   10608:	ldr	r5, [pc, #168]	; (106b4 <delay+0xbc>)
   1060a:	ldr	r6, [pc, #172]	; (106b8 <delay+0xc0>)
   1060c:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   10610:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   10614:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   10616:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   10618:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   1061c:	cmp	r1, #0
   1061e:	bne.n	10610 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   10620:	ldr	r7, [pc, #152]	; (106bc <delay+0xc4>)
   10622:	strd	r8, r9, [sp, #8]
   10626:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
   10628:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1062a:	ldr	r2, [pc, #148]	; (106c0 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   1062c:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   10630:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   10632:	ldr	r2, [r2, #0]
   10634:	movs	r7, #1
   10636:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
   1063a:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1063e:	mov	r8, r3
	if (frac > 1000) frac = 1000;
   10640:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   10642:	cmp	r3, r1
   10644:	it	eq
   10646:	cmpeq	r2, r8
   10648:	ite	cs
   1064a:	movcs	sl, r8
   1064c:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   1064e:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   10652:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   10656:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   10658:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   1065a:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   1065e:	cmp	r3, #0
   10660:	bne.n	10652 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   10662:	ldr	r0, [sp, #4]
   10664:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
   10666:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   10668:	ldr	r0, [pc, #84]	; (106c0 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   1066a:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1066e:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   10670:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   10674:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
   10678:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   1067c:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   10680:	mov	r8, r1
	if (frac > 1000) frac = 1000;
   10682:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   10684:	cmp	r1, r3
   10686:	it	eq
   10688:	cmpeq	r0, r8
   1068a:	ite	cs
   1068c:	movcs	r3, r8
   1068e:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   10690:	add	r2, r3
   10692:	cmp	r2, lr
   10694:	bcc.n	106a6 <delay+0xae>
			if (--msec == 0) return;
   10696:	subs.w	fp, fp, #1
			start += 1000;
   1069a:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
   1069e:	bne.n	10652 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
   106a0:	add	sp, #20
   106a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
   106a6:	bl	11344 <yield>
	}
   106aa:	b.n	10652 <delay+0x5a>
   106ac:	bx	lr
   106ae:	nop
   106b0:	.word	0x20026218
   106b4:	.word	0x20025ee8
   106b8:	.word	0x20025ee0
   106bc:	.word	0xe0001004
   106c0:	.word	0x20025ee4

000106c4 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
   106c4:	movs	r0, #4
   106c6:	mov	r1, lr
   106c8:	tst	r0, r1
   106ca:	beq.n	106d4 <_MSP>
   106cc:	mrs	r0, PSP
   106d0:	b.w	106e4 <HardFault_HandlerC>

000106d4 <_MSP>:
   106d4:	mrs	r0, MSP
   106d8:	b.w	106e4 <HardFault_HandlerC>

000106dc <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
   106dc:	bx	lr
   106de:	nop

000106e0 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
   106e0:	bx	lr
   106e2:	nop

000106e4 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   106e4:	ldr	r3, [pc, #108]	; (10754 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
   106e6:	movs	r1, #5
   106e8:	ldr	r2, [pc, #108]	; (10758 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
   106ea:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
   106ec:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
   106ee:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
   106f2:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
   106f4:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
   106f8:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   106fa:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
   106fc:	ldr	r4, [pc, #92]	; (1075c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   106fe:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
   10700:	ldr	r0, [pc, #92]	; (10760 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   10702:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
   10704:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
   10708:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
   1070c:	ldr	r3, [r4, #0]
   1070e:	cmp	r3, r0
   10710:	bls.n	10718 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
   10712:	ldr	r0, [pc, #80]	; (10764 <HardFault_HandlerC+0x80>)
   10714:	bl	feac <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
   10718:	ldr	r5, [pc, #56]	; (10754 <HardFault_HandlerC+0x70>)
   1071a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
   1071c:	movs	r0, #0
   1071e:	ldr	r2, [pc, #72]	; (10768 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
   10720:	ldr	r1, [pc, #72]	; (1076c <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
   10722:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
   10726:	str	r0, [sp, #4]
   10728:	ldr	r3, [sp, #4]
   1072a:	cmp	r3, r2
   1072c:	bhi.n	1073a <HardFault_HandlerC+0x56>
   1072e:	ldr	r3, [sp, #4]
   10730:	adds	r3, #1
   10732:	str	r3, [sp, #4]
   10734:	ldr	r3, [sp, #4]
   10736:	cmp	r3, r2
   10738:	bls.n	1072e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
   1073a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
   1073e:	str	r0, [sp, #4]
   10740:	ldr	r3, [sp, #4]
   10742:	cmp	r3, r1
   10744:	bhi.n	10722 <HardFault_HandlerC+0x3e>
   10746:	ldr	r3, [sp, #4]
   10748:	adds	r3, #1
   1074a:	str	r3, [sp, #4]
   1074c:	ldr	r3, [sp, #4]
   1074e:	cmp	r3, r1
   10750:	bls.n	10746 <HardFault_HandlerC+0x62>
   10752:	b.n	10722 <HardFault_HandlerC+0x3e>
   10754:	.word	0x401bc000
   10758:	.word	0x401f8000
   1075c:	.word	0x2001fd90
   10760:	.word	0x23c345ff
   10764:	.word	0x11e1a300
   10768:	.word	0x000f423f
   1076c:	.word	0x0089543f

00010770 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
   10770:	ldr	r2, [pc, #36]	; (10798 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
   10772:	push	{r3, lr}
        char *prev = __brkval;
   10774:	ldr	r3, [r2, #0]
        if (incr != 0) {
   10776:	cbz	r0, 10782 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
   10778:	add	r0, r3
   1077a:	ldr	r1, [pc, #32]	; (1079c <_sbrk+0x2c>)
   1077c:	cmp	r0, r1
   1077e:	bhi.n	10786 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
   10780:	str	r0, [r2, #0]
        }
        return prev;
}
   10782:	mov	r0, r3
   10784:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
   10786:	bl	12320 <__errno>
   1078a:	movs	r2, #12
                        return (void *)-1;
   1078c:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
   10790:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   10792:	mov	r0, r3
   10794:	pop	{r3, pc}
   10796:	nop
   10798:	.word	0x2001fd94
   1079c:	.word	0x20280000

000107a0 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
   107a0:	wfi
   107a2:	b.n	107a0 <__cxa_pure_virtual>

000107a4 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
   107a4:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
   107a6:	ldr	r2, [pc, #24]	; (107c0 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
   107a8:	movs	r1, #7
   107aa:	ldr	r3, [pc, #24]	; (107c4 <Panic_Temp_isr+0x20>)
   107ac:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
   107ae:	ldr	r3, [r2, #56]	; 0x38
   107b0:	orr.w	r3, r3, #64	; 0x40
   107b4:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
   107b6:	dsb	sy
  while (1) asm ("wfi");
   107ba:	wfi
   107bc:	b.n	107ba <Panic_Temp_isr+0x16>
   107be:	nop
   107c0:	.word	0x400d4000
   107c4:	.word	0x400ac000

000107c8 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
   107c8:	lsls	r0, r0, #4
   107ca:	ldr	r3, [pc, #60]	; (10808 <digitalWrite.part.0+0x40>)
   107cc:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
   107ce:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
   107d0:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
   107d2:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
   107d4:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
   107d6:	tst	r4, r0
   107d8:	beq.n	107e6 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
   107da:	cbz	r1, 107f4 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
   107dc:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   107e0:	ldr.w	r4, [sp], #4
   107e4:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   107e6:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
   107e8:	cbnz	r1, 107fe <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   107ea:	ldr	r2, [pc, #32]	; (1080c <digitalWrite.part.0+0x44>)
		}
	}
}
   107ec:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   107f0:	str	r2, [r3, #0]
		}
	}
}
   107f2:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
   107f4:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   107f8:	ldr.w	r4, [sp], #4
   107fc:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   107fe:	ldr	r2, [pc, #16]	; (10810 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   10800:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   10804:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   10806:	bx	lr
   10808:	.word	0x2001f630
   1080c:	.word	0x00013038
   10810:	.word	0x0001f038

00010814 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
   10814:	cmp	r0, #39	; 0x27
   10816:	bhi.n	1081c <digitalWrite+0x8>
   10818:	b.w	107c8 <digitalWrite.part.0>
   1081c:	bx	lr
   1081e:	nop

00010820 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10820:	ldr	r0, [pc, #656]	; (10ab4 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   10822:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   10826:	ldr	r3, [pc, #656]	; (10ab8 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10828:	ldr	r2, [r0, #120]	; 0x78
   1082a:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
   1082e:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10830:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   10832:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10834:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   10838:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1083c:	ldr	r4, [pc, #636]	; (10abc <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1083e:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   10842:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   10844:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10848:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   1084a:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1084c:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   10850:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   10854:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   10858:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   1085c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   10860:	ldrh.w	r0, [r3, #392]	; 0x188
   10864:	uxth	r0, r0
   10866:	orr.w	r0, r0, #240	; 0xf0
   1086a:	strh.w	r0, [r3, #392]	; 0x188
   1086e:	add.w	r0, r1, r1, lsl #1
   10872:	ldr	r3, [pc, #580]	; (10ab8 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
   10874:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   10876:	movs	r5, #0
   10878:	lsls	r0, r0, #5
   1087a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   1087c:	cmp	r1, #4
   1087e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10880:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   10884:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
   10886:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   10888:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   1088a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   1088c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   1088e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   10890:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   10892:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   10894:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   10896:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   10898:	bne.n	1086e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   1089a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   1089e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   108a2:	ldr	r3, [pc, #540]	; (10ac0 <pwm_init+0x2a0>)
   108a4:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   108a8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   108aa:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   108ac:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   108b0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   108b2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   108b6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   108ba:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   108be:	ldrh.w	r0, [r4, #392]	; 0x188
   108c2:	uxth	r0, r0
   108c4:	orr.w	r0, r0, #3840	; 0xf00
   108c8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   108cc:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   108d0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   108d4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   108d8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   108dc:	ldrh.w	r0, [r3, #392]	; 0x188
   108e0:	uxth	r0, r0
   108e2:	orr.w	r0, r0, #240	; 0xf0
   108e6:	strh.w	r0, [r3, #392]	; 0x188
   108ea:	add.w	r0, r1, r1, lsl #1
   108ee:	ldr	r3, [pc, #464]	; (10ac0 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
   108f0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   108f2:	movs	r5, #0
   108f4:	lsls	r0, r0, #5
   108f6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   108f8:	cmp	r1, #4
   108fa:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   108fc:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   108fe:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   10902:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   10904:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   10906:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   10908:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   1090a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   1090c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   1090e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   10910:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   10912:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   10914:	bne.n	108ea <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10916:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   1091a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1091e:	ldr	r3, [pc, #420]	; (10ac4 <pwm_init+0x2a4>)
   10920:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10924:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   10926:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10928:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   1092c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   1092e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   10932:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10936:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   1093a:	ldrh.w	r0, [r4, #392]	; 0x188
   1093e:	uxth	r0, r0
   10940:	orr.w	r0, r0, #3840	; 0xf00
   10944:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   10948:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   1094c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   10950:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   10954:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   10958:	ldrh.w	r0, [r3, #392]	; 0x188
   1095c:	uxth	r0, r0
   1095e:	orr.w	r0, r0, #240	; 0xf0
   10962:	strh.w	r0, [r3, #392]	; 0x188
   10966:	add.w	r0, r1, r1, lsl #1
   1096a:	ldr	r3, [pc, #344]	; (10ac4 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
   1096c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   1096e:	movs	r5, #0
   10970:	lsls	r0, r0, #5
   10972:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   10974:	cmp	r1, #4
   10976:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10978:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   1097a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   1097e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   10980:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   10982:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   10984:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   10986:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   10988:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   1098a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   1098c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   1098e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   10990:	bne.n	10966 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10992:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   10996:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1099a:	ldr	r3, [pc, #300]	; (10ac8 <pwm_init+0x2a8>)
   1099c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   109a0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   109a2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   109a4:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   109a8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   109aa:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   109ae:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   109b2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   109b6:	ldrh.w	r0, [r4, #392]	; 0x188
   109ba:	uxth	r0, r0
   109bc:	orr.w	r0, r0, #3840	; 0xf00
   109c0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   109c4:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   109c8:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   109cc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   109d0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   109d4:	ldrh.w	r0, [r3, #392]	; 0x188
   109d8:	uxth	r0, r0
   109da:	orr.w	r0, r0, #240	; 0xf0
   109de:	strh.w	r0, [r3, #392]	; 0x188
   109e2:	add.w	r0, r1, r1, lsl #1
   109e6:	ldr	r3, [pc, #224]	; (10ac8 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
   109e8:	adds	r1, #1
   109ea:	lsls	r0, r0, #5
   109ec:	mov	r4, r3
   109ee:	cmp	r1, #4
   109f0:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   109f2:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   109f4:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   109f8:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   109fa:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   109fc:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   109fe:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   10a00:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
   10a02:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   10a04:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   10a06:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   10a08:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   10a0a:	bne.n	109e2 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10a0c:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10a10:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10a12:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10a14:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10a18:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10a1a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   10a1e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10a20:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10a24:	orrs	r3, r7
   10a26:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   10a2a:	ldrh.w	r3, [r4, #392]	; 0x188
   10a2e:	uxth	r3, r3
   10a30:	orr.w	r3, r3, #3840	; 0xf00
   10a34:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   10a38:	lsls	r0, r2, #5
   10a3a:	ldr	r3, [pc, #144]	; (10acc <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10a3c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   10a3e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10a40:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   10a42:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   10a44:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10a46:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10a48:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10a4a:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   10a4e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   10a50:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10a52:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10a54:	bne.n	10a38 <pwm_init+0x218>
   10a56:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10a58:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10a5a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10a5e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   10a62:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10a64:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   10a68:	lsls	r0, r2, #5
   10a6a:	ldr	r3, [pc, #100]	; (10ad0 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10a6c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   10a6e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10a70:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   10a72:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   10a74:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10a76:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10a78:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10a7a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   10a7c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   10a7e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10a80:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10a82:	bne.n	10a68 <pwm_init+0x248>
   10a84:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10a86:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10a88:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10a8c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   10a90:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10a92:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   10a96:	lsls	r0, r2, #5
   10a98:	ldr	r3, [pc, #56]	; (10ad4 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10a9a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   10a9c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10a9e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   10aa0:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   10aa2:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10aa4:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10aa6:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10aa8:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   10aaa:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   10aac:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10aae:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10ab0:	bne.n	10a96 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   10ab2:	pop	{r4, r5, r6, r7, pc}
   10ab4:	.word	0x400fc000
   10ab8:	.word	0x403dc000
   10abc:	.word	0xfc030000
   10ac0:	.word	0x403e0000
   10ac4:	.word	0x403e4000
   10ac8:	.word	0x403e8000
   10acc:	.word	0x401dc000
   10ad0:	.word	0x401e0000
   10ad4:	.word	0x401e4000

00010ad8 <sysex_byte>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void static sysex_byte(uint8_t b)
{
   10ad8:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   10ada:	ldr	r3, [pc, #56]	; (10b14 <sysex_byte+0x3c>)
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void static sysex_byte(uint8_t b)
{
   10adc:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   10ade:	ldr	r4, [pc, #56]	; (10b18 <sysex_byte+0x40>)
   10ae0:	ldr	r3, [r3, #0]
   10ae2:	ldrh	r1, [r4, #0]
   10ae4:	cbz	r3, 10b0a <sysex_byte+0x32>
   10ae6:	cmp.w	r1, #290	; 0x122
   10aea:	bcs.n	10af8 <sysex_byte+0x20>
   10aec:	adds	r3, r1, #1
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
   10aee:	ldr	r2, [pc, #44]	; (10b1c <sysex_byte+0x44>)
   10af0:	uxth	r3, r3
   10af2:	strb	r5, [r2, r1]
   10af4:	strh	r3, [r4, #0]
	}
}
   10af6:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
   10af8:	movs	r2, #0
   10afa:	ldr	r0, [pc, #32]	; (10b1c <sysex_byte+0x44>)
   10afc:	blx	r3
   10afe:	movs	r1, #0
   10b00:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
   10b02:	ldr	r2, [pc, #24]	; (10b1c <sysex_byte+0x44>)
   10b04:	strh	r3, [r4, #0]
   10b06:	strb	r5, [r2, r1]
	}
}
   10b08:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
   10b0a:	cmp.w	r1, #290	; 0x122
   10b0e:	bcc.n	10aec <sysex_byte+0x14>
   10b10:	pop	{r3, r4, r5, pc}
   10b12:	nop
   10b14:	.word	0x20025f14
   10b18:	.word	0x200266c2
   10b1c:	.word	0x200266c8

00010b20 <rx_queue_transfer>:




static void rx_queue_transfer(int i)
{
   10b20:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
   10b22:	ldr	r1, [pc, #80]	; (10b74 <rx_queue_transfer+0x54>)



static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   10b24:	mov.w	r7, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   10b28:	ldr	r5, [pc, #76]	; (10b78 <rx_queue_transfer+0x58>)




static void rx_queue_transfer(int i)
{
   10b2a:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
   10b2c:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   10b30:	ldr	r6, [pc, #72]	; (10b7c <rx_queue_transfer+0x5c>)



static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   10b32:	ldr	r2, [pc, #76]	; (10b80 <rx_queue_transfer+0x60>)
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   10b34:	add.w	r5, r5, r0, lsl #5
   10b38:	mov	r1, r4



static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   10b3a:	str	r7, [r2, #0]
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   10b3c:	mov	r0, r5
   10b3e:	ldrh	r2, [r6, #0]
   10b40:	bl	121e0 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
   10b44:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   10b46:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   10b4a:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
   10b4c:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
   10b50:	ldr	r2, [pc, #48]	; (10b84 <rx_queue_transfer+0x64>)
   10b52:	str	r3, [r2, #0]
		location += 32;
   10b54:	adds	r3, #32
	} while (location < end_addr);
   10b56:	cmp	r1, r3
   10b58:	bhi.n	10b52 <rx_queue_transfer+0x32>
	asm("dsb");
   10b5a:	dsb	sy
	asm("isb");
   10b5e:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
   10b62:	movs	r0, #3
   10b64:	mov	r1, r5
   10b66:	bl	12238 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   10b6a:	ldr	r3, [pc, #28]	; (10b88 <rx_queue_transfer+0x68>)
   10b6c:	mov.w	r2, #131072	; 0x20000
   10b70:	str	r2, [r3, #0]
   10b72:	pop	{r3, r4, r5, r6, r7, pc}
   10b74:	.word	0x20200b20
   10b78:	.word	0x20025f60
   10b7c:	.word	0x20025f08
   10b80:	.word	0xe000e18c
   10b84:	.word	0xe000ef5c
   10b88:	.word	0xe000e10c

00010b8c <rx_event>:


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   10b8c:	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
   10b8e:	movw	r3, #65532	; 0xfffc


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   10b92:	ldr	r1, [pc, #68]	; (10bd8 <rx_event+0x4c>)
   10b94:	ubfx	r2, r2, #16, #15
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
   10b98:	ldr	r0, [r0, #28]


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   10b9a:	ldrh	r1, [r1, #0]
   10b9c:	subs	r2, r1, r2
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
   10b9e:	ands	r3, r2
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   10ba0:	cbz	r3, 10bd2 <rx_event+0x46>
		uint32_t head = rx_head;
		rx_count[i] = len;
		rx_index[i] = 0;
   10ba2:	movs	r1, #0



// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
   10ba4:	push	{r4, r5, r6}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
   10ba6:	ldr	r5, [pc, #52]	; (10bdc <rx_event+0x50>)
		rx_count[i] = len;
		rx_index[i] = 0;
   10ba8:	ldr	r4, [pc, #52]	; (10be0 <rx_event+0x54>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
   10baa:	ldrb	r2, [r5, #0]
		rx_count[i] = len;
		rx_index[i] = 0;
   10bac:	strh.w	r1, [r4, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
   10bb0:	adds	r2, #1
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
   10bb2:	ldr	r4, [pc, #48]	; (10be4 <rx_event+0x58>)
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
   10bb4:	ldr	r6, [pc, #48]	; (10be8 <rx_event+0x5c>)
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   10bb6:	cmp	r2, #6
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
   10bb8:	strh.w	r3, [r6, r0, lsl #1]
   10bbc:	ite	ls
   10bbe:	uxtbls	r1, r2
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   10bc0:	movhi	r2, r1
		rx_list[head] = i;
		rx_head = head;
   10bc2:	strb	r1, [r5, #0]
		rx_available += len;
   10bc4:	ldr	r1, [r4, #0]
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   10bc6:	ldr	r5, [pc, #36]	; (10bec <rx_event+0x60>)
		rx_head = head;
		rx_available += len;
   10bc8:	add	r3, r1
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   10bca:	strb	r0, [r5, r2]
		rx_head = head;
		rx_available += len;
   10bcc:	str	r3, [r4, #0]
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   10bce:	pop	{r4, r5, r6}
   10bd0:	bx	lr
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
   10bd2:	b.w	10b20 <rx_queue_transfer>
   10bd6:	nop
   10bd8:	.word	0x20025f08
   10bdc:	.word	0x20025f34
   10be0:	.word	0x20026028
   10be4:	.word	0x20026024
   10be8:	.word	0x20025f40
   10bec:	.word	0x200260d0

00010bf0 <usb_midi_configure>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_midi_configure(void)
{
   10bf0:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
   10bf2:	ldr	r3, [pc, #148]	; (10c88 <usb_midi_configure+0x98>)
   10bf4:	ldrb	r3, [r3, #0]
   10bf6:	cmp	r3, #0
   10bf8:	beq.n	10c78 <usb_midi_configure+0x88>
		tx_packet_size = MIDI_TX_SIZE_480;
   10bfa:	mov.w	r3, #512	; 0x200
   10bfe:	ldr	r7, [pc, #140]	; (10c8c <usb_midi_configure+0x9c>)
		rx_packet_size = MIDI_RX_SIZE_480;
   10c00:	ldr	r2, [pc, #140]	; (10c90 <usb_midi_configure+0xa0>)
   10c02:	mov	r6, r3

void usb_midi_configure(void)
{
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
   10c04:	strh	r3, [r7, #0]
		rx_packet_size = MIDI_RX_SIZE_480;
   10c06:	strh	r3, [r2, #0]
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
   10c08:	movs	r1, #0
   10c0a:	movs	r2, #128	; 0x80
   10c0c:	ldr	r0, [pc, #132]	; (10c94 <usb_midi_configure+0xa4>)
	tx_head = 0;
   10c0e:	mov	r5, r1
   10c10:	ldr	r4, [pc, #132]	; (10c98 <usb_midi_configure+0xa8>)
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
   10c12:	bl	128fc <memset>
	tx_head = 0;
	tx_available = 0;
   10c16:	ldr	r3, [pc, #132]	; (10c9c <usb_midi_configure+0xac>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   10c18:	mov	r1, r5
   10c1a:	movs	r2, #192	; 0xc0
   10c1c:	ldr	r0, [pc, #128]	; (10ca0 <usb_midi_configure+0xb0>)
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
   10c1e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   10c20:	mov	r4, r5
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
   10c22:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   10c24:	bl	128fc <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   10c28:	mov	r1, r6
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   10c2a:	ldr.w	lr, [pc, #148]	; 10cc0 <usb_midi_configure+0xd0>
	rx_tail = 0;
   10c2e:	ldr	r3, [pc, #116]	; (10ca4 <usb_midi_configure+0xb4>)
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   10c30:	mov	r2, r5
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   10c32:	ldr	r6, [pc, #116]	; (10ca8 <usb_midi_configure+0xb8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   10c34:	movs	r0, #3
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   10c36:	strb.w	r5, [lr]
	rx_tail = 0;
   10c3a:	strb	r5, [r3, #0]
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
   10c3c:	ldr	r3, [pc, #108]	; (10cac <usb_midi_configure+0xbc>)
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   10c3e:	str	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
   10c40:	ldr	r6, [pc, #108]	; (10cb0 <usb_midi_configure+0xc0>)
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
   10c42:	str	r5, [r3, #0]
   10c44:	str	r5, [r3, #4]
   10c46:	str	r5, [r3, #8]
	memset(rx_index, 0, sizeof(rx_index));
   10c48:	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   10c4a:	ldr	r3, [pc, #104]	; (10cb4 <usb_midi_configure+0xc4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
   10c4c:	str	r5, [r6, #4]
   10c4e:	str	r5, [r6, #8]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   10c50:	bl	12114 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
   10c54:	mov	r3, r5
   10c56:	mov	r2, r5
   10c58:	ldrh	r1, [r7, #0]
   10c5a:	movs	r0, #3
   10c5c:	bl	12178 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   10c60:	mov	r0, r4
   10c62:	adds	r4, #1
   10c64:	bl	10b20 <rx_queue_transfer>
   10c68:	cmp	r4, #6
   10c6a:	bne.n	10c60 <usb_midi_configure+0x70>
	transmit_previous_timeout = 0;
   10c6c:	movs	r3, #0
   10c6e:	ldr	r1, [pc, #72]	; (10cb8 <usb_midi_configure+0xc8>)
	tx_noautoflush = 0;
   10c70:	ldr	r2, [pc, #72]	; (10cbc <usb_midi_configure+0xcc>)
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
	transmit_previous_timeout = 0;
   10c72:	strb	r3, [r1, #0]
	tx_noautoflush = 0;
   10c74:	strb	r3, [r2, #0]
   10c76:	pop	{r3, r4, r5, r6, r7, pc}
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
   10c78:	movs	r3, #64	; 0x40
		rx_packet_size = MIDI_RX_SIZE_12;
   10c7a:	ldr	r2, [pc, #20]	; (10c90 <usb_midi_configure+0xa0>)
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
   10c7c:	ldr	r7, [pc, #12]	; (10c8c <usb_midi_configure+0x9c>)
		rx_packet_size = MIDI_RX_SIZE_12;
   10c7e:	mov	r6, r3
   10c80:	strh	r3, [r2, #0]
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
   10c82:	strh	r3, [r7, #0]
   10c84:	b.n	10c08 <usb_midi_configure+0x18>
   10c86:	nop
   10c88:	.word	0x200261bc
   10c8c:	.word	0x20025f20
   10c90:	.word	0x20025f08
   10c94:	.word	0x20026040
   10c98:	.word	0x200260c8
   10c9c:	.word	0x20025f0a
   10ca0:	.word	0x20025f60
   10ca4:	.word	0x20025f36
   10ca8:	.word	0x20026024
   10cac:	.word	0x20025f40
   10cb0:	.word	0x20026028
   10cb4:	.word	0x00010b8d
   10cb8:	.word	0x20025f37
   10cbc:	.word	0x20025f35
   10cc0:	.word	0x20025f34

00010cc4 <usb_midi_flush_output>:
	}
	tx_noautoflush = 0;
}

void usb_midi_flush_output(void)
{
   10cc4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
   10cc8:	ldr	r3, [pc, #120]	; (10d44 <usb_midi_flush_output+0x80>)
   10cca:	ldrb	r5, [r3, #0]
   10ccc:	cbnz	r5, 10cd4 <usb_midi_flush_output+0x10>
   10cce:	ldr	r7, [pc, #120]	; (10d48 <usb_midi_flush_output+0x84>)
   10cd0:	ldrh	r2, [r7, #0]
   10cd2:	cbnz	r2, 10cd8 <usb_midi_flush_output+0x14>
   10cd4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
   10cd8:	ldr.w	r9, [pc, #128]	; 10d5c <usb_midi_flush_output+0x98>
		transfer_t *xfer = tx_transfer + head;
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
   10cdc:	mov	r3, r5
{
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
		transfer_t *xfer = tx_transfer + head;
   10cde:	ldr	r4, [pc, #108]	; (10d4c <usb_midi_flush_output+0x88>)
void usb_midi_flush_output(void)
{
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
   10ce0:	ldrb.w	r6, [r9]
		transfer_t *xfer = tx_transfer + head;
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
   10ce4:	ldr	r1, [pc, #104]	; (10d50 <usb_midi_flush_output+0x8c>)
		uint32_t len = tx_packet_size - tx_available;
   10ce6:	ldr	r0, [pc, #108]	; (10d54 <usb_midi_flush_output+0x90>)
{
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
		transfer_t *xfer = tx_transfer + head;
   10ce8:	add.w	r8, r4, r6, lsl #5
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
   10cec:	add.w	r4, r1, r6, lsl #9
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
   10cf0:	ldrh.w	lr, [r0]
   10cf4:	mov	r0, r8
   10cf6:	mov	r1, r4
   10cf8:	rsb	r2, r2, lr
   10cfc:	bl	121e0 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   10d00:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   10d04:	add.w	r1, r4, #512	; 0x200
	asm volatile("": : :"memory");
	asm("dsb");
   10d08:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   10d0c:	ldr	r2, [pc, #72]	; (10d58 <usb_midi_flush_output+0x94>)
   10d0e:	str	r3, [r2, #0]
		location += 32;
   10d10:	adds	r3, #32
	} while (location < end_addr);
   10d12:	cmp	r1, r3
   10d14:	bhi.n	10d0e <usb_midi_flush_output+0x4a>
	asm("dsb");
   10d16:	dsb	sy
	asm("isb");
   10d1a:	isb	sy
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
   10d1e:	adds	r6, #1
		transfer_t *xfer = tx_transfer + head;
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
   10d20:	movs	r0, #3
   10d22:	mov	r1, r8
   10d24:	bl	12210 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
   10d28:	cmp	r6, #3
		tx_head = head;
		tx_available = 0;
   10d2a:	mov.w	r3, #0
   10d2e:	it	ls
   10d30:	uxtbls	r5, r6
		usb_stop_sof_interrupts(MIDI_INTERFACE);
   10d32:	mov	r0, r3
		usb_prepare_transfer(xfer, txbuf, len, 0);
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
		tx_head = head;
		tx_available = 0;
   10d34:	strh	r3, [r7, #0]
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
		tx_head = head;
   10d36:	strb.w	r5, [r9]
		tx_available = 0;
		usb_stop_sof_interrupts(MIDI_INTERFACE);
	}
}
   10d3a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
		tx_head = head;
		tx_available = 0;
		usb_stop_sof_interrupts(MIDI_INTERFACE);
   10d3e:	b.w	120e8 <usb_stop_sof_interrupts>
   10d42:	nop
   10d44:	.word	0x20025f35
   10d48:	.word	0x20025f0a
   10d4c:	.word	0x20026040
   10d50:	.word	0x20201720
   10d54:	.word	0x20025f20
   10d58:	.word	0xe000ef70
   10d5c:	.word	0x200260c8

00010d60 <usb_midi_read_message>:
{
	return rx_available / 4;
}

uint32_t usb_midi_read_message(void)
{
   10d60:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
   10d62:	mov.w	r2, #131072	; 0x20000
   10d66:	ldr	r3, [pc, #100]	; (10dcc <usb_midi_read_message+0x6c>)
	uint32_t tail = rx_tail;
   10d68:	ldr	r6, [pc, #100]	; (10dd0 <usb_midi_read_message+0x70>)
}

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
   10d6a:	str	r2, [r3, #0]
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
   10d6c:	ldr	r2, [pc, #100]	; (10dd4 <usb_midi_read_message+0x74>)

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
   10d6e:	ldrb	r3, [r6, #0]
	if (tail != rx_head) {
   10d70:	ldrb	r2, [r2, #0]

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
   10d72:	uxtb	r3, r3
	if (tail != rx_head) {
   10d74:	cmp	r3, r2
   10d76:	beq.n	10dc6 <usb_midi_read_message+0x66>
		if (++tail > RX_NUM) tail = 0;
   10d78:	adds	r3, #1
		uint32_t i = rx_list[tail];
   10d7a:	ldr	r1, [pc, #92]	; (10dd8 <usb_midi_read_message+0x78>)
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   10d7c:	ldr	r7, [pc, #92]	; (10ddc <usb_midi_read_message+0x7c>)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
   10d7e:	cmp	r3, #7
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
		rx_index[i] += 4;
		if (rx_index[i] >= rx_count[i]) {
   10d80:	ldr	r2, [pc, #92]	; (10de0 <usb_midi_read_message+0x80>)
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
   10d82:	ldr	r5, [pc, #96]	; (10de4 <usb_midi_read_message+0x84>)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
   10d84:	it	cs
   10d86:	movcs	r3, #0
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
   10d88:	ldr	r4, [pc, #92]	; (10de8 <usb_midi_read_message+0x88>)
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
   10d8a:	ldrb	r0, [r1, r3]
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
   10d8c:	ldr	r1, [r5, #0]
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   10d8e:	ldrh.w	lr, [r7, r0, lsl #1]
		n = *(uint32_t *)p;
   10d92:	add.w	r4, r4, r0, lsl #9
		rx_available -= 4;
		rx_index[i] += 4;
		if (rx_index[i] >= rx_count[i]) {
   10d96:	ldrh.w	ip, [r2, r0, lsl #1]
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
   10d9a:	subs	r1, #4
		rx_index[i] += 4;
   10d9c:	add.w	r2, lr, #4
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
   10da0:	ldr.w	r4, [r4, lr]
		rx_available -= 4;
   10da4:	str	r1, [r5, #0]
		rx_index[i] += 4;
   10da6:	uxth	r2, r2
		if (rx_index[i] >= rx_count[i]) {
   10da8:	cmp	ip, r2
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
		rx_index[i] += 4;
   10daa:	strh.w	r2, [r7, r0, lsl #1]
		if (rx_index[i] >= rx_count[i]) {
   10dae:	bls.n	10dbc <usb_midi_read_message+0x5c>
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
   10db0:	ldr	r3, [pc, #56]	; (10dec <usb_midi_read_message+0x8c>)
   10db2:	mov.w	r2, #131072	; 0x20000
	return n;
}
   10db6:	mov	r0, r4
		if (rx_index[i] >= rx_count[i]) {
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
   10db8:	str	r2, [r3, #0]
	return n;
}
   10dba:	pop	{r3, r4, r5, r6, r7, pc}
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
		rx_index[i] += 4;
		if (rx_index[i] >= rx_count[i]) {
			rx_tail = tail;
   10dbc:	uxtb	r3, r3
   10dbe:	strb	r3, [r6, #0]
			rx_queue_transfer(i);
   10dc0:	bl	10b20 <rx_queue_transfer>
   10dc4:	b.n	10db0 <usb_midi_read_message+0x50>
	return rx_available / 4;
}

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
   10dc6:	movs	r4, #0
   10dc8:	b.n	10db0 <usb_midi_read_message+0x50>
   10dca:	nop
   10dcc:	.word	0xe000e18c
   10dd0:	.word	0x20025f36
   10dd4:	.word	0x20025f34
   10dd8:	.word	0x200260d0
   10ddc:	.word	0x20026028
   10de0:	.word	0x20025f40
   10de4:	.word	0x20026024
   10de8:	.word	0x20200b20
   10dec:	.word	0xe000e10c

00010df0 <usb_midi_read>:
	NVIC_ENABLE_IRQ(IRQ_USB1);
	return n;
}

int usb_midi_read(uint32_t channel)
{
   10df0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10df4:	mov	r7, r0
	uint32_t n, ch, type1, type2, b1;
	
	n = usb_midi_read_message();
   10df6:	bl	10d60 <usb_midi_read_message>
	if (n == 0) return 0;
   10dfa:	cbz	r0, 10e22 <usb_midi_read+0x32>
	type1 = n & 15;
   10dfc:	and.w	r5, r0, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
   10e00:	lsrs	r6, r0, #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
   10e02:	ubfx	r3, r0, #4, #4
   10e06:	mov	r4, r0
	if (type1 >= 0x08 && type1 <= 0x0E) {
   10e08:	sub.w	r2, r5, #8
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
   10e0c:	ldr	r1, [pc, #652]	; (1109c <usb_midi_read+0x2ac>)
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
   10e0e:	and.w	r0, r6, #15
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
   10e12:	cmp	r2, #6
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
   10e14:	strb	r3, [r1, #0]
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
   10e16:	add.w	r8, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
   10e1a:	bhi.n	10e28 <usb_midi_read+0x38>
		if (channel && channel != ch) {
   10e1c:	cbz	r7, 10e84 <usb_midi_read+0x94>
   10e1e:	cmp	r8, r7
   10e20:	beq.n	10e84 <usb_midi_read+0x94>
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
		}
	}
	return 0;
   10e22:	movs	r0, #0
   10e24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   10e28:	subs	r3, r5, #2
	
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
   10e2a:	uxtb	r0, r6
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   10e2c:	cmp	r3, #1
   10e2e:	bls.n	10e3c <usb_midi_read+0x4c>
   10e30:	cmp	r5, #5
   10e32:	bne.n	10ec2 <usb_midi_read+0xd2>
   10e34:	cmp	r0, #240	; 0xf0
   10e36:	bls.n	10ec2 <usb_midi_read+0xd2>
   10e38:	cmp	r0, #247	; 0xf7
   10e3a:	beq.n	10ec8 <usb_midi_read+0xd8>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
   10e3c:	subs	r0, #241	; 0xf1
   10e3e:	cmp	r0, #14
   10e40:	bhi.n	10e22 <usb_midi_read+0x32>
   10e42:	add	r3, pc, #4	; (adr r3, 10e48 <usb_midi_read+0x58>)
   10e44:	ldr.w	pc, [r3, r0, lsl #2]
   10e48:	.word	0x00011003
   10e4c:	.word	0x00010fe7
   10e50:	.word	0x00010fd5
   10e54:	.word	0x00010e23
   10e58:	.word	0x00010e23
   10e5c:	.word	0x00010fcb
   10e60:	.word	0x00010e23
   10e64:	.word	0x00010fb1
   10e68:	.word	0x00010e23
   10e6c:	.word	0x00010f97
   10e70:	.word	0x00010f7d
   10e74:	.word	0x00010f63
   10e78:	.word	0x00010e23
   10e7c:	.word	0x00010f49
   10e80:	.word	0x00010f2d
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
   10e84:	cmp	r5, #8
	uint32_t n, ch, type1, type2, b1;
	
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
   10e86:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
   10e8a:	bne.n	10eea <usb_midi_read+0xfa>
   10e8c:	cmp	r3, #8
   10e8e:	bne.n	10eea <usb_midi_read+0xfa>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
   10e90:	ldr	r3, [pc, #524]	; (110a0 <usb_midi_read+0x2b0>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
   10e92:	movs	r1, #128	; 0x80
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   10e94:	ldr	r2, [pc, #524]	; (110a4 <usb_midi_read+0x2b4>)
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   10e96:	ubfx	r5, r4, #16, #8
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
   10e9a:	ldr	r3, [r3, #0]
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   10e9c:	uxtb.w	r8, r8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   10ea0:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   10ea2:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
   10ea4:	cbz	r3, 10eae <usb_midi_read+0xbe>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   10ea6:	mov	r0, r8
   10ea8:	mov	r1, r5
   10eaa:	mov	r2, r4
   10eac:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
   10eae:	ldr	r1, [pc, #504]	; (110a8 <usb_midi_read+0x2b8>)
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
   10eb0:	movs	r0, #1
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
   10eb2:	ldr	r2, [pc, #504]	; (110ac <usb_midi_read+0x2bc>)
		usb_midi_msg_data2 = (n >> 24);
   10eb4:	ldr	r3, [pc, #504]	; (110b0 <usb_midi_read+0x2c0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
   10eb6:	strb.w	r8, [r1]
		usb_midi_msg_data1 = (n >> 16);
   10eba:	strb	r5, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
   10ebc:	strb	r4, [r3, #0]
		return 1;
   10ebe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
   10ec2:	cmp	r5, #4
   10ec4:	beq.w	11084 <usb_midi_read+0x294>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
   10ec8:	subs	r3, r5, #5
   10eca:	cmp	r3, #2
   10ecc:	bls.w	11010 <usb_midi_read+0x220>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
   10ed0:	cmp	r5, #15
   10ed2:	bne.n	10e22 <usb_midi_read+0x32>
		if (b1 >= 0xF8) {
   10ed4:	cmp	r0, #247	; 0xf7
   10ed6:	bhi.n	10e3c <usb_midi_read+0x4c>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
   10ed8:	cmp	r0, #240	; 0xf0
   10eda:	beq.n	10ee4 <usb_midi_read+0xf4>
   10edc:	ldr	r3, [pc, #468]	; (110b4 <usb_midi_read+0x2c4>)
   10ede:	ldrh	r3, [r3, #0]
   10ee0:	cmp	r3, #0
   10ee2:	beq.n	10e22 <usb_midi_read+0x32>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
   10ee4:	bl	10ad8 <sysex_byte>
   10ee8:	b.n	10e22 <usb_midi_read+0x32>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
   10eea:	cmp	r5, #9
   10eec:	bne.n	10f1a <usb_midi_read+0x12a>
   10eee:	cmp	r3, #9
   10ef0:	bne.n	10f1a <usb_midi_read+0x12a>
			if ((n >> 24) > 0) {
   10ef2:	lsrs	r2, r4, #24
   10ef4:	beq.w	11044 <usb_midi_read+0x254>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
   10ef8:	ldr	r3, [pc, #444]	; (110b8 <usb_midi_read+0x2c8>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   10efa:	movs	r0, #144	; 0x90
   10efc:	ldr	r1, [pc, #420]	; (110a4 <usb_midi_read+0x2b4>)
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   10efe:	ubfx	r5, r4, #16, #8
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
   10f02:	ldr	r3, [r3, #0]
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   10f04:	uxtb.w	r8, r8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   10f08:	strb	r0, [r1, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   10f0a:	uxtb	r4, r2
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
   10f0c:	cmp	r3, #0
   10f0e:	beq.n	10eae <usb_midi_read+0xbe>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   10f10:	mov	r1, r5
   10f12:	mov	r0, r8
   10f14:	mov	r2, r4
   10f16:	blx	r3
   10f18:	b.n	10eae <usb_midi_read+0xbe>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
   10f1a:	cmp	r5, #10
   10f1c:	bne.w	11064 <usb_midi_read+0x274>
   10f20:	cmp	r3, #10
   10f22:	bne.w	11064 <usb_midi_read+0x274>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
   10f26:	ldr	r3, [pc, #404]	; (110bc <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
   10f28:	movs	r1, #160	; 0xa0
   10f2a:	b.n	10e94 <usb_midi_read+0xa4>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
   10f2c:	ldr	r3, [pc, #400]	; (110c0 <usb_midi_read+0x2d0>)
   10f2e:	ldr	r3, [r3, #0]
   10f30:	cmp	r3, #0
   10f32:	beq.w	1114e <usb_midi_read+0x35e>
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
				(*usb_midi_handleClock)();
   10f36:	blx	r3
   10f38:	ubfx	r5, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
   10f3c:	ldr	r3, [pc, #356]	; (110a4 <usb_midi_read+0x2b4>)
   10f3e:	uxtb.w	r8, r8
   10f42:	lsrs	r4, r4, #24
   10f44:	strb	r6, [r3, #0]
		goto return_message;
   10f46:	b.n	10eae <usb_midi_read+0xbe>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
   10f48:	ldr	r3, [pc, #376]	; (110c4 <usb_midi_read+0x2d4>)
   10f4a:	ldr	r3, [r3, #0]
   10f4c:	cmp	r3, #0
   10f4e:	bne.n	10f36 <usb_midi_read+0x146>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
   10f50:	ldr	r3, [pc, #372]	; (110c8 <usb_midi_read+0x2d8>)
   10f52:	ldr	r3, [r3, #0]
   10f54:	cmp	r3, #0
   10f56:	beq.n	10f38 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFE);
   10f58:	movs	r0, #254	; 0xfe
   10f5a:	ubfx	r5, r4, #16, #8
   10f5e:	blx	r3
   10f60:	b.n	10f3c <usb_midi_read+0x14c>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
   10f62:	ldr	r3, [pc, #360]	; (110cc <usb_midi_read+0x2dc>)
   10f64:	ldr	r3, [r3, #0]
   10f66:	cmp	r3, #0
   10f68:	bne.n	10f36 <usb_midi_read+0x146>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
   10f6a:	ldr	r3, [pc, #348]	; (110c8 <usb_midi_read+0x2d8>)
   10f6c:	ldr	r3, [r3, #0]
   10f6e:	cmp	r3, #0
   10f70:	beq.n	10f38 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFC);
   10f72:	movs	r0, #252	; 0xfc
   10f74:	ubfx	r5, r4, #16, #8
   10f78:	blx	r3
   10f7a:	b.n	10f3c <usb_midi_read+0x14c>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFA);
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
   10f7c:	ldr	r3, [pc, #336]	; (110d0 <usb_midi_read+0x2e0>)
   10f7e:	ldr	r3, [r3, #0]
   10f80:	cmp	r3, #0
   10f82:	bne.n	10f36 <usb_midi_read+0x146>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
   10f84:	ldr	r3, [pc, #320]	; (110c8 <usb_midi_read+0x2d8>)
   10f86:	ldr	r3, [r3, #0]
   10f88:	cmp	r3, #0
   10f8a:	beq.n	10f38 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFB);
   10f8c:	movs	r0, #251	; 0xfb
   10f8e:	ubfx	r5, r4, #16, #8
   10f92:	blx	r3
   10f94:	b.n	10f3c <usb_midi_read+0x14c>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
   10f96:	ldr	r3, [pc, #316]	; (110d4 <usb_midi_read+0x2e4>)
   10f98:	ldr	r3, [r3, #0]
   10f9a:	cmp	r3, #0
   10f9c:	bne.n	10f36 <usb_midi_read+0x146>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
   10f9e:	ldr	r3, [pc, #296]	; (110c8 <usb_midi_read+0x2d8>)
   10fa0:	ldr	r3, [r3, #0]
   10fa2:	cmp	r3, #0
   10fa4:	beq.n	10f38 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFA);
   10fa6:	movs	r0, #250	; 0xfa
   10fa8:	ubfx	r5, r4, #16, #8
   10fac:	blx	r3
   10fae:	b.n	10f3c <usb_midi_read+0x14c>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
   10fb0:	ldr	r3, [pc, #292]	; (110d8 <usb_midi_read+0x2e8>)
   10fb2:	ldr	r3, [r3, #0]
   10fb4:	cmp	r3, #0
   10fb6:	bne.n	10f36 <usb_midi_read+0x146>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
   10fb8:	ldr	r3, [pc, #268]	; (110c8 <usb_midi_read+0x2d8>)
   10fba:	ldr	r3, [r3, #0]
   10fbc:	cmp	r3, #0
   10fbe:	beq.n	10f38 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xF8);
   10fc0:	movs	r0, #248	; 0xf8
   10fc2:	ubfx	r5, r4, #16, #8
   10fc6:	blx	r3
   10fc8:	b.n	10f3c <usb_midi_read+0x14c>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
   10fca:	ldr	r3, [pc, #272]	; (110dc <usb_midi_read+0x2ec>)
   10fcc:	ldr	r3, [r3, #0]
   10fce:	cmp	r3, #0
   10fd0:	bne.n	10f36 <usb_midi_read+0x146>
   10fd2:	b.n	10f38 <usb_midi_read+0x148>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
   10fd4:	ldr	r3, [pc, #264]	; (110e0 <usb_midi_read+0x2f0>)
				(*usb_midi_handleSongSelect)(n >> 16);
   10fd6:	ubfx	r5, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
   10fda:	ldr	r3, [r3, #0]
   10fdc:	cmp	r3, #0
   10fde:	beq.n	10f3c <usb_midi_read+0x14c>
				(*usb_midi_handleSongSelect)(n >> 16);
   10fe0:	mov	r0, r5
   10fe2:	blx	r3
   10fe4:	b.n	10f3c <usb_midi_read+0x14c>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
   10fe6:	ldr	r3, [pc, #252]	; (110e4 <usb_midi_read+0x2f4>)
   10fe8:	ldr	r2, [r3, #0]
   10fea:	cmp	r2, #0
   10fec:	beq.n	10f38 <usb_midi_read+0x148>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
   10fee:	lsrs	r5, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
   10ff0:	lsrs	r3, r4, #17
   10ff2:	and.w	r0, r5, #127	; 0x7f
   10ff6:	uxtb	r5, r5
   10ff8:	and.w	r3, r3, #16256	; 0x3f80
   10ffc:	orrs	r0, r3
   10ffe:	blx	r2
   11000:	b.n	10f3c <usb_midi_read+0x14c>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
   11002:	ldr	r3, [pc, #228]	; (110e8 <usb_midi_read+0x2f8>)
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
   11004:	ubfx	r5, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
   11008:	ldr	r3, [r3, #0]
   1100a:	cmp	r3, #0
   1100c:	bne.n	10fe0 <usb_midi_read+0x1f0>
   1100e:	b.n	10f3c <usb_midi_read+0x14c>
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
   11010:	bl	10ad8 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
   11014:	cmp	r5, #5
   11016:	bne.w	11126 <usb_midi_read+0x336>
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
   1101a:	ldr	r3, [pc, #152]	; (110b4 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
   1101c:	movs	r7, #0
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
   1101e:	ldr	r0, [pc, #204]	; (110ec <usb_midi_read+0x2fc>)
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   11020:	movs	r2, #240	; 0xf0
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
   11022:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
   11024:	ldr	r4, [r0, #0]
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
   11026:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
   11028:	lsrs	r5, r1, #8
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
   1102a:	ldr	r6, [pc, #128]	; (110ac <usb_midi_read+0x2bc>)
		usb_midi_msg_data2 = len >> 8;
   1102c:	ldr	r0, [pc, #128]	; (110b0 <usb_midi_read+0x2c0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   1102e:	ldr	r3, [pc, #116]	; (110a4 <usb_midi_read+0x2b4>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
   11030:	strb	r1, [r6, #0]
		usb_midi_msg_data2 = len >> 8;
   11032:	strb	r5, [r0, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   11034:	strb	r2, [r3, #0]
		if (usb_midi_handleSysExPartial) {
   11036:	cbz	r4, 11072 <usb_midi_read+0x282>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
   11038:	movs	r2, #1
   1103a:	ldr	r0, [pc, #180]	; (110f0 <usb_midi_read+0x300>)
   1103c:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
   1103e:	movs	r0, #1
   11040:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
   11044:	ldr	r3, [pc, #88]	; (110a0 <usb_midi_read+0x2b0>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   11046:	movs	r0, #128	; 0x80
   11048:	ldr	r1, [pc, #88]	; (110a4 <usb_midi_read+0x2b4>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   1104a:	uxtb.w	r8, r8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
   1104e:	ldr	r3, [r3, #0]
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   11050:	ubfx	r5, r4, #16, #8
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   11054:	strb	r0, [r1, #0]
				if (usb_midi_handleNoteOff)
   11056:	cmp	r3, #0
   11058:	beq.n	1114a <usb_midi_read+0x35a>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   1105a:	mov	r1, r5
   1105c:	mov	r0, r8
   1105e:	mov	r4, r2
   11060:	blx	r3
   11062:	b.n	10eae <usb_midi_read+0xbe>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
   11064:	cmp	r5, #11
   11066:	bne.n	110fc <usb_midi_read+0x30c>
   11068:	cmp	r3, #11
   1106a:	bne.n	110fc <usb_midi_read+0x30c>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
   1106c:	ldr	r3, [pc, #132]	; (110f4 <usb_midi_read+0x304>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   1106e:	movs	r1, #176	; 0xb0
   11070:	b.n	10e94 <usb_midi_read+0xa4>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
   11072:	ldr	r3, [pc, #132]	; (110f8 <usb_midi_read+0x308>)
   11074:	ldr	r3, [r3, #0]
   11076:	cmp	r3, #0
   11078:	beq.n	11162 <usb_midi_read+0x372>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
   1107a:	ldr	r0, [pc, #116]	; (110f0 <usb_midi_read+0x300>)
   1107c:	blx	r3
		}
		return 1;
   1107e:	movs	r0, #1
   11080:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
   11084:	bl	10ad8 <sysex_byte>
		sysex_byte(n >> 16);
   11088:	ubfx	r0, r4, #16, #8
   1108c:	bl	10ad8 <sysex_byte>
		sysex_byte(n >> 24);
   11090:	lsrs	r0, r4, #24
   11092:	bl	10ad8 <sysex_byte>
		return 0;
   11096:	movs	r0, #0
   11098:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1109c:	.word	0x200266c6
   110a0:	.word	0x20025f28
   110a4:	.word	0x200266c0
   110a8:	.word	0x200266c7
   110ac:	.word	0x200266c4
   110b0:	.word	0x200266c5
   110b4:	.word	0x200266c2
   110b8:	.word	0x20025f18
   110bc:	.word	0x20025f24
   110c0:	.word	0x20025f0c
   110c4:	.word	0x20025f3c
   110c8:	.word	0x200260c0
   110cc:	.word	0x20025f04
   110d0:	.word	0x20025f00
   110d4:	.word	0x20025f2c
   110d8:	.word	0x20025f38
   110dc:	.word	0x200260cc
   110e0:	.word	0x20026020
   110e4:	.word	0x20025efc
   110e8:	.word	0x20025f10
   110ec:	.word	0x20025f14
   110f0:	.word	0x200266c8
   110f4:	.word	0x20026034
   110f8:	.word	0x20025f30
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
   110fc:	cmp	r5, #12
   110fe:	bne.n	1113c <usb_midi_read+0x34c>
   11100:	cmp	r3, #12
   11102:	bne.n	1113c <usb_midi_read+0x34c>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
   11104:	ldr	r3, [pc, #164]	; (111ac <usb_midi_read+0x3bc>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
   11106:	movs	r1, #192	; 0xc0
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   11108:	ldr	r2, [pc, #164]	; (111b0 <usb_midi_read+0x3c0>)
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   1110a:	ubfx	r5, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
   1110e:	ldr	r3, [r3, #0]
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   11110:	uxtb.w	r8, r8
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   11114:	strb	r1, [r2, #0]
   11116:	lsrs	r4, r4, #24
			if (usb_midi_handleAfterTouch)
   11118:	cmp	r3, #0
   1111a:	beq.w	10eae <usb_midi_read+0xbe>
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   1111e:	mov	r0, r8
   11120:	mov	r1, r5
   11122:	blx	r3
   11124:	b.n	10eae <usb_midi_read+0xbe>
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
   11126:	ubfx	r0, r4, #16, #8
   1112a:	bl	10ad8 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
   1112e:	cmp	r5, #7
   11130:	bne.w	1101a <usb_midi_read+0x22a>
   11134:	lsrs	r0, r4, #24
   11136:	bl	10ad8 <sysex_byte>
   1113a:	b.n	1101a <usb_midi_read+0x22a>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
   1113c:	cmp	r5, #13
   1113e:	bne.n	11168 <usb_midi_read+0x378>
   11140:	cmp	r3, #13
   11142:	bne.n	11168 <usb_midi_read+0x378>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
   11144:	ldr	r3, [pc, #108]	; (111b4 <usb_midi_read+0x3c4>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   11146:	movs	r1, #208	; 0xd0
   11148:	b.n	11108 <usb_midi_read+0x318>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
   1114a:	mov	r4, r3
   1114c:	b.n	10eae <usb_midi_read+0xbe>
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
   1114e:	ldr	r3, [pc, #104]	; (111b8 <usb_midi_read+0x3c8>)
   11150:	ubfx	r5, r4, #16, #8
   11154:	ldr	r3, [r3, #0]
   11156:	cmp	r3, #0
   11158:	beq.w	10f3c <usb_midi_read+0x14c>
				(*usb_midi_handleRealTimeSystem)(0xFF);
   1115c:	movs	r0, #255	; 0xff
   1115e:	blx	r3
   11160:	b.n	10f3c <usb_midi_read+0x14c>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
   11162:	movs	r0, #1
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
		}
	}
	return 0;
}
   11164:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
   11168:	cmp	r5, #14
   1116a:	bne.w	10e22 <usb_midi_read+0x32>
   1116e:	cmp	r3, #14
   11170:	bne.w	10e22 <usb_midi_read+0x32>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
   11174:	ldr	r2, [pc, #68]	; (111bc <usb_midi_read+0x3cc>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   11176:	movs	r1, #224	; 0xe0
   11178:	ldr	r3, [pc, #52]	; (111b0 <usb_midi_read+0x3c0>)
			if (usb_midi_handlePitchChange) {
   1117a:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   1117c:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
   1117e:	cbz	r2, 111a0 <usb_midi_read+0x3b0>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   11180:	lsrs	r5, r4, #16
   11182:	lsrs	r1, r4, #17
   11184:	and.w	r3, r5, #127	; 0x7f
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   11188:	uxtb.w	r8, r8
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   1118c:	and.w	r1, r1, #16256	; 0x3f80
   11190:	uxtb	r5, r5
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   11192:	mov	r0, r8
   11194:	lsrs	r4, r4, #24
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   11196:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   11198:	sub.w	r1, r1, #8192	; 0x2000
   1119c:	blx	r2
   1119e:	b.n	10eae <usb_midi_read+0xbe>
   111a0:	ubfx	r5, r4, #16, #8
   111a4:	uxtb.w	r8, r8
   111a8:	lsrs	r4, r4, #24
   111aa:	b.n	10eae <usb_midi_read+0xbe>
   111ac:	.word	0x20025f1c
   111b0:	.word	0x200266c0
   111b4:	.word	0x200260d8
   111b8:	.word	0x200260c0
   111bc:	.word	0x200260c4

000111c0 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
   111c0:	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   111c2:	ldr	r4, [pc, #80]	; (11214 <pit_isr()+0x54>)
   111c4:	ldr	r3, [r4, #0]
   111c6:	cbz	r3, 111ce <pit_isr()+0xe>
   111c8:	ldr	r2, [pc, #76]	; (11218 <pit_isr()+0x58>)
   111ca:	ldr	r1, [r2, #12]
   111cc:	cbnz	r1, 1120a <pit_isr()+0x4a>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   111ce:	ldr	r3, [r4, #4]
   111d0:	cbz	r3, 111d8 <pit_isr()+0x18>
   111d2:	ldr	r2, [pc, #72]	; (1121c <pit_isr()+0x5c>)
   111d4:	ldr	r1, [r2, #12]
   111d6:	cbnz	r1, 11202 <pit_isr()+0x42>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   111d8:	ldr	r3, [r4, #8]
   111da:	cbz	r3, 111e2 <pit_isr()+0x22>
   111dc:	ldr	r2, [pc, #64]	; (11220 <pit_isr()+0x60>)
   111de:	ldr	r1, [r2, #12]
   111e0:	cbnz	r1, 111fa <pit_isr()+0x3a>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   111e2:	ldr	r3, [r4, #12]
   111e4:	cbz	r3, 111f6 <pit_isr()+0x36>
   111e6:	ldr	r2, [pc, #60]	; (11224 <pit_isr()+0x64>)
   111e8:	ldr	r1, [r2, #12]
   111ea:	cbz	r1, 111f8 <pit_isr()+0x38>
   111ec:	movs	r1, #1
#endif
}
   111ee:	ldmia.w	sp!, {r4, lr}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   111f2:	str	r1, [r2, #12]
   111f4:	bx	r3
   111f6:	pop	{r4, pc}
   111f8:	pop	{r4, pc}
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   111fa:	movs	r1, #1
   111fc:	str	r1, [r2, #12]
   111fe:	blx	r3
   11200:	b.n	111e2 <pit_isr()+0x22>
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   11202:	movs	r1, #1
   11204:	str	r1, [r2, #12]
   11206:	blx	r3
   11208:	b.n	111d8 <pit_isr()+0x18>

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   1120a:	movs	r1, #1
   1120c:	str	r1, [r2, #12]
   1120e:	blx	r3
   11210:	b.n	111ce <pit_isr()+0xe>
   11212:	nop
   11214:	.word	0x200260e0
   11218:	.word	0x40084100
   1121c:	.word	0x40084110
   11220:	.word	0x40084120
   11224:	.word	0x40084130

00011228 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	printf("beginCycles %u\n", cycles);
	if (channel) {
   11228:	ldr	r3, [r0, #0]
static void (*funct_table[4])(void) __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
uint8_t IntervalTimer::nvic_priorites[4] = {255, 255, 255, 255};


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
   1122a:	push	{r4, r5, r6, r7, lr}
	printf("beginCycles %u\n", cycles);
	if (channel) {
   1122c:	cbz	r3, 11286 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x5e>
		channel->TCTRL = 0;
   1122e:	movs	r5, #0
		channel->TFLG = 1;
   11230:	movs	r4, #1

bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
   11232:	str	r5, [r3, #8]
		channel->TFLG = 1;
   11234:	str	r4, [r3, #12]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
   11236:	ldr	r5, [pc, #132]	; (112bc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x94>)
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
   11238:	movs	r4, #3
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
	funct_table[index] = funct;
	channel->LDVAL = cycles;
   1123a:	str	r2, [r3, #0]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
   1123c:	add	r5, r3
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
   1123e:	str	r4, [r3, #8]
	nvic_priorites[index] = nvic_priority;
   11240:	ldr	r4, [pc, #124]	; (112c0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x98>)
   11242:	ldrb	r3, [r0, #4]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
   11244:	asrs	r5, r5, #4
	funct_table[index] = funct;
   11246:	ldr	r7, [pc, #124]	; (112c4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x9c>)
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
	nvic_priorites[index] = nvic_priority;
   11248:	strb	r3, [r4, r5]
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   1124a:	ldrb	r3, [r4, #0]
   1124c:	ldrb	r0, [r4, #1]
   1124e:	cmp	r3, #255	; 0xff
   11250:	ldrb	r2, [r4, #2]
   11252:	ldrb	r4, [r4, #3]
   11254:	it	cs
   11256:	movcs	r3, #255	; 0xff
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   11258:	ldr	r6, [pc, #108]	; (112c8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
	funct_table[index] = funct;
   1125a:	str.w	r1, [r7, r5, lsl #2]
   1125e:	cmp	r3, r0
   11260:	it	cs
   11262:	movcs	r3, r0
   11264:	ldr	r0, [pc, #100]	; (112cc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
   11266:	cmp	r3, r2
   11268:	str.w	r6, [r0, #552]	; 0x228
   1126c:	it	cs
   1126e:	movcs	r3, r2
   11270:	cmp	r3, r4
   11272:	it	cs
   11274:	movcs	r3, r4
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
	}
	attachInterruptVector(IRQ_PIT, &pit_isr);
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   11276:	ldr	r4, [pc, #88]	; (112d0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
   11278:	mov.w	r1, #67108864	; 0x4000000
   1127c:	ldr	r2, [pc, #84]	; (112d4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	return true;
   1127e:	movs	r0, #1
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
	}
	attachInterruptVector(IRQ_PIT, &pit_isr);
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   11280:	strb	r3, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_PIT);
   11282:	str	r1, [r2, #0]
	return true;
}
   11284:	pop	{r4, r5, r6, r7, pc}
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   11286:	ldr	r7, [pc, #80]	; (112d8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
   11288:	mov.w	ip, #1
		channel = IMXRT_PIT_CHANNELS;
   1128c:	ldr	r6, [pc, #76]	; (112dc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   1128e:	ldr	r4, [r7, #108]	; 0x6c
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
   11290:	ldr.w	lr, [pc, #80]	; 112e4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>
		channel = IMXRT_PIT_CHANNELS;
   11294:	mov	r3, r6
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   11296:	orr.w	r4, r4, #12288	; 0x3000
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = IMXRT_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   1129a:	ldr	r5, [pc, #68]	; (112e0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   1129c:	str	r4, [r7, #108]	; 0x6c
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
   1129e:	str.w	ip, [lr]
		channel = IMXRT_PIT_CHANNELS;
   112a2:	str	r6, [r0, #0]
		while (1) {
			if (channel->TCTRL == 0) break;
   112a4:	ldr	r4, [r3, #8]
   112a6:	cmp	r4, #0
   112a8:	beq.n	11236 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xe>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   112aa:	adds	r3, #16
   112ac:	cmp	r3, r5
   112ae:	str	r3, [r0, #0]
   112b0:	bne.n	112a4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x7c>
				channel = NULL;
   112b2:	movs	r3, #0
   112b4:	str	r3, [r0, #0]
				return false;
   112b6:	mov	r0, r3
   112b8:	pop	{r4, r5, r6, r7, pc}
   112ba:	nop
   112bc:	.word	0xbff7bf00
   112c0:	.word	0x2001fd98
   112c4:	.word	0x200260e0
   112c8:	.word	0x000111c1
   112cc:	.word	0x20026400
   112d0:	.word	0xe000e47a
   112d4:	.word	0xe000e10c
   112d8:	.word	0x400fc000
   112dc:	.word	0x40084100
   112e0:	.word	0x40084140
   112e4:	.word	0x40084000

000112e8 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
   112e8:	ldr	r2, [r0, #0]
   112ea:	cbz	r2, 11330 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
   112ec:	ldr	r3, [pc, #68]	; (11334 <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
   112ee:	ldr	r1, [pc, #72]	; (11338 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
   112f0:	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
   112f2:	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
   112f4:	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
   112f6:	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
   112f8:	movs	r4, #0
   112fa:	ldr.w	lr, [pc, #68]	; 11340 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
   112fe:	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   11300:	ldrb	r6, [r1, #0]
   11302:	ldrb	r5, [r1, #1]
   11304:	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
   11306:	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
   11308:	str.w	r4, [lr, r3, lsl #2]
   1130c:	it	cs
   1130e:	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   11310:	ldrb	r2, [r1, #2]
   11312:	ldrb	r1, [r1, #3]
   11314:	cmp	r6, r5
   11316:	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   11318:	ldr	r7, [pc, #32]	; (1133c <IntervalTimer::end()+0x54>)
   1131a:	it	cs
   1131c:	movcs	r3, r5
   1131e:	cmp	r3, r2
   11320:	it	cs
   11322:	movcs	r3, r2
   11324:	cmp	r3, r1
   11326:	it	cs
   11328:	movcs	r3, r1
   1132a:	strb	r3, [r7, #0]
		channel = 0;
   1132c:	str	r4, [r0, #0]
   1132e:	pop	{r4, r5, r6, r7, pc}
   11330:	bx	lr
   11332:	nop
   11334:	.word	0xbff7bf00
   11338:	.word	0x2001fd98
   1133c:	.word	0xe000e47a
   11340:	.word	0x200260e0

00011344 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
   11344:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
   11348:	ldr	r6, [pc, #200]	; (11414 <yield+0xd0>)
   1134a:	ldrb	r3, [r6, #0]
   1134c:	cbz	r3, 11374 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
   1134e:	ldr	r7, [pc, #200]	; (11418 <yield+0xd4>)
   11350:	ldrb	r2, [r7, #0]
   11352:	cbnz	r2, 11374 <yield+0x30>
	running = 1;
   11354:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   11356:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
   11358:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   1135a:	bmi.n	113cc <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
   1135c:	lsls	r2, r3, #30
   1135e:	bmi.n	11394 <yield+0x50>

	running = 0;
   11360:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   11362:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
   11364:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   11366:	bpl.n	11374 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
   11368:	ldr	r3, [pc, #176]	; (1141c <yield+0xd8>)
   1136a:	ldr	r2, [r3, #0]
   1136c:	cbz	r2, 11374 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   1136e:	mrs	r2, IPSR
		if (ipsr != 0) return;
   11372:	cbz	r2, 11378 <yield+0x34>
   11374:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   11378:	mrs	r0, PRIMASK
		__disable_irq();
   1137c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
   1137e:	ldr	r2, [r3, #0]
		if (first == nullptr) {
   11380:	cbz	r2, 1138a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
   11382:	ldr	r4, [pc, #156]	; (11420 <yield+0xdc>)
   11384:	ldrb	r1, [r4, #0]
   11386:	cmp	r1, #0
   11388:	beq.n	113ea <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1138a:	cmp	r0, #0
   1138c:	bne.n	11374 <yield+0x30>
   1138e:	cpsie	i
   11390:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   11394:	ldr.w	r8, [pc, #148]	; 1142c <yield+0xe8>
   11398:	ldrb.w	r2, [r8]
   1139c:	cmp	r2, #0
   1139e:	beq.n	11360 <yield+0x1c>
   113a0:	movs	r4, #0
   113a2:	ldr.w	r9, [pc, #140]	; 11430 <yield+0xec>
   113a6:	b.n	113b4 <yield+0x70>
   113a8:	adds	r4, #1
   113aa:	ldrb.w	r3, [r8]
   113ae:	uxtb	r4, r4
   113b0:	cmp	r3, r4
   113b2:	bls.n	113dc <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
   113b4:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   113b8:	ldr	r3, [r5, #0]
   113ba:	mov	r0, r5
   113bc:	ldr	r3, [r3, #16]
   113be:	blx	r3
   113c0:	cmp	r0, #0
   113c2:	beq.n	113a8 <yield+0x64>
   113c4:	ldr	r3, [r5, #20]
   113c6:	ldr	r3, [r3, #8]
   113c8:	blx	r3
   113ca:	b.n	113a8 <yield+0x64>
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
   113cc:	bl	1038c <usb_seremu_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   113d0:	cbnz	r0, 11408 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
   113d2:	ldr	r3, [pc, #80]	; (11424 <yield+0xe0>)
   113d4:	ldrb	r3, [r3, #0]
   113d6:	cbnz	r3, 113e0 <yield+0x9c>
   113d8:	ldrb	r3, [r6, #0]
   113da:	b.n	1135c <yield+0x18>
   113dc:	ldrb	r3, [r6, #0]
   113de:	b.n	11360 <yield+0x1c>
   113e0:	ldrb	r3, [r6, #0]
   113e2:	and.w	r3, r3, #254	; 0xfe
   113e6:	strb	r3, [r6, #0]
   113e8:	b.n	1135c <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
   113ea:	movs	r6, #1
		firstYield = first->_next;
   113ec:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
   113ee:	strb	r6, [r4, #0]
		firstYield = first->_next;
   113f0:	str	r5, [r3, #0]
		if (firstYield) {
   113f2:	cbz	r5, 1140e <yield+0xca>
			firstYield->_prev = nullptr;
   113f4:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   113f6:	cbnz	r0, 113fa <yield+0xb6>
   113f8:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
   113fa:	movs	r5, #0
		(*(first->_function))(*first);
   113fc:	ldr	r3, [r2, #8]
   113fe:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
   11400:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
   11402:	blx	r3
		runningFromYield = false;
   11404:	strb	r5, [r4, #0]
   11406:	b.n	11374 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   11408:	bl	11988 <serialEvent()>
   1140c:	b.n	113d2 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
   1140e:	ldr	r3, [pc, #24]	; (11428 <yield+0xe4>)
   11410:	str	r5, [r3, #0]
   11412:	b.n	113f6 <yield+0xb2>
   11414:	.word	0x2001fd9c
   11418:	.word	0x200260f0
   1141c:	.word	0x20026100
   11420:	.word	0x20026104
   11424:	.word	0x60001810
   11428:	.word	0x200260fc
   1142c:	.word	0x200261a8
   11430:	.word	0x2002618c

00011434 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
   11434:	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
   11436:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
   11438:	cbnz	r1, 1145e <DMAChannel::begin(bool)+0x2a>
   1143a:	ldr	r2, [r0, #0]
   1143c:	cbz	r2, 1145e <DMAChannel::begin(bool)+0x2a>
   1143e:	ldrb	r3, [r0, #4]
   11440:	cmp	r3, #15
   11442:	bhi.n	1145e <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
   11444:	ldr	r4, [pc, #124]	; (114c4 <DMAChannel::begin(bool)+0x90>)
   11446:	ldrh	r1, [r4, #0]
   11448:	asr.w	r5, r1, r3
   1144c:	lsls	r5, r5, #31
   1144e:	bpl.n	11462 <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
   11450:	ldr	r5, [pc, #116]	; (114c8 <DMAChannel::begin(bool)+0x94>)
   11452:	add	r5, r3
   11454:	cmp.w	r2, r5, lsl #5
   11458:	bne.n	11462 <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
   1145a:	cpsie	i
		return;
   1145c:	b.n	1147c <DMAChannel::begin(bool)+0x48>
   1145e:	ldr	r4, [pc, #100]	; (114c4 <DMAChannel::begin(bool)+0x90>)
   11460:	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
   11462:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
   11464:	asr.w	r2, r1, r3
   11468:	ands.w	r2, r2, #1
   1146c:	beq.n	11480 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
   1146e:	adds	r3, #1
   11470:	cmp	r3, #16
   11472:	bne.n	11464 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
   11474:	cpsie	i
			TCD = (TCD_t *)0;
   11476:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
   11478:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
   1147a:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
   1147c:	pop	{r4, r5, r6, r7}
   1147e:	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
   11480:	movs	r5, #1
   11482:	lsls	r5, r3
   11484:	orrs	r1, r5
   11486:	strh	r1, [r4, #0]
			__enable_irq();
   11488:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   1148a:	ldr	r6, [pc, #64]	; (114cc <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
   1148c:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   1148e:	ldr	r1, [pc, #56]	; (114c8 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   11490:	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
   11494:	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   11496:	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   11498:	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   1149a:	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   1149c:	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   114a0:	ldr	r1, [pc, #44]	; (114d0 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   114a2:	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   114a4:	str	r7, [r1, #0]
	DMA_CERQ = ch;
   114a6:	strb	r4, [r1, #26]
	DMA_CERR = ch;
   114a8:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
   114aa:	strb	r4, [r1, #24]
	DMA_CINT = ch;
   114ac:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   114ae:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
   114b0:	str	r2, [r3, #0]
	*p++ = 0;
   114b2:	str	r2, [r3, #4]
	*p++ = 0;
   114b4:	str	r2, [r3, #8]
	*p++ = 0;
   114b6:	str	r2, [r3, #12]
	*p++ = 0;
   114b8:	str	r2, [r3, #16]
	*p++ = 0;
   114ba:	str	r2, [r3, #20]
	*p++ = 0;
   114bc:	str	r2, [r3, #24]
	*p++ = 0;
   114be:	str	r2, [r3, #28]
}
   114c0:	pop	{r4, r5, r6, r7}
   114c2:	bx	lr
   114c4:	.word	0x200260f2
   114c8:	.word	0x02007480
   114cc:	.word	0x400fc000
   114d0:	.word	0x400e8000

000114d4 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
   114d4:	ldrb	r3, [r0, #4]
   114d6:	cmp	r3, #15
   114d8:	bhi.n	114fc <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
   114da:	ldr	r2, [pc, #36]	; (11500 <DMAChannel::release()+0x2c>)
   114dc:	strb	r3, [r2, #26]
	__disable_irq();
   114de:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
   114e0:	ldr	r1, [pc, #32]	; (11504 <DMAChannel::release()+0x30>)
   114e2:	movs	r3, #1
   114e4:	ldrb	r2, [r0, #4]
   114e6:	lsl.w	r2, r3, r2
   114ea:	ldrh	r3, [r1, #0]
   114ec:	bic.w	r3, r3, r2
   114f0:	strh	r3, [r1, #0]
	__enable_irq();
   114f2:	cpsie	i
	channel = DMA_MAX_CHANNELS;
   114f4:	movs	r2, #16
	TCD = (TCD_t *)0;
   114f6:	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
   114f8:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
   114fa:	str	r3, [r0, #0]
   114fc:	bx	lr
   114fe:	nop
   11500:	.word	0x400e8000
   11504:	.word	0x200260f2

00011508 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
   11508:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1150a:	mrs	r2, PRIMASK
		__disable_irq();
   1150e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
   11510:	ldrb	r3, [r0, #29]
   11512:	cbnz	r3, 11522 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
   11514:	ldrb	r1, [r0, #28]
   11516:	cmp	r1, #1
   11518:	beq.n	1152c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
   1151a:	cmp	r1, #3
   1151c:	beq.n	11540 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
   1151e:	movs	r3, #1
   11520:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   11522:	cbnz	r2, 11526 <EventResponder::triggerEventNotImmediate()+0x1e>
   11524:	cpsie	i
	}
	enableInterrupts(irq);
}
   11526:	ldr.w	r4, [sp], #4
   1152a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
   1152c:	ldr	r4, [pc, #68]	; (11574 <EventResponder::triggerEventNotImmediate()+0x6c>)
   1152e:	ldr	r1, [r4, #0]
   11530:	cbz	r1, 1155c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
   11532:	ldr	r1, [pc, #68]	; (11578 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
   11534:	str	r3, [r0, #20]
				_prev = lastYield;
   11536:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
   11538:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
   1153a:	str	r3, [r0, #24]
				_prev->_next = this;
   1153c:	str	r0, [r3, #20]
   1153e:	b.n	1151e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
   11540:	ldr	r4, [pc, #56]	; (1157c <EventResponder::triggerEventNotImmediate()+0x74>)
   11542:	ldr	r1, [r4, #0]
   11544:	cbz	r1, 11568 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
   11546:	ldr	r1, [pc, #56]	; (11580 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
   11548:	str	r3, [r0, #20]
				_prev = lastInterrupt;
   1154a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
   1154c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
   1154e:	str	r3, [r0, #24]
				_prev->_next = this;
   11550:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   11552:	ldr	r3, [pc, #48]	; (11584 <EventResponder::triggerEventNotImmediate()+0x7c>)
   11554:	mov.w	r1, #268435456	; 0x10000000
   11558:	str	r1, [r3, #0]
   1155a:	b.n	1151e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
   1155c:	ldr	r3, [pc, #24]	; (11578 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
   1155e:	str	r1, [r0, #20]
				_prev = nullptr;
   11560:	str	r1, [r0, #24]
				firstYield = this;
   11562:	str	r0, [r4, #0]
				lastYield = this;
   11564:	str	r0, [r3, #0]
   11566:	b.n	1151e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
   11568:	ldr	r3, [pc, #20]	; (11580 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
   1156a:	str	r1, [r0, #20]
				_prev = nullptr;
   1156c:	str	r1, [r0, #24]
				firstInterrupt = this;
   1156e:	str	r0, [r4, #0]
				lastInterrupt = this;
   11570:	str	r0, [r3, #0]
   11572:	b.n	11552 <EventResponder::triggerEventNotImmediate()+0x4a>
   11574:	.word	0x20026100
   11578:	.word	0x200260fc
   1157c:	.word	0x200260f4
   11580:	.word	0x200260f8
   11584:	.word	0xe000ed04

00011588 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
   11588:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1158a:	mrs	r1, PRIMASK
		__disable_irq();
   1158e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   11590:	ldr	r4, [pc, #48]	; (115c4 <EventResponder::runFromInterrupt()+0x3c>)
   11592:	ldr	r3, [r4, #0]
		if (first) {
   11594:	cbz	r3, 115ba <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   11596:	ldr	r6, [pc, #48]	; (115c8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
   11598:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
   1159a:	ldr	r2, [r3, #20]
   1159c:	str	r2, [r4, #0]
			if (firstInterrupt) {
   1159e:	cbz	r2, 115c0 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
   115a0:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   115a2:	cbnz	r1, 115a6 <EventResponder::runFromInterrupt()+0x1e>
   115a4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
   115a6:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
   115a8:	mov	r0, r3
   115aa:	ldr	r3, [r3, #8]
   115ac:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   115ae:	mrs	r1, PRIMASK
		__disable_irq();
   115b2:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   115b4:	ldr	r3, [r4, #0]
		if (first) {
   115b6:	cmp	r3, #0
   115b8:	bne.n	1159a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   115ba:	cbnz	r1, 115be <EventResponder::runFromInterrupt()+0x36>
   115bc:	cpsie	i
   115be:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   115c0:	str	r2, [r6, #0]
   115c2:	b.n	115a2 <EventResponder::runFromInterrupt()+0x1a>
   115c4:	.word	0x200260f4
   115c8:	.word	0x200260f8

000115cc <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
   115cc:	b.w	11588 <EventResponder::runFromInterrupt()>

000115d0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   115d0:	ldr	r2, [pc, #16]	; (115e4 <systick_isr+0x14>)
   115d2:	ldr	r3, [pc, #20]	; (115e8 <systick_isr+0x18>)
   115d4:	ldr	r1, [r2, #0]
	systick_millis_count++;
   115d6:	ldr	r2, [pc, #20]	; (115ec <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   115d8:	str	r1, [r3, #0]
	systick_millis_count++;
   115da:	ldr	r3, [r2, #0]
   115dc:	adds	r3, #1
   115de:	str	r3, [r2, #0]
   115e0:	bx	lr
   115e2:	nop
   115e4:	.word	0xe0001004
   115e8:	.word	0x20025ee0
   115ec:	.word	0x20025ee8

000115f0 <usb_seremu_class::peek()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
   115f0:	b.w	10348 <usb_seremu_peekchar>

000115f4 <usb_seremu_class::read()>:
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
   115f4:	b.w	102e0 <usb_seremu_getchar>

000115f8 <usb_seremu_class::available()>:
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
   115f8:	b.w	1038c <usb_seremu_available>

000115fc <usb_seremu_class::flush()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
   115fc:	b.w	105c8 <usb_seremu_flush_output>

00011600 <usb_seremu_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
        size_t write(unsigned long n) { return write((uint8_t)n); }
        size_t write(long n) { return write((uint8_t)n); }
        size_t write(unsigned int n) { return write((uint8_t)n); }
        size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_seremu_write_buffer_free(); }
   11600:	b.w	105c4 <usb_seremu_write_buffer_free>

00011604 <usb_seremu_class::write(unsigned char const*, unsigned int)>:
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
   11604:	mov	r0, r1
   11606:	mov	r1, r2
   11608:	b.w	105ac <usb_seremu_write>

0001160c <usb_seremu_class::write(unsigned char)>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
   1160c:	mov	r0, r1
   1160e:	b.w	10580 <usb_seremu_putchar>
   11612:	nop

00011614 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
   11614:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
   11616:	mov	r6, r1
   11618:	cbz	r1, 11638 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
   1161a:	cbz	r2, 1163c <Print::write(unsigned char const*, unsigned int)+0x28>
   1161c:	mov	r7, r0
   1161e:	mov	r4, r2
   11620:	movs	r5, #0
   11622:	ldr	r3, [r7, #0]
   11624:	mov	r0, r7
   11626:	ldrb.w	r1, [r6], #1
   1162a:	ldr	r3, [r3, #0]
   1162c:	blx	r3
   1162e:	subs	r4, #1
   11630:	add	r5, r0
   11632:	bne.n	11622 <Print::write(unsigned char const*, unsigned int)+0xe>
   11634:	mov	r0, r5
   11636:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
   11638:	mov	r0, r1
   1163a:	pop	{r3, r4, r5, r6, r7, pc}
   1163c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
   1163e:	pop	{r3, r4, r5, r6, r7, pc}

00011640 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   11640:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
   11642:	ldr	r4, [pc, #24]	; (1165c <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   11644:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
   11646:	ldr	r3, [r0, #0]
   11648:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   1164a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
   1164c:	add	r1, sp, #4
   1164e:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   11650:	strh.w	r4, [sp, #4]
	return write(buf, 2);
   11654:	blx	r3
}
   11656:	add	sp, #8
   11658:	pop	{r4, pc}
   1165a:	nop
   1165c:	.word	0x2001f8d4

00011660 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   11660:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   11662:	bl	b8 <setup>
	while (1) {
		loop();
   11666:	bl	f0 <loop>
		yield();
   1166a:	bl	11344 <yield>
   1166e:	b.n	11666 <main+0x6>

00011670 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
   11670:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   11672:	ldr	r3, [pc, #84]	; (116c8 <software_isr()+0x58>)

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
   11674:	ldr	r5, [pc, #84]	; (116cc <software_isr()+0x5c>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   11676:	ldr	r4, [r3, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
   11678:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   1167a:	cbnz	r4, 11682 <software_isr()+0x12>
   1167c:	b.n	116aa <software_isr()+0x3a>
   1167e:	ldr	r4, [r4, #20]
   11680:	cbz	r4, 116aa <software_isr()+0x3a>
		if (p->active) {
   11682:	ldrb	r3, [r4, #8]
   11684:	cmp	r3, #0
   11686:	beq.n	1167e <software_isr()+0xe>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
   11688:	ldr	r3, [r4, #0]
   1168a:	mov	r0, r4

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
   1168c:	ldr	r7, [r5, #0]
			p->update();
   1168e:	ldr	r3, [r3, #0]
   11690:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   11692:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   11694:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   11696:	subs	r3, r3, r7
   11698:	lsrs	r3, r3, #6
			p->cpu_cycles = cycles;
   1169a:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   1169c:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
			p->cpu_cycles = cycles;
   1169e:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   116a0:	it	hi
   116a2:	strhhi	r2, [r4, #6]
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   116a4:	ldr	r4, [r4, #20]
   116a6:	cmp	r4, #0
   116a8:	bne.n	11682 <software_isr()+0x12>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   116aa:	ldr	r3, [pc, #32]	; (116cc <software_isr()+0x5c>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   116ac:	ldr	r2, [pc, #32]	; (116d0 <software_isr()+0x60>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   116ae:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   116b0:	ldrh	r0, [r2, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   116b2:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
   116b4:	ldr	r4, [pc, #28]	; (116d4 <software_isr()+0x64>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   116b6:	lsrs	r3, r3, #6
	AudioStream::cpu_cycles_total = totalcycles;
   116b8:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   116ba:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
	AudioStream::cpu_cycles_total = totalcycles;
   116bc:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   116be:	bls.n	116c2 <software_isr()+0x52>
		AudioStream::cpu_cycles_total_max = totalcycles;
   116c0:	strh	r1, [r2, #0]

	asm("DSB");
   116c2:	dsb	sy
   116c6:	pop	{r3, r4, r5, r6, r7, pc}
   116c8:	.word	0x2002610c
   116cc:	.word	0xe0001004
   116d0:	.word	0x20026108
   116d4:	.word	0x2002618a

000116d8 <AudioStream::allocate()>:
}

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
   116d8:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
   116da:	cpsid	i
	index = memory_pool_first_mask;
   116dc:	ldr	r7, [pc, #140]	; (1176c <AudioStream::allocate()+0x94>)
	p += index;
   116de:	ldr	r6, [pc, #144]	; (11770 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
   116e0:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
   116e2:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
   116e6:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
   116ea:	cmp	r0, r3
   116ec:	bcs.n	11716 <AudioStream::allocate()+0x3e>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
   116ee:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
   116f2:	cbnz	r1, 1171e <AudioStream::allocate()+0x46>
   116f4:	adds	r2, r0, #4
   116f6:	add.w	r5, r6, #115	; 0x73
   116fa:	adds	r3, r4, #1
   116fc:	subs	r5, r5, r2
   116fe:	add.w	r5, r3, r5, lsr #2
   11702:	b.n	1170a <AudioStream::allocate()+0x32>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
   11704:	ldr.w	r1, [r2], #4
		if (avail) break;
   11708:	cbnz	r1, 1171e <AudioStream::allocate()+0x46>
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
   1170a:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
   1170c:	mov	r4, r3
		p++;
   1170e:	mov	r0, r2
   11710:	add.w	r3, r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
   11714:	bne.n	11704 <AudioStream::allocate()+0x2c>
			__enable_irq();
   11716:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
   11718:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
   1171a:	pop	{r4, r5, r6, r7}
   1171c:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
   1171e:	clz	r2, r1
	avail &= ~(0x80000000 >> n);
   11722:	mov.w	r3, #2147483648	; 0x80000000
   11726:	lsrs	r3, r2
   11728:	bic.w	r1, r1, r3
	*p = avail;
   1172c:	str	r1, [r0, #0]
	if (!avail) index++;
   1172e:	cbnz	r1, 11732 <AudioStream::allocate()+0x5a>
   11730:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
   11732:	ldr	r3, [pc, #64]	; (11774 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
   11734:	strh	r4, [r7, #0]
	used = memory_used + 1;
   11736:	ldrh	r1, [r3, #0]
   11738:	adds	r1, #1
	memory_used = used;
   1173a:	uxth	r5, r1
   1173c:	strh	r5, [r3, #0]
	__enable_irq();
   1173e:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   11740:	subs	r0, r0, r6
   11742:	movw	r3, #8060	; 0x1f7c
   11746:	ldr	r4, [pc, #48]	; (11778 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
   11748:	movs	r7, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   1174a:	asrs	r0, r0, #2
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
   1174c:	ldr	r6, [pc, #44]	; (1177c <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   1174e:	ldr	r4, [r4, #0]
   11750:	rsb	r2, r2, r0, lsl #5
   11754:	add.w	r2, r2, r2, lsl #6
   11758:	lsls	r2, r2, #2
   1175a:	add	r3, r2
	block->ref_count = 1;
   1175c:	strb	r7, [r4, r3]
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   1175e:	adds	r0, r4, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
   11760:	ldrh	r3, [r6, #0]
   11762:	cmp	r1, r3
   11764:	it	hi
   11766:	strhhi	r5, [r6, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
   11768:	pop	{r4, r5, r6, r7}
   1176a:	bx	lr
   1176c:	.word	0x20026186
   11770:	.word	0x20026110
   11774:	.word	0x20026188
   11778:	.word	0x20026180
   1177c:	.word	0x20026106

00011780 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   11780:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
   11782:	cpsid	i
	if (block->ref_count > 1) {
   11784:	ldrb	r3, [r0, #0]
   11786:	cmp	r3, #1
   11788:	bls.n	11792 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
   1178a:	subs	r3, #1
   1178c:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
   1178e:	cpsie	i
   11790:	bx	lr
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   11792:	mvns	r1, r2
   11794:	mov.w	r0, #2147483648	; 0x80000000
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
   11798:	asrs	r2, r2, #5
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   1179a:	and.w	r1, r1, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
   1179e:	push	{r4, r5}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   117a0:	ldr	r4, [pc, #36]	; (117c8 <AudioStream::release(audio_block_struct*)+0x48>)
   117a2:	lsr.w	r1, r0, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   117a6:	ldr	r5, [pc, #36]	; (117cc <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   117a8:	ldr.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   117ac:	ldrh	r0, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   117ae:	orrs	r3, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   117b0:	cmp	r2, r0
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   117b2:	str.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   117b6:	it	cc
   117b8:	strhcc	r2, [r5, #0]
		memory_used--;
   117ba:	ldr	r2, [pc, #20]	; (117d0 <AudioStream::release(audio_block_struct*)+0x50>)
   117bc:	ldrh	r3, [r2, #0]
   117be:	subs	r3, #1
   117c0:	strh	r3, [r2, #0]
	}
	__enable_irq();
   117c2:	cpsie	i
}
   117c4:	pop	{r4, r5}
   117c6:	bx	lr
   117c8:	.word	0x20026110
   117cc:	.word	0x20026186
   117d0:	.word	0x20026188

000117d4 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   117d4:	ldr	r3, [r0, #12]
   117d6:	cbz	r3, 11806 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
   117d8:	push	{r4, r5}
   117da:	b.n	117e0 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   117dc:	ldr	r3, [r3, #12]
   117de:	cbz	r3, 11804 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
   117e0:	ldrb	r0, [r3, #8]
   117e2:	cmp	r0, r2
   117e4:	bne.n	117dc <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
   117e6:	ldr	r0, [r3, #4]
   117e8:	ldrb	r4, [r3, #9]
   117ea:	ldr	r0, [r0, #16]
   117ec:	ldr.w	r5, [r0, r4, lsl #2]
   117f0:	cmp	r5, #0
   117f2:	bne.n	117dc <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
   117f4:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
   117f8:	ldrb	r0, [r1, #0]
   117fa:	adds	r0, #1
   117fc:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   117fe:	ldr	r3, [r3, #12]
   11800:	cmp	r3, #0
   11802:	bne.n	117e0 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
   11804:	pop	{r4, r5}
   11806:	bx	lr

00011808 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
   11808:	ldrb	r3, [r0, #9]
   1180a:	cmp	r3, r1
   1180c:	bls.n	1181c <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
   1180e:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
   11810:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
   11812:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   11816:	str.w	r2, [r3, r1, lsl #2]
	return in;
   1181a:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
   1181c:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
   1181e:	bx	lr

00011820 <AudioStream::receiveWritable(unsigned int)>:

// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
   11820:	push	{r3, r4, r5, lr}
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
   11822:	ldrb	r3, [r0, #9]
   11824:	cmp	r3, r1
   11826:	bls.n	1185e <AudioStream::receiveWritable(unsigned int)+0x3e>
	in = inputQueue[index];
   11828:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
   1182a:	movs	r2, #0
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
   1182c:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   11830:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
   11834:	cbz	r4, 1185e <AudioStream::receiveWritable(unsigned int)+0x3e>
   11836:	ldrb	r3, [r4, #0]
   11838:	cmp	r3, #1
   1183a:	bls.n	1185a <AudioStream::receiveWritable(unsigned int)+0x3a>
		p = allocate();
   1183c:	bl	116d8 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
   11840:	mov	r5, r0
   11842:	cbz	r0, 11850 <AudioStream::receiveWritable(unsigned int)+0x30>
   11844:	mov.w	r2, #256	; 0x100
   11848:	adds	r1, r4, #4
   1184a:	adds	r0, #4
   1184c:	bl	fd78 <memcpy>
		in->ref_count--;
   11850:	ldrb	r3, [r4, #0]

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
   11852:	mov	r0, r5
		if (p) memcpy(p->data, in->data, sizeof(p->data));
		in->ref_count--;
   11854:	subs	r3, #1
   11856:	strb	r3, [r4, #0]
   11858:	pop	{r3, r4, r5, pc}
   1185a:	mov	r0, r4
		in = p;
	}
	return in;
}
   1185c:	pop	{r3, r4, r5, pc}
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
   1185e:	movs	r0, #0
   11860:	pop	{r3, r4, r5, pc}
   11862:	nop

00011864 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
   11864:	ldrb	r3, [r0, #16]
   11866:	cbnz	r3, 118b2 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
   11868:	ldr	r3, [r0, #4]
   1186a:	ldrb	r2, [r0, #9]
   1186c:	ldrb	r3, [r3, #9]
   1186e:	cmp	r2, r3
   11870:	bhi.n	118b2 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
   11872:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
   11874:	cpsid	i
	p = src.destination_list;
   11876:	ldr	r4, [r0, #0]
   11878:	ldr	r3, [r4, #12]
	if (p == NULL) {
   1187a:	cbz	r3, 118c8 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
   1187c:	ldr	r2, [r3, #12]
   1187e:	cbz	r2, 1188e <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
   11880:	ldr	r1, [r3, #0]
   11882:	cmp	r4, r1
   11884:	beq.n	118b4 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
   11886:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
   11888:	ldr	r2, [r3, #12]
   1188a:	cmp	r2, #0
   1188c:	bne.n	11880 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
   1188e:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
   11890:	movs	r2, #0
	src.numConnections++;
	src.active = true;
   11892:	movs	r3, #1
			}
			p = p->next_dest;
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
   11894:	str	r2, [r0, #12]
	src.numConnections++;
   11896:	ldrb	r2, [r4, #10]
   11898:	add	r2, r3
   1189a:	strb	r2, [r4, #10]
	src.active = true;
   1189c:	ldr	r2, [r0, #0]

	dst.numConnections++;
   1189e:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
   118a0:	strb	r3, [r2, #8]

	dst.numConnections++;
   118a2:	ldrb	r2, [r1, #10]
   118a4:	add	r2, r3
   118a6:	strb	r2, [r1, #10]
	dst.active = true;
   118a8:	ldr	r2, [r0, #4]
   118aa:	strb	r3, [r2, #8]

	isConnected = true;
   118ac:	strb	r3, [r0, #16]

	__enable_irq();
   118ae:	cpsie	i
}
   118b0:	pop	{r4, r5}
   118b2:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
   118b4:	ldr	r5, [r3, #4]
   118b6:	ldr	r1, [r0, #4]
   118b8:	cmp	r5, r1
   118ba:	bne.n	11886 <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
   118bc:	ldrh	r1, [r3, #8]
   118be:	ldrh	r3, [r0, #8]
   118c0:	cmp	r1, r3
   118c2:	beq.n	118ae <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
   118c4:	mov	r3, r2
   118c6:	b.n	11888 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
   118c8:	str	r0, [r4, #12]
   118ca:	b.n	11890 <AudioConnection::connect()+0x2c>

000118cc <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
   118cc:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
   118ce:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
   118d0:	cmp	r3, #0
   118d2:	beq.n	1193a <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
   118d4:	ldr	r3, [r0, #4]
   118d6:	ldrb	r2, [r0, #9]
   118d8:	ldrb	r3, [r3, #9]
   118da:	cmp	r2, r3
   118dc:	bhi.n	1193a <AudioConnection::disconnect()+0x6e>
	__disable_irq();
   118de:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
   118e0:	ldr	r2, [r0, #0]
   118e2:	ldr	r3, [r2, #12]
	if (p == NULL) {
   118e4:	cbz	r3, 11938 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
   118e6:	cmp	r0, r3
   118e8:	bne.n	118f0 <AudioConnection::disconnect()+0x24>
   118ea:	b.n	11940 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
   118ec:	cmp	r0, r3
   118ee:	beq.n	118f6 <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
   118f0:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
   118f2:	cmp	r3, #0
   118f4:	bne.n	118ec <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
   118f6:	ldr	r3, [r0, #4]
   118f8:	mov	r4, r0
   118fa:	ldrb	r1, [r0, #9]
   118fc:	ldr	r3, [r3, #16]
   118fe:	ldr.w	r0, [r3, r1, lsl #2]
   11902:	cbz	r0, 11918 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
   11904:	bl	11780 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
   11908:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
   1190a:	ldr	r3, [r4, #4]
   1190c:	movs	r1, #0
   1190e:	ldrb	r2, [r4, #9]
   11910:	ldr	r3, [r3, #16]
   11912:	str.w	r1, [r3, r2, lsl #2]
   11916:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
   11918:	ldrb	r3, [r2, #10]
   1191a:	subs	r3, #1
   1191c:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
   1191e:	ldr	r3, [r4, #0]
   11920:	ldrb	r2, [r3, #10]
   11922:	cbnz	r2, 11926 <AudioConnection::disconnect()+0x5a>
		src.active = false;
   11924:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
   11926:	ldr	r2, [r4, #4]
   11928:	ldrb	r3, [r2, #10]
   1192a:	subs	r3, #1
   1192c:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
   1192e:	ldr	r3, [r4, #4]
   11930:	ldrb	r2, [r3, #10]
   11932:	cbz	r2, 1193c <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
   11934:	movs	r3, #0
   11936:	strb	r3, [r4, #16]

	__enable_irq();
   11938:	cpsie	i
   1193a:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
   1193c:	strb	r2, [r3, #8]
   1193e:	b.n	11934 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
   11940:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
   11942:	str	r3, [r2, #12]
   11944:	b.n	118f6 <AudioConnection::disconnect()+0x2a>
   11946:	nop

00011948 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
   11948:	ldr	r3, [pc, #40]	; (11974 <AudioStream::update_setup()+0x2c>)
   1194a:	ldrb	r2, [r3, #0]
   1194c:	cbnz	r2, 1196e <AudioStream::update_setup()+0x26>
   1194e:	ldr	r2, [pc, #40]	; (11978 <AudioStream::update_setup()+0x30>)
   11950:	ldr	r1, [pc, #40]	; (1197c <AudioStream::update_setup()+0x34>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
   11952:	push	{r4, r5}
   11954:	str.w	r1, [r2, #344]	; 0x158
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   11958:	ldr	r4, [pc, #36]	; (11980 <AudioStream::update_setup()+0x38>)
   1195a:	movs	r5, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   1195c:	movs	r0, #64	; 0x40
	update_scheduled = true;
   1195e:	movs	r2, #1
bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   11960:	ldr	r1, [pc, #32]	; (11984 <AudioStream::update_setup()+0x3c>)

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   11962:	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   11964:	str	r0, [r1, #0]
	update_scheduled = true;
	return true;
   11966:	mov	r0, r2
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
	update_scheduled = true;
   11968:	strb	r2, [r3, #0]
	return true;
}
   1196a:	pop	{r4, r5}
   1196c:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
   1196e:	movs	r0, #0
   11970:	bx	lr
   11972:	nop
   11974:	.word	0x20026184
   11978:	.word	0x20026400
   1197c:	.word	0x00011671
   11980:	.word	0xe000e446
   11984:	.word	0xe000e108

00011988 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
   11988:	bx	lr
   1198a:	nop

0001198c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   1198c:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
   1198e:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   11990:	cbz	r3, 1199a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   11992:	ldr	r3, [r2, #4]
   11994:	orr.w	r3, r3, #32768	; 0x8000
   11998:	str	r3, [r2, #4]
	}
	__disable_irq();
   1199a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   1199c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
   1199e:	cbz	r4, 119d8 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
   119a0:	ldr	r3, [pc, #80]	; (119f4 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
   119a2:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   119a4:	ldr.w	r4, [r3, #432]	; 0x1b0
   119a8:	tst	r4, r1
   119aa:	bne.n	119ec <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   119ac:	ldr	r5, [pc, #72]	; (119f8 <schedule_transfer+0x6c>)
   119ae:	ldr	r7, [r5, #0]
   119b0:	b.n	119bc <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   119b2:	ldr	r4, [r5, #0]
   119b4:	subs	r4, r4, r7
   119b6:	cmp.w	r4, #2400	; 0x960
   119ba:	bcs.n	119d4 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   119bc:	ldr.w	r4, [r3, #320]	; 0x140
   119c0:	orr.w	r4, r4, #16384	; 0x4000
   119c4:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   119c8:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   119cc:	ldr.w	r4, [r3, #320]	; 0x140
   119d0:	lsls	r4, r4, #17
   119d2:	bpl.n	119b2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   119d4:	tst	r1, r6
   119d6:	bne.n	119ec <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
   119d8:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
   119da:	ldr	r4, [pc, #24]	; (119f4 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
   119dc:	str	r2, [r0, #8]
	endpoint->status = 0;
   119de:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
   119e0:	ldr.w	r3, [r4, #432]	; 0x1b0
   119e4:	orrs	r1, r3
   119e6:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   119ea:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
   119ec:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   119ee:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   119f0:	pop	{r4, r5, r6, r7}
   119f2:	bx	lr
   119f4:	.word	0x402e0000
   119f8:	.word	0xe0001004

000119fc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   119fc:	push	{r4, r5, r6, lr}
   119fe:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   11a00:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
   11a02:	cbz	r0, 11a2a <run_callbacks+0x2e>
   11a04:	mov	r2, r0
   11a06:	movs	r4, #0
   11a08:	b.n	11a12 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
   11a0a:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
   11a0c:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
   11a0e:	cmp	r2, #1
   11a10:	beq.n	11a2c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
   11a12:	ldr	r3, [r2, #4]
   11a14:	ands.w	r3, r3, #128	; 0x80
   11a18:	beq.n	11a0a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
   11a1a:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   11a1c:	cbz	r4, 11a2a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
   11a1e:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
   11a20:	ldr	r5, [r0, #0]
		ep->callback_function(first);
   11a22:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   11a24:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
   11a26:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   11a28:	bne.n	11a1e <run_callbacks+0x22>
   11a2a:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
   11a2c:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
   11a2e:	str	r3, [r6, #52]	; 0x34
			break;
   11a30:	b.n	11a1c <run_callbacks+0x20>
   11a32:	nop

00011a34 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
   11a34:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
   11a36:	cbnz	r1, 11a72 <endpoint0_transmit.constprop.1+0x3e>
   11a38:	ldr	r4, [pc, #132]	; (11ac0 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11a3a:	ldr	r1, [pc, #136]	; (11ac4 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11a3c:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11a3e:	ldr	r3, [pc, #136]	; (11ac8 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11a40:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11a42:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11a46:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11a48:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
   11a4a:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
   11a4c:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11a4e:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
   11a50:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11a52:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   11a56:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   11a5a:	ldr	r5, [pc, #112]	; (11acc <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
   11a5c:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11a60:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
   11a62:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   11a66:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
   11a68:	ldr.w	r3, [r2, #432]	; 0x1b0
   11a6c:	cmp	r3, #0
   11a6e:	bne.n	11a68 <endpoint0_transmit.constprop.1+0x34>
}
   11a70:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11a72:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11a74:	ldr	r3, [pc, #88]	; (11ad0 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   11a76:	ldr	r5, [pc, #80]	; (11ac8 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11a78:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   11a7a:	ldr	r4, [pc, #68]	; (11ac0 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11a7c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
   11a80:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11a82:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11a84:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   11a86:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
   11a8a:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
   11a8c:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   11a90:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
   11a92:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   11a96:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
   11a9a:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
   11a9e:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   11aa0:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   11aa2:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   11aa6:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   11aaa:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   11aae:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   11ab0:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   11ab2:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   11ab6:	ldr.w	r3, [r2, #432]	; 0x1b0
   11aba:	cmp	r3, #0
   11abc:	bne.n	11ab6 <endpoint0_transmit.constprop.1+0x82>
   11abe:	b.n	11a3a <endpoint0_transmit.constprop.1+0x6>
   11ac0:	.word	0x20028000
   11ac4:	.word	0x20027020
   11ac8:	.word	0x402e0000
   11acc:	.word	0x200261c0
   11ad0:	.word	0x20027000

00011ad4 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
   11ad4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
   11ad8:	ldr	r4, [pc, #728]	; (11db4 <isr+0x2e0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
   11ada:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
   11adc:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
   11ae0:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
   11ae4:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
   11ae8:	beq.n	11bca <isr+0xf6>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   11aea:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11aee:	cmp	r3, #0
   11af0:	beq.n	11bc0 <isr+0xec>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   11af2:	mov.w	fp, #65537	; 0x10001
   11af6:	ldr.w	r9, [pc, #740]	; 11ddc <isr+0x308>
   11afa:	ldr	r7, [pc, #700]	; (11db8 <isr+0x2e4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
   11afc:	mov	r6, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   11afe:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
   11b00:	str.w	r3, [r4, #428]	; 0x1ac
   11b04:	ldr	r0, [r7, #40]	; 0x28
   11b06:	ldr	r2, [r7, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
   11b08:	ldr.w	r3, [r4, #320]	; 0x140
   11b0c:	orr.w	r3, r3, #8192	; 0x2000
   11b10:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   11b14:	ldr.w	r3, [r4, #320]	; 0x140
   11b18:	lsls	r5, r3, #18
   11b1a:	bpl.n	11b08 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   11b1c:	ldr.w	r3, [r6, #320]	; 0x140
   11b20:	bic.w	r3, r3, #8192	; 0x2000
   11b24:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   11b28:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   11b2c:	ldr.w	r3, [r4, #436]	; 0x1b4
   11b30:	ands.w	r3, r3, #65537	; 0x10001
   11b34:	bne.n	11b2c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11b36:	uxth	r1, r0
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
   11b38:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11b3c:	cmp.w	r1, #1280	; 0x500
   11b40:	beq.w	11df0 <isr+0x31c>
   11b44:	bhi.w	11cd6 <isr+0x202>
   11b48:	cmp	r1, #130	; 0x82
   11b4a:	beq.w	11e90 <isr+0x3bc>
   11b4e:	bls.w	11d08 <isr+0x234>
   11b52:	cmp.w	r1, #258	; 0x102
   11b56:	beq.w	11e30 <isr+0x35c>
   11b5a:	movw	r3, #770	; 0x302
   11b5e:	cmp	r1, r3
   11b60:	bne.w	11cf8 <isr+0x224>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
   11b64:	uxth	r2, r2
   11b66:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
   11b6a:	cmp	r3, #7
   11b6c:	bhi.w	11cf8 <isr+0x224>
		dir = setup.wIndex & 0x80;
		if (dir) {
   11b70:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   11b74:	mov.w	r3, r3, lsl #2
   11b78:	ldr	r2, [pc, #576]	; (11dbc <isr+0x2e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11b7a:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11b7e:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   11b82:	add	r2, r3
   11b84:	ldr	r3, [r2, #0]
   11b86:	ite	ne
   11b88:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   11b8c:	orreq.w	r3, r3, #1
   11b90:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11b92:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11b94:	ldr	r3, [pc, #552]	; (11dc0 <isr+0x2ec>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   11b96:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   11b98:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11b9a:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11b9c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11b9e:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   11ba2:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11ba6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   11ba8:	orr.w	r3, r2, #65536	; 0x10000
   11bac:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
   11bb0:	ldr.w	r3, [r4, #432]	; 0x1b0
   11bb4:	cmp	r3, #0
   11bb6:	bne.n	11bb0 <isr+0xdc>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11bb8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11bbc:	cmp	r3, #0
   11bbe:	bne.n	11b00 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   11bc0:	ldr	r2, [pc, #496]	; (11db4 <isr+0x2e0>)
   11bc2:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
   11bc6:	cmp	r3, #0
   11bc8:	bne.n	11c72 <isr+0x19e>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
   11bca:	tst.w	r8, #64	; 0x40
   11bce:	beq.n	11bfe <isr+0x12a>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   11bd0:	ldr	r3, [pc, #480]	; (11db4 <isr+0x2e0>)
   11bd2:	ldr.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   11bd6:	mov	r1, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   11bd8:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   11bdc:	ldr.w	r2, [r3, #444]	; 0x1bc
   11be0:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   11be4:	ldr.w	r3, [r1, #432]	; 0x1b0
   11be8:	ldr	r2, [pc, #456]	; (11db4 <isr+0x2e0>)
   11bea:	cmp	r3, #0
   11bec:	bne.n	11be4 <isr+0x110>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   11bee:	mov.w	r0, #4294967295
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
   11bf2:	ldr	r1, [pc, #464]	; (11dc4 <isr+0x2f0>)
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   11bf4:	str.w	r0, [r2, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   11bf8:	ldr.w	r2, [r2, #388]	; 0x184
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
   11bfc:	str	r3, [r1, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
   11bfe:	tst.w	r8, #16777216	; 0x1000000
   11c02:	beq.n	11c0c <isr+0x138>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   11c04:	ldr	r3, [pc, #448]	; (11dc8 <isr+0x2f4>)
   11c06:	ldr	r3, [r3, #0]
   11c08:	cbz	r3, 11c0c <isr+0x138>
   11c0a:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
   11c0c:	tst.w	r8, #33554432	; 0x2000000
   11c10:	beq.n	11c1a <isr+0x146>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   11c12:	ldr	r3, [pc, #440]	; (11dcc <isr+0x2f8>)
   11c14:	ldr	r3, [r3, #0]
   11c16:	cbz	r3, 11c1a <isr+0x146>
   11c18:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
   11c1a:	tst.w	r8, #4
   11c1e:	beq.n	11c32 <isr+0x15e>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   11c20:	ldr	r3, [pc, #400]	; (11db4 <isr+0x2e0>)
   11c22:	ldr.w	r3, [r3, #388]	; 0x184
   11c26:	ands.w	r3, r3, #512	; 0x200
   11c2a:	beq.n	11cd0 <isr+0x1fc>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
   11c2c:	ldr	r3, [pc, #416]	; (11dd0 <isr+0x2fc>)
   11c2e:	movs	r2, #1
   11c30:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   11c32:	ldr	r3, [pc, #384]	; (11db4 <isr+0x2e0>)
   11c34:	ldr.w	r2, [r3, #328]	; 0x148
   11c38:	lsls	r2, r2, #24
   11c3a:	bpl.n	11c6c <isr+0x198>
   11c3c:	tst.w	r8, #128	; 0x80
   11c40:	beq.n	11c6c <isr+0x198>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
   11c42:	ldr	r1, [pc, #400]	; (11dd4 <isr+0x300>)
   11c44:	ldrb	r2, [r1, #0]
   11c46:	cbz	r2, 11c62 <isr+0x18e>
			if (--usb_reboot_timer == 0) {
   11c48:	subs	r2, #1
   11c4a:	uxtb	r2, r2
   11c4c:	strb	r2, [r1, #0]
   11c4e:	cbnz	r2, 11c62 <isr+0x18e>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
   11c50:	ldr	r1, [pc, #388]	; (11dd8 <isr+0x304>)
   11c52:	ldrb	r2, [r1, #0]
   11c54:	and.w	r2, r2, #251	; 0xfb
   11c58:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
   11c5a:	cmp	r2, #0
   11c5c:	beq.w	12070 <isr+0x59c>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
   11c60:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
   11c62:	add	sp, #12
   11c64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
			}
		}
		#ifdef MIDI_INTERFACE
		usb_midi_flush_output();
   11c68:	b.w	10cc4 <usb_midi_flush_output>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
   11c6c:	add	sp, #12
   11c6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
   11c72:	ldr	r1, [pc, #360]	; (11ddc <isr+0x308>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
   11c74:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
   11c78:	ldr	r0, [r1, #0]
   11c7a:	tst	r3, r0
   11c7c:	bne.w	11fe2 <isr+0x50e>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
   11c80:	ldr	r2, [pc, #320]	; (11dc4 <isr+0x2f0>)
   11c82:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
   11c84:	ands	r5, r3
   11c86:	beq.n	11bca <isr+0xf6>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
   11c88:	lsrs	r6, r5, #16
   11c8a:	beq.n	11cac <isr+0x1d8>
   11c8c:	ldr	r7, [pc, #296]	; (11db8 <isr+0x2e4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
   11c8e:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
   11c92:	rbit	r4, r6
   11c96:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   11c9a:	add.w	r0, r7, r4, lsl #7
					tx &= ~(1<<p);
   11c9e:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   11ca2:	adds	r0, #64	; 0x40
   11ca4:	bl	119fc <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
   11ca8:	bics	r6, r4
   11caa:	bne.n	11c92 <isr+0x1be>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
   11cac:	uxth	r5, r5
				while(rx) {
   11cae:	cmp	r5, #0
   11cb0:	beq.n	11bca <isr+0xf6>
   11cb2:	ldr	r7, [pc, #260]	; (11db8 <isr+0x2e4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
   11cb4:	movs	r6, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
   11cb6:	rbit	r4, r5
   11cba:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
   11cbe:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
   11cc2:	lsl.w	r4, r6, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
   11cc6:	bl	119fc <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
   11cca:	bics	r5, r4
   11ccc:	bne.n	11cb6 <isr+0x1e2>
   11cce:	b.n	11bca <isr+0xf6>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
   11cd0:	ldr	r2, [pc, #252]	; (11dd0 <isr+0x2fc>)
   11cd2:	strb	r3, [r2, #0]
   11cd4:	b.n	11c32 <isr+0x15e>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11cd6:	cmp.w	r1, #2176	; 0x880
   11cda:	beq.w	11ecc <isr+0x3f8>
   11cde:	bls.n	11d26 <isr+0x252>
   11ce0:	cmp.w	r1, #2304	; 0x900
   11ce4:	beq.w	11ee8 <isr+0x414>
   11ce8:	movw	r5, #2337	; 0x921
   11cec:	cmp	r1, r5
   11cee:	bne.n	11cf8 <isr+0x224>
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
   11cf0:	lsrs	r1, r2, #16
   11cf2:	cmp	r1, #8
   11cf4:	bls.w	11f44 <isr+0x470>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   11cf8:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11cfc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11d00:	cmp	r3, #0
   11d02:	bne.w	11b00 <isr+0x2c>
   11d06:	b.n	11bc0 <isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11d08:	cmp	r1, #128	; 0x80
   11d0a:	bne.n	11cf8 <isr+0x224>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   11d0c:	ldr	r2, [pc, #208]	; (11de0 <isr+0x30c>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
   11d0e:	movs	r1, #2
   11d10:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   11d12:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
   11d14:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
   11d16:	bl	11a34 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11d1a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11d1e:	cmp	r3, #0
   11d20:	bne.w	11b00 <isr+0x2c>
   11d24:	b.n	11bc0 <isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11d26:	sub.w	r1, r1, #1664	; 0x680
   11d2a:	cmp	r1, #1
   11d2c:	bhi.n	11cf8 <isr+0x224>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   11d2e:	ldr	r3, [pc, #180]	; (11de4 <isr+0x310>)
   11d30:	ldr	r1, [r3, #4]
   11d32:	cmp	r1, #0
   11d34:	beq.n	11cf8 <isr+0x224>
   11d36:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   11d38:	uxth.w	lr, r2
   11d3c:	b.n	11d46 <isr+0x272>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   11d3e:	adds	r3, #12
   11d40:	ldr	r1, [r3, #4]
   11d42:	cmp	r1, #0
   11d44:	beq.n	11cf8 <isr+0x224>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   11d46:	ldrh	r5, [r3, #0]
   11d48:	cmp	r5, r0
   11d4a:	bne.n	11d3e <isr+0x26a>
   11d4c:	ldrh	r5, [r3, #2]
   11d4e:	cmp	r5, lr
   11d50:	bne.n	11d3e <isr+0x26a>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
   11d52:	lsrs	r5, r0, #8
   11d54:	cmp	r5, #3
   11d56:	beq.w	1209c <isr+0x5c8>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
   11d5a:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
   11d5c:	lsrs	r2, r2, #16
   11d5e:	cmp	r3, r2
   11d60:	it	cs
   11d62:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
   11d64:	cmp.w	r0, #512	; 0x200
   11d68:	beq.w	1207e <isr+0x5aa>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
   11d6c:	cmp.w	r0, #1792	; 0x700
   11d70:	beq.w	1204a <isr+0x576>
   11d74:	ldr	r5, [pc, #112]	; (11de8 <isr+0x314>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   11d76:	mov	r2, r3
   11d78:	str	r3, [sp, #4]
   11d7a:	mov	r0, r5
   11d7c:	bl	fd78 <memcpy>
   11d80:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   11d82:	bic.w	r2, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   11d86:	add	r5, r3
	asm volatile("": : :"memory");
	asm("dsb");
   11d88:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   11d8c:	ldr	r1, [pc, #92]	; (11dec <isr+0x318>)
   11d8e:	str	r2, [r1, #0]
		location += 32;
   11d90:	adds	r2, #32
	} while (location < end_addr);
   11d92:	cmp	r5, r2
   11d94:	bhi.n	11d8c <isr+0x2b8>
	asm("dsb");
   11d96:	dsb	sy
	asm("isb");
   11d9a:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   11d9e:	ldr	r0, [pc, #72]	; (11de8 <isr+0x314>)
   11da0:	mov	r1, r3
   11da2:	bl	11a34 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11da6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11daa:	cmp	r3, #0
   11dac:	bne.w	11b00 <isr+0x2c>
   11db0:	b.n	11bc0 <isr+0xec>
   11db2:	nop
   11db4:	.word	0x402e0000
   11db8:	.word	0x20028000
   11dbc:	.word	0x402e01c0
   11dc0:	.word	0x20027020
   11dc4:	.word	0x200261b0
   11dc8:	.word	0x200261ac
   11dcc:	.word	0x200261b8
   11dd0:	.word	0x200261bc
   11dd4:	.word	0x200261c4
   11dd8:	.word	0x200261b4
   11ddc:	.word	0x200261c0
   11de0:	.word	0x200261d0
   11de4:	.word	0x2001f8d8
   11de8:	.word	0x20201f20
   11dec:	.word	0xe000ef70
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11df0:	ldr	r2, [pc, #692]	; (120a8 <isr+0x5d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11df2:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11df4:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   11df6:	str	r3, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   11df8:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11dfa:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11dfc:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11dfe:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   11e02:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11e06:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   11e08:	orr.w	r3, r1, #65536	; 0x10000
   11e0c:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
   11e10:	ldr.w	r3, [r4, #432]	; 0x1b0
   11e14:	cmp	r3, #0
   11e16:	bne.n	11e10 <isr+0x33c>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   11e18:	lsrs	r3, r0, #16
   11e1a:	lsls	r3, r3, #25
   11e1c:	orr.w	r3, r3, #16777216	; 0x1000000
   11e20:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11e24:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11e28:	cmp	r3, #0
   11e2a:	bne.w	11b00 <isr+0x2c>
   11e2e:	b.n	11bc0 <isr+0xec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
   11e30:	uxth	r2, r2
   11e32:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
   11e36:	cmp	r3, #7
   11e38:	bhi.w	11cf8 <isr+0x224>
		dir = setup.wIndex & 0x80;
		if (dir) {
   11e3c:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   11e40:	mov.w	r3, r3, lsl #2
   11e44:	ldr	r2, [pc, #612]	; (120ac <isr+0x5d8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11e46:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11e4a:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   11e4e:	add	r2, r3
   11e50:	ldr	r3, [r2, #0]
   11e52:	ite	ne
   11e54:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   11e58:	biceq.w	r3, r3, #1
   11e5c:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11e5e:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11e60:	ldr	r3, [pc, #580]	; (120a8 <isr+0x5d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   11e62:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   11e64:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11e66:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11e68:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11e6a:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   11e6e:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11e72:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   11e74:	orr.w	r3, r2, #65536	; 0x10000
   11e78:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
   11e7c:	ldr.w	r3, [r4, #432]	; 0x1b0
   11e80:	cmp	r3, #0
   11e82:	bne.n	11e7c <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11e84:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11e88:	cmp	r3, #0
   11e8a:	bne.w	11b00 <isr+0x2c>
   11e8e:	b.n	11bc0 <isr+0xec>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
   11e90:	uxth	r2, r2
   11e92:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
   11e96:	cmp	r1, #7
   11e98:	bhi.w	11cf8 <isr+0x224>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   11e9c:	lsls	r1, r1, #2
   11e9e:	ldr	r0, [pc, #524]	; (120ac <isr+0x5d8>)
		reply_buffer[0] = 0;
   11ea0:	ldr	r5, [pc, #524]	; (120b0 <isr+0x5dc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   11ea2:	add	r0, r1
   11ea4:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   11ea6:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
   11ea8:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
   11eaa:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   11eac:	bpl.w	11fda <isr+0x506>
   11eb0:	lsls	r2, r1, #15
   11eb2:	bpl.n	11eb8 <isr+0x3e4>
			reply_buffer[0] = 1;
   11eb4:	movs	r3, #1
   11eb6:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
   11eb8:	movs	r1, #2
   11eba:	ldr	r0, [pc, #500]	; (120b0 <isr+0x5dc>)
   11ebc:	bl	11a34 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11ec0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11ec4:	cmp	r3, #0
   11ec6:	bne.w	11b00 <isr+0x2c>
   11eca:	b.n	11bc0 <isr+0xec>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   11ecc:	ldr	r2, [pc, #484]	; (120b4 <isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 1, 0);
   11ece:	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   11ed0:	ldr	r3, [pc, #476]	; (120b0 <isr+0x5dc>)
   11ed2:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   11ed4:	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   11ed6:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   11ed8:	bl	11a34 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11edc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11ee0:	cmp	r3, #0
   11ee2:	bne.w	11b00 <isr+0x2c>
   11ee6:	b.n	11bc0 <isr+0xec>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
   11ee8:	ubfx	r0, r0, #16, #8
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   11eec:	mov.w	r1, #13369548	; 0xcc00cc
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   11ef0:	mov.w	r2, #13107400	; 0xc800c8
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
   11ef4:	ldr	r5, [pc, #444]	; (120b4 <isr+0x5e0>)
   11ef6:	str	r3, [sp, #4]
   11ef8:	strb	r0, [r5, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   11efa:	str.w	r1, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   11efe:	str.w	r2, [r6, #460]	; 0x1cc
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
		#elif defined(SEREMU_INTERFACE)
		usb_seremu_configure();
   11f02:	bl	1022c <usb_seremu_configure>
		#endif
		#if defined(MULTITOUCH_INTERFACE)
		usb_touchscreen_configure();
		#endif
		#if defined(MIDI_INTERFACE)
		usb_midi_configure();
   11f06:	bl	10bf0 <usb_midi_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11f0a:	ldr	r2, [pc, #412]	; (120a8 <isr+0x5d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   11f0c:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11f0e:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11f10:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   11f12:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11f14:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11f16:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   11f18:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11f1a:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   11f1e:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11f22:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   11f24:	orr.w	r2, r1, #65536	; 0x10000
   11f28:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   11f2c:	ldr	r2, [pc, #392]	; (120b8 <isr+0x5e4>)
   11f2e:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
   11f30:	ldr.w	r3, [r4, #432]	; 0x1b0
   11f34:	cmp	r3, #0
   11f36:	bne.n	11f30 <isr+0x45c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11f38:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11f3c:	cmp	r3, #0
   11f3e:	bne.w	11b00 <isr+0x2c>
   11f42:	b.n	11bc0 <isr+0xec>
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
   11f44:	ldr.w	lr, [pc, #380]	; 120c4 <isr+0x5f0>
			endpoint0_buffer[0] = 0xE9;
   11f48:	mov.w	ip, #233	; 0xe9
   11f4c:	ldr	r5, [pc, #364]	; (120bc <isr+0x5e8>)
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
   11f4e:	stmia.w	lr, {r0, r2}
			endpoint0_buffer[0] = 0xE9;
   11f52:	strb.w	ip, [r5]
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
   11f56:	cbz	r1, 11f9a <isr+0x4c6>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11f58:	lsls	r1, r1, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11f5a:	ldr	r2, [pc, #356]	; (120c0 <isr+0x5ec>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
   11f5c:	str	r3, [r7, #12]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11f5e:	movs	r0, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11f60:	orr.w	r3, r1, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   11f64:	str	r2, [r7, #8]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11f66:	str	r0, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
   11f68:	add.w	lr, r5, #8192	; 0x2000
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11f6c:	str	r3, [r2, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   11f6e:	add.w	r0, r5, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
   11f72:	ldr.w	r3, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
   11f76:	add.w	r1, r5, #12288	; 0x3000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   11f7a:	str	r5, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
   11f7c:	add.w	r5, r5, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
   11f80:	orr.w	r3, r3, #1
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   11f84:	str	r0, [r2, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   11f86:	str.w	lr, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   11f8a:	str	r1, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   11f8c:	str	r5, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
   11f8e:	str.w	r3, [r6, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   11f92:	ldr.w	r3, [r4, #432]	; 0x1b0
   11f96:	cmp	r3, #0
   11f98:	bne.n	11f92 <isr+0x4be>
	}
	endpoint0_transfer_ack.next = 1;
   11f9a:	ldr	r3, [pc, #268]	; (120a8 <isr+0x5d4>)
   11f9c:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11f9e:	movw	r2, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
   11fa2:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11fa4:	str	r0, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   11fa6:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   11faa:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11fac:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   11fae:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11fb0:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   11fb4:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11fb8:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   11fba:	orr.w	r3, r2, r0
   11fbe:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   11fc2:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
   11fc6:	ldr.w	r3, [r4, #432]	; 0x1b0
   11fca:	cmp	r3, #0
   11fcc:	bne.n	11fc6 <isr+0x4f2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11fce:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11fd2:	cmp	r3, #0
   11fd4:	bne.w	11b00 <isr+0x2c>
   11fd8:	b.n	11bc0 <isr+0xec>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   11fda:	lsls	r3, r1, #31
   11fdc:	bpl.w	11eb8 <isr+0x3e4>
   11fe0:	b.n	11eb4 <isr+0x3e0>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
   11fe2:	ldr	r0, [pc, #224]	; (120c4 <isr+0x5f0>)
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
   11fe4:	movs	r6, #0
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
   11fe6:	ldr	r4, [pc, #224]	; (120c8 <isr+0x5f4>)

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
   11fe8:	ldr	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
   11fea:	str	r6, [r1, #0]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
   11fec:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
   11fee:	ldr	r0, [r0, #4]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
   11ff0:	bne.w	11c80 <isr+0x1ac>
   11ff4:	ldr	r1, [pc, #212]	; (120cc <isr+0x5f8>)
   11ff6:	cmp	r0, r1
   11ff8:	bne.w	11c80 <isr+0x1ac>
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
   11ffc:	ldr	r1, [pc, #188]	; (120bc <isr+0x5e8>)
   11ffe:	ldrb	r0, [r1, #0]
   12000:	cmp	r0, #169	; 0xa9
   12002:	bne.w	11c80 <isr+0x1ac>
   12006:	ldrb	r0, [r1, #1]
   12008:	cmp	r0, #69	; 0x45
   1200a:	bne.w	11c80 <isr+0x1ac>
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
   1200e:	ldrb	r0, [r1, #2]
   12010:	cmp	r0, #194	; 0xc2
   12012:	bne.w	11c80 <isr+0x1ac>
   12016:	ldrb	r1, [r1, #3]
   12018:	cmp	r1, #107	; 0x6b
   1201a:	bne.w	11c80 <isr+0x1ac>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
   1201e:	cpsid	i
	sof_usage |= (1 << interface);
   12020:	ldr	r0, [pc, #172]	; (120d0 <isr+0x5fc>)
   12022:	ldrb	r1, [r0, #0]
   12024:	orr.w	r1, r1, #4
   12028:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
   1202a:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   1202e:	lsls	r0, r1, #24
   12030:	bmi.n	12040 <isr+0x56c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   12032:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   12036:	movs	r0, #128	; 0x80
   12038:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   1203c:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
   12040:	cpsie	i
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
		printf("seremu reboot request\n");
		usb_start_sof_interrupts(NUM_INTERFACE);
		usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   12042:	ldr	r2, [pc, #144]	; (120d4 <isr+0x600>)
   12044:	movs	r1, #80	; 0x50
   12046:	strb	r1, [r2, #0]
   12048:	b.n	11c80 <isr+0x1ac>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
   1204a:	ldr	r0, [pc, #140]	; (120d8 <isr+0x604>)
					memcpy(usb_descriptor_buffer, src, datalen);
   1204c:	mov	r2, r3
   1204e:	ldr	r5, [pc, #140]	; (120dc <isr+0x608>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
   12050:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
   12054:	ldr	r1, [pc, #136]	; (120e0 <isr+0x60c>)
   12056:	ldr	r0, [pc, #140]	; (120e4 <isr+0x610>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
   12058:	str	r3, [sp, #4]
   1205a:	cmp.w	lr, #0
   1205e:	it	eq
   12060:	moveq	r1, r0
   12062:	mov	r0, r5
   12064:	bl	fd78 <memcpy>
					usb_descriptor_buffer[1] = 7;
   12068:	movs	r2, #7
   1206a:	ldr	r3, [sp, #4]
   1206c:	strb	r2, [r5, #1]
   1206e:	b.n	11d82 <isr+0x2ae>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   12070:	ldr.w	r2, [r3, #328]	; 0x148
   12074:	bic.w	r2, r2, #128	; 0x80
   12078:	str.w	r2, [r3, #328]	; 0x148
   1207c:	b.n	11c60 <isr+0x18c>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
   1207e:	ldr	r0, [pc, #88]	; (120d8 <isr+0x604>)
					memcpy(usb_descriptor_buffer, src, datalen);
   12080:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
   12082:	ldr	r1, [pc, #96]	; (120e4 <isr+0x610>)
					if (usb_high_speed) src = usb_config_descriptor_480;
   12084:	ldrb	r5, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
   12086:	ldr	r0, [pc, #88]	; (120e0 <isr+0x60c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
   12088:	str	r3, [sp, #4]
   1208a:	cmp	r5, #0
   1208c:	it	eq
   1208e:	moveq	r1, r0
   12090:	ldr	r0, [pc, #72]	; (120dc <isr+0x608>)
   12092:	bl	fd78 <memcpy>
   12096:	ldr	r5, [pc, #68]	; (120dc <isr+0x608>)
   12098:	ldr	r3, [sp, #4]
   1209a:	b.n	11d82 <isr+0x2ae>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
   1209c:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
   1209e:	ldrb	r3, [r1, #0]
   120a0:	cmp	r3, r2
   120a2:	it	cs
   120a4:	movcs	r3, r2
   120a6:	b.n	11d6c <isr+0x298>
   120a8:	.word	0x20027020
   120ac:	.word	0x402e01c0
   120b0:	.word	0x200261d0
   120b4:	.word	0x200261e0
   120b8:	.word	0x200261c0
   120bc:	.word	0x200261d8
   120c0:	.word	0x20027000
   120c4:	.word	0x200261c8
   120c8:	.word	0x03000921
   120cc:	.word	0x00040001
   120d0:	.word	0x200261b4
   120d4:	.word	0x200261c4
   120d8:	.word	0x200261bc
   120dc:	.word	0x20201f20
   120e0:	.word	0x60001848
   120e4:	.word	0x600018bc

000120e8 <usb_stop_sof_interrupts>:
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
   120e8:	movs	r3, #1
   120ea:	ldr	r2, [pc, #32]	; (1210c <usb_stop_sof_interrupts+0x24>)
   120ec:	lsl.w	r0, r3, r0
   120f0:	ldrb	r3, [r2, #0]
   120f2:	bic.w	r0, r3, r0
   120f6:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
   120f8:	cbnz	r0, 12108 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   120fa:	ldr	r2, [pc, #20]	; (12110 <usb_stop_sof_interrupts+0x28>)
   120fc:	ldr.w	r3, [r2, #328]	; 0x148
   12100:	bic.w	r3, r3, #128	; 0x80
   12104:	str.w	r3, [r2, #328]	; 0x148
   12108:	bx	lr
   1210a:	nop
   1210c:	.word	0x200261b4
   12110:	.word	0x402e0000

00012114 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   12114:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   12116:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
   1211a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1211e:	ite	ne
   12120:	movne	r7, #0
   12122:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   12126:	cmp	r2, #2
   12128:	bls.n	1212e <usb_config_rx+0x1a>
   1212a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   1212e:	mov.w	sl, r0, lsl #7
   12132:	ldr.w	r9, [pc, #64]	; 12174 <usb_config_rx+0x60>
   12136:	mov	r5, r1
   12138:	mov	r4, r0
   1213a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   1213e:	movs	r1, #0
   12140:	movs	r2, #64	; 0x40
   12142:	mov	r8, r3
   12144:	mov	r0, r6
   12146:	bl	128fc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   1214a:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
   1214c:	orr.w	r1, r7, r5, lsl #16
   12150:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
   12154:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   12158:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
   1215a:	cmp.w	r8, #0
   1215e:	beq.n	1212a <usb_config_rx+0x16>
   12160:	ldr	r3, [pc, #12]	; (12170 <usb_config_rx+0x5c>)
   12162:	lsls	r0, r4
   12164:	ldr	r4, [r3, #0]
   12166:	orrs	r0, r4
   12168:	str	r0, [r3, #0]
   1216a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1216e:	nop
   12170:	.word	0x200261b0
   12174:	.word	0x20028000

00012178 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   12178:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   1217a:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
   1217e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   12182:	ite	ne
   12184:	movne	r7, #0
   12186:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   1218a:	cmp	r2, #2
   1218c:	bls.n	12192 <usb_config_tx+0x1a>
   1218e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   12192:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   12194:	lsls	r5, r0, #7
   12196:	ldr.w	r9, [pc, #68]	; 121dc <usb_config_tx+0x64>
   1219a:	mov	r8, r1
   1219c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   1219e:	movs	r1, #0
   121a0:	mov	r4, r0
   121a2:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   121a4:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   121a8:	mov	r0, sl
   121aa:	bl	128fc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   121ae:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
   121b0:	orr.w	r1, r7, r8, lsl #16
   121b4:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
   121b8:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   121bc:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   121c0:	cmp	r6, #0
   121c2:	beq.n	1218e <usb_config_tx+0x16>
   121c4:	add.w	r0, r4, #16
   121c8:	ldr	r3, [pc, #12]	; (121d8 <usb_config_tx+0x60>)
   121ca:	lsls	r2, r0
   121cc:	ldr	r0, [r3, #0]
   121ce:	orrs	r2, r0
   121d0:	str	r2, [r3, #0]
   121d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   121d6:	nop
   121d8:	.word	0x200261b0
   121dc:	.word	0x20028000

000121e0 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
   121e0:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
   121e2:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
   121e4:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
   121e6:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
   121ea:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
   121ec:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
   121ee:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
   121f0:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
   121f4:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
   121f8:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
   121fc:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
   12200:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
   12202:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
   12204:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
   12206:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
   12208:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
   1220a:	pop	{r4, r5, r6, r7}
   1220c:	bx	lr
   1220e:	nop

00012210 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   12210:	subs	r3, r0, #2
   12212:	cmp	r3, #2
   12214:	bls.n	12218 <usb_transmit+0x8>
   12216:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
   12218:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
   1221a:	ldr	r3, [pc, #24]	; (12234 <usb_transmit+0x24>)
   1221c:	add.w	r4, r0, #16
   12220:	movs	r5, #1
   12222:	mov	r2, r1
   12224:	add.w	r0, r3, r0, lsl #7
   12228:	lsl.w	r1, r5, r4
}
   1222c:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
   1222e:	b.w	1198c <schedule_transfer>
   12232:	nop
   12234:	.word	0x20028040

00012238 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   12238:	subs	r3, r0, #2
   1223a:	cmp	r3, #2
   1223c:	bls.n	12240 <usb_receive+0x8>
   1223e:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
   12240:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
   12242:	ldr	r3, [pc, #20]	; (12258 <usb_receive+0x20>)
   12244:	movs	r4, #1
   12246:	mov	r2, r1
   12248:	lsl.w	r1, r4, r0
   1224c:	add.w	r0, r3, r0, lsl #7
}
   12250:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
   12254:	b.w	1198c <schedule_transfer>
   12258:	.word	0x20028000

0001225c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   1225c:	ldr	r0, [r0, #4]
#endif
}
   1225e:	bx	lr

00012260 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   12260:	ldr	r2, [pc, #72]	; (122ac <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   12262:	ldr	r3, [pc, #76]	; (122b0 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   12264:	ldr.w	r0, [r2, #544]	; 0x220
   12268:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   1226c:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   1226e:	push	{r4, lr}
   12270:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   12272:	bhi.n	1227a <usb_init_serialnumber+0x1a>
   12274:	add.w	r0, r0, r0, lsl #2
   12278:	lsls	r0, r0, #1
   1227a:	ldr	r4, [pc, #56]	; (122b4 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
   1227c:	add	r1, sp, #4
   1227e:	movs	r2, #10
   12280:	bl	122b8 <ultoa>
   12284:	add	r1, sp, #4
	for (i=0; i<10; i++) {
   12286:	movs	r3, #0
   12288:	mov	r0, r4
		char c = buf[i];
   1228a:	ldrb.w	r2, [r1], #1
   1228e:	adds	r3, #1
		if (!c) break;
   12290:	cbz	r2, 122a2 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   12292:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   12294:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   12298:	bne.n	1228a <usb_init_serialnumber+0x2a>
   1229a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   1229c:	strb	r3, [r4, #0]
}
   1229e:	add	sp, #16
   122a0:	pop	{r4, pc}
   122a2:	lsls	r3, r3, #1
   122a4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   122a6:	strb	r3, [r4, #0]
}
   122a8:	add	sp, #16
   122aa:	pop	{r4, pc}
   122ac:	.word	0x401f4400
   122b0:	.word	0x0098967f
   122b4:	.word	0x2001fde8

000122b8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   122b8:	push	{r4, r5, r6, r7}
   122ba:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
   122bc:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   122be:	mov	r7, r6
   122c0:	b.n	122c4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
   122c2:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
   122c4:	udiv	r3, r0, r2
   122c8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   122cc:	add.w	r4, r0, #55	; 0x37
   122d0:	cmp	r0, #9
   122d2:	add.w	r0, r0, #48	; 0x30
   122d6:	uxtb	r4, r4
   122d8:	it	ls
   122da:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
   122dc:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   122de:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
   122e2:	cmp	r3, #0
   122e4:	bne.n	122c2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
   122e6:	adds	r2, r1, r5
   122e8:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
   122ea:	cbz	r5, 12300 <ultoa+0x48>
   122ec:	adds	r3, #1
		t = buf[j];
   122ee:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
   122f2:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   122f4:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
   122f6:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   122f8:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
   122fa:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   122fe:	blt.n	122ec <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
   12300:	mov	r0, r1
   12302:	pop	{r4, r5, r6, r7}
   12304:	bx	lr
   12306:	nop

00012308 <__aeabi_atexit>:
   12308:	mov	r3, r1
   1230a:	mov	r1, r0
   1230c:	mov	r0, r3
   1230e:	b.w	12314 <__cxa_atexit>
   12312:	nop

00012314 <__cxa_atexit>:
   12314:	mov	r3, r2
   12316:	mov	r2, r1
   12318:	mov	r1, r0
   1231a:	movs	r0, #2
   1231c:	b.w	129c4 <__register_exitproc>

00012320 <__errno>:
   12320:	ldr	r3, [pc, #4]	; (12328 <__errno+0x8>)
   12322:	ldr	r0, [r3, #0]
   12324:	bx	lr
   12326:	nop
   12328:	.word	0x20020228

0001232c <__libc_init_array>:
   1232c:	push	{r4, r5, r6, lr}
   1232e:	ldr	r6, [pc, #60]	; (1236c <__libc_init_array+0x40>)
   12330:	ldr	r5, [pc, #60]	; (12370 <__libc_init_array+0x44>)
   12332:	subs	r6, r6, r5
   12334:	asrs	r6, r6, #2
   12336:	it	ne
   12338:	movne	r4, #0
   1233a:	beq.n	12348 <__libc_init_array+0x1c>
   1233c:	adds	r4, #1
   1233e:	ldr.w	r3, [r5], #4
   12342:	blx	r3
   12344:	cmp	r6, r4
   12346:	bne.n	1233c <__libc_init_array+0x10>
   12348:	ldr	r6, [pc, #40]	; (12374 <__libc_init_array+0x48>)
   1234a:	ldr	r5, [pc, #44]	; (12378 <__libc_init_array+0x4c>)
   1234c:	subs	r6, r6, r5
   1234e:	bl	12ce0 <___init_veneer>
   12352:	asrs	r6, r6, #2
   12354:	it	ne
   12356:	movne	r4, #0
   12358:	beq.n	12368 <__libc_init_array+0x3c>
   1235a:	adds	r4, #1
   1235c:	ldr.w	r3, [r5], #4
   12360:	blx	r3
   12362:	cmp	r6, r4
   12364:	bne.n	1235a <__libc_init_array+0x2e>
   12366:	pop	{r4, r5, r6, pc}
   12368:	pop	{r4, r5, r6, pc}
   1236a:	nop
   1236c:	.word	0x60001990
   12370:	.word	0x60001990
   12374:	.word	0x600019fc
   12378:	.word	0x60001990

0001237c <malloc>:
   1237c:	ldr	r3, [pc, #8]	; (12388 <malloc+0xc>)
   1237e:	mov	r1, r0
   12380:	ldr	r0, [r3, #0]
   12382:	b.w	1238c <_malloc_r>
   12386:	nop
   12388:	.word	0x20020228

0001238c <_malloc_r>:
   1238c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12390:	add.w	r5, r1, #11
   12394:	cmp	r5, #22
   12396:	sub	sp, #12
   12398:	mov	r6, r0
   1239a:	bls.w	124dc <_malloc_r+0x150>
   1239e:	bics.w	r5, r5, #7
   123a2:	bmi.w	12524 <_malloc_r+0x198>
   123a6:	cmp	r1, r5
   123a8:	bhi.w	12524 <_malloc_r+0x198>
   123ac:	bl	12998 <__malloc_lock>
   123b0:	cmp.w	r5, #504	; 0x1f8
   123b4:	bcc.w	128f0 <_malloc_r+0x564>
   123b8:	lsrs	r3, r5, #9
   123ba:	beq.w	12532 <_malloc_r+0x1a6>
   123be:	cmp	r3, #4
   123c0:	bhi.w	126ca <_malloc_r+0x33e>
   123c4:	lsrs	r0, r5, #6
   123c6:	add.w	lr, r0, #57	; 0x39
   123ca:	mov.w	r3, lr, lsl #1
   123ce:	adds	r0, #56	; 0x38
   123d0:	ldr	r7, [pc, #784]	; (126e4 <_malloc_r+0x358>)
   123d2:	add.w	r3, r7, r3, lsl #2
   123d6:	sub.w	r1, r3, #8
   123da:	ldr	r4, [r3, #4]
   123dc:	cmp	r1, r4
   123de:	bne.n	123f0 <_malloc_r+0x64>
   123e0:	b.n	1253c <_malloc_r+0x1b0>
   123e2:	cmp	r2, #0
   123e4:	bge.w	12540 <_malloc_r+0x1b4>
   123e8:	ldr	r4, [r4, #12]
   123ea:	cmp	r1, r4
   123ec:	beq.w	1253c <_malloc_r+0x1b0>
   123f0:	ldr	r3, [r4, #4]
   123f2:	bic.w	r3, r3, #3
   123f6:	subs	r2, r3, r5
   123f8:	cmp	r2, #15
   123fa:	ble.n	123e2 <_malloc_r+0x56>
   123fc:	ldr	r1, [pc, #740]	; (126e4 <_malloc_r+0x358>)
   123fe:	ldr	r4, [r7, #16]
   12400:	add.w	lr, r1, #8
   12404:	cmp	r4, lr
   12406:	beq.w	12770 <_malloc_r+0x3e4>
   1240a:	ldr	r3, [r4, #4]
   1240c:	bic.w	r3, r3, #3
   12410:	subs	r2, r3, r5
   12412:	cmp	r2, #15
   12414:	bgt.w	1274a <_malloc_r+0x3be>
   12418:	cmp	r2, #0
   1241a:	str.w	lr, [r1, #20]
   1241e:	str.w	lr, [r1, #16]
   12422:	bge.w	12562 <_malloc_r+0x1d6>
   12426:	cmp.w	r3, #512	; 0x200
   1242a:	bcs.w	126fc <_malloc_r+0x370>
   1242e:	lsrs	r3, r3, #3
   12430:	add.w	ip, r3, #1
   12434:	movs	r2, #1
   12436:	asrs	r3, r3, #2
   12438:	lsl.w	r3, r2, r3
   1243c:	ldr	r2, [r1, #4]
   1243e:	ldr.w	r8, [r1, ip, lsl #3]
   12442:	str.w	r8, [r4, #8]
   12446:	add.w	r9, r1, ip, lsl #3
   1244a:	orrs	r2, r3
   1244c:	sub.w	r3, r9, #8
   12450:	str	r3, [r4, #12]
   12452:	str	r2, [r1, #4]
   12454:	str.w	r4, [r1, ip, lsl #3]
   12458:	str.w	r4, [r8, #12]
   1245c:	asrs	r3, r0, #2
   1245e:	movs	r4, #1
   12460:	lsls	r4, r3
   12462:	cmp	r4, r2
   12464:	bhi.w	1257c <_malloc_r+0x1f0>
   12468:	tst	r4, r2
   1246a:	bne.n	1247a <_malloc_r+0xee>
   1246c:	bic.w	r0, r0, #3
   12470:	lsls	r4, r4, #1
   12472:	tst	r4, r2
   12474:	add.w	r0, r0, #4
   12478:	beq.n	12470 <_malloc_r+0xe4>
   1247a:	add.w	r9, r7, r0, lsl #3
   1247e:	mov	ip, r9
   12480:	mov	r8, r0
   12482:	ldr.w	r1, [ip, #12]
   12486:	cmp	ip, r1
   12488:	bne.n	1249a <_malloc_r+0x10e>
   1248a:	b.n	12774 <_malloc_r+0x3e8>
   1248c:	cmp	r2, #0
   1248e:	bge.w	12794 <_malloc_r+0x408>
   12492:	ldr	r1, [r1, #12]
   12494:	cmp	ip, r1
   12496:	beq.w	12774 <_malloc_r+0x3e8>
   1249a:	ldr	r3, [r1, #4]
   1249c:	bic.w	r3, r3, #3
   124a0:	subs	r2, r3, r5
   124a2:	cmp	r2, #15
   124a4:	ble.n	1248c <_malloc_r+0x100>
   124a6:	mov	r4, r1
   124a8:	ldr.w	ip, [r1, #12]
   124ac:	ldr.w	r8, [r4, #8]!
   124b0:	adds	r3, r1, r5
   124b2:	orr.w	r5, r5, #1
   124b6:	str	r5, [r1, #4]
   124b8:	orr.w	r1, r2, #1
   124bc:	str.w	ip, [r8, #12]
   124c0:	mov	r0, r6
   124c2:	str.w	r8, [ip, #8]
   124c6:	str	r3, [r7, #20]
   124c8:	str	r3, [r7, #16]
   124ca:	str.w	lr, [r3, #12]
   124ce:	str.w	lr, [r3, #8]
   124d2:	str	r1, [r3, #4]
   124d4:	str	r2, [r3, r2]
   124d6:	bl	1299c <__malloc_unlock>
   124da:	b.n	1251c <_malloc_r+0x190>
   124dc:	cmp	r1, #16
   124de:	bhi.n	12524 <_malloc_r+0x198>
   124e0:	bl	12998 <__malloc_lock>
   124e4:	movs	r5, #16
   124e6:	movs	r3, #6
   124e8:	movs	r0, #2
   124ea:	ldr	r7, [pc, #504]	; (126e4 <_malloc_r+0x358>)
   124ec:	add.w	r3, r7, r3, lsl #2
   124f0:	sub.w	r2, r3, #8
   124f4:	ldr	r4, [r3, #4]
   124f6:	cmp	r4, r2
   124f8:	beq.w	12786 <_malloc_r+0x3fa>
   124fc:	ldr	r3, [r4, #4]
   124fe:	ldr	r1, [r4, #12]
   12500:	ldr	r5, [r4, #8]
   12502:	bic.w	r3, r3, #3
   12506:	add	r3, r4
   12508:	mov	r0, r6
   1250a:	ldr	r2, [r3, #4]
   1250c:	str	r1, [r5, #12]
   1250e:	orr.w	r2, r2, #1
   12512:	str	r5, [r1, #8]
   12514:	str	r2, [r3, #4]
   12516:	bl	1299c <__malloc_unlock>
   1251a:	adds	r4, #8
   1251c:	mov	r0, r4
   1251e:	add	sp, #12
   12520:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12524:	movs	r4, #0
   12526:	movs	r3, #12
   12528:	mov	r0, r4
   1252a:	str	r3, [r6, #0]
   1252c:	add	sp, #12
   1252e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12532:	movs	r3, #128	; 0x80
   12534:	mov.w	lr, #64	; 0x40
   12538:	movs	r0, #63	; 0x3f
   1253a:	b.n	123d0 <_malloc_r+0x44>
   1253c:	mov	r0, lr
   1253e:	b.n	123fc <_malloc_r+0x70>
   12540:	add	r3, r4
   12542:	ldr	r1, [r4, #12]
   12544:	ldr	r2, [r3, #4]
   12546:	ldr	r5, [r4, #8]
   12548:	orr.w	r2, r2, #1
   1254c:	str	r1, [r5, #12]
   1254e:	mov	r0, r6
   12550:	str	r5, [r1, #8]
   12552:	str	r2, [r3, #4]
   12554:	bl	1299c <__malloc_unlock>
   12558:	adds	r4, #8
   1255a:	mov	r0, r4
   1255c:	add	sp, #12
   1255e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12562:	add	r3, r4
   12564:	mov	r0, r6
   12566:	ldr	r2, [r3, #4]
   12568:	orr.w	r2, r2, #1
   1256c:	str	r2, [r3, #4]
   1256e:	bl	1299c <__malloc_unlock>
   12572:	adds	r4, #8
   12574:	mov	r0, r4
   12576:	add	sp, #12
   12578:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1257c:	ldr	r4, [r7, #8]
   1257e:	ldr	r3, [r4, #4]
   12580:	bic.w	r8, r3, #3
   12584:	cmp	r8, r5
   12586:	bcc.n	12592 <_malloc_r+0x206>
   12588:	rsb	r3, r5, r8
   1258c:	cmp	r3, #15
   1258e:	bgt.w	126aa <_malloc_r+0x31e>
   12592:	ldr	r3, [pc, #340]	; (126e8 <_malloc_r+0x35c>)
   12594:	ldr.w	r9, [pc, #352]	; 126f8 <_malloc_r+0x36c>
   12598:	ldr	r2, [r3, #0]
   1259a:	ldr.w	r3, [r9]
   1259e:	adds	r3, #1
   125a0:	add	r2, r5
   125a2:	add.w	sl, r4, r8
   125a6:	beq.w	1286a <_malloc_r+0x4de>
   125aa:	add.w	r2, r2, #4096	; 0x1000
   125ae:	adds	r2, #15
   125b0:	bic.w	r2, r2, #4080	; 0xff0
   125b4:	bic.w	r2, r2, #15
   125b8:	mov	r1, r2
   125ba:	mov	r0, r6
   125bc:	str	r2, [sp, #4]
   125be:	bl	129a0 <_sbrk_r>
   125c2:	cmp.w	r0, #4294967295
   125c6:	mov	fp, r0
   125c8:	ldr	r2, [sp, #4]
   125ca:	beq.w	1287e <_malloc_r+0x4f2>
   125ce:	cmp	sl, r0
   125d0:	bhi.w	127cc <_malloc_r+0x440>
   125d4:	ldr	r3, [pc, #276]	; (126ec <_malloc_r+0x360>)
   125d6:	ldr	r1, [r3, #0]
   125d8:	cmp	sl, fp
   125da:	add	r1, r2
   125dc:	str	r1, [r3, #0]
   125de:	beq.w	12888 <_malloc_r+0x4fc>
   125e2:	ldr.w	r0, [r9]
   125e6:	ldr.w	lr, [pc, #272]	; 126f8 <_malloc_r+0x36c>
   125ea:	adds	r0, #1
   125ec:	ittet	ne
   125ee:	rsbne	sl, sl, fp
   125f2:	addne	r1, sl
   125f4:	streq.w	fp, [lr]
   125f8:	strne	r1, [r3, #0]
   125fa:	ands.w	r1, fp, #7
   125fe:	beq.w	12830 <_malloc_r+0x4a4>
   12602:	rsb	r0, r1, #8
   12606:	rsb	r1, r1, #4096	; 0x1000
   1260a:	add	fp, r0
   1260c:	adds	r1, #8
   1260e:	add	r2, fp
   12610:	ubfx	r2, r2, #0, #12
   12614:	rsb	r9, r2, r1
   12618:	mov	r1, r9
   1261a:	mov	r0, r6
   1261c:	str	r3, [sp, #4]
   1261e:	bl	129a0 <_sbrk_r>
   12622:	adds	r3, r0, #1
   12624:	ldr	r3, [sp, #4]
   12626:	beq.w	128a8 <_malloc_r+0x51c>
   1262a:	rsb	r2, fp, r0
   1262e:	add	r2, r9
   12630:	orr.w	r2, r2, #1
   12634:	ldr	r1, [r3, #0]
   12636:	str.w	fp, [r7, #8]
   1263a:	add	r1, r9
   1263c:	cmp	r4, r7
   1263e:	str.w	r2, [fp, #4]
   12642:	str	r1, [r3, #0]
   12644:	ldr.w	r9, [pc, #164]	; 126ec <_malloc_r+0x360>
   12648:	beq.n	12678 <_malloc_r+0x2ec>
   1264a:	cmp.w	r8, #15
   1264e:	bls.w	1284c <_malloc_r+0x4c0>
   12652:	ldr	r2, [r4, #4]
   12654:	sub.w	r3, r8, #12
   12658:	bic.w	r3, r3, #7
   1265c:	adds	r0, r4, r3
   1265e:	and.w	r2, r2, #1
   12662:	mov.w	lr, #5
   12666:	orrs	r2, r3
   12668:	cmp	r3, #15
   1266a:	str	r2, [r4, #4]
   1266c:	str.w	lr, [r0, #4]
   12670:	str.w	lr, [r0, #8]
   12674:	bhi.w	128b0 <_malloc_r+0x524>
   12678:	ldr	r3, [pc, #116]	; (126f0 <_malloc_r+0x364>)
   1267a:	ldr	r4, [r7, #8]
   1267c:	ldr	r2, [r3, #0]
   1267e:	cmp	r1, r2
   12680:	it	hi
   12682:	strhi	r1, [r3, #0]
   12684:	ldr	r3, [pc, #108]	; (126f4 <_malloc_r+0x368>)
   12686:	ldr	r2, [r3, #0]
   12688:	cmp	r1, r2
   1268a:	ldr	r2, [r4, #4]
   1268c:	it	hi
   1268e:	strhi	r1, [r3, #0]
   12690:	bic.w	r2, r2, #3
   12694:	cmp	r5, r2
   12696:	sub.w	r3, r2, r5
   1269a:	bhi.n	126a0 <_malloc_r+0x314>
   1269c:	cmp	r3, #15
   1269e:	bgt.n	126aa <_malloc_r+0x31e>
   126a0:	mov	r0, r6
   126a2:	bl	1299c <__malloc_unlock>
   126a6:	movs	r4, #0
   126a8:	b.n	1251c <_malloc_r+0x190>
   126aa:	adds	r2, r4, r5
   126ac:	orr.w	r3, r3, #1
   126b0:	orr.w	r5, r5, #1
   126b4:	str	r5, [r4, #4]
   126b6:	mov	r0, r6
   126b8:	str	r2, [r7, #8]
   126ba:	str	r3, [r2, #4]
   126bc:	bl	1299c <__malloc_unlock>
   126c0:	adds	r4, #8
   126c2:	mov	r0, r4
   126c4:	add	sp, #12
   126c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126ca:	cmp	r3, #20
   126cc:	bls.n	127b2 <_malloc_r+0x426>
   126ce:	cmp	r3, #84	; 0x54
   126d0:	bhi.w	1281c <_malloc_r+0x490>
   126d4:	lsrs	r0, r5, #12
   126d6:	add.w	lr, r0, #111	; 0x6f
   126da:	mov.w	r3, lr, lsl #1
   126de:	adds	r0, #110	; 0x6e
   126e0:	b.n	123d0 <_malloc_r+0x44>
   126e2:	nop
   126e4:	.word	0x2002022c
   126e8:	.word	0x200261ec
   126ec:	.word	0x200261f0
   126f0:	.word	0x200261e8
   126f4:	.word	0x200261e4
   126f8:	.word	0x20020638
   126fc:	lsrs	r2, r3, #9
   126fe:	cmp	r2, #4
   12700:	bls.n	127c0 <_malloc_r+0x434>
   12702:	cmp	r2, #20
   12704:	bhi.w	1286e <_malloc_r+0x4e2>
   12708:	add.w	r1, r2, #92	; 0x5c
   1270c:	lsls	r1, r1, #1
   1270e:	adds	r2, #91	; 0x5b
   12710:	add.w	ip, r7, r1, lsl #2
   12714:	ldr.w	r1, [r7, r1, lsl #2]
   12718:	ldr.w	r8, [pc, #476]	; 128f8 <_malloc_r+0x56c>
   1271c:	sub.w	ip, ip, #8
   12720:	cmp	ip, r1
   12722:	beq.w	12836 <_malloc_r+0x4aa>
   12726:	ldr	r2, [r1, #4]
   12728:	bic.w	r2, r2, #3
   1272c:	cmp	r3, r2
   1272e:	bcs.n	12736 <_malloc_r+0x3aa>
   12730:	ldr	r1, [r1, #8]
   12732:	cmp	ip, r1
   12734:	bne.n	12726 <_malloc_r+0x39a>
   12736:	ldr.w	ip, [r1, #12]
   1273a:	ldr	r2, [r7, #4]
   1273c:	str.w	ip, [r4, #12]
   12740:	str	r1, [r4, #8]
   12742:	str.w	r4, [ip, #8]
   12746:	str	r4, [r1, #12]
   12748:	b.n	1245c <_malloc_r+0xd0>
   1274a:	adds	r3, r4, r5
   1274c:	orr.w	r7, r2, #1
   12750:	orr.w	r5, r5, #1
   12754:	str	r5, [r4, #4]
   12756:	mov	r0, r6
   12758:	str	r3, [r1, #20]
   1275a:	str	r3, [r1, #16]
   1275c:	str.w	lr, [r3, #12]
   12760:	str.w	lr, [r3, #8]
   12764:	str	r7, [r3, #4]
   12766:	str	r2, [r3, r2]
   12768:	adds	r4, #8
   1276a:	bl	1299c <__malloc_unlock>
   1276e:	b.n	1251c <_malloc_r+0x190>
   12770:	ldr	r2, [r1, #4]
   12772:	b.n	1245c <_malloc_r+0xd0>
   12774:	add.w	r8, r8, #1
   12778:	tst.w	r8, #3
   1277c:	add.w	ip, ip, #8
   12780:	bne.w	12482 <_malloc_r+0xf6>
   12784:	b.n	127e8 <_malloc_r+0x45c>
   12786:	ldr	r4, [r3, #12]
   12788:	cmp	r3, r4
   1278a:	it	eq
   1278c:	addeq	r0, #2
   1278e:	beq.w	123fc <_malloc_r+0x70>
   12792:	b.n	124fc <_malloc_r+0x170>
   12794:	add	r3, r1
   12796:	mov	r4, r1
   12798:	ldr	r2, [r3, #4]
   1279a:	ldr	r1, [r1, #12]
   1279c:	ldr.w	r5, [r4, #8]!
   127a0:	orr.w	r2, r2, #1
   127a4:	str	r2, [r3, #4]
   127a6:	mov	r0, r6
   127a8:	str	r1, [r5, #12]
   127aa:	str	r5, [r1, #8]
   127ac:	bl	1299c <__malloc_unlock>
   127b0:	b.n	1251c <_malloc_r+0x190>
   127b2:	add.w	lr, r3, #92	; 0x5c
   127b6:	add.w	r0, r3, #91	; 0x5b
   127ba:	mov.w	r3, lr, lsl #1
   127be:	b.n	123d0 <_malloc_r+0x44>
   127c0:	lsrs	r2, r3, #6
   127c2:	add.w	r1, r2, #57	; 0x39
   127c6:	lsls	r1, r1, #1
   127c8:	adds	r2, #56	; 0x38
   127ca:	b.n	12710 <_malloc_r+0x384>
   127cc:	cmp	r4, r7
   127ce:	ldr	r3, [pc, #296]	; (128f8 <_malloc_r+0x56c>)
   127d0:	beq.w	125d4 <_malloc_r+0x248>
   127d4:	ldr	r4, [r3, #8]
   127d6:	ldr	r2, [r4, #4]
   127d8:	bic.w	r2, r2, #3
   127dc:	b.n	12694 <_malloc_r+0x308>
   127de:	ldr.w	r3, [r9], #-8
   127e2:	cmp	r9, r3
   127e4:	bne.w	128ec <_malloc_r+0x560>
   127e8:	tst.w	r0, #3
   127ec:	add.w	r0, r0, #4294967295
   127f0:	bne.n	127de <_malloc_r+0x452>
   127f2:	ldr	r3, [r7, #4]
   127f4:	bic.w	r3, r3, r4
   127f8:	str	r3, [r7, #4]
   127fa:	lsls	r4, r4, #1
   127fc:	cmp	r4, r3
   127fe:	bhi.w	1257c <_malloc_r+0x1f0>
   12802:	cmp	r4, #0
   12804:	beq.w	1257c <_malloc_r+0x1f0>
   12808:	tst	r4, r3
   1280a:	mov	r0, r8
   1280c:	bne.w	1247a <_malloc_r+0xee>
   12810:	lsls	r4, r4, #1
   12812:	tst	r4, r3
   12814:	add.w	r0, r0, #4
   12818:	beq.n	12810 <_malloc_r+0x484>
   1281a:	b.n	1247a <_malloc_r+0xee>
   1281c:	cmp.w	r3, #340	; 0x154
   12820:	bhi.n	12854 <_malloc_r+0x4c8>
   12822:	lsrs	r0, r5, #15
   12824:	add.w	lr, r0, #120	; 0x78
   12828:	mov.w	r3, lr, lsl #1
   1282c:	adds	r0, #119	; 0x77
   1282e:	b.n	123d0 <_malloc_r+0x44>
   12830:	mov.w	r1, #4096	; 0x1000
   12834:	b.n	1260e <_malloc_r+0x282>
   12836:	movs	r1, #1
   12838:	ldr.w	r3, [r8, #4]
   1283c:	asrs	r2, r2, #2
   1283e:	lsl.w	r2, r1, r2
   12842:	orrs	r2, r3
   12844:	str.w	r2, [r8, #4]
   12848:	mov	r1, ip
   1284a:	b.n	1273c <_malloc_r+0x3b0>
   1284c:	movs	r3, #1
   1284e:	str.w	r3, [fp, #4]
   12852:	b.n	126a0 <_malloc_r+0x314>
   12854:	movw	r2, #1364	; 0x554
   12858:	cmp	r3, r2
   1285a:	bhi.n	1289e <_malloc_r+0x512>
   1285c:	lsrs	r0, r5, #18
   1285e:	add.w	lr, r0, #125	; 0x7d
   12862:	mov.w	r3, lr, lsl #1
   12866:	adds	r0, #124	; 0x7c
   12868:	b.n	123d0 <_malloc_r+0x44>
   1286a:	adds	r2, #16
   1286c:	b.n	125b8 <_malloc_r+0x22c>
   1286e:	cmp	r2, #84	; 0x54
   12870:	bhi.n	128c0 <_malloc_r+0x534>
   12872:	lsrs	r2, r3, #12
   12874:	add.w	r1, r2, #111	; 0x6f
   12878:	lsls	r1, r1, #1
   1287a:	adds	r2, #110	; 0x6e
   1287c:	b.n	12710 <_malloc_r+0x384>
   1287e:	ldr	r4, [r7, #8]
   12880:	ldr	r2, [r4, #4]
   12882:	bic.w	r2, r2, #3
   12886:	b.n	12694 <_malloc_r+0x308>
   12888:	ubfx	r0, sl, #0, #12
   1288c:	cmp	r0, #0
   1288e:	bne.w	125e2 <_malloc_r+0x256>
   12892:	add	r2, r8
   12894:	ldr	r3, [r7, #8]
   12896:	orr.w	r2, r2, #1
   1289a:	str	r2, [r3, #4]
   1289c:	b.n	12678 <_malloc_r+0x2ec>
   1289e:	movs	r3, #254	; 0xfe
   128a0:	mov.w	lr, #127	; 0x7f
   128a4:	movs	r0, #126	; 0x7e
   128a6:	b.n	123d0 <_malloc_r+0x44>
   128a8:	movs	r2, #1
   128aa:	mov.w	r9, #0
   128ae:	b.n	12634 <_malloc_r+0x2a8>
   128b0:	add.w	r1, r4, #8
   128b4:	mov	r0, r6
   128b6:	bl	12b04 <_free_r>
   128ba:	ldr.w	r1, [r9]
   128be:	b.n	12678 <_malloc_r+0x2ec>
   128c0:	cmp.w	r2, #340	; 0x154
   128c4:	bhi.n	128d2 <_malloc_r+0x546>
   128c6:	lsrs	r2, r3, #15
   128c8:	add.w	r1, r2, #120	; 0x78
   128cc:	lsls	r1, r1, #1
   128ce:	adds	r2, #119	; 0x77
   128d0:	b.n	12710 <_malloc_r+0x384>
   128d2:	movw	r1, #1364	; 0x554
   128d6:	cmp	r2, r1
   128d8:	bhi.n	128e6 <_malloc_r+0x55a>
   128da:	lsrs	r2, r3, #18
   128dc:	add.w	r1, r2, #125	; 0x7d
   128e0:	lsls	r1, r1, #1
   128e2:	adds	r2, #124	; 0x7c
   128e4:	b.n	12710 <_malloc_r+0x384>
   128e6:	movs	r1, #254	; 0xfe
   128e8:	movs	r2, #126	; 0x7e
   128ea:	b.n	12710 <_malloc_r+0x384>
   128ec:	ldr	r3, [r7, #4]
   128ee:	b.n	127fa <_malloc_r+0x46e>
   128f0:	lsrs	r0, r5, #3
   128f2:	adds	r3, r0, #1
   128f4:	lsls	r3, r3, #1
   128f6:	b.n	124ea <_malloc_r+0x15e>
   128f8:	.word	0x2002022c

000128fc <memset>:
   128fc:	push	{r4, r5, r6}
   128fe:	lsls	r4, r0, #30
   12900:	beq.n	12990 <memset+0x94>
   12902:	subs	r4, r2, #1
   12904:	cmp	r2, #0
   12906:	beq.n	1298c <memset+0x90>
   12908:	uxtb	r5, r1
   1290a:	mov	r3, r0
   1290c:	b.n	12914 <memset+0x18>
   1290e:	subs	r2, r4, #1
   12910:	cbz	r4, 1298c <memset+0x90>
   12912:	mov	r4, r2
   12914:	strb.w	r5, [r3], #1
   12918:	lsls	r2, r3, #30
   1291a:	bne.n	1290e <memset+0x12>
   1291c:	cmp	r4, #3
   1291e:	bls.n	1297e <memset+0x82>
   12920:	uxtb	r5, r1
   12922:	orr.w	r5, r5, r5, lsl #8
   12926:	cmp	r4, #15
   12928:	orr.w	r5, r5, r5, lsl #16
   1292c:	bls.n	12962 <memset+0x66>
   1292e:	add.w	r2, r3, #16
   12932:	mov	r6, r4
   12934:	subs	r6, #16
   12936:	cmp	r6, #15
   12938:	str.w	r5, [r2, #-16]
   1293c:	str.w	r5, [r2, #-12]
   12940:	str.w	r5, [r2, #-8]
   12944:	str.w	r5, [r2, #-4]
   12948:	add.w	r2, r2, #16
   1294c:	bhi.n	12934 <memset+0x38>
   1294e:	sub.w	r2, r4, #16
   12952:	bic.w	r2, r2, #15
   12956:	and.w	r4, r4, #15
   1295a:	adds	r2, #16
   1295c:	cmp	r4, #3
   1295e:	add	r3, r2
   12960:	bls.n	1297e <memset+0x82>
   12962:	mov	r6, r3
   12964:	mov	r2, r4
   12966:	subs	r2, #4
   12968:	cmp	r2, #3
   1296a:	str.w	r5, [r6], #4
   1296e:	bhi.n	12966 <memset+0x6a>
   12970:	subs	r2, r4, #4
   12972:	bic.w	r2, r2, #3
   12976:	adds	r2, #4
   12978:	add	r3, r2
   1297a:	and.w	r4, r4, #3
   1297e:	cbz	r4, 1298c <memset+0x90>
   12980:	uxtb	r1, r1
   12982:	add	r4, r3
   12984:	strb.w	r1, [r3], #1
   12988:	cmp	r3, r4
   1298a:	bne.n	12984 <memset+0x88>
   1298c:	pop	{r4, r5, r6}
   1298e:	bx	lr
   12990:	mov	r4, r2
   12992:	mov	r3, r0
   12994:	b.n	1291c <memset+0x20>
   12996:	nop

00012998 <__malloc_lock>:
   12998:	bx	lr
   1299a:	nop

0001299c <__malloc_unlock>:
   1299c:	bx	lr
   1299e:	nop

000129a0 <_sbrk_r>:
   129a0:	push	{r3, r4, r5, lr}
   129a2:	ldr	r4, [pc, #28]	; (129c0 <_sbrk_r+0x20>)
   129a4:	movs	r3, #0
   129a6:	mov	r5, r0
   129a8:	mov	r0, r1
   129aa:	str	r3, [r4, #0]
   129ac:	bl	10770 <_sbrk>
   129b0:	adds	r3, r0, #1
   129b2:	beq.n	129b6 <_sbrk_r+0x16>
   129b4:	pop	{r3, r4, r5, pc}
   129b6:	ldr	r3, [r4, #0]
   129b8:	cmp	r3, #0
   129ba:	beq.n	129b4 <_sbrk_r+0x14>
   129bc:	str	r3, [r5, #0]
   129be:	pop	{r3, r4, r5, pc}
   129c0:	.word	0x20028280

000129c4 <__register_exitproc>:
   129c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129c8:	ldr	r4, [pc, #148]	; (12a60 <__register_exitproc+0x9c>)
   129ca:	ldr	r5, [r4, #0]
   129cc:	ldr.w	r4, [r5, #328]	; 0x148
   129d0:	mov	r6, r0
   129d2:	mov	r8, r1
   129d4:	mov	sl, r2
   129d6:	mov	r9, r3
   129d8:	cbz	r4, 12a4c <__register_exitproc+0x88>
   129da:	ldr	r0, [r4, #4]
   129dc:	cmp	r0, #31
   129de:	bgt.n	12a10 <__register_exitproc+0x4c>
   129e0:	adds	r3, r0, #1
   129e2:	cbz	r6, 12a02 <__register_exitproc+0x3e>
   129e4:	add.w	r5, r4, r0, lsl #2
   129e8:	movs	r2, #1
   129ea:	str.w	sl, [r5, #136]	; 0x88
   129ee:	ldr.w	r1, [r4, #392]	; 0x188
   129f2:	lsls	r2, r0
   129f4:	orrs	r1, r2
   129f6:	cmp	r6, #2
   129f8:	str.w	r1, [r4, #392]	; 0x188
   129fc:	str.w	r9, [r5, #264]	; 0x108
   12a00:	beq.n	12a40 <__register_exitproc+0x7c>
   12a02:	adds	r0, #2
   12a04:	str	r3, [r4, #4]
   12a06:	str.w	r8, [r4, r0, lsl #2]
   12a0a:	movs	r0, #0
   12a0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a10:	ldr	r3, [pc, #80]	; (12a64 <__register_exitproc+0xa0>)
   12a12:	cbz	r3, 12a56 <__register_exitproc+0x92>
   12a14:	mov.w	r0, #400	; 0x190
   12a18:	bl	1237c <malloc>
   12a1c:	mov	r4, r0
   12a1e:	cbz	r0, 12a56 <__register_exitproc+0x92>
   12a20:	ldr.w	r3, [r5, #328]	; 0x148
   12a24:	movs	r7, #0
   12a26:	stmia.w	r0, {r3, r7}
   12a2a:	str.w	r4, [r5, #328]	; 0x148
   12a2e:	mov	r0, r7
   12a30:	movs	r3, #1
   12a32:	str.w	r7, [r4, #392]	; 0x188
   12a36:	str.w	r7, [r4, #396]	; 0x18c
   12a3a:	cmp	r6, #0
   12a3c:	beq.n	12a02 <__register_exitproc+0x3e>
   12a3e:	b.n	129e4 <__register_exitproc+0x20>
   12a40:	ldr.w	r1, [r4, #396]	; 0x18c
   12a44:	orrs	r2, r1
   12a46:	str.w	r2, [r4, #396]	; 0x18c
   12a4a:	b.n	12a02 <__register_exitproc+0x3e>
   12a4c:	add.w	r4, r5, #332	; 0x14c
   12a50:	str.w	r4, [r5, #328]	; 0x148
   12a54:	b.n	129da <__register_exitproc+0x16>
   12a56:	mov.w	r0, #4294967295
   12a5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a5e:	nop
   12a60:	.word	0x2001f95c
   12a64:	.word	0x0001237d

00012a68 <_malloc_trim_r>:
   12a68:	push	{r3, r4, r5, r6, r7, lr}
   12a6a:	ldr	r7, [pc, #140]	; (12af8 <_malloc_trim_r+0x90>)
   12a6c:	mov	r4, r1
   12a6e:	mov	r6, r0
   12a70:	bl	12998 <__malloc_lock>
   12a74:	ldr	r3, [r7, #8]
   12a76:	ldr	r5, [r3, #4]
   12a78:	bic.w	r5, r5, #3
   12a7c:	subs	r1, r5, r4
   12a7e:	addw	r1, r1, #4079	; 0xfef
   12a82:	bic.w	r1, r1, #4080	; 0xff0
   12a86:	bic.w	r1, r1, #15
   12a8a:	sub.w	r4, r1, #4096	; 0x1000
   12a8e:	cmp.w	r4, #4096	; 0x1000
   12a92:	blt.n	12aa4 <_malloc_trim_r+0x3c>
   12a94:	movs	r1, #0
   12a96:	mov	r0, r6
   12a98:	bl	129a0 <_sbrk_r>
   12a9c:	ldr	r3, [r7, #8]
   12a9e:	add	r3, r5
   12aa0:	cmp	r0, r3
   12aa2:	beq.n	12aae <_malloc_trim_r+0x46>
   12aa4:	mov	r0, r6
   12aa6:	bl	1299c <__malloc_unlock>
   12aaa:	movs	r0, #0
   12aac:	pop	{r3, r4, r5, r6, r7, pc}
   12aae:	negs	r1, r4
   12ab0:	mov	r0, r6
   12ab2:	bl	129a0 <_sbrk_r>
   12ab6:	adds	r0, #1
   12ab8:	beq.n	12ad6 <_malloc_trim_r+0x6e>
   12aba:	ldr	r3, [pc, #64]	; (12afc <_malloc_trim_r+0x94>)
   12abc:	ldr	r2, [r7, #8]
   12abe:	ldr	r1, [r3, #0]
   12ac0:	subs	r5, r5, r4
   12ac2:	orr.w	r5, r5, #1
   12ac6:	mov	r0, r6
   12ac8:	subs	r1, r1, r4
   12aca:	str	r5, [r2, #4]
   12acc:	str	r1, [r3, #0]
   12ace:	bl	1299c <__malloc_unlock>
   12ad2:	movs	r0, #1
   12ad4:	pop	{r3, r4, r5, r6, r7, pc}
   12ad6:	movs	r1, #0
   12ad8:	mov	r0, r6
   12ada:	bl	129a0 <_sbrk_r>
   12ade:	ldr	r2, [r7, #8]
   12ae0:	subs	r3, r0, r2
   12ae2:	cmp	r3, #15
   12ae4:	ble.n	12aa4 <_malloc_trim_r+0x3c>
   12ae6:	ldr	r4, [pc, #24]	; (12b00 <_malloc_trim_r+0x98>)
   12ae8:	ldr	r1, [pc, #16]	; (12afc <_malloc_trim_r+0x94>)
   12aea:	ldr	r4, [r4, #0]
   12aec:	orr.w	r3, r3, #1
   12af0:	subs	r0, r0, r4
   12af2:	str	r3, [r2, #4]
   12af4:	str	r0, [r1, #0]
   12af6:	b.n	12aa4 <_malloc_trim_r+0x3c>
   12af8:	.word	0x2002022c
   12afc:	.word	0x200261f0
   12b00:	.word	0x20020638

00012b04 <_free_r>:
   12b04:	cmp	r1, #0
   12b06:	beq.n	12b94 <_free_r+0x90>
   12b08:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b0c:	mov	r5, r1
   12b0e:	mov	r8, r0
   12b10:	bl	12998 <__malloc_lock>
   12b14:	ldr.w	r7, [r5, #-4]
   12b18:	ldr	r1, [pc, #424]	; (12cc4 <_free_r+0x1c0>)
   12b1a:	bic.w	r3, r7, #1
   12b1e:	sub.w	r4, r5, #8
   12b22:	adds	r2, r4, r3
   12b24:	ldr	r6, [r1, #8]
   12b26:	ldr	r0, [r2, #4]
   12b28:	cmp	r2, r6
   12b2a:	bic.w	r0, r0, #3
   12b2e:	beq.n	12bf6 <_free_r+0xf2>
   12b30:	lsls	r6, r7, #31
   12b32:	str	r0, [r2, #4]
   12b34:	bmi.n	12b4e <_free_r+0x4a>
   12b36:	ldr.w	r7, [r5, #-8]
   12b3a:	subs	r4, r4, r7
   12b3c:	add.w	lr, r1, #8
   12b40:	ldr	r5, [r4, #8]
   12b42:	cmp	r5, lr
   12b44:	add	r3, r7
   12b46:	beq.n	12c28 <_free_r+0x124>
   12b48:	ldr	r7, [r4, #12]
   12b4a:	str	r7, [r5, #12]
   12b4c:	str	r5, [r7, #8]
   12b4e:	adds	r5, r2, r0
   12b50:	ldr	r5, [r5, #4]
   12b52:	lsls	r5, r5, #31
   12b54:	bpl.n	12bdc <_free_r+0xd8>
   12b56:	orr.w	r2, r3, #1
   12b5a:	str	r2, [r4, #4]
   12b5c:	str	r3, [r4, r3]
   12b5e:	cmp.w	r3, #512	; 0x200
   12b62:	bcs.n	12b96 <_free_r+0x92>
   12b64:	lsrs	r3, r3, #3
   12b66:	adds	r2, r3, #1
   12b68:	ldr	r5, [r1, #4]
   12b6a:	ldr.w	r7, [r1, r2, lsl #3]
   12b6e:	str	r7, [r4, #8]
   12b70:	movs	r0, #1
   12b72:	asrs	r3, r3, #2
   12b74:	lsl.w	r3, r0, r3
   12b78:	add.w	r0, r1, r2, lsl #3
   12b7c:	orrs	r5, r3
   12b7e:	subs	r0, #8
   12b80:	str	r0, [r4, #12]
   12b82:	str	r5, [r1, #4]
   12b84:	str.w	r4, [r1, r2, lsl #3]
   12b88:	str	r4, [r7, #12]
   12b8a:	mov	r0, r8
   12b8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12b90:	b.w	1299c <__malloc_unlock>
   12b94:	bx	lr
   12b96:	lsrs	r2, r3, #9
   12b98:	cmp	r2, #4
   12b9a:	bhi.n	12c44 <_free_r+0x140>
   12b9c:	lsrs	r2, r3, #6
   12b9e:	add.w	r7, r2, #57	; 0x39
   12ba2:	lsls	r7, r7, #1
   12ba4:	add.w	r5, r2, #56	; 0x38
   12ba8:	add.w	r0, r1, r7, lsl #2
   12bac:	ldr.w	r2, [r1, r7, lsl #2]
   12bb0:	ldr	r1, [pc, #272]	; (12cc4 <_free_r+0x1c0>)
   12bb2:	subs	r0, #8
   12bb4:	cmp	r0, r2
   12bb6:	beq.n	12c54 <_free_r+0x150>
   12bb8:	ldr	r1, [r2, #4]
   12bba:	bic.w	r1, r1, #3
   12bbe:	cmp	r3, r1
   12bc0:	bcs.n	12bc8 <_free_r+0xc4>
   12bc2:	ldr	r2, [r2, #8]
   12bc4:	cmp	r0, r2
   12bc6:	bne.n	12bb8 <_free_r+0xb4>
   12bc8:	ldr	r0, [r2, #12]
   12bca:	str	r0, [r4, #12]
   12bcc:	str	r2, [r4, #8]
   12bce:	str	r4, [r0, #8]
   12bd0:	str	r4, [r2, #12]
   12bd2:	mov	r0, r8
   12bd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12bd8:	b.w	1299c <__malloc_unlock>
   12bdc:	ldr	r5, [r2, #8]
   12bde:	ldr	r7, [pc, #232]	; (12cc8 <_free_r+0x1c4>)
   12be0:	cmp	r5, r7
   12be2:	add	r3, r0
   12be4:	beq.n	12c66 <_free_r+0x162>
   12be6:	ldr	r0, [r2, #12]
   12be8:	str	r0, [r5, #12]
   12bea:	orr.w	r2, r3, #1
   12bee:	str	r5, [r0, #8]
   12bf0:	str	r2, [r4, #4]
   12bf2:	str	r3, [r4, r3]
   12bf4:	b.n	12b5e <_free_r+0x5a>
   12bf6:	lsls	r7, r7, #31
   12bf8:	add	r3, r0
   12bfa:	bmi.n	12c0c <_free_r+0x108>
   12bfc:	ldr.w	r2, [r5, #-8]
   12c00:	subs	r4, r4, r2
   12c02:	add	r3, r2
   12c04:	ldr	r0, [r4, #8]
   12c06:	ldr	r2, [r4, #12]
   12c08:	str	r2, [r0, #12]
   12c0a:	str	r0, [r2, #8]
   12c0c:	ldr	r2, [pc, #188]	; (12ccc <_free_r+0x1c8>)
   12c0e:	ldr	r2, [r2, #0]
   12c10:	orr.w	r0, r3, #1
   12c14:	cmp	r3, r2
   12c16:	str	r0, [r4, #4]
   12c18:	str	r4, [r1, #8]
   12c1a:	bcc.n	12b8a <_free_r+0x86>
   12c1c:	ldr	r3, [pc, #176]	; (12cd0 <_free_r+0x1cc>)
   12c1e:	mov	r0, r8
   12c20:	ldr	r1, [r3, #0]
   12c22:	bl	12a68 <_malloc_trim_r>
   12c26:	b.n	12b8a <_free_r+0x86>
   12c28:	adds	r1, r2, r0
   12c2a:	ldr	r1, [r1, #4]
   12c2c:	lsls	r1, r1, #31
   12c2e:	bmi.n	12cba <_free_r+0x1b6>
   12c30:	ldr	r1, [r2, #8]
   12c32:	ldr	r2, [r2, #12]
   12c34:	str	r2, [r1, #12]
   12c36:	add	r3, r0
   12c38:	orr.w	r0, r3, #1
   12c3c:	str	r1, [r2, #8]
   12c3e:	str	r0, [r4, #4]
   12c40:	str	r3, [r4, r3]
   12c42:	b.n	12b8a <_free_r+0x86>
   12c44:	cmp	r2, #20
   12c46:	bhi.n	12c78 <_free_r+0x174>
   12c48:	add.w	r7, r2, #92	; 0x5c
   12c4c:	lsls	r7, r7, #1
   12c4e:	add.w	r5, r2, #91	; 0x5b
   12c52:	b.n	12ba8 <_free_r+0xa4>
   12c54:	asrs	r2, r5, #2
   12c56:	ldr	r3, [r1, #4]
   12c58:	movs	r5, #1
   12c5a:	lsl.w	r2, r5, r2
   12c5e:	orrs	r3, r2
   12c60:	str	r3, [r1, #4]
   12c62:	mov	r2, r0
   12c64:	b.n	12bca <_free_r+0xc6>
   12c66:	orr.w	r2, r3, #1
   12c6a:	str	r4, [r1, #20]
   12c6c:	str	r4, [r1, #16]
   12c6e:	str	r5, [r4, #12]
   12c70:	str	r5, [r4, #8]
   12c72:	str	r2, [r4, #4]
   12c74:	str	r3, [r4, r3]
   12c76:	b.n	12b8a <_free_r+0x86>
   12c78:	cmp	r2, #84	; 0x54
   12c7a:	bhi.n	12c8a <_free_r+0x186>
   12c7c:	lsrs	r2, r3, #12
   12c7e:	add.w	r7, r2, #111	; 0x6f
   12c82:	lsls	r7, r7, #1
   12c84:	add.w	r5, r2, #110	; 0x6e
   12c88:	b.n	12ba8 <_free_r+0xa4>
   12c8a:	cmp.w	r2, #340	; 0x154
   12c8e:	bhi.n	12c9e <_free_r+0x19a>
   12c90:	lsrs	r2, r3, #15
   12c92:	add.w	r7, r2, #120	; 0x78
   12c96:	lsls	r7, r7, #1
   12c98:	add.w	r5, r2, #119	; 0x77
   12c9c:	b.n	12ba8 <_free_r+0xa4>
   12c9e:	movw	r0, #1364	; 0x554
   12ca2:	cmp	r2, r0
   12ca4:	bhi.n	12cb4 <_free_r+0x1b0>
   12ca6:	lsrs	r2, r3, #18
   12ca8:	add.w	r7, r2, #125	; 0x7d
   12cac:	lsls	r7, r7, #1
   12cae:	add.w	r5, r2, #124	; 0x7c
   12cb2:	b.n	12ba8 <_free_r+0xa4>
   12cb4:	movs	r7, #254	; 0xfe
   12cb6:	movs	r5, #126	; 0x7e
   12cb8:	b.n	12ba8 <_free_r+0xa4>
   12cba:	orr.w	r2, r3, #1
   12cbe:	str	r2, [r4, #4]
   12cc0:	str	r3, [r4, r3]
   12cc2:	b.n	12b8a <_free_r+0x86>
   12cc4:	.word	0x2002022c
   12cc8:	.word	0x20020234
   12ccc:	.word	0x20020634
   12cd0:	.word	0x200261ec
   12cd4:	.word	0x00000000

00012cd8 <___Z14set_audioClockilmb_veneer>:
   12cd8:	ldr.w	pc, [pc]	; 12cdc <___Z14set_audioClockilmb_veneer+0x4>
   12cdc:	.word	0x600012a5

00012ce0 <___init_veneer>:
   12ce0:	ldr.w	pc, [pc]	; 12ce4 <___init_veneer+0x4>
   12ce4:	.word	0x6000193d

00012ce8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   12ce8:	ldr.w	pc, [pc]	; 12cec <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   12cec:	.word	0x60001579

Disassembly of section .fini:

00012cf0 <_fini>:
   12cf0:	push	{r3, r4, r5, r6, r7, lr}
   12cf2:	nop
